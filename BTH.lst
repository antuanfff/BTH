Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.03.04 - 18:36:53]

.\bth.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:5494                      
       3   00:5494                      ;ROM ASCII16
       4   00:5494                      		defpage	0,0x4000, 0x4000
       5   00:5494                      		defpage	1,0x8000, 0x4000        
       6   00:5494                      		defpage	2..14 ;Here it is determined rom size        
       7   00:5494                              defpage	15,0xC000, 0x4000
       8   00:5494                      
       9   00:5494  (00:6000)           _bank1	equ	6000h
      10   00:5494  (00:7000)           _bank2	equ	7000h
      11   00:5494  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      12   00:549A  (00)                		page 0			
      13   00:4000                              org 4000h		
      14   00:4000                              dw  4241h,START,0,0,0,0,0,0
      14   00:4000  41 42 F1 41 00 00 00 00 00 00 00 00 00 00 00 00 
      15   00:4010                      
      16   00:4010                      ;Llamadas a rutinas bios
      17   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010  (00:0041)           DISSCR                  equ #0041   ; Disable screen
      11.  00:4010  (00:0044)           ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      18   00:4010                      
      19   00:4010                      ;Constantes
      20   00:4010                          include "include\BTH_const.asm"
       1.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
       2.  00:4010  (00:0007)           KB_RIGHT 				equ 7
       3.  00:4010  (00:0006)           KB_DOWN 				equ 6
       4.  00:4010  (00:0005)           KB_UP 					equ	5        
       5.  00:4010  (00:0004)           KB_LEFT 				equ	4
       6.  00:4010  (00:0003)           KB_DEL 					equ	3
       7.  00:4010  (00:0000)           KB_SPACE				equ	0
       8.  00:4010                      
       9.  00:4010  (00:0001)           MOV_SPEED				equ 1
      10.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      11.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      12.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      13.  00:4010  (00:0004)           MAX_CHAR_STEPS          equ 4       ; #steps pattern change MAIN CHAR
      14.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      15.  00:4010  (00:0098)           PORT_0                  equ 0x98
      16.  00:4010  (00:0099)           PORT_1                  equ 0x99
      17.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      18.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      19.  00:4010                      
      20.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan es entas direcciones valores globals del sistema
      21.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      22.  00:4010                      
      21   00:4010                      
      22   00:4010                      ; Funciones auxiliares
      23   00:4010                      	include "include\BTH_func.asm"
       1.  00:4010                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:4010                      ;Entrada:
       3.  00:4010                      ;   b - Y SPR1
       4.  00:4010                      ;   C - X SPR1
       5.  00:4010                      
       6.  00:4010                      ;   d - Y SPR2
       7.  00:4010                      ;   e - X SPR2
       8.  00:4010                      ;Salida:
       9.  00:4010                      ;   a - bloque
      10.  00:4010                      ;Modifica:
      11.  00:4010                      ;   a, hl, de
      12.  00:4010                      check_spr_collision:        
      13.  00:4010  78                          LD A,B          ; a = Y SPR1
      14.  00:4011  BA                          CP D
      15.  00:4012  C2 1D 40                    JP NZ,.no_collision
      16.  00:4015                      
      17.  00:4015  79                          LD A,C          ; a = X SPR1
      18.  00:4016  BB                          CP E
      19.  00:4017  C2 1D 40                    JP NZ,.no_collision
      20.  00:401A                      
      21.  00:401A  3E 01                       LD A,1
      22.  00:401C  C9                          RET
      23.  00:401D                      .no_collision
      24.  00:401D  3E 00                   LD A,0
      25.  00:401F  C9                      RET
      26.  00:4020                      
      27.  00:4020                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:4020                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:4020                      ;Entrada:
      30.  00:4020                      ;   d - X
      31.  00:4020                      ;   e - y
      32.  00:4020                      ;Salida:
      33.  00:4020                      ;   a - bloque
      34.  00:4020                      ;Modifica:
      35.  00:4020                      ;   a, hl, de
      36.  00:4020                      get_bloque_en_X_Y:
      37.  00:4020                              ;(y/8)*32+(x/8)
      38.  00:4020  7B                          ld a,e      ;a=y
      39.  00:4021  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:4027  26 00                       ld h,0
      41.  00:4029  6F                          ld l,a      ;hl=y/8
      42.  00:402A  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:402F                      
      44.  00:402F  7A                          ld a,d      ;a=x
      45.  00:4030  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:4036  16 00                       ld d,0
      47.  00:4038  5F                          ld e,a      ;de=x/8
      48.  00:4039  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:403A                      
      50.  00:403A  11 34 4B                    ld de,mapa
      51.  00:403D  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:403E                      
      53.  00:403E  7E                          ld a,[hl]
      54.  00:403F  C9                          ret
      55.  00:4040                      
      56.  00:4040                      ; SCREEN 8
      57.  00:4040                      SetVdp_Write:
      58.  00:4040                      
      59.  00:4040                      	; transform address from 
      60.  00:4040                      	;
      61.  00:4040                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:4040                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:4040                      	;
      64.  00:4040                      	; to
      65.  00:4040                      	;
      66.  00:4040                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:4040                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:4040  CB 04                   rlc     h
      69.  00:4042  17                      rla
      70.  00:4043  CB 04                   rlc     h
      71.  00:4045  17                      rla
      72.  00:4046  CB 3C                   srl     h
      73.  00:4048  CB 3C                   srl     h
      74.  00:404A                      
      75.  00:404A  F3                      di
      76.  00:404B                      	    ; write bits a14-16 of address to R#14
      77.  00:404B  D3 99               	    out     (PORT_1), a
      78.  00:404D  3E 8E               	    ld      a, 14 + 128
      79.  00:404F  D3 99               	    out     (PORT_1), a
      80.  00:4051                      
      81.  00:4051                      	    ; write the other address bits to VDP PORT_1
      82.  00:4051  7D                  	    ld      a, l
      83.  00:4052  00                  	    nop
      84.  00:4053  D3 99               	    out     (PORT_1), a
      85.  00:4055  7C                  	    ld      a, h
      86.  00:4056  F6 40               	    or      64
      87.  00:4058  FB                      ei
      88.  00:4059  D3 99                   out     (PORT_1),a
      89.  00:405B  C9                      ret
      90.  00:405C                      
      91.  00:405C                      Set212Lines:
      92.  00:405C                              ; set LN (bit 7) of R#9 to 1
      93.  00:405C  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:405F  F6 80                       or      10000000b
      95.  00:4061  47                          ld      b, a
      96.  00:4062  0E 09                       ld      c, 9            ; register #
      97.  00:4064  CD 47 00                    call    WRTVDP
      98.  00:4067  C9                          ret
      99.  00:4068                      
     100.  00:4068                      ClearVram_MSX2:
     101.  00:4068  AF                          xor     a           ; set vram write base address
     102.  00:4069  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:406C  CD 40 40                    call    SetVdp_Write
     104.  00:406F  AF                          xor		a
     105.  00:4070                      
     106.  00:4070                          ; TODO: 
     107.  00:4070                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:4070                          ;   disable screen/sprites (should I ??)
     109.  00:4070                      
     110.  00:4070                          ; clear all 128kb of VRAM
     111.  00:4070  16 02               	ld		d, 2		; 2 repetitions
     112.  00:4072                      .loop_2:
     113.  00:4072  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:4074                      .loop_1:
     115.  00:4074  06 00               	ld		b, 0		; 256 repetitions
     116.  00:4076                      .loop:
     117.  00:4076  D3 98               	out		(PORT_0), a
     118.  00:4078  10 FC               	djnz	.loop
     119.  00:407A  0D                  	dec		c
     120.  00:407B  C2 74 40            	jp		nz, .loop_1
     121.  00:407E  15                  	dec		d
     122.  00:407F  C2 72 40            	jp		nz, .loop_2
     123.  00:4082                      
     124.  00:4082  C9                  	ret
     125.  00:4083                      
     126.  00:4083                      ; MEGAROM
     127.  00:4083                      
     128.  00:4083                      opening_screen		
     129.  00:4083  0E 00               		ld		c,0
     130.  00:4085  11 00 00            		ld		de,0
     131.  00:4088  CD EB 40            		call	_vdpsetvramwr
     132.  00:408B  1E 04               		ld	e,4
     133.  00:408D  3E 09               		ld	a, :GRAPHIC
     134.  00:408F  57                  		ld	d,a
     135.  00:4090  32 00 70            2:		ld	(_bank2),a
     136.  00:4093  21 00 80            		ld	hl,GRAPHIC
     137.  00:4096  01 98 00            		ld	bc,0x98
     138.  00:4099  3E 40               		ld	a,32*2
     139.  00:409B  ED B3               1:		otir
     140.  00:409D  3D                  		dec	a
     141.  00:409E  20 FB               		jr	nz,1b
     142.  00:40A0  14                  		inc	d
     143.  00:40A1  7A                  		ld	a,d
     144.  00:40A2  1D                  		dec	e
     145.  00:40A3  20 EB               		jr	nz,2b
     146.  00:40A5  C9                  		ret 
     147.  00:40A6                      
     148.  00:40A6                      load_screen
     149.  00:40A6  0E 00               		ld		c,0
     150.  00:40A8  11 00 00            		ld		de,0
     151.  00:40AB  CD EB 40            		call	_vdpsetvramwr
     152.  00:40AE  1E 02               		ld	e,2					; #pages
     153.  00:40B0  3E 0F               		ld	a, :BITMAP
     154.  00:40B2  57                  		ld	d,a
     155.  00:40B3  32 00 70            2:		ld	(_bank2),a
     156.  00:40B6  21 93 C0            		ld	hl,BITMAP
     157.  00:40B9  01 98 00            		ld	bc,0x98
     158.  00:40BC  3E 40               		ld	a,64
     159.  00:40BE  ED B3               1:		otir
     160.  00:40C0  3D                  		dec	a
     161.  00:40C1  20 FB               		jr	nz,1b
     162.  00:40C3  14                  		inc	d
     163.  00:40C4  7A                  		ld	a,d
     164.  00:40C5  1D                  		dec	e
     165.  00:40C6  20 EB               		jr	nz,2b
     166.  00:40C8  C9                  		ret 
     167.  00:40C9                      
     168.  00:40C9                      load_screen2
     169.  00:40C9  0E 00               		ld		c,0
     170.  00:40CB  11 00 00            		ld		de,0
     171.  00:40CE  CD EB 40            		call	_vdpsetvramwr
     172.  00:40D1  1E 02               		ld	e,2					; #pages
     173.  00:40D3  78                  		ld	a, b			; 1st page bitmap
     174.  00:40D4  57                  		ld	d,a
     175.  00:40D5  32 00 70            2:		ld	(_bank2),a
     176.  00:40D8  2A 93 C0            		ld	hl,(BITMAP)		; Bitmap address
     177.  00:40DB  01 98 00            		ld	bc,0x98
     178.  00:40DE  3E 40               		ld	a,64
     179.  00:40E0  ED B3               1:		otir
     180.  00:40E2  3D                  		dec	a
     181.  00:40E3  20 FB               		jr	nz,1b
     182.  00:40E5  14                  		inc	d
     183.  00:40E6  7A                  		ld	a,d
     184.  00:40E7  1D                  		dec	e
     185.  00:40E8  20 EB               		jr	nz,2b
     186.  00:40EA  C9                  		ret 
     187.  00:40EB                      
     188.  00:40EB                      ;Set VDP for writing at address CDE (17-bit) 
     189.  00:40EB                      
     190.  00:40EB                      _vdpsetvramwr:
     191.  00:40EB  79                  	ld a,c
     192.  00:40EC  CB 02               	rlc d
     193.  00:40EE  17                  	rla
     194.  00:40EF  CB 02               	rlc d
     195.  00:40F1  17                  	rla
     196.  00:40F2  CB 3A               	srl d ; primo shift, il secondo dopo la out
     197.  00:40F4                      
     198.  00:40F4  D3 99               	out (0x99),a ;set bits 14-16
     199.  00:40F6  3E 8E               	ld a,14+128
     200.  00:40F8  D3 99               	out (0x99),a
     201.  00:40FA  CB 3A               	srl d ; secondo shift.     
     202.  00:40FC                      _vdpsetvramwr14
     203.  00:40FC  7B                  	ld a,e ;set bits 0-7
     204.  00:40FD  D3 99               	out (0x99),a
     205.  00:40FF  7A                  	ld a,d ;set bits 8-13
     206.  00:4100  F6 40               	or 0x40 ; + write access
     207.  00:4102  D3 99               	out (0x99),a
     208.  00:4104  C9                  	ret
     209.  00:4105                      
     210.  00:4105                      
     211.  00:4105                      
     212.  00:4105                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     213.  00:4105                      		; -----------------------------------------------------
     214.  00:4105                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     215.  00:4105                      		; -----------------------------------------------------
     216.  00:4105                      
     217.  00:4105                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     218.  00:4105                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     219.  00:4105                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     220.  00:4105                      
     221.  00:4105                      		; --- VARIABLES EN RAM NECESARIAS ---
     222.  00:4105                      		; NINGUNA
     223.  00:4105                      
     224.  00:4105                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     225.  00:4105                      		; --- Entrada: a = SLOT                                           ---
     226.  00:4105                      		; --- Salida: a = valor para ENASLT                               ---
     227.  00:4105                      		; --- AUTOR: Konamiman                                            ---
     228.  00:4105  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     229.  00:4107  4F                  		ld	c,a				; c = slot de la pagina
     230.  00:4108  06 00               		ld	b,0				; bc = slot de la pagina
     231.  00:410A  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     232.  00:410D  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     233.  00:410E  7E                  		ld	a,(hl)				; Tomamos el valor
     234.  00:410F  E6 80               		and	$80				; Si el bit mas alto es cero...
     235.  00:4111  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     236.  00:4113                      		; --- El slot esta expandido ---
     237.  00:4113  B1                  		or	c				; Slot basico en el lugar adecuado
     238.  00:4114  4F                  		ld	c,a				; Guardamos el valor en c
     239.  00:4115  23                  		inc	hl				; Incrementamos hl una...
     240.  00:4116  23                  		inc	hl				; ...dos...
     241.  00:4117  23                  		inc	hl				; ...tres...
     242.  00:4118  23                  		inc	hl				; ...cuatro veces
     243.  00:4119  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     244.  00:411A  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     245.  00:411C  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     246.  00:411D  C9                  		ret					; Volvemos
     247.  00:411E                      
     248.  00:411E                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     249.  00:411E  3E C9               		ld	a,$C9				; Codigo de RET
     250.  00:4120  32 23 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     251.  00:4123  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     252.  00:4124                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     253.  00:4124  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     254.  00:4127  0F                  		rrca					; Rotamos a la derecha...
     255.  00:4128  0F                  		rrca					; ...dos veces
     256.  00:4129  CD 05 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     257.  00:412C  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     258.  00:412E  C3 24 00            		jp	ENASLT ;ENASLT
     259.  00:4131                      
     260.  00:4131                      SET_SCREEN5_MODE:
     261.  00:4131                           ;Cambiamos el modo de pantalla
     262.  00:4131                          ; BASIC: COLOR 15,1,1
     263.  00:4131                          ; Establecer los colores
     264.  00:4131  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     265.  00:4134  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     266.  00:4136  23                  	inc hl ; FORCLR+1
     267.  00:4137  36 01               	ld [hl],1 ; Color de fondo 1=negro
     268.  00:4139  23                  	inc hl ; FORCLR+2
     269.  00:413A  36 01               	ld [hl],1 ; Color del borde 1=negro
     270.  00:413C                      
     271.  00:413C  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     272.  00:413E  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     273.  00:4141                      ;
     274.  00:4141  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     275.  00:4144                          ;En or 0+0=0, 0+1=1, 1+1=1
     276.  00:4144                          ;En and 0+0=0, 0+1=0, 1+1=1
     277.  00:4144                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     278.  00:4144                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     279.  00:4144                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     280.  00:4144  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     281.  00:4146                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     282.  00:4146  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     283.  00:4148                      
     284.  00:4148  47                      ld b,a ;carga en b el valor de a
     285.  00:4149  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     286.  00:414B  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     287.  00:414E  AF                      xor a ; ld a,0
     288.  00:414F  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     289.  00:4152  C9                      ret
     290.  00:4153                      
     291.  00:4153                      DUMP_SPR_ALL:
     292.  00:4153                      
     293.  00:4153                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     294.  00:4153                      
     295.  00:4153  21 94 48                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     296.  00:4156  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     297.  00:4159  01 80 01                ld bc, 8*4*12; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     298.  00:415C  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     299.  00:415F                      
     300.  00:415F                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     301.  00:415F                      
     302.  00:415F  21 0C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     303.  00:4162  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     304.  00:4165  01 80 00                ld bc,128; 4 x #Sprites
     305.  00:4168  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     306.  00:416B                      
     307.  00:416B                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     308.  00:416B                      
     309.  00:416B  21 14 4A                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     310.  00:416E  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     311.  00:4171  01 A0 00                ld bc,16*10; 16 x #Sprites
     312.  00:4174  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     313.  00:4177  C9                      ret
     314.  00:4178                      	
     315.  00:4178                      DUMP_SPR_ATTS:
     316.  00:4178                      
     317.  00:4178                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     318.  00:4178                      
     319.  00:4178  21 0C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:417B  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:417E  01 14 00                ld bc,20		; 5 x #Sprites
     322.  00:4181  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     323.  00:4184                      
     324.  00:4184  C9                      ret
     325.  00:4185                      
     326.  00:4185                      DUMP_SPR_P1:    
     327.  00:4185                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     328.  00:4185                      
     329.  00:4185  2A 8F C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     330.  00:4188  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     331.  00:418B  C5                      PUSH BC
     332.  00:418C  01 C0 00            	ld bc, 192; 32 bytes por sprite
     333.  00:418F  CD 5C 00                call  LDIRVM 
     334.  00:4192  C1                  	POP BC
     335.  00:4193                      
     336.  00:4193                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     337.  00:4193                      
     338.  00:4193  2A 91 C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     339.  00:4196  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     340.  00:4199  C5                      PUSH BC
     341.  00:419A  01 30 00            	ld bc,16*3; 16 x #Sprites
     342.  00:419D  CD 5C 00                call  LDIRVM 
     343.  00:41A0  C1                  	POP BC
     344.  00:41A1                      
     345.  00:41A1                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     346.  00:41A1                      ;    xor a
     347.  00:41A1                      ;	di			; set VRAM address to 1800h
     348.  00:41A1                      ;	out (99h),a		; lower byte 00
     349.  00:41A1                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     350.  00:41A1                      ;	ei
     351.  00:41A1                      ;	out (99h),a		; note that this is protected by the ei instruction
     352.  00:41A1                      ;   push BC
     353.  00:41A1                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     354.  00:41A1                      ;	ld hl,(SPRITE_PTR_REPLACE)
     355.  00:41A1                      
     356.  00:41A1                      ;.loop1:
     357.  00:41A1                      ;	outi			; send the data (HL) to port 98h 
     358.  00:41A1                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     359.  00:41A1                      ;   POP BC
     360.  00:41A1                      
     361.  00:41A1                          ; Replace 2 entries in sprite color table
     362.  00:41A1                      ;    xor a
     363.  00:41A1                      ;	di			; set VRAM address to 1800h
     364.  00:41A1                      ;	out (99h),a		; lower byte 00
     365.  00:41A1                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     366.  00:41A1                      ;	ei
     367.  00:41A1                      ;	out (99h),a		; note that this is protected by the ei instruction
     368.  00:41A1                       ;   push BC
     369.  00:41A1                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     370.  00:41A1                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     371.  00:41A1                      	
     372.  00:41A1                      ;.loop2:
     373.  00:41A1                      ;	outi			; send the data (HL) to port 98h 
     374.  00:41A1                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     375.  00:41A1                       ;   POP BC
     376.  00:41A1                      
     377.  00:41A1  C9                      ret
      24   00:41A2                      	include "include\SETPAGES48K.asm"
       1.  00:41A2                      		; -----------------------------------------------------
       2.  00:41A2                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
       3.  00:41A2                      		; --- MODO 48K                                      ---
       4.  00:41A2                      		; -----------------------------------------------------
       5.  00:41A2                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
       6.  00:41A2                      		; -----------------------------------------------------
       7.  00:41A2                      
       8.  00:41A2                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
       9.  00:41A2                      		; SETPAGES48K:	BIOS-ROM-YY-ZZ	 -> ROM-ROM-ROM-ZZ (SITUA PAGINAS 2 Y 0, EN ESTE ORDEN)
      10.  00:41A2                      		;               ADEMAS GUARDA LOS SLOTS DEL JUEGO Y LA BIOS POR SI HAY QUE INTERCAMBIAR
      11.  00:41A2                      		; SETGAMEPAGE0:	XX-ROM-YY-ZZ     -> ROM-ROM-YY-ZZ (NO TOCA LA PAGINA 2)
      12.  00:41A2                      		; RESTOREBIOS:  XX-ROM-YY-ZZ     -> BIOS-ROM-YY-ZZ (VUELVE A SITUAR LA BIOS)
      13.  00:41A2                      		; SETPAGE0:	POSICIONA SLOT EN LA PAGINA 0
      14.  00:41A2                      
      15.  00:41A2                      		; --- VARIABLES EN RAM NECESARIAS ---
      16.  00:41A2                      		; SLOTBIOS:	BYTE PARA ALMACENAR EL SLOT DE LA BIOS
      17.  00:41A2                      		; SLOTGAME:	BYTE PARA ALMACENAR EL SLOT DEL JUEGO
      18.  00:41A2                      
      19.  00:41A2                      		;INCLUDE	"SETPAGES32K.ASM"
      20.  00:41A2                      
      21.  00:41A2                      SETPAGES48K:	; --- Posiciona las paginas de un cartucho de 48K ---
      22.  00:41A2  CD 1E 41            		call	SETPAGES32K			; Colocamos la pagina 2 del cartucho
      23.  00:41A5                      		; --- Guardamos el slot de la BIOS por si tenemos que restaurarla ---
      24.  00:41A5  3A C1 FC            		ld	a,[$FCC1]			; Valor del slot de la BIOS
      25.  00:41A8  32 8C C0            		ld	[SLOTBIOS],a			; Grabamos el slot de la BIOS para recuperarlo si hace falta
      26.  00:41AB                      		; --- Guardamos el slot del juego por si hay que restaurarlo ---
      27.  00:41AB  CD 38 01            		call	RSLREG				; Leemos el contenido del registro de seleccion de slots
      28.  00:41AE  0F                  		rrca					; Rotamos a la derecha...
      29.  00:41AF  0F                  		rrca					; ...dos veces
      30.  00:41B0  CD 05 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$7FFF) y volvemos
      31.  00:41B3  32 8D C0            		ld	[SLOTGAME],a			; Grabamos el slot del juego para recuperarlo si hace falta
      32.  00:41B6                      SETGAMEPAGE0:	; --- RUTINA QUE POSICIONA LA PAGINA 0 DEL JUEGO ---
      33.  00:41B6                      		; ---     ANTES HAY QUE LLAMAR A SETPAGES48K     ---
      34.  00:41B6  3A 8D C0            		ld	a,[SLOTGAME]			; Leemos el slot del juego
      35.  00:41B9  C3 BF 41            		jp	SETPAGE0			; Situamos la pagina 0 del juego y volvemos
      36.  00:41BC                      RESTOREBIOS:	; --- RUTINA QUE VUELVE A SITUAR LA BIOS ---
      37.  00:41BC                      		; --- ANTES HAY QUE LLAMAR A SETPAGES48K ---
      38.  00:41BC  3A 8C C0            		ld	a,[SLOTBIOS]			; Leemos el slot de la BIOS
      39.  00:41BF                      SETPAGE0:	; --- RUTINA QUE POSICIONA SLOT EN LA PAGINA 0 ---
      40.  00:41BF                      		; --- AUTOR: Ramones                           ---
      41.  00:41BF                      		; --- ENTRADA: a = slot con formato FxxxSSPP   ---
      42.  00:41BF  F3                  		di					; Desactivamos las interrupciones
      43.  00:41C0  47                  		ld	b,a				; Guardamos el slot
      44.  00:41C1  DB A8               		in	a,[$0A8]			; Leemos el registro principal de slots
      45.  00:41C3  E6 FC               		and	$FC				; Nos quedamos con los valores de las tres paginas superiores
      46.  00:41C5  57                  		ld	d,a				; D = Valor del slot primario
      47.  00:41C6  78                  		ld	a,b				; Recuperamos el slot
      48.  00:41C7  E6 03               		and	$03				; Nos fijamos en el slot primario
      49.  00:41C9  B2                  		or	d				; Colocamos los bits de las paginas superiores
      50.  00:41CA  57                  		ld	d,a				; Guardamos en D el valor final para el slot primario
      51.  00:41CB                      		; Comprobamos si esta expandido
      52.  00:41CB  78                  		ld	a,b				; Recuperamos el slot
      53.  00:41CC  CB 7F               		bit	7,a				; Miramos el bit de expansion
      54.  00:41CE  28 1D               		jr	z,.SETPRIMARY			; ...y saltamos si no esta expandido
      55.  00:41D0                      		; Si llegamos aqui el slot esta expandido
      56.  00:41D0  E6 03               		and	03h				; Nos quedamos con el slot primario
      57.  00:41D2  0F                  		rrca					; Rotamos ciclicamente a la derecha una...
      58.  00:41D3  0F                  		rrca					; ...y dos veces
      59.  00:41D4  4F                  		ld	c,a				; Guardamos el valor en c
      60.  00:41D5  7A                  		ld	a,d				; Recuperamos el valor final para el slot primario
      61.  00:41D6  E6 3F               		and	$3F				; Nos quedamos con las paginas 0, 1 y 2
      62.  00:41D8  B1                  		or	c				; Colocamos los bits para la pagina 3
      63.  00:41D9  4F                  		ld	c,a				; C:=valor del slot primario incluso en pagina 3
      64.  00:41DA  78                  		ld	a,b				; Recuperamos otra vez el slot
      65.  00:41DB  E6 0C               		and	$0C				; Nos quedamos con el valor del subslot
      66.  00:41DD  0F                  		rrca					; Rotamos ciclicamente a la derecha una...
      67.  00:41DE  0F                  		rrca					; ...y dos veces
      68.  00:41DF  47                  		ld	b,a				; B:= Slot expandido en pagina 3
      69.  00:41E0  79                  		ld	a,c				; valor del slot primario incluyendo pagina 3
      70.  00:41E1  D3 A8               		out	[$A8],a				; Slots : Primario, xx, xx, Primario
      71.  00:41E3  3A FF FF            		ld	a,[$FFFF]			; Leemos registro de seleccion de subslots
      72.  00:41E6  2F                  		cpl					; Complementamos (recordemos que siempre hay que complementarlo)
      73.  00:41E7  E6 FC               		and	$FC				; Nos quedamos con las paginas superiores
      74.  00:41E9  B0                  		or	b				; Colocamos el valor del slot expandido en pagina 0
      75.  00:41EA  32 FF FF            		ld	[$FFFF],a			; Seleccionamos el slot expandido
      76.  00:41ED                      .SETPRIMARY:	; --- Colocamos el slot primario ---
      77.  00:41ED  7A                  		ld	a,d				; Valor final del slot primario
      78.  00:41EE  D3 A8               		out	[$A8],a				; Slots: Seleccionado, xx, xx, Ram
      79.  00:41F0  C9                  		ret					; Volvemos
      25   00:41F1                      
      26   00:41F1                      START
      27   00:41F1                      	; CODE
      28   00:41F1  3E 08               	LD A,8
      29   00:41F3  CD 5F 00            	CALL CHGMOD    	
      30   00:41F6  CD 1E 41                CALL SETPAGES32K
      31   00:41F9  CD 83 40            	CALL opening_screen
      32   00:41FC  3E 01               	LD A,1
      33   00:41FE  32 00 70            	LD (_bank2),A
      34   00:4201  CD 9F 00            	CALL CHGET
      35   00:4204                      	; Empieza el juego    
      36   00:4204  CD 68 40            	call ClearVram_MSX2		
      37   00:4207  CD 31 41            	call SET_SCREEN5_MODE    
      38   00:420A  CD 5C 40                call Set212Lines
      39   00:420D  21 00 80                LD HL, CEMENTER
      40   00:4210  22 93 C0                LD (BITMAP), HL
      41   00:4213  06 07                   LD B, :CEMENTER
      42   00:4215  CD C9 40                call load_screen2
      43   00:4218                          
      44   00:4218  CD 27 42                call INIT_CHARS_VARS
      45   00:421B  3E FF                   LD A, -MOV_SPEED_GHOST
      46   00:421D  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
      47   00:4220  CD 53 41                call DUMP_SPR_ALL
      48   00:4223  CD 83 42                call MAIN_LOOP
      49   00:4226                          ;CALL CHGET
      50   00:4226  C9                  	ret
      51   00:4227                      
      52   00:4227                      
      53   00:4227                      INIT_CHARS_VARS:    
      54   00:4227  DD 21 0C C0             ld ix, SPRITE_ATTRS           
      55   00:422B                          
      56   00:422B  DD 36 00 07             ld (ix), 07h        ; Sprite 1 - $AF abajo
      57   00:422F  DD 36 01 09             ld (ix+1), 09h
      58   00:4233  DD 36 02 00             ld (ix+2), 00h    
      59   00:4237                      
      60   00:4237  DD 36 04 07             ld (ix+4), 07h     ; Sprite 2
      61   00:423B  DD 36 05 09             ld (ix+5), 09h
      62   00:423F  DD 36 06 04             ld (ix+6), 04h        
      63   00:4243                      
      64   00:4243  DD 36 08 07             ld (ix+8), 07h     ; Sprite 3
      65   00:4247  DD 36 09 09             ld (ix+9), 09h
      66   00:424B  DD 36 0A 08             ld (ix+10), 08h        
      67   00:424F                      
      68   00:424F  DD 36 0C 07             ld (ix+12), $07      ; Sprite 1 - Ghost
      69   00:4253  DD 36 0D E0             ld (ix+13), $E0
      70   00:4257  DD 36 0E 18             ld (ix+14), $18
      71   00:425B                          
      72   00:425B  AF                      XOR A
      73   00:425C  32 00 C0                LD (JIFFY_TEMP),A
      74   00:425F  32 01 C0                LD (CHAR_SPEED_X),A
      75   00:4262  32 02 C0                LD (CHAR_SPEED_Y),A
      76   00:4265  32 03 C0                LD (CHAR_SPEED_X_GHOST),A
      77   00:4268  32 05 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      78   00:426B  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A    
      79   00:426E  32 08 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      80   00:4271  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A
      81   00:4274  32 0B C0                LD (CHAR_SPEED_SHOOT),A
      82   00:4277  32 04 C0                LD (CHAR_GHOST_DEAD),A
      83   00:427A  32 09 C0                LD (CHAR_MIN_STEP), A
      84   00:427D  3E 01                   LD A,$01
      85   00:427F  32 06 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      86   00:4282  C9                      ret
      87   00:4283                      
      88   00:4283                      MAIN_LOOP:
      89   00:4283                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
      90   00:4283  CD 78 41                call DUMP_SPR_ATTS    
      91   00:4286                          
      92   00:4286  3A 04 C0                LD A,(CHAR_GHOST_DEAD)
      93   00:4289  FE 01                   CP $01
      94   00:428B  CA EC 42                JP Z,.continue
      95   00:428E  DD 7E 0D                LD A, (ix+13)          ;cargamos la X del Fantasma
      96   00:4291  2A 03 C0            	LD HL, (CHAR_SPEED_X_GHOST)
      97   00:4294  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
      98   00:4295                          
      99   00:4295  DD 77 0D            	LD (ix+13), A	
     100   00:4298  FE 16                   CP $16
     101   00:429A  CA A5 42                JP Z,.CHANGE_DIR_RIGHT
     102   00:429D  FE E1                   CP $E1
     103   00:429F  CA B2 42                JP Z,.CHANGE_DIR_LEFT
     104   00:42A2                          		
     105   00:42A2  C3 BB 42                JP .check_pattern
     106   00:42A5                      
     107   00:42A5                      .CHANGE_DIR_RIGHT:
     108   00:42A5  3E 01                   LD A, MOV_SPEED_GHOST
     109   00:42A7  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
     110   00:42AA  3E FF                   LD A,$FF
     111   00:42AC  32 05 C0                LD (CHAR_DIR_GHOST1),A
     112   00:42AF  C3 BB 42                JP .check_pattern
     113   00:42B2                      
     114   00:42B2                      .CHANGE_DIR_LEFT:
     115   00:42B2  3E FF                   LD A, -MOV_SPEED_GHOST
     116   00:42B4  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
     117   00:42B7  AF                      XOR A   ; Pone A a 0
     118   00:42B8  32 05 C0                LD (CHAR_DIR_GHOST1),A
     119   00:42BB                      
     120   00:42BB                      .check_pattern:
     121   00:42BB  3A 05 C0                LD A,(CHAR_DIR_GHOST1)
     122   00:42BE  FE FF                   CP $FF
     123   00:42C0  CA D9 42                JP Z,.check_pattern_RIGHT
     124   00:42C3  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     125   00:42C6  FE 18                   CP $18
     126   00:42C8  CA D2 42                jp z,.change_pattern_L
     127   00:42CB  DD 36 0E 18             LD (ix+14),$18
     128   00:42CF  C3 EC 42                jp .continue
     129   00:42D2                      .change_pattern_L:
     130   00:42D2  DD 36 0E 1C             LD (ix+14),$1C
     131   00:42D6  C3 EC 42                jp .continue
     132   00:42D9                      
     133   00:42D9                      .check_pattern_RIGHT
     134   00:42D9  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     135   00:42DC  FE 20                   CP $20
     136   00:42DE  CA E8 42                jp z,.change_pattern_R
     137   00:42E1  DD 36 0E 20             LD (ix+14),$20
     138   00:42E5  C3 EC 42                jp .continue
     139   00:42E8                      .change_pattern_R:
     140   00:42E8  DD 36 0E 24             LD (ix+14),$24
     141   00:42EC                      
     142   00:42EC                      .continue:    
     143   00:42EC  3A 08 C0                LD A,(CHAR_MAIN_SHOOT)    
     144   00:42EF  FE 01                   CP $01
     145   00:42F1  CA 04 43                JP Z,.MOVE_SHOOT_LEFT
     146   00:42F4  FE 02                   CP $02
     147   00:42F6  CA FC 42                JP Z,.MOVE_SHOOT_RIGHT
     148   00:42F9  C3 53 43                JP .check_KB
     149   00:42FC                      
     150   00:42FC                      .MOVE_SHOOT_RIGHT:        
     151   00:42FC  3E 03                   LD A, MOV_SPEED_SHOOT
     152   00:42FE  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     153   00:4301  C3 09 43                JP .CHECK_SHOOT_DISTANCE
     154   00:4304                      
     155   00:4304                      .MOVE_SHOOT_LEFT:    
     156   00:4304  3E FD                   LD A, -MOV_SPEED_SHOOT
     157   00:4306  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     158   00:4309                      
     159   00:4309                      .CHECK_SHOOT_DISTANCE:
     160   00:4309                          ; Movemos el disparo
     161   00:4309  DD 7E 11                LD A, (ix+17)          ;cargamos la X del disparo
     162   00:430C  2A 0B C0            	LD HL, (CHAR_SPEED_SHOOT)
     163   00:430F  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     164   00:4310  DD 77 11                LD (ix+17), A
     165   00:4313                          ; Comprobamos si hay colision con el fantasma
     166   00:4313  3A 04 C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     167   00:4316  FE 01                   CP $01
     168   00:4318  CA 2F 43                JP Z,.ADD_DISTANCE
     169   00:431B                      
     170   00:431B  DD 46 10                LD B,(ix+16)         ; Y del disparo
     171   00:431E  DD 4E 11                LD C,(ix+17)         ; X del disparo
     172   00:4321  DD 56 0C                LD D,(ix+12)         ; Y del fantasma 
     173   00:4324  DD 5E 0D                LD E,(ix+13)         ; X del fantasma
     174   00:4327  CD 10 40                call check_spr_collision
     175   00:432A  FE 01                   CP 1
     176   00:432C  CA 3F 43                JP Z,.KILL_GHOST
     177   00:432F                      .ADD_DISTANCE:
     178   00:432F  3A 0A C0                LD A,(CHAR_DISTANCE_SHOOT)
     179   00:4332  C6 03                   ADD MOV_SPEED_SHOOT
     180   00:4334  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A    
     181   00:4337  FE 30                   CP MAX_DISTANCE_SHOOT
     182   00:4339  C2 53 43                JP NZ,.check_KB
     183   00:433C  C3 48 43                JP .HIDE_SHOOT
     184   00:433F                      
     185   00:433F                      .KILL_GHOST:
     186   00:433F  3E 01                   LD A,1
     187   00:4341  32 04 C0                LD (CHAR_GHOST_DEAD),A
     188   00:4344  DD 36 0C D9             LD (ix+12),217    
     189   00:4348                      
     190   00:4348                      .HIDE_SHOOT:
     191   00:4348  DD 36 10 D9             LD (ix+16),217          ; Y = 217 para ocultar el Sprite
     192   00:434C  AF                      XOR A
     193   00:434D  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     194   00:4350  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A
     195   00:4353                      
     196   00:4353                      .check_KB:
     197   00:4353  76                      halt    
     198   00:4354                      
     199   00:4354  3E 08                   ld a, 8
     200   00:4356  CD 41 01            	call SNSMAT   
     201   00:4359  4F                      LD C,A    
     202   00:435A                          
     203   00:435A  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es DOWN?
     204   00:435C  CC 2A 44                call z, move_right
     205   00:435F                          
     206   00:435F  CB 61                   BIT KB_LEFT, C			; La tecla presionada es DOWN?
     207   00:4361  CC 77 44                call z, move_left
     208   00:4364                      
     209   00:4364  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     210   00:4366  CC BD 43                call z, move_up
     211   00:4369                      
     212   00:4369  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     213   00:436B  CC F3 43                call z, move_down
     214   00:436E                          
     215   00:436E  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     216   00:4370  CC 79 43                call z,SHOOT_MAIN_CHAR
     217   00:4373                      
     218   00:4373  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     219   00:4375  C8                      ret z
     220   00:4376                      
     221   00:4376  C3 83 42                jp MAIN_LOOP
     222   00:4379                      
     223   00:4379                      SHOOT_MAIN_CHAR:    
     224   00:4379  3A 08 C0                LD A, (CHAR_MAIN_SHOOT)
     225   00:437C  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     226   00:437E  CA 83 42                JP Z,MAIN_LOOP
     227   00:4381  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     228   00:4383  CA 83 42                JP Z,MAIN_LOOP
     229   00:4386                      
     230   00:4386  DD 7E 00                LD A, (ix)          
     231   00:4389  DD 77 10                ld (ix+16), A       ; Asignamos la Y del personaje    
     232   00:438C                      
     233   00:438C  3A 06 C0                LD A, (CHAR_DIR_MAIN)
     234   00:438F  FE 03                   CP $03
     235   00:4391  CA A7 43                JP Z,.SHOOT_RIGHT
     236   00:4394  3E 01                   LD A,$01                ; SHOOT LEFT
     237   00:4396  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     238   00:4399  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     239   00:439C  21 F4 FF            	LD HL, -12
     240   00:439F  85                  	ADD L
     241   00:43A0  DD 36 12 2C             ld (ix+18), $2C     ; Sprite Boomerang
     242   00:43A4  C3 B7 43                JP .CONTINUE
     243   00:43A7                      
     244   00:43A7                      .SHOOT_RIGHT:
     245   00:43A7  3E 02                   LD A,$02
     246   00:43A9  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     247   00:43AC  DD 36 12 28             ld (ix+18), $28     ; Sprite Boomerang - Right
     248   00:43B0  DD 7E 01                LD A, (ix+1)			;cargamos la X
     249   00:43B3  21 0C 00            	LD HL, 12
     250   00:43B6  85                  	ADD L
     251   00:43B7                      
     252   00:43B7                      .CONTINUE:
     253   00:43B7  DD 77 11                ld (ix+17), A       ; Asignamos la X del personaje + el desplazamiento        
     254   00:43BA  C3 83 42                jp MAIN_LOOP
     255   00:43BD                      
     256   00:43BD                      move_up:
     257   00:43BD                          ; Actualizamos la última tecla de dirección pulsada
     258   00:43BD  AF                      XOR A
     259   00:43BE  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     260   00:43C1  CD C4 44                CALL CHECK_DIRECTION_MAIN
     261   00:43C4                      
     262   00:43C4  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     263   00:43C7  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
     264   00:43C9  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     265   00:43CA  DD 7E 01                ld a,(ix+1)
     266   00:43CD  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     267   00:43CE  CD 20 40                call get_bloque_en_X_Y
     268   00:43D1  FE 01                   cp 1
     269   00:43D3  CA 90 45                jp z,NO_MOVEMENT
     270   00:43D6                      
     271   00:43D6  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     272   00:43D9  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
     273   00:43DB  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     274   00:43DC  DD 7E 01                ld a,(ix+1)
     275   00:43DF  C6 0A                   add 10 ; miramos la segunda tile 8+2
     276   00:43E1  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     277   00:43E2  CD 20 40                call get_bloque_en_X_Y
     278   00:43E5  FE 01                   cp 1
     279   00:43E7  CA 90 45                jp z,NO_MOVEMENT
     280   00:43EA                            
     281   00:43EA  3E FF               	LD A, -MOV_SPEED
     282   00:43EC  32 02 C0            	LD (CHAR_SPEED_Y), A
     283   00:43EF  CD 35 45                call UPDATE_MOVEMENT    
     284   00:43F2  C9                      ret
     285   00:43F3                      
     286   00:43F3                      move_down:    
     287   00:43F3                          ; Actualizamos la última tecla de dirección pulsada
     288   00:43F3  3E 01                   LD A,$01
     289   00:43F5  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     290   00:43F8  CD C4 44                CALL CHECK_DIRECTION_MAIN
     291   00:43FB                      
     292   00:43FB  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     293   00:43FE  C6 11                   add 17 ; incrementamos en 15+2 el valor
     294   00:4400  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     295   00:4401  DD 7E 01                ld a,(ix+1)
     296   00:4404  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     297   00:4405  CD 20 40                call get_bloque_en_X_Y
     298   00:4408  FE 01                   cp 1
     299   00:440A  CA 90 45                jp z,NO_MOVEMENT
     300   00:440D                      
     301   00:440D  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     302   00:4410  C6 11                   add 17 ; incrementamos en 15 el valor
     303   00:4412  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     304   00:4413  DD 7E 01                ld a,(ix+1)
     305   00:4416  C6 0A                   add 10 ; miramos la segunda tile 8+2
     306   00:4418  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
     307   00:4419  CD 20 40                call get_bloque_en_X_Y
     308   00:441C  FE 01                   cp 1
     309   00:441E  CA 90 45                jp z,NO_MOVEMENT
     310   00:4421                          
     311   00:4421  3E 01                   LD A, MOV_SPEED
     312   00:4423  32 02 C0            	LD (CHAR_SPEED_Y), A
     313   00:4426  CD 35 45                call UPDATE_MOVEMENT    
     314   00:4429  C9                      ret
     315   00:442A                      
     316   00:442A                      move_right:
     317   00:442A                          ; Actualizamos la última tecla de dirección pulsada
     318   00:442A  3E 03                   LD A,$03
     319   00:442C  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     320   00:442F  CD C4 44                CALL CHECK_DIRECTION_MAIN
     321   00:4432                      
     322   00:4432  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
     323   00:4435  C6 10                   add 16; incrementamos en 3 el valor
     324   00:4437  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     325   00:4438  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     326   00:443B  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     327   00:443D  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     328   00:443E  CD 20 40                call get_bloque_en_X_Y
     329   00:4441  FE 01                   cp 1
     330   00:4443  CA 90 45                jp z,NO_MOVEMENT
     331   00:4446                      
     332   00:4446                          ;Miramos el tile del byte inferior del sprite - centro personaje
     333   00:4446  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     334   00:4449  C6 10                   add 16; incrementamos en 2 tiles el valor
     335   00:444B  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     336   00:444C  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     337   00:444F  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
     338   00:4451  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     339   00:4452  CD 20 40                call get_bloque_en_X_Y
     340   00:4455  FE 01                   cp 1
     341   00:4457  CA 90 45                jp z,NO_MOVEMENT
     342   00:445A                      
     343   00:445A                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     344   00:445A  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     345   00:445D  C6 10                   add 16; incrementamos en 2 tiles el valor
     346   00:445F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     347   00:4460  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     348   00:4463  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     349   00:4465  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     350   00:4466  CD 20 40                call get_bloque_en_X_Y
     351   00:4469  FE 01                   cp 1
     352   00:446B  CA 90 45                jp z,NO_MOVEMENT    
     353   00:446E                          
     354   00:446E  3E 01                   LD A, MOV_SPEED
     355   00:4470  32 01 C0            	LD (CHAR_SPEED_X), A
     356   00:4473  CD 35 45                call UPDATE_MOVEMENT            
     357   00:4476  C9                      ret
     358   00:4477                      
     359   00:4477                      move_left:
     360   00:4477                          ; Actualizamos la última tecla de dirección pulsada
     361   00:4477  3E 02                   LD A,$02
     362   00:4479  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     363   00:447C  CD C4 44                CALL CHECK_DIRECTION_MAIN
     364   00:447F  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     365   00:4482  D6 02                   sub 2 ; decrementamos en 2 el valor
     366   00:4484  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     367   00:4485  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     368   00:4488  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     369   00:448A  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     370   00:448B  CD 20 40                call get_bloque_en_X_Y
     371   00:448E  FE 01                   cp 1
     372   00:4490  CA 90 45                jp z,NO_MOVEMENT
     373   00:4493                      
     374   00:4493                          ;Miramos el tile inferior parte central del personaje
     375   00:4493  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     376   00:4496  D6 02                   sub 2 ; decrementamos en 2 el valor
     377   00:4498  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     378   00:4499  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     379   00:449C  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     380   00:449E  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     381   00:449F  CD 20 40                call get_bloque_en_X_Y
     382   00:44A2  FE 01                   cp 1
     383   00:44A4  CA 90 45                jp z,NO_MOVEMENT
     384   00:44A7                      
     385   00:44A7                          ;Miramos el tile inferior esquina inferior izquierda
     386   00:44A7  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     387   00:44AA  D6 02                   sub 2 ; decrementamos en 2 el valor
     388   00:44AC  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     389   00:44AD  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     390   00:44B0  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     391   00:44B2  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     392   00:44B3  CD 20 40                call get_bloque_en_X_Y
     393   00:44B6  FE 01                   cp 1
     394   00:44B8  CA 90 45                jp z,NO_MOVEMENT
     395   00:44BB                      
     396   00:44BB  3E FF                   LD A, -MOV_SPEED
     397   00:44BD  32 01 C0            	LD (CHAR_SPEED_X), A
     398   00:44C0  CD 35 45                call UPDATE_MOVEMENT     
     399   00:44C3  C9                      ret
     400   00:44C4                      
     401   00:44C4                      CHECK_DIRECTION_MAIN:
     402   00:44C4  3A 06 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     403   00:44C7  2A 07 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     404   00:44CA  BD                  	CP L		            	                ;Son iguales?
     405   00:44CB  C8                  	RET Z                           			;Si son iguales, vuelvo
     406   00:44CC  3A 07 C0                LD A,(CHAR_NEW_DIR_MAIN)
     407   00:44CF  FE 01                   CP $01
     408   00:44D1  CA E6 44                JP Z,.SET_DIR_DOWN
     409   00:44D4  FE 00                   CP $00
     410   00:44D6  CA F8 44                JP Z,.SET_DIR_UP
     411   00:44D9  FE 03                   CP $03
     412   00:44DB  CA 0A 45                JP Z,.SET_DIR_RIGHT
     413   00:44DE  FE 02                   CP $02
     414   00:44E0  CA 1C 45                JP Z,.SET_DIR_LEFT
     415   00:44E3  C3 2E 45                JP .FINISH
     416   00:44E6                          
     417   00:44E6                      .SET_DIR_DOWN:    
     418   00:44E6  21 54 46                ld hl, SPRITE_P1_DOWN
     419   00:44E9  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     420   00:44EC                          
     421   00:44EC  21 A4 4A                ld hl, SPRITE_COLOR_P1_DOWN
     422   00:44EF  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     423   00:44F2  CD 85 41                CALL DUMP_SPR_P1    
     424   00:44F5                      
     425   00:44F5  C3 2E 45                JP .FINISH
     426   00:44F8                      
     427   00:44F8                      .SET_DIR_UP:
     428   00:44F8  21 94 45                ld hl, SPRITE_P1_UP
     429   00:44FB  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     430   00:44FE                          
     431   00:44FE  21 74 4A                ld hl, SPRITE_COLOR_P1_UP
     432   00:4501  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     433   00:4504  CD 85 41                CALL DUMP_SPR_P1
     434   00:4507                      
     435   00:4507  C3 2E 45                JP .FINISH
     436   00:450A                      
     437   00:450A                      .SET_DIR_RIGHT:
     438   00:450A  21 D4 47                ld hl, SPRITE_P1_RIGHT
     439   00:450D  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     440   00:4510                          
     441   00:4510  21 04 4B                ld hl, SPRITE_COLOR_P1_RIGHT
     442   00:4513  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     443   00:4516  CD 85 41                CALL DUMP_SPR_P1
     444   00:4519  C3 2E 45                JP .FINISH
     445   00:451C                      
     446   00:451C                      .SET_DIR_LEFT:    
     447   00:451C  21 14 47                ld hl, SPRITE_P1_LEFT
     448   00:451F  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     449   00:4522                          
     450   00:4522  21 D4 4A                ld hl, SPRITE_COLOR_P1_LEFT
     451   00:4525  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     452   00:4528  CD 85 41                CALL DUMP_SPR_P1
     453   00:452B                          
     454   00:452B  C3 2E 45                JP .FINISH
     455   00:452E                      
     456   00:452E                      .FINISH:
     457   00:452E  3A 07 C0                LD A, (CHAR_NEW_DIR_MAIN)
     458   00:4531  32 06 C0                LD (CHAR_DIR_MAIN),A    
     459   00:4534  C9                      RET
     460   00:4535                      
     461   00:4535                      UPDATE_MOVEMENT:
     462   00:4535  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     463   00:4538  2A 02 C0            	LD HL, (CHAR_SPEED_Y)
     464   00:453B  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     465   00:453C                          
     466   00:453C  DD 77 00            	LD (ix), A
     467   00:453F  DD 77 04                LD (ix+4), A
     468   00:4542  DD 77 08                LD (ix+8), A
     469   00:4545                      	
     470   00:4545  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     471   00:4548  2A 01 C0            	LD HL, (CHAR_SPEED_X)
     472   00:454B  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     473   00:454C                          
     474   00:454C  DD 77 01            	LD (ix+1), A
     475   00:454F  DD 77 05                LD (ix+5), A
     476   00:4552  DD 77 09                LD (ix+9), A	
     477   00:4555                      
     478   00:4555  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     479   00:4556  32 01 C0                LD (CHAR_SPEED_X),A
     480   00:4559  32 02 C0                LD (CHAR_SPEED_Y),A	
     481   00:455C                      
     482   00:455C                          ; Animación/pasos de personaje	
     483   00:455C  3A 09 C0                LD A, (CHAR_MIN_STEP)
     484   00:455F  FE 04                   CP MAX_CHAR_STEPS
     485   00:4561  C2 8A 45                JP NZ,.NO_CHAR_PATTERN_CHANGE
     486   00:4564  AF                      XOR A
     487   00:4565  32 09 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     488   00:4568  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     489   00:456B  FE 00                   CP $00
     490   00:456D  CA 7D 45                JP Z,.SET_SPR_1P_2
     491   00:4570  DD 36 02 00             LD (ix+2), $00
     492   00:4574  DD 36 06 04             LD (ix+6), $04
     493   00:4578  DD 36 0A 08             LD (ix+10), $08
     494   00:457C  C9                      ret
     495   00:457D                      
     496   00:457D                      .SET_SPR_1P_2:
     497   00:457D  DD 36 02 0C             LD (ix+2), $0C
     498   00:4581  DD 36 06 10             LD (ix+6), $10
     499   00:4585  DD 36 0A 14             LD (ix+10), $14
     500   00:4589  C9                  	ret
     501   00:458A                      
     502   00:458A                      .NO_CHAR_PATTERN_CHANGE
     503   00:458A  C6 01                   ADD 1
     504   00:458C  32 09 C0                LD (CHAR_MIN_STEP), A
     505   00:458F  C9                      ret
     506   00:4590                      
     507   00:4590                      NO_MOVEMENT:    
     508   00:4590  CD 83 42                call MAIN_LOOP
     509   00:4593  C9                      ret
     510   00:4594                      
     511   00:4594                      include "include\BTH_data.asm"
       1.  00:4594                      SPRITE_P1_UP:
       2.  00:4594                          ; UP 1        
       3.  00:4594                          ; mask 0
       4.  00:4594                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
       4.  00:4594  03 0F 1F 1F 1F 3F 1F 0F 
       5.  00:459C                          DB $30,$78,$60,$60,$03,$03,$06,$0E
       5.  00:459C  30 78 60 60 03 03 06 0E 
       6.  00:45A4                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
       6.  00:45A4  E0 F0 F8 F8 FC F8 FC F0 
       7.  00:45AC                          DB $0E,$18,$06,$00,$C0,$E0,$F0,$00    
       7.  00:45AC  0E 18 06 00 C0 E0 F0 00 
       8.  00:45B4                          ; mask 1
       9.  00:45B4                          DB $00,$00,$00,$00,$00,$00,$00,$00
       9.  00:45B4  00 00 00 00 00 00 00 00 
      10.  00:45BC                          DB $0F,$00,$03,$03,$01,$01,$00,$00
      10.  00:45BC  0F 00 03 03 01 01 00 00 
      11.  00:45C4                          DB $00,$00,$00,$00,$00,$00,$00,$00
      11.  00:45C4  00 00 00 00 00 00 00 00 
      12.  00:45CC                          DB $F0,$06,$C0,$C0,$80,$80,$80,$00
      12.  00:45CC  F0 06 C0 C0 80 80 80 00 
      13.  00:45D4                          ; mask 2
      14.  00:45D4                          DB $00,$00,$00,$00,$00,$00,$00,$00
      14.  00:45D4  00 00 00 00 00 00 00 00 
      15.  00:45DC                          DB $00,$07,$01,$01,$00,$00,$00,$00
      15.  00:45DC  00 07 01 01 00 00 00 00 
      16.  00:45E4                          DB $00,$00,$00,$00,$00,$00,$00,$00
      16.  00:45E4  00 00 00 00 00 00 00 00 
      17.  00:45EC                          DB $00,$E0,$80,$80,$00,$00,$00,$00    
      17.  00:45EC  00 E0 80 80 00 00 00 00 
      18.  00:45F4                      
      19.  00:45F4                          ; UP 2
      20.  00:45F4                          ; mask 0
      21.  00:45F4                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
      21.  00:45F4  03 0F 1F 1F 1F 3F 1F 0F 
      22.  00:45FC                          DB $70,$18,$60,$00,$03,$07,$0E,$00
      22.  00:45FC  70 18 60 00 03 07 0E 00 
      23.  00:4604                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
      23.  00:4604  E0 F0 F8 F8 FC F8 FC F0 
      24.  00:460C                          DB $0C,$1E,$06,$06,$C0,$C0,$E0,$70    
      24.  00:460C  0C 1E 06 06 C0 C0 E0 70 
      25.  00:4614                          ; mask 1
      26.  00:4614                          DB $00,$00,$00,$00,$00,$00,$00,$00
      26.  00:4614  00 00 00 00 00 00 00 00 
      27.  00:461C                          DB $0F,$60,$03,$03,$01,$01,$00,$00
      27.  00:461C  0F 60 03 03 01 01 00 00 
      28.  00:4624                          DB $00,$00,$00,$00,$00,$00,$00,$00
      28.  00:4624  00 00 00 00 00 00 00 00 
      29.  00:462C                          DB $F0,$00,$C0,$C0,$80,$80,$80,$00
      29.  00:462C  F0 00 C0 C0 80 80 80 00 
      30.  00:4634                          ; mask 2
      31.  00:4634                          DB $00,$00,$00,$00,$00,$00,$00,$00
      31.  00:4634  00 00 00 00 00 00 00 00 
      32.  00:463C                          DB $00,$07,$01,$01,$00,$00,$00,$00
      32.  00:463C  00 07 01 01 00 00 00 00 
      33.  00:4644                          DB $00,$00,$00,$00,$00,$00,$00,$00
      33.  00:4644  00 00 00 00 00 00 00 00 
      34.  00:464C                          DB $00,$E0,$80,$80,$00,$00,$00,$00
      34.  00:464C  00 E0 80 80 00 00 00 00 
      35.  00:4654                      
      36.  00:4654                      SPRITE_P1_DOWN:
      37.  00:4654                          ; DOWN 1 - 00h
      38.  00:4654                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      38.  00:4654  03 0F 00 0A 0E 0D 07 03 
      39.  00:465C                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
      39.  00:465C  3E 7B 60 60 03 03 06 0E 
      40.  00:4664                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      40.  00:4664  E0 F0 A0 90 70 B0 E0 C0 
      41.  00:466C                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
      41.  00:466C  7E D8 06 00 C0 E0 F0 00 
      42.  00:4674                          ; mask 1 - 04h
      43.  00:4674                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      43.  00:4674  00 00 1F 15 11 32 18 0C 
      44.  00:467C                          DB $01,$00,$03,$03,$01,$01,$00,$00
      44.  00:467C  01 00 03 03 01 01 00 00 
      45.  00:4684                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      45.  00:4684  00 00 58 68 8C 48 1C 30 
      46.  00:468C                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
      46.  00:468C  80 06 C0 C0 80 80 80 00 
      47.  00:4694                          ; mask 2 - 08h
      48.  00:4694                          DB $00,$00,$00,$00,$00,$30,$00,$00
      48.  00:4694  00 00 00 00 00 30 00 00 
      49.  00:469C                          DB $00,$04,$00,$00,$00,$00,$00,$00
      49.  00:469C  00 04 00 00 00 00 00 00 
      50.  00:46A4                          DB $00,$00,$00,$00,$00,$08,$00,$00
      50.  00:46A4  00 00 00 00 00 08 00 00 
      51.  00:46AC                          DB $00,$20,$00,$00,$00,$00,$00,$00
      51.  00:46AC  00 20 00 00 00 00 00 00 
      52.  00:46B4                      
      53.  00:46B4                          ; DOWN 2
      54.  00:46B4                          ; mask 0 - 0Ch
      55.  00:46B4                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      55.  00:46B4  03 0F 00 0A 0E 0D 07 03 
      56.  00:46BC                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
      56.  00:46BC  7E 1B 60 00 03 07 0E 00 
      57.  00:46C4                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      57.  00:46C4  E0 F0 A0 90 70 B0 E0 C0 
      58.  00:46CC                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
      58.  00:46CC  7C DE 06 06 C0 C0 E0 70 
      59.  00:46D4                          ; mask 1 - 10h
      60.  00:46D4                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      60.  00:46D4  00 00 1F 15 11 32 18 0C 
      61.  00:46DC                          DB $01,$60,$03,$03,$01,$01,$00,$00
      61.  00:46DC  01 60 03 03 01 01 00 00 
      62.  00:46E4                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      62.  00:46E4  00 00 58 68 8C 48 1C 30 
      63.  00:46EC                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
      63.  00:46EC  80 00 C0 C0 80 80 80 00 
      64.  00:46F4                          ; mask 2 - 14h
      65.  00:46F4                          DB $00,$00,$00,$00,$00,$30,$00,$00
      65.  00:46F4  00 00 00 00 00 30 00 00 
      66.  00:46FC                          DB $00,$04,$00,$00,$00,$00,$00,$00
      66.  00:46FC  00 04 00 00 00 00 00 00 
      67.  00:4704                          DB $00,$00,$00,$00,$00,$08,$00,$00
      67.  00:4704  00 00 00 00 00 08 00 00 
      68.  00:470C                          DB $00,$20,$00,$00,$00,$00,$00,$00
      68.  00:470C  00 20 00 00 00 00 00 00 
      69.  00:4714                      
      70.  00:4714                      SPRITE_P1_LEFT:         
      71.  00:4714                          ; --- Slot 1
      72.  00:4714                          ; mask 0
      73.  00:4714                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      73.  00:4714  07 1F 03 07 0B 1F 0F 07 
      74.  00:471C                          DB $03,$0F,$30,$03,$03,$01,$01,$03
      74.  00:471C  03 0F 30 03 03 01 01 03 
      75.  00:4724                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      75.  00:4724  C0 E0 00 80 C0 C0 80 00 
      76.  00:472C                          DB $C0,$80,$00,$F8,$D8,$B0,$20,$00
      76.  00:472C  C0 80 00 F8 D8 B0 20 00 
      77.  00:4734                           ; mask 1
      78.  00:4734                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      78.  00:4734  00 00 0C 18 34 00 00 00 
      79.  00:473C                          DB $0C,$30,$01,$00,$00,$00,$00,$00
      79.  00:473C  0C 30 01 00 00 00 00 00 
      80.  00:4744                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      80.  00:4744  00 00 F0 78 38 3C 70 F8 
      81.  00:474C                          DB $00,$00,$F0,$38,$18,$10,$00,$00
      81.  00:474C  00 00 F0 38 18 10 00 00 
      82.  00:4754                           ; mask 2
      83.  00:4754                          DB $00,$00,$00,$00,$30,$00,$00,$00
      83.  00:4754  00 00 00 00 30 00 00 00 
      84.  00:475C                          DB $00,$00,$00,$00,$00,$00,$00,$00
      84.  00:475C  00 00 00 00 00 00 00 00 
      85.  00:4764                          DB $00,$00,$00,$00,$38,$00,$00,$00
      85.  00:4764  00 00 00 00 38 00 00 00 
      86.  00:476C                          DB $3C,$78,$30,$00,$00,$00,$00,$00
      86.  00:476C  3C 78 30 00 00 00 00 00 
      87.  00:4774                           
      88.  00:4774                          ; --- Slot 3
      89.  00:4774                          ; mask 0
      90.  00:4774                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      90.  00:4774  07 1F 03 07 0B 1F 0F 07 
      91.  00:477C                          DB $03,$0F,$30,$03,$17,$19,$01,$03
      91.  00:477C  03 0F 30 03 17 19 01 03 
      92.  00:4784                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      92.  00:4784  C0 E0 00 80 C0 C0 80 00 
      93.  00:478C                          DB $C0,$80,$00,$F8,$D8,$90,$00,$00
      93.  00:478C  C0 80 00 F8 D8 90 00 00 
      94.  00:4794                          ; mask 1
      95.  00:4794                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      95.  00:4794  00 00 0C 18 34 00 00 00 
      96.  00:479C                          DB $0C,$30,$01,$00,$00,$00,$00,$00
      96.  00:479C  0C 30 01 00 00 00 00 00 
      97.  00:47A4                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      97.  00:47A4  00 00 F0 78 38 3C 70 F8 
      98.  00:47AC                          DB $00,$00,$F0,$38,$18,$10,$00,$00
      98.  00:47AC  00 00 F0 38 18 10 00 00 
      99.  00:47B4                          ; mask 2
     100.  00:47B4                          DB $00,$00,$00,$00,$30,$00,$00,$00
     100.  00:47B4  00 00 00 00 30 00 00 00 
     101.  00:47BC                          DB $00,$00,$00,$00,$00,$00,$00,$00
     101.  00:47BC  00 00 00 00 00 00 00 00 
     102.  00:47C4                          DB $00,$00,$00,$00,$38,$00,$00,$00
     102.  00:47C4  00 00 00 00 38 00 00 00 
     103.  00:47CC                          DB $3C,$78,$30,$00,$00,$00,$00,$00
     103.  00:47CC  3C 78 30 00 00 00 00 00 
     104.  00:47D4                      
     105.  00:47D4                      SPRITE_P1_RIGHT:
     106.  00:47D4                          ; --- Slot 0
     107.  00:47D4                          ; mask 0
     108.  00:47D4                          DB $03,$07,$00,$01,$03,$03,$01,$00
     108.  00:47D4  03 07 00 01 03 03 01 00 
     109.  00:47DC                          DB $03,$01,$00,$1F,$1B,$0D,$04,$00
     109.  00:47DC  03 01 00 1F 1B 0D 04 00 
     110.  00:47E4                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     110.  00:47E4  E0 F8 C0 E0 D0 F8 F0 E0 
     111.  00:47EC                          DB $C0,$F0,$0C,$C0,$C0,$80,$80,$C0    
     111.  00:47EC  C0 F0 0C C0 C0 80 80 C0 
     112.  00:47F4                          ; mask 1
     113.  00:47F4                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     113.  00:47F4  00 00 0F 1E 1C 3C 0E 1F 
     114.  00:47FC                          DB $00,$00,$0F,$1C,$18,$08,$00,$00
     114.  00:47FC  00 00 0F 1C 18 08 00 00 
     115.  00:4804                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     115.  00:4804  00 00 30 18 2C 00 00 00 
     116.  00:480C                          DB $30,$0C,$80,$00,$00,$00,$00,$00
     116.  00:480C  30 0C 80 00 00 00 00 00 
     117.  00:4814                          ; mask 2
     118.  00:4814                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     118.  00:4814  00 00 00 00 1C 00 00 00 
     119.  00:481C                          DB $3C,$1E,$0C,$00,$00,$00,$00,$00
     119.  00:481C  3C 1E 0C 00 00 00 00 00 
     120.  00:4824                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     120.  00:4824  00 00 00 00 0C 00 00 00 
     121.  00:482C                          DB $00,$00,$00,$00,$00,$00,$00,$00
     121.  00:482C  00 00 00 00 00 00 00 00 
     122.  00:4834                          
     123.  00:4834                          ; --- Slot 2
     124.  00:4834                          ; mask 0
     125.  00:4834                          DB $03,$07,$00,$01,$03,$03,$01,$00
     125.  00:4834  03 07 00 01 03 03 01 00 
     126.  00:483C                          DB $03,$01,$00,$1F,$1B,$09,$00,$00
     126.  00:483C  03 01 00 1F 1B 09 00 00 
     127.  00:4844                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     127.  00:4844  E0 F8 C0 E0 D0 F8 F0 E0 
     128.  00:484C                          DB $C0,$F0,$0C,$C0,$E8,$98,$80,$C0    
     128.  00:484C  C0 F0 0C C0 E8 98 80 C0 
     129.  00:4854                          ; mask 1
     130.  00:4854                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     130.  00:4854  00 00 0F 1E 1C 3C 0E 1F 
     131.  00:485C                          DB $00,$00,$0F,$1C,$18,$08,$00,$00
     131.  00:485C  00 00 0F 1C 18 08 00 00 
     132.  00:4864                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     132.  00:4864  00 00 30 18 2C 00 00 00 
     133.  00:486C                          DB $30,$0C,$80,$00,$00,$00,$00,$00    
     133.  00:486C  30 0C 80 00 00 00 00 00 
     134.  00:4874                          ; mask 2
     135.  00:4874                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     135.  00:4874  00 00 00 00 1C 00 00 00 
     136.  00:487C                          DB $3C,$1E,$0C,$00,$00,$00,$00,$00
     136.  00:487C  3C 1E 0C 00 00 00 00 00 
     137.  00:4884                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     137.  00:4884  00 00 00 00 0C 00 00 00 
     138.  00:488C                          DB $00,$00,$00,$00,$00,$00,$00,$00
     138.  00:488C  00 00 00 00 00 00 00 00 
     139.  00:4894                          
     140.  00:4894                      SPRITE_PATTERN:    
     141.  00:4894                          ; DOWN 1 
     142.  00:4894                          ; mask 0 - 00h
     143.  00:4894                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     143.  00:4894  03 0F 00 0A 0E 0D 07 03 
     144.  00:489C                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
     144.  00:489C  3E 7B 60 60 03 03 06 0E 
     145.  00:48A4                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     145.  00:48A4  E0 F0 A0 90 70 B0 E0 C0 
     146.  00:48AC                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
     146.  00:48AC  7E D8 06 00 C0 E0 F0 00 
     147.  00:48B4                          ; mask 1 - 04h
     148.  00:48B4                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     148.  00:48B4  00 00 1F 15 11 32 18 0C 
     149.  00:48BC                          DB $01,$00,$03,$03,$01,$01,$00,$00
     149.  00:48BC  01 00 03 03 01 01 00 00 
     150.  00:48C4                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     150.  00:48C4  00 00 58 68 8C 48 1C 30 
     151.  00:48CC                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
     151.  00:48CC  80 06 C0 C0 80 80 80 00 
     152.  00:48D4                          ; mask 2 - 08h
     153.  00:48D4                          DB $00,$00,$00,$00,$00,$30,$00,$00
     153.  00:48D4  00 00 00 00 00 30 00 00 
     154.  00:48DC                          DB $00,$04,$00,$00,$00,$00,$00,$00
     154.  00:48DC  00 04 00 00 00 00 00 00 
     155.  00:48E4                          DB $00,$00,$00,$00,$00,$08,$00,$00
     155.  00:48E4  00 00 00 00 00 08 00 00 
     156.  00:48EC                          DB $00,$20,$00,$00,$00,$00,$00,$00
     156.  00:48EC  00 20 00 00 00 00 00 00 
     157.  00:48F4                      
     158.  00:48F4                          ; DOWN 2 
     159.  00:48F4                          ; mask 0 - 0Ch
     160.  00:48F4                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     160.  00:48F4  03 0F 00 0A 0E 0D 07 03 
     161.  00:48FC                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
     161.  00:48FC  7E 1B 60 00 03 07 0E 00 
     162.  00:4904                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     162.  00:4904  E0 F0 A0 90 70 B0 E0 C0 
     163.  00:490C                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
     163.  00:490C  7C DE 06 06 C0 C0 E0 70 
     164.  00:4914                          ; mask 1 - 10h
     165.  00:4914                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     165.  00:4914  00 00 1F 15 11 32 18 0C 
     166.  00:491C                          DB $01,$60,$03,$03,$01,$01,$00,$00
     166.  00:491C  01 60 03 03 01 01 00 00 
     167.  00:4924                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     167.  00:4924  00 00 58 68 8C 48 1C 30 
     168.  00:492C                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
     168.  00:492C  80 00 C0 C0 80 80 80 00 
     169.  00:4934                          ; mask 2 - 14h
     170.  00:4934                          DB $00,$00,$00,$00,$00,$30,$00,$00
     170.  00:4934  00 00 00 00 00 30 00 00 
     171.  00:493C                          DB $00,$04,$00,$00,$00,$00,$00,$00
     171.  00:493C  00 04 00 00 00 00 00 00 
     172.  00:4944                          DB $00,$00,$00,$00,$00,$08,$00,$00
     172.  00:4944  00 00 00 00 00 08 00 00 
     173.  00:494C                          DB $00,$20,$00,$00,$00,$00,$00,$00
     173.  00:494C  00 20 00 00 00 00 00 00 
     174.  00:4954                          
     175.  00:4954                          ;Ghost 1 Left - 18H
     176.  00:4954                          DB 00h,01h,07h,0fh,1fh,3fh,7fh,01h
     176.  00:4954  00 01 07 0F 1F 3F 7F 01 
     177.  00:495C                          DB $15,$14,$7f,$3f,$3f,$3f,$3f,$7f
     177.  00:495C  15 14 7F 3F 3F 3F 3F 7F 
     178.  00:4964                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     178.  00:4964  00 E0 80 00 00 80 80 C0 
     179.  00:496C                          DB $c0,$e0,$f0,$f8,$fc,$fc,$fe,$ff  
     179.  00:496C  C0 E0 F0 F8 FC FC FE FF 
     180.  00:4974                          
     181.  00:4974                          ; Ghost 2 Left - 1Ch
     182.  00:4974                          DB $00,$01,$07,$0f,$1f,$3f,$7f,$01
     182.  00:4974  00 01 07 0F 1F 3F 7F 01 
     183.  00:497C                          DB $15,$14,$7f,$3f,$3f,$7f,$7f,$83
     183.  00:497C  15 14 7F 3F 3F 7F 7F 83 
     184.  00:4984                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     184.  00:4984  00 E0 80 00 00 80 80 C0 
     185.  00:498C                          DB $c0,$e0,$e0,$f0,$f8,$fc,$fe,$ff      
     185.  00:498C  C0 E0 E0 F0 F8 FC FE FF 
     186.  00:4994                      
     187.  00:4994                          ; Ghost 1 Right - 20h
     188.  00:4994                          DB $00,$07,$01,$00,$00,$01,$01,$03
     188.  00:4994  00 07 01 00 00 01 01 03 
     189.  00:499C                          DB $03,$07,$07,$0f,$1f,$3f,$7f,$ff
     189.  00:499C  03 07 07 0F 1F 3F 7F FF 
     190.  00:49A4                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     190.  00:49A4  00 80 E0 F0 F8 FC FE 80 
     191.  00:49AC                          DB $a8,$28,$fe,$fc,$fc,$fe,$fe,$c1
     191.  00:49AC  A8 28 FE FC FC FE FE C1 
     192.  00:49B4                          
     193.  00:49B4                          ; Ghost 2 Right - 24h
     194.  00:49B4                          DB $00,$07,$01,$00,$00,$01,$01,$03
     194.  00:49B4  00 07 01 00 00 01 01 03 
     195.  00:49BC                          DB $03,$07,$0f,$1f,$3f,$3f,$7f,$ff
     195.  00:49BC  03 07 0F 1F 3F 3F 7F FF 
     196.  00:49C4                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     196.  00:49C4  00 80 E0 F0 F8 FC FE 80 
     197.  00:49CC                          DB $a8,$28,$fe,$fc,$fc,$fc,$fc,$fe  
     197.  00:49CC  A8 28 FE FC FC FC FC FE 
     198.  00:49D4                      
     199.  00:49D4                          ; Boomerang - RIGHT
     200.  00:49D4                          ; mask 0 - 28h
     201.  00:49D4                          ;DB $00,$00,$00,$03,$07,$0F,$1E,$1E
     202.  00:49D4                          ;DB $1E,$1C,$1E,$0F,$07,$03,$00,$00
     203.  00:49D4                          ;DB $00,$00,$00,$00,$80,$C0,$E0,$F0
     204.  00:49D4                          ;DB $F8,$70,$E0,$C0,$80,$00,$00,$00
     205.  00:49D4                          DB $00,$00,$00,$01,$01,$01,$01,$01
     205.  00:49D4  00 00 00 01 01 01 01 01 
     206.  00:49DC                          DB $01,$01,$07,$07,$01,$01,$00,$00
     206.  00:49DC  01 01 07 07 01 01 00 00 
     207.  00:49E4                          DB $00,$00,$00,$80,$80,$80,$80,$80
     207.  00:49E4  00 00 00 80 80 80 80 80 
     208.  00:49EC                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     208.  00:49EC  80 80 E0 E0 80 80 00 00 
     209.  00:49F4                      
     210.  00:49F4                      
     211.  00:49F4                          ; Boomerang - LEFT
     212.  00:49F4                          ; mask 0 - 2Ch
     213.  00:49F4                          ;DB $00,$00,$00,$00,$01,$03,$07,$0F
     214.  00:49F4                          ;DB $1F,$0E,$07,$03,$01,$00,$00,$00
     215.  00:49F4                          ;DB $00,$00,$00,$C0,$E0,$F0,$78,$78
     216.  00:49F4                          ;DB $78,$38,$78,$F0,$E0,$C0,$00,$00
     217.  00:49F4                          DB $00,$00,$00,$01,$01,$01,$01,$01
     217.  00:49F4  00 00 00 01 01 01 01 01 
     218.  00:49FC                          DB $01,$01,$07,$07,$01,$01,$00,$00
     218.  00:49FC  01 01 07 07 01 01 00 00 
     219.  00:4A04                          DB $00,$00,$00,$80,$80,$80,$80,$80
     219.  00:4A04  00 00 00 80 80 80 80 80 
     220.  00:4A0C                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     220.  00:4A0C  80 80 E0 E0 80 80 00 00 
     221.  00:4A14                      
     222.  00:4A14                      SPRITE_COLOR_TABLE:       
     223.  00:4A14                           ;DOWN 1
     224.  00:4A14                          ; attr 0
     225.  00:4A14                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     225.  00:4A14  06 06 0B 0B 0B 0B 0B 0B 
     226.  00:4A1C                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     226.  00:4A1C  0C 0C 0B 0B 04 04 04 04 
     227.  00:4A24                          ; attr 1
     228.  00:4A24                          DB $00,$00,$46,$46,$46,$44,$46,$46
     228.  00:4A24  00 00 46 46 46 44 46 46 
     229.  00:4A2C                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     229.  00:4A2C  4B 4B 44 44 42 42 42 00 
     230.  00:4A34                          ; attr 2
     231.  00:4A34                          DB $00,$00,$00,$00,$00,$42,$00,$00
     231.  00:4A34  00 00 00 00 00 42 00 00 
     232.  00:4A3C                          DB $00,$46,$00,$00,$00,$00,$00,$00
     232.  00:4A3C  00 46 00 00 00 00 00 00 
     233.  00:4A44                               
     234.  00:4A44                          ; Cada posición ha de corresponder con la tabla de atributos    
     235.  00:4A44                      
     236.  00:4A44                          ; Fantasma
     237.  00:4A44                          DB $08,$08,$08,$08,$08,$08,$08,$08
     237.  00:4A44  08 08 08 08 08 08 08 08 
     238.  00:4A4C                          DB $08,$08,$08,$08,$08,$08,$08,$08
     238.  00:4A4C  08 08 08 08 08 08 08 08 
     239.  00:4A54                          ; Fantasma
     240.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     241.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     242.  00:4A54                          ; Fantasma
     243.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     244.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     245.  00:4A54                          ; Fantasma
     246.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     247.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08    
     248.  00:4A54                          ; Me ahorro los colores del fantasma, la 4a posicion del array de atributos será para el disparo
     249.  00:4A54                          ; Boomerang
     250.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     251.  00:4A54                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     252.  00:4A54                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     252.  00:4A54  00 00 00 0F 0F 0F 0F 0F 
     253.  00:4A5C                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     253.  00:4A5C  0F 0F 0F 0F 0F 0F 00 00 
     254.  00:4A64                          ; Boomerang
     255.  00:4A64                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     256.  00:4A64                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     257.  00:4A64                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     257.  00:4A64  00 00 00 0F 0F 0F 0F 0F 
     258.  00:4A6C                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     258.  00:4A6C  0F 0F 0F 0F 0F 0F 00 00 
     259.  00:4A74                      
     260.  00:4A74                      SPRITE_COLOR_P1_UP:
     261.  00:4A74                          ;UP 1
     262.  00:4A74                          ; attr 0
     263.  00:4A74                          DB $06,$06,$06,$06,$06,$06,$06,$06
     263.  00:4A74  06 06 06 06 06 06 06 06 
     264.  00:4A7C                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     264.  00:4A7C  0C 0C 0B 0B 04 04 04 04 
     265.  00:4A84                          ; attr 1
     266.  00:4A84                          DB $00,$00,$00,$00,$00,$00,$00,$00
     266.  00:4A84  00 00 00 00 00 00 00 00 
     267.  00:4A8C                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     267.  00:4A8C  46 4B 44 44 42 42 42 00 
     268.  00:4A94                          ; attr 2
     269.  00:4A94                          DB $00,$00,$00,$00,$00,$00,$00,$00
     269.  00:4A94  00 00 00 00 00 00 00 00 
     270.  00:4A9C                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     270.  00:4A9C  00 46 42 42 00 00 00 00 
     271.  00:4AA4                          
     272.  00:4AA4                      SPRITE_COLOR_P1_DOWN:
     273.  00:4AA4                          ;DOWN 1
     274.  00:4AA4                          ; attr 0
     275.  00:4AA4                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     275.  00:4AA4  06 06 0B 0B 0B 0B 0B 0B 
     276.  00:4AAC                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     276.  00:4AAC  0C 0C 0B 0B 04 04 04 04 
     277.  00:4AB4                          ; attr 1
     278.  00:4AB4                          DB $00,$00,$46,$46,$46,$44,$46,$46
     278.  00:4AB4  00 00 46 46 46 44 46 46 
     279.  00:4ABC                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     279.  00:4ABC  4B 4B 44 44 42 42 42 00 
     280.  00:4AC4                          ; attr 2
     281.  00:4AC4                          DB $00,$00,$00,$00,$00,$42,$00,$00
     281.  00:4AC4  00 00 00 00 00 42 00 00 
     282.  00:4ACC                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     282.  00:4ACC  00 46 00 00 00 00 00 00 
     283.  00:4AD4                      
     284.  00:4AD4                      SPRITE_COLOR_P1_LEFT:
     285.  00:4AD4                          ; attr 0
     286.  00:4AD4                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     286.  00:4AD4  06 06 0B 0B 0B 0B 0B 0B 
     287.  00:4ADC                          DB $0C,$0C,$0B,$04,$04,$04,$04,$04
     287.  00:4ADC  0C 0C 0B 04 04 04 04 04 
     288.  00:4AE4                          ; attr 1
     289.  00:4AE4                          DB $00,$00,$46,$46,$44,$46,$46,$46
     289.  00:4AE4  00 00 46 46 44 46 46 46 
     290.  00:4AEC                          DB $4B,$4B,$44,$42,$42,$42,$00,$00
     290.  00:4AEC  4B 4B 44 42 42 42 00 00 
     291.  00:4AF4                          ; attr 2
     292.  00:4AF4                          DB $00,$00,$00,$00,$42,$00,$00,$00
     292.  00:4AF4  00 00 00 00 42 00 00 00 
     293.  00:4AFC                          DB $46,$46,$42,$00,$00,$00,$00,$00 
     293.  00:4AFC  46 46 42 00 00 00 00 00 
     294.  00:4B04                          
     295.  00:4B04                      SPRITE_COLOR_P1_RIGHT:
     296.  00:4B04                          ; attr 0
     297.  00:4B04                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     297.  00:4B04  06 06 0B 0B 0B 0B 0B 0B 
     298.  00:4B0C                          DB $0C,$0C,$0B,$04,$04,$04,$04,$04
     298.  00:4B0C  0C 0C 0B 04 04 04 04 04 
     299.  00:4B14                          ; attr 1
     300.  00:4B14                          DB $00,$00,$46,$46,$44,$46,$46,$46
     300.  00:4B14  00 00 46 46 44 46 46 46 
     301.  00:4B1C                          DB $4B,$4B,$44,$42,$42,$42,$00,$00
     301.  00:4B1C  4B 4B 44 42 42 42 00 00 
     302.  00:4B24                          ; attr 2
     303.  00:4B24                          DB $00,$00,$00,$00,$42,$00,$00,$00
     303.  00:4B24  00 00 00 00 42 00 00 00 
     304.  00:4B2C                          DB $46,$46,$42,$00,$00,$00,$00,$00
     304.  00:4B2C  46 46 42 00 00 00 00 00 
     305.  00:4B34                              
     306.  00:4B34                      mapa:      
     307.  00:4B34                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     307.  00:4B34  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     307.  00:4B44  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     308.  00:4B54                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     308.  00:4B54  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     308.  00:4B64  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     309.  00:4B74                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     309.  00:4B74  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     309.  00:4B84  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     310.  00:4B94                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     310.  00:4B94  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     310.  00:4BA4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     311.  00:4BB4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     311.  00:4BB4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     311.  00:4BC4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     312.  00:4BD4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     312.  00:4BD4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     312.  00:4BE4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     313.  00:4BF4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     313.  00:4BF4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     313.  00:4C04  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     314.  00:4C14                            db #01,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     314.  00:4C14  01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 
     314.  00:4C24  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     315.  00:4C34                            
     316.  00:4C34                            db #01,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     316.  00:4C34  01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 
     316.  00:4C44  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     317.  00:4C54                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#01        
     317.  00:4C54  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     317.  00:4C64  00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 01 
     318.  00:4C74                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#01        
     318.  00:4C74  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     318.  00:4C84  00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 01 
     319.  00:4C94                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     319.  00:4C94  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     319.  00:4CA4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     320.  00:4CB4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     320.  00:4CB4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     320.  00:4CC4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     321.  00:4CD4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     321.  00:4CD4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     321.  00:4CE4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     322.  00:4CF4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     322.  00:4CF4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     322.  00:4D04  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     323.  00:4D14                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     323.  00:4D14  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     323.  00:4D24  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     324.  00:4D34                      
     325.  00:4D34                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     325.  00:4D34  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     325.  00:4D44  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     326.  00:4D54                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     326.  00:4D54  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     326.  00:4D64  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     327.  00:4D74                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     327.  00:4D74  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     327.  00:4D84  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     328.  00:4D94                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     328.  00:4D94  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     328.  00:4DA4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     329.  00:4DB4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     329.  00:4DB4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     329.  00:4DC4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     330.  00:4DD4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     330.  00:4DD4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     330.  00:4DE4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     331.  00:4DF4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     331.  00:4DF4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     331.  00:4E04  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     332.  00:4E14                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     332.  00:4E14  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     332.  00:4E24  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     333.  00:4E34                            
     334.  00:4E34                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     334.  00:4E34  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     334.  00:4E44  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     335.  00:4E54                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     335.  00:4E54  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     335.  00:4E64  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     336.  00:4E74                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     336.  00:4E74  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     336.  00:4E84  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     337.  00:4E94                            
     338.  00:4E94                      
     339.  00:4E94                      mapa2:      
     340.  00:4E94                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#01,#00   
     340.  00:4E94  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     340.  00:4EA4  01 01 01 01 01 01 01 01 01 01 01 01 00 00 01 00 
     341.  00:4EB4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     341.  00:4EB4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     341.  00:4EC4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     342.  00:4ED4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     342.  00:4ED4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     342.  00:4EE4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     343.  00:4EF4                            db #01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00   
     343.  00:4EF4  01 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     343.  00:4F04  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 
     344.  00:4F14                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     344.  00:4F14  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     344.  00:4F24  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     345.  00:4F34                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     345.  00:4F34  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     345.  00:4F44  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     346.  00:4F54                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#01,#00   
     346.  00:4F54  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     346.  00:4F64  01 01 01 01 01 01 01 01 01 01 01 01 00 00 01 00 
     347.  00:4F74                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00
     347.  00:4F74  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     347.  00:4F84  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     348.  00:4F94                            
     349.  00:4F94                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     349.  00:4F94  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     349.  00:4FA4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     350.  00:4FB4                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00   
     350.  00:4FB4  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     350.  00:4FC4  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 
     351.  00:4FD4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     351.  00:4FD4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     351.  00:4FE4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     352.  00:4FF4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     352.  00:4FF4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     352.  00:5004  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     353.  00:5014                            db #01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00   
     353.  00:5014  01 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     353.  00:5024  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 
     354.  00:5034                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     354.  00:5034  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     354.  00:5044  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     355.  00:5054                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00  
     355.  00:5054  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     355.  00:5064  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     356.  00:5074                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#01,#00         
     356.  00:5074  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     356.  00:5084  01 01 01 01 01 01 01 01 01 01 01 01 00 00 01 00 
     357.  00:5094                      
     358.  00:5094                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00  
     358.  00:5094  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     358.  00:50A4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     359.  00:50B4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00  
     359.  00:50B4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     359.  00:50C4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     360.  00:50D4                            db #01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00   
     360.  00:50D4  01 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     360.  00:50E4  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 
     361.  00:50F4                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     361.  00:50F4  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     361.  00:5104  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     362.  00:5114                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00        
     362.  00:5114  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     362.  00:5124  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 
     363.  00:5134                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#01,#00   
     363.  00:5134  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     363.  00:5144  01 01 01 01 01 01 01 01 01 01 01 01 00 00 01 00 
     364.  00:5154                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#00        
     364.  00:5154  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     364.  00:5164  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 
     365.  00:5174                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#00        
     365.  00:5174  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     365.  00:5184  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 
     366.  00:5194                      
     367.  00:5194                      mapa0:
     368.  00:5194                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     368.  00:5194  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     368.  00:51A4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     369.  00:51B4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     369.  00:51B4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     369.  00:51C4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     370.  00:51D4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     370.  00:51D4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     370.  00:51E4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     371.  00:51F4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     371.  00:51F4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     371.  00:5204  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     372.  00:5214                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     372.  00:5214  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     372.  00:5224  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     373.  00:5234                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     373.  00:5234  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     373.  00:5244  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     374.  00:5254                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     374.  00:5254  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     374.  00:5264  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     375.  00:5274                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     375.  00:5274  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     375.  00:5284  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     376.  00:5294                            
     377.  00:5294                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     377.  00:5294  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     377.  00:52A4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     378.  00:52B4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     378.  00:52B4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     378.  00:52C4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     379.  00:52D4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     379.  00:52D4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     379.  00:52E4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     380.  00:52F4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     380.  00:52F4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     380.  00:5304  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     381.  00:5314                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     381.  00:5314  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     381.  00:5324  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     382.  00:5334                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     382.  00:5334  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     382.  00:5344  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     383.  00:5354                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     383.  00:5354  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     383.  00:5364  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     384.  00:5374                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     384.  00:5374  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     384.  00:5384  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     385.  00:5394                            
     386.  00:5394                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     386.  00:5394  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     386.  00:53A4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     387.  00:53B4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     387.  00:53B4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     387.  00:53C4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     388.  00:53D4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     388.  00:53D4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     388.  00:53E4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     389.  00:53F4                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     389.  00:53F4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     389.  00:5404  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     390.  00:5414                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     390.  00:5414  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     390.  00:5424  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     391.  00:5434                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     391.  00:5434  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     391.  00:5444  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  00:5454                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     392.  00:5454  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  00:5464  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     393.  00:5474                            db #00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00        
     393.  00:5474  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     393.  00:5484  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:5494                            
     512   00:5494                      
     513   00:5494  (01)                 PAGE 1
     514   01:8000                      ; CODE O NO
     515   01:8000                      
     516   01:8000  (02)                 PAGE 2
     517   02:8000                       
     518   02:8000  (03)                 PAGE 3
     519   03:8000                      
     520   03:8000  (04)                 PAGE 4
     521   04:8000  (05)                 PAGE 5
     522   05:8000  (06)                 PAGE 6
     523   06:8000                      
     524   06:8000  (07)                 PAGE 7
     525   07:8000                      CEMENTER
     526   07:8000  (4000)               INCBIN "gfx\CEMENTER0.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     527   07:C000  (08)                 PAGE 8
     528   08:8000  (2A00)               INCBIN "gfx\CEMENTER0.SC5",#4007			; Cada página tiene 16K = 4000h 
     529   08:AA00  (09)                 PAGE 9
     530   09:8000                      GRAPHIC
     531   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     532   09:C000  (0A)                 PAGE 10
     533   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     534   0A:C000                      
     535   0A:C000  (0B)                 PAGE 11
     536   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     537   0B:C000                      
     538   0B:C000  (0C)                 PAGE 12
     539   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     540   0C:9400                      
     541   0C:9400  (0D)                 PAGE 13
     542   0D:8000                      
     543   0D:8000  (0E)                 PAGE 14
     544   0E:8000                      
     545   0E:8000  (0F)                 PAGE 15
     546   0F:C000                      ;---------------------------------------------------------
     547   0F:C000                      ; Variables
     548   0F:C000                      ;---------------------------------------------------------
     549   0F:C000                      	
     550   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     551   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     552   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     553   0F:C000                      ;ETC
     554   0F:C000                      ;
     555   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000  00                  JIFFY_TEMP DB $00
       2.  0F:C001  00                  CHAR_SPEED_X DB $00
       3.  0F:C002  00                  CHAR_SPEED_Y DB $00
       4.  0F:C003  00                  CHAR_SPEED_X_GHOST DB $00
       5.  0F:C004  00 (1)              CHAR_GHOST_DEAD DS 1
       6.  0F:C005  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
       7.  0F:C006  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
       8.  0F:C007  00 (1)              CHAR_NEW_DIR_MAIN DS 1
       9.  0F:C008  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT
      10.  0F:C009  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      11.  0F:C00A  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      12.  0F:C00B  00 (1)              CHAR_SPEED_SHOOT DS 1
      13.  0F:C00C                      SPRITE_ATTRS:
      14.  0F:C00C  00 (128)                DS 128
      15.  0F:C08C                      SLOTBIOS:
      16.  0F:C08C  00 (1)                  DS 1
      17.  0F:C08D                      SLOTGAME:
      18.  0F:C08D  00 (1)                  DS 1
      19.  0F:C08E                      SLOTRAM:
      20.  0F:C08E  00 (1)                  DS 1
      21.  0F:C08F                      SPRITE_PTR_REPLACE:
      22.  0F:C08F  00 (2)                  DS 2
      23.  0F:C091                      SPRITE_COLOR_REPLACE:
      24.  0F:C091  00 (2)                  DS 2
      25.  0F:C093                      BITMAP:
      26.  0F:C093  00 (2)                  DS 2
     556   0F:C095  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F   CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000041 X DISSCR
00:00000044 X ENASCR
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000004   MAX_CHAR_STEPS
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:00004010   check_spr_collision
00:0000401D   check_spr_collision.no_collision
00:00004020   get_bloque_en_X_Y
00:00004040   SetVdp_Write
00:0000405C   Set212Lines
00:00004068   ClearVram_MSX2
00:00004072   ClearVram_MSX2.loop_2
00:00004074   ClearVram_MSX2.loop_1
00:00004076   ClearVram_MSX2.loop
00:00004083   opening_screen
00:000040A6 X load_screen
00:000040C9   load_screen2
00:000040EB   _vdpsetvramwr
00:000040FC X _vdpsetvramwr14
00:00004105   GETSLOT
00:0000411C   EXIT
00:0000411E   SETPAGES32K
00:00004123   NOPRET
00:00004131   SET_SCREEN5_MODE
00:00004153   DUMP_SPR_ALL
00:00004178   DUMP_SPR_ATTS
00:00004185   DUMP_SPR_P1
00:000041A2 X SETPAGES48K
00:000041B6 X SETGAMEPAGE0
00:000041BC X RESTOREBIOS
00:000041BF   SETPAGE0
00:000041ED   SETPAGE0.SETPRIMARY
00:000041F1   START
00:00004227   INIT_CHARS_VARS
00:00004283   MAIN_LOOP
00:000042A5   MAIN_LOOP.CHANGE_DIR_RIGHT
00:000042B2   MAIN_LOOP.CHANGE_DIR_LEFT
00:000042BB   MAIN_LOOP.check_pattern
00:000042D2   MAIN_LOOP.change_pattern_L
00:000042D9   MAIN_LOOP.check_pattern_RIGHT
00:000042E8   MAIN_LOOP.change_pattern_R
00:000042EC   MAIN_LOOP.continue
00:000042FC   MAIN_LOOP.MOVE_SHOOT_RIGHT
00:00004304   MAIN_LOOP.MOVE_SHOOT_LEFT
00:00004309   MAIN_LOOP.CHECK_SHOOT_DISTANCE
00:0000432F   MAIN_LOOP.ADD_DISTANCE
00:0000433F   MAIN_LOOP.KILL_GHOST
00:00004348   MAIN_LOOP.HIDE_SHOOT
00:00004353   MAIN_LOOP.check_KB
00:00004379   SHOOT_MAIN_CHAR
00:000043A7   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000043B7   SHOOT_MAIN_CHAR.CONTINUE
00:000043BD   move_up
00:000043F3   move_down
00:0000442A   move_right
00:00004477   move_left
00:000044C4   CHECK_DIRECTION_MAIN
00:000044E6   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000044F8   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:0000450A   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000451C   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:0000452E   CHECK_DIRECTION_MAIN.FINISH
00:00004535   UPDATE_MOVEMENT
00:0000457D   UPDATE_MOVEMENT.SET_SPR_1P_2
00:0000458A   UPDATE_MOVEMENT.NO_CHAR_PATTERN_CHANGE
00:00004590   NO_MOVEMENT
00:00004594   SPRITE_P1_UP
00:00004654   SPRITE_P1_DOWN
00:00004714   SPRITE_P1_LEFT
00:000047D4   SPRITE_P1_RIGHT
00:00004894   SPRITE_PATTERN
00:00004A14   SPRITE_COLOR_TABLE
00:00004A74   SPRITE_COLOR_P1_UP
00:00004AA4   SPRITE_COLOR_P1_DOWN
00:00004AD4   SPRITE_COLOR_P1_LEFT
00:00004B04   SPRITE_COLOR_P1_RIGHT
00:00004B34   mapa
00:00004E94 X mapa2
00:00005194 X mapa0
07:00008000   CEMENTER
09:00008000   GRAPHIC
0F:0000C000   JIFFY_TEMP
0F:0000C001   CHAR_SPEED_X
0F:0000C002   CHAR_SPEED_Y
0F:0000C003   CHAR_SPEED_X_GHOST
0F:0000C004   CHAR_GHOST_DEAD
0F:0000C005   CHAR_DIR_GHOST1
0F:0000C006   CHAR_DIR_MAIN
0F:0000C007   CHAR_NEW_DIR_MAIN
0F:0000C008   CHAR_MAIN_SHOOT
0F:0000C009   CHAR_MIN_STEP
0F:0000C00A   CHAR_DISTANCE_SHOOT
0F:0000C00B   CHAR_SPEED_SHOOT
0F:0000C00C   SPRITE_ATTRS
0F:0000C08C   SLOTBIOS
0F:0000C08D   SLOTGAME
0F:0000C08E X SLOTRAM
0F:0000C08F   SPRITE_PTR_REPLACE
0F:0000C091   SPRITE_COLOR_REPLACE
0F:0000C093   BITMAP


 Output: .\bth.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 0000149A

   Address   Length Align   Label
   00004000    5268         check_spr_collision
   00005494       6         
   0000549A   11110       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 00000095

   Address   Length Align   Label
   0000C000     149         JIFFY_TEMP
   0000C095   16235       <empty>
