Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.06.16 - 18:45:12]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:676C                      
       3   00:676C                      ;ROM ASCII16
       4   00:676C                      		defpage	0,0x4000, 0x4000
       5   00:676C                      		defpage	1,0x8000, 0x4000        
       6   00:676C                      		defpage	2..14 ;Here it is determined rom size        
       7   00:676C                              defpage	15,0xC000, 0x4000
       8   00:676C                      
       9   00:676C  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:676C  (00:6000)           _bank1	equ	6000h
      11   00:676C  (00:7000)           _bank2	equ	7000h
      12   00:676C  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:6772  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 99 51 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:0069)           CLRSPR                  equ #0069
       2.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       3.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       4.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       5.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       6.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       7.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       8.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       9.  00:4010  (00:0141)           SNSMAT					equ #0141
      10.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      11.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      12.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      13.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      14.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      15.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      16.  00:4010  (00:0062)           CHGCLR                  equ #0062   ; #F3E9 (Foreground color), #F3EA (Foreground color) #F3EB (border color). 
      19   00:4010                      ;Constantes
      20   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ;counter
       2.  00:4010  (00:006F)           counter_stg1_solved_max equ #6F
       3.  00:4010  (00:005F)           counter_stg2_solved_max equ #5F
       4.  00:4010  (00:005F)           counter_P1_flickering equ #5F
       5.  00:4010                      
       6.  00:4010                      ; pages for DATA
       7.  00:4010                      
       8.  00:4010  (00:0001)           SPR_DATA_PAGE    equ 1
       9.  00:4010  (00:0002)           TILES_PAGE  equ 2
      10.  00:4010                      
      11.  00:4010  (00:0009)           ENTITY_SIZE: EQU 9
      12.  00:4010                      
      13.  00:4010                      ; Sprite Collision
      14.  00:4010                      
      15.  00:4010  (00:000F)           PLAYER_COLLISION_OFFSET_X      equ 15
      16.  00:4010  (00:0010)           PLAYER_COLLISION_OFFSET_Y      equ 16
      17.  00:4010  (00:000E)           PLAYER_WIDTH                   equ 14
      18.  00:4010  (00:0010)           PLAYER_HEIGHT                  equ 16
      19.  00:4010                      
      20.  00:4010                      ; Offset Entity struct
      21.  00:4010  (00:0001)           ENEMY_X                         equ 1
      22.  00:4010  (00:0002)           ENEMY_Y                         equ 2
      23.  00:4010  (00:0003)           ENTITY_ENERGY                   equ 3
      24.  00:4010  (00:0004)           ENEMY_COLLISION_OFFSET_X        equ 4
      25.  00:4010  (00:0005)           ENEMY_COLLISION_OFFSET_Y        equ 5
      26.  00:4010  (00:0006)           ENEMY_COLLISION_WIDTH           equ 6
      27.  00:4010  (00:0007)           ENEMY_COLLISION_HEIGHT          equ 7
      28.  00:4010  (00:0008)           SPRITENUMBER_SPAT               equ 8
      29.  00:4010  (00:0009)           damage                          equ 9
      30.  00:4010                      
      31.  00:4010                      ; Notes Black Sabbath stg2
      32.  00:4010  (00:0078)           STG2_TILE1_XH    equ 120
      33.  00:4010  (00:0070)           STG2_TILE1_XL    equ 112
      34.  00:4010  (00:0070)           STG2_TILE1_YH    equ 112
      35.  00:4010  (00:0060)           STG2_TILE1_YL    equ 96
      36.  00:4010                      
      37.  00:4010  (00:0081)           STG2_TILE2_XH    equ STG2_TILE3_XH
      38.  00:4010  (00:0079)           STG2_TILE2_XL    equ STG2_TILE3_XL
      39.  00:4010  (00:0070)           STG2_TILE2_YH    equ STG2_TILE1_YH
      40.  00:4010  (00:0060)           STG2_TILE2_YL    equ STG2_TILE1_YL
      41.  00:4010                      
      42.  00:4010  (00:0081)           STG2_TILE3_XH    equ 129
      43.  00:4010  (00:0079)           STG2_TILE3_XL    equ 121
      44.  00:4010  (00:0090)           STG2_TILE3_YH    equ 144
      45.  00:4010  (00:0080)           STG2_TILE3_YL    equ 128
      46.  00:4010                      
      47.  00:4010  (00:0071)           STG2_MURRAY_X     equ 113
      48.  00:4010  (00:00AC)           STG2_MURRAY_YH    equ 172
      49.  00:4010  (00:009C)           STG2_MURRAY_YL    equ 156
      50.  00:4010  (00:0005)           STG2_DELAY_CYCLES   equ 5
      51.  00:4010                      
      52.  00:4010                      ; VDP Const
      53.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
      54.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
      55.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
      56.  00:4010                      
      57.  00:4010                      ; Energy             lv1, lv2, lv3, lv4, lv5, lv6
      58.  00:4010  18 20 28 30 38 40   ANDY_MAX_ENERGY:  db  24, 32, 40, 48, 56, 64
      59.  00:4016                      
      60.  00:4016  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
      61.  00:4016  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
      62.  00:4016  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
      63.  00:4016                      
      64.  00:4016  (00:00C2)           FIRST_LINE_DLG_BOX_v2   equ 194
      65.  00:4016  (00:00CA)           SEC_LINE_DLG_BOX_v2   equ 202
      66.  00:4016                      
      67.  00:4016  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      68.  00:4016  (00:0007)           KB_RIGHT 				equ 7
      69.  00:4016  (00:0006)           KB_DOWN 				equ 6
      70.  00:4016  (00:0005)           KB_UP 					equ	5        
      71.  00:4016  (00:0004)           KB_LEFT 				equ	4
      72.  00:4016  (00:0003)           KB_DEL 					equ	3
      73.  00:4016  (00:0000)           KB_SPACE				equ	0
      74.  00:4016                      
      75.  00:4016  (00:0001)           MOV_SPEED				equ 1
      76.  00:4016  (00:0001)           MOV_SPEED_GHOST			equ 1
      77.  00:4016  (00:0003)           MOV_SPEED_SHOOT         equ 3
      78.  00:4016  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      79.  00:4016  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      80.  00:4016  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      81.  00:4016  (00:FFE8)           REG9SAV                 equ #FFE8
      82.  00:4016  (00:0098)           PORT_0                  equ 0x98
      83.  00:4016  (00:0099)           PORT_1                  equ 0x99
      84.  00:4016  (00:009A)           PORT_2                  equ 0x9a
      85.  00:4016  (00:009B)           PORT_3                  equ 0x9b
      86.  00:4016                      
      87.  00:4016  (00:F3E0)           RG15AV  equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      88.  00:4016  (00:F3E9)           FORCLR  equ $F3E9 ; Foreground colour
      89.  00:4016  (00:F3EA)           BAKCLR  equ $f3ea ; Background colour
      90.  00:4016  (00:F3EB)           BDRCLR  equ $f3eb ; Border colour
      91.  00:4016                      
      92.  00:4016  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      93.  00:4016  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      94.  00:4016  (00:0049)           GUS_TOMB_STG1_X             equ 73
      95.  00:4016  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      96.  00:4016  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      97.  00:4016  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      98.  00:4016  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      99.  00:4016                      
     100.  00:4016  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
     101.  00:4016  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
     102.  00:4016  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
     103.  00:4016  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
     104.  00:4016  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
     105.  00:4016  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
     106.  00:4016  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
     107.  00:4016                      
     108.  00:4016  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
     109.  00:4016  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
     110.  00:4016  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
     111.  00:4016  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
     112.  00:4016  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
     113.  00:4016                      
      21   00:4016                          include "include\BTH_strings.asm"
       1.  00:4016  1C 40 38 40 54 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:401C                      ; Caben 23 caracteres en cada línea
       3.  00:401C                      string01M: db 'MIKE:                      ',0
       3.  00:401C  4D 49 4B 45 3A 20 20 20 20 20 20 20 20 20 20 20 
       3.  00:402C  20 20 20 20 20 20 20 20 20 20 20 00 
       4.  00:4038                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:4038  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:4048  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4054  00                  string03M: db 0
       6.  00:4055                      
       7.  00:4055  5B 40 76 40 91 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:405B                      ; Caben 23 caracteres en cada línea
       9.  00:405B                      string01J: db 'JOHN:                     ',0
       9.  00:405B  4A 4F 48 4E 3A 20 20 20 20 20 20 20 20 20 20 20 
       9.  00:406B  20 20 20 20 20 20 20 20 20 20 00 
      10.  00:4076                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4076  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4086  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:4091  00                  string03J: db 0
      12.  00:4092                      
      13.  00:4092  98 40 B5 40 D2 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4098                      ; Caben 23 caracteres en cada línea
      15.  00:4098                      string01G: db 'GUS:                        ',0
      15.  00:4098  47 55 53 3A 20 20 20 20 20 20 20 20 20 20 20 20 
      15.  00:40A8  20 20 20 20 20 20 20 20 20 20 20 20 00 
      16.  00:40B5                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:40B5  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:40C5  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:40D2  00                  string03G: db  0
      18.  00:40D3                      
      19.  00:40D3  D9 40 F4 40 0F 41   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:40D9                      ; Caben 23 caracteres en cada línea
      21.  00:40D9                      string01Sk: db 'MURRAY:                   ',0
      21.  00:40D9  4D 55 52 52 41 59 3A 20 20 20 20 20 20 20 20 20 
      21.  00:40E9  20 20 20 20 20 20 20 20 20 20 00 
      22.  00:40F4                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:40F4  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:4104  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:410F  00                  string03Sk: db 0
      24.  00:4110                      
      25.  00:4110  16 41 2F 41 48 41   stg1_puzzle_solved_strings: dw string01P, string02P, string03P
      26.  00:4116                      ; Caben 23 caracteres en cada línea
      27.  00:4116                      string01P: db 'ANDY:                   ',0
      27.  00:4116  41 4E 44 59 3A 20 20 20 20 20 20 20 20 20 20 20 
      27.  00:4126  20 20 20 20 20 20 20 20 00 
      28.  00:412F                      string02P: db 'LA PUERTA SE HA ABIERTO!',0
      28.  00:412F  4C 41 20 50 55 45 52 54 41 20 53 45 20 48 41 20 
      28.  00:413F  41 42 49 45 52 54 4F 21 00 
      29.  00:4148  00                  string03P: db 0
      30.  00:4149                      
      31.  00:4149  4F 41 61 41 6C 41   game_over_strings: dw string01GO, string02GO, string03GO
      32.  00:414F                      ; Caben 23 caracteres en cada línea
      33.  00:414F                      string01GO: db 'AAAAHHHHHHHHHH!!!',0
      33.  00:414F  41 41 41 41 48 48 48 48 48 48 48 48 48 48 21 21 
      33.  00:415F  21 00 
      34.  00:4161                      string02GO: db 'GAME OVER!',0
      34.  00:4161  47 41 4D 45 20 4F 56 45 52 21 00 
      35.  00:416C  00                  string03GO: db '',0
      36.  00:416D                      
      37.  00:416D  73 41 8D 41 A7 41   stg2_skull_strings: dw string01Sk2, string02Sk2, string03Sk2
      38.  00:4173                      ; Caben 23 caracteres en cada línea
      39.  00:4173                      string01Sk2: db 'MURRAY: BLACK SABBATH    ',0
      39.  00:4173  4D 55 52 52 41 59 3A 20 42 4C 41 43 4B 20 53 41 
      39.  00:4183  42 42 41 54 48 20 20 20 20 00 
      40.  00:418D                      string02Sk2: db 'TE MOSTRARA EL CAMINO    ',0
      40.  00:418D  54 45 20 4D 4F 53 54 52 41 52 41 20 45 4C 20 43 
      40.  00:419D  41 4D 49 4E 4F 20 20 20 20 00 
      41.  00:41A7  00                  string03Sk2: db '',0
      22   00:41A8                      ; Funciones auxiliares
      23   00:41A8                      	include "include\BTH_func.asm"
       1.  00:41A8                      ;
       2.  00:41A8                      ; EnemyCollisionCheck
       3.  00:41A8                      ;
       4.  00:41A8                      ;   Calculates whether a collision occurs between the player
       5.  00:41A8                      ;   and an enemy
       6.  00:41A8                      ;
       7.  00:41A8                      ; IN: iy - pointer to enemy data record
       8.  00:41A8                      ; OUT: Carry set if collision
       9.  00:41A8                      ; CHANGES: A, B, C, E
      10.  00:41A8                      ;
      11.  00:41A8                      EnemyCollisionCheck:
      12.  00:41A8  DD 7E 01                    ld      a,(ix+1)                     ; read player x-coordinate          [14]
      13.  00:41AB  C6 0F                       add     PLAYER_COLLISION_OFFSET_X       ; add offset for smaller rectangle  [8]
      14.  00:41AD  47                          ld      b,a                             ;                                   [5]
      15.  00:41AE  0E 0E                       ld      c,PLAYER_WIDTH                  ; set the width of the player       [8]
      16.  00:41B0                              
      17.  00:41B0  FD 7E 01                    ld      a,(iy+ENEMY_X)                  ; read enemy x-coordinate           [21]
      18.  00:41B3  FD 86 04                    add     (iy+ENEMY_COLLISION_OFFSET_X)   ; add offset for smaller rectangle  [21]
      19.  00:41B6  FD 5E 06                    ld      e,(iy+ENEMY_COLLISION_WIDTH)    ; set the width of the enemy        [21]
      20.  00:41B9                      
      21.  00:41B9  CD CE 41                    call    .check                          ;                                   [18]
      22.  00:41BC  D0                          ret     nc                              ;                                   [12/6]
      23.  00:41BD                      
      24.  00:41BD  DD 7E 00                    ld      a,(ix)                     ; read player y-coordinate          [14]
      25.  00:41C0  C6 10                       add     PLAYER_COLLISION_OFFSET_Y       ; add offset for smaller rectangle  [8]
      26.  00:41C2  47                          ld      b,a                             ;                                   [5]
      27.  00:41C3  0E 10                       ld      c,PLAYER_HEIGHT                 ; set the height of the player      [8]
      28.  00:41C5                              
      29.  00:41C5  FD 7E 02                    ld      a,(iy+ENEMY_Y)                  ; read enemy y-coordinate           [21]
      30.  00:41C8  FD 86 05                    add     (iy+ENEMY_COLLISION_OFFSET_Y)   ; add offset for smaller rectangle  [21]
      31.  00:41CB  FD 5E 07                    ld      e,(iy+ENEMY_COLLISION_HEIGHT)    ; set the height of the enemy      [21]
      32.  00:41CE                      
      33.  00:41CE                      .check:
      34.  00:41CE  90                          sub     b               ; calculate x2-x1              [5]
      35.  00:41CF  30 04                       jr      nc,.other       ; don't jump if x2<x1          [13/8]
      36.  00:41D1  ED 44                       neg                     ; use negative value           [10]
      37.  00:41D3  93                          sub     e               ; compare with size 1          [5]
      38.  00:41D4  C9                          ret                     ; return result                [11]
      39.  00:41D5                      .other:
      40.  00:41D5  91                          sub     c               ; compare with size 1          [5]
      41.  00:41D6  C9                          ret                     ; return result                [11]
      42.  00:41D7                      
      43.  00:41D7                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
      44.  00:41D7                      ;Entrada:
      45.  00:41D7                      ;   B - Y SPR1
      46.  00:41D7                      ;   C - X SPR1
      47.  00:41D7                      
      48.  00:41D7                      ;   D - Y SPR2
      49.  00:41D7                      ;   E - X SPR2
      50.  00:41D7                      ;Salida:
      51.  00:41D7                      ;   A - colision
      52.  00:41D7                      ;Modifica:
      53.  00:41D7                      ;   A
      54.  00:41D7                      check_spr_collision:        
      55.  00:41D7  78                          LD A,B          ; a = Y SPR1
      56.  00:41D8  BA                          CP D
      57.  00:41D9  C2 E4 41                    JP NZ,.no_collision
      58.  00:41DC                      
      59.  00:41DC  79                          LD A,C          ; a = X SPR1
      60.  00:41DD  BB                          CP E
      61.  00:41DE  C2 E4 41                    JP NZ,.no_collision
      62.  00:41E1                      
      63.  00:41E1  3E 01                       LD A,1
      64.  00:41E3  C9                          RET
      65.  00:41E4                      .no_collision
      66.  00:41E4  3E 00                   LD A,0
      67.  00:41E6  C9                      RET
      68.  00:41E7                      
      69.  00:41E7                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      70.  00:41E7                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      71.  00:41E7                      ;Entrada:
      72.  00:41E7                      ;   d - X
      73.  00:41E7                      ;   e - y
      74.  00:41E7                      ;Salida:
      75.  00:41E7                      ;   a - bloque
      76.  00:41E7                      ;Modifica:
      77.  00:41E7                      ;   a, hl, de
      78.  00:41E7                      get_bloque_en_X_Y:
      79.  00:41E7                              ;(y/8)*32+(x/8)
      80.  00:41E7  7B                          ld a,e      ;a=y
      81.  00:41E8  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      82.  00:41EE  26 00                       ld h,0
      83.  00:41F0  6F                          ld l,a      ;hl=y/8
      84.  00:41F1  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      85.  00:41F6                      
      86.  00:41F6  7A                          ld a,d      ;a=x
      87.  00:41F7  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      88.  00:41FD  16 00                       ld d,0
      89.  00:41FF  5F                          ld e,a      ;de=x/8
      90.  00:4200  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      91.  00:4201                      
      92.  00:4201  ED 5B 03 C1                 ld de,(MAPA)
      93.  00:4205  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      94.  00:4206                      
      95.  00:4206  7E                          ld a,[hl]
      96.  00:4207  C9                          ret
      97.  00:4208                      
      98.  00:4208                      ; SCREEN 8
      99.  00:4208                      SetVdp_Write:
     100.  00:4208                      
     101.  00:4208                      	; transform address from 
     102.  00:4208                      	;
     103.  00:4208                      	; |           Register A            |           Register H            |           Register L            |
     104.  00:4208                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     105.  00:4208                      	;
     106.  00:4208                      	; to
     107.  00:4208                      	;
     108.  00:4208                      	; |           Register A            |           Register H            |           Register L            |
     109.  00:4208                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     110.  00:4208  CB 04                   rlc     h
     111.  00:420A  17                      rla
     112.  00:420B  CB 04                   rlc     h
     113.  00:420D  17                      rla
     114.  00:420E  CB 3C                   srl     h
     115.  00:4210  CB 3C                   srl     h
     116.  00:4212                      
     117.  00:4212  F3                      di
     118.  00:4213                      	    ; write bits a14-16 of address to R#14
     119.  00:4213  D3 99               	    out     (PORT_1), a
     120.  00:4215  3E 8E               	    ld      a, 14 + 128
     121.  00:4217  D3 99               	    out     (PORT_1), a
     122.  00:4219                      
     123.  00:4219                      	    ; write the other address bits to VDP PORT_1
     124.  00:4219  7D                  	    ld      a, l
     125.  00:421A  00                  	    nop
     126.  00:421B  D3 99               	    out     (PORT_1), a
     127.  00:421D  7C                  	    ld      a, h
     128.  00:421E  F6 40               	    or      64
     129.  00:4220  FB                      ei
     130.  00:4221  D3 99                   out     (PORT_1),a
     131.  00:4223  C9                      ret
     132.  00:4224                      
     133.  00:4224                      Set212Lines:
     134.  00:4224                              ; set LN (bit 7) of R#9 to 1
     135.  00:4224  3A E8 FF                    ld      a, (REG9SAV)
     136.  00:4227  F6 80                       or      10000000b
     137.  00:4229  47                          ld      b, a
     138.  00:422A  0E 09                       ld      c, 9            ; register #
     139.  00:422C  CD 47 00                    call    WRTVDP
     140.  00:422F  C9                          ret
     141.  00:4230                      
     142.  00:4230                      ClearVram_MSX2:
     143.  00:4230  AF                          xor     a           ; set vram write base address
     144.  00:4231  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     145.  00:4234  CD 08 42                    call    SetVdp_Write
     146.  00:4237  AF                          xor		a
     147.  00:4238                      
     148.  00:4238                          ; TODO: 
     149.  00:4238                          ;   use VDP command (currently is taking almost 1 second)
     150.  00:4238                          ;   disable screen/sprites (should I ??)
     151.  00:4238                      
     152.  00:4238                          ; clear all 128kb of VRAM
     153.  00:4238  16 02               	ld		d, 2		; 2 repetitions
     154.  00:423A                      .loop_2:
     155.  00:423A  0E 00               	ld		c, 0		; 256 repetitions
     156.  00:423C                      .loop_1:
     157.  00:423C  06 00               	ld		b, 0		; 256 repetitions
     158.  00:423E                      .loop:
     159.  00:423E  D3 98               	out		(PORT_0), a
     160.  00:4240  10 FC               	djnz	.loop
     161.  00:4242  0D                  	dec		c
     162.  00:4243  C2 3C 42            	jp		nz, .loop_1
     163.  00:4246  15                  	dec		d
     164.  00:4247  C2 3A 42            	jp		nz, .loop_2
     165.  00:424A                      
     166.  00:424A  C9                  	ret
     167.  00:424B                      
     168.  00:424B                      ; MEGAROM
     169.  00:424B                      
     170.  00:424B                      opening_screen		
     171.  00:424B  0E 00               		ld		c,0
     172.  00:424D  11 00 00            		ld		de,0
     173.  00:4250  CD 90 42            		call	_vdpsetvramwr
     174.  00:4253  1E 04               		ld	e,4
     175.  00:4255  3E 09               		ld	a, :GRAPHIC
     176.  00:4257  57                  		ld	d,a
     177.  00:4258  32 00 70            2:		ld	(_bank2),a
     178.  00:425B  21 00 80            		ld	hl,GRAPHIC
     179.  00:425E  01 98 00            		ld	bc,0x98
     180.  00:4261  3E 40               		ld	a,32*2
     181.  00:4263  ED B3               1:		otir
     182.  00:4265  3D                  		dec	a
     183.  00:4266  20 FB               		jr	nz,1b
     184.  00:4268  14                  		inc	d
     185.  00:4269  7A                  		ld	a,d
     186.  00:426A  1D                  		dec	e
     187.  00:426B  20 EB               		jr	nz,2b
     188.  00:426D  C9                  		ret 
     189.  00:426E                      
     190.  00:426E                      load_screen
     191.  00:426E  0E 00               		ld		c,0
     192.  00:4270  11 00 00            		ld		de,0
     193.  00:4273  CD 90 42            		call	_vdpsetvramwr
     194.  00:4276  1E 02               		ld	e,2					; #pages
     195.  00:4278  78                  		ld	a, b			; 1st page bitmap
     196.  00:4279  57                  		ld	d,a
     197.  00:427A  32 00 70            2:		ld	(_bank2),a
     198.  00:427D  2A 05 C1            		ld	hl,(BITMAP)		; Bitmap address
     199.  00:4280  01 98 00            		ld	bc,0x98
     200.  00:4283  3E 40               		ld	a,64
     201.  00:4285  ED B3               1:		otir
     202.  00:4287  3D                  		dec	a
     203.  00:4288  20 FB               		jr	nz,1b
     204.  00:428A  14                  		inc	d
     205.  00:428B  7A                  		ld	a,d
     206.  00:428C  1D                  		dec	e
     207.  00:428D  20 EB               		jr	nz,2b
     208.  00:428F  C9                  		ret 
     209.  00:4290                      
     210.  00:4290                      ;Set VDP for writing at address CDE (17-bit) 
     211.  00:4290                      
     212.  00:4290                      _vdpsetvramwr:
     213.  00:4290  79                  	ld a,c
     214.  00:4291  CB 02               	rlc d
     215.  00:4293  17                  	rla
     216.  00:4294  CB 02               	rlc d
     217.  00:4296  17                  	rla
     218.  00:4297  CB 3A               	srl d ; primo shift, il secondo dopo la out
     219.  00:4299                      
     220.  00:4299  D3 99               	out (0x99),a ;set bits 14-16
     221.  00:429B  3E 8E               	ld a,14+128
     222.  00:429D  D3 99               	out (0x99),a
     223.  00:429F  CB 3A               	srl d ; secondo shift.     
     224.  00:42A1                      _vdpsetvramwr14
     225.  00:42A1  7B                  	ld a,e ;set bits 0-7
     226.  00:42A2  D3 99               	out (0x99),a
     227.  00:42A4  7A                  	ld a,d ;set bits 8-13
     228.  00:42A5  F6 40               	or 0x40 ; + write access
     229.  00:42A7  D3 99               	out (0x99),a
     230.  00:42A9  C9                  	ret
     231.  00:42AA                      
     232.  00:42AA                      
     233.  00:42AA                      
     234.  00:42AA                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     235.  00:42AA                      		; -----------------------------------------------------
     236.  00:42AA                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     237.  00:42AA                      		; -----------------------------------------------------
     238.  00:42AA                      
     239.  00:42AA                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     240.  00:42AA                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     241.  00:42AA                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     242.  00:42AA                      
     243.  00:42AA                      		; --- VARIABLES EN RAM NECESARIAS ---
     244.  00:42AA                      		; NINGUNA
     245.  00:42AA                      
     246.  00:42AA                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     247.  00:42AA                      		; --- Entrada: a = SLOT                                           ---
     248.  00:42AA                      		; --- Salida: a = valor para ENASLT                               ---
     249.  00:42AA                      		; --- AUTOR: Konamiman                                            ---
     250.  00:42AA  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     251.  00:42AC  4F                  		ld	c,a				; c = slot de la pagina
     252.  00:42AD  06 00               		ld	b,0				; bc = slot de la pagina
     253.  00:42AF  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     254.  00:42B2  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     255.  00:42B3  7E                  		ld	a,(hl)				; Tomamos el valor
     256.  00:42B4  E6 80               		and	$80				; Si el bit mas alto es cero...
     257.  00:42B6  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     258.  00:42B8                      		; --- El slot esta expandido ---
     259.  00:42B8  B1                  		or	c				; Slot basico en el lugar adecuado
     260.  00:42B9  4F                  		ld	c,a				; Guardamos el valor en c
     261.  00:42BA  23                  		inc	hl				; Incrementamos hl una...
     262.  00:42BB  23                  		inc	hl				; ...dos...
     263.  00:42BC  23                  		inc	hl				; ...tres...
     264.  00:42BD  23                  		inc	hl				; ...cuatro veces
     265.  00:42BE  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     266.  00:42BF  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     267.  00:42C1  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     268.  00:42C2  C9                  		ret					; Volvemos
     269.  00:42C3                      
     270.  00:42C3                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     271.  00:42C3  3E C9               		ld	a,$C9				; Codigo de RET
     272.  00:42C5  32 C8 42            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     273.  00:42C8  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     274.  00:42C9                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     275.  00:42C9  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     276.  00:42CC  0F                  		rrca					; Rotamos a la derecha...
     277.  00:42CD  0F                  		rrca					; ...dos veces
     278.  00:42CE  CD AA 42            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     279.  00:42D1  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     280.  00:42D3  C3 24 00            		jp	ENASLT ;ENASLT
     281.  00:42D6                      
     282.  00:42D6                      SET_SCREEN5_MODE:
     283.  00:42D6                           ;Cambiamos el modo de pantalla
     284.  00:42D6                          ; BASIC: COLOR 15,1,1
     285.  00:42D6                          ; Establecer los colores
     286.  00:42D6  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     287.  00:42D9  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     288.  00:42DB  23                  	inc hl ; FORCLR+1
     289.  00:42DC  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     290.  00:42DE  23                  	inc hl ; FORCLR+2
     291.  00:42DF  36 0F               	ld [hl],15 ; Color del borde 1=negro
     292.  00:42E1                      
     293.  00:42E1  3E 05                   ld  a,5     
     294.  00:42E3  CD 5F 00                call CHGMOD 
     295.  00:42E6  CD 69 00            	call CLRSPR
     296.  00:42E9                      
     297.  00:42E9  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     298.  00:42EC                          ;En or 0+0=0, 0+1=1, 1+1=1
     299.  00:42EC                          ;En and 0+0=0, 0+1=0, 1+1=1
     300.  00:42EC                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     301.  00:42EC                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     302.  00:42EC                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     303.  00:42EC  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     304.  00:42EE                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     305.  00:42EE  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     306.  00:42F0                      
     307.  00:42F0  47                      ld b,a ;carga en b el valor de a
     308.  00:42F1  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     309.  00:42F3  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     310.  00:42F6  AF                      xor a ; ld a,0
     311.  00:42F7  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     312.  00:42FA  C9                      ret
     313.  00:42FB                      
     314.  00:42FB                      DUMP_SPR_ALL:
     315.  00:42FB                      	;ld	a, BTH_DATA			; page 
     316.  00:42FB                      	;ld	(_bank2),a
     317.  00:42FB                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:42FB                      
     319.  00:42FB  21 00 83                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:42FE  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:4301  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     322.  00:4304  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     323.  00:4307                      
     324.  00:4307                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     325.  00:4307                      
     326.  00:4307  21 7A C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     327.  00:430A  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     328.  00:430D  01 80 00                ld bc,128; 4 x #Sprites
     329.  00:4310  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     330.  00:4313                      
     331.  00:4313                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     332.  00:4313                      
     333.  00:4313  21 E0 85                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     334.  00:4316  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     335.  00:4319  01 70 01                ld bc,16*23; 16 x #Sprites
     336.  00:431C  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     337.  00:431F  C9                      ret
     338.  00:4320                      	
     339.  00:4320                      load_tiles_vdp
     340.  00:4320                          
     341.  00:4320                      	;ld hl, TILES1
     342.  00:4320  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente la dirección de inicio de la VRAM          
     343.  00:4323  01 00 38                ld bc,128*16*7; 128*16*(#lineas)
     344.  00:4326  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     345.  00:4329  C9                  	ret 
     346.  00:432A                      
     347.  00:432A                      load_font_vdp    
     348.  00:432A  21 BC 8E            	ld hl, FONT
     349.  00:432D  11 00 6A                ld de, 0x6A00; la rutina necesita haber cargado previamente la dirección de inicio de la VRAM          
     350.  00:4330  01 00 08                ld bc,128*16; 32 lineas
     351.  00:4333  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     352.  00:4336  C9                  	ret 
     353.  00:4337                      
     354.  00:4337                      DUMP_SPR_ATTS:
     355.  00:4337                      
     356.  00:4337                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------	
     357.  00:4337                      
     358.  00:4337  21 7A C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     359.  00:433A  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     360.  00:433D  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     361.  00:4340  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     362.  00:4343                      
     363.  00:4343                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     364.  00:4343                      ;	JP Z,.DUMP_SPR_ATTS_END
     365.  00:4343  2A 01 C1            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     366.  00:4346  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     367.  00:4349  C5                      PUSH BC
     368.  00:434A  01 30 00            	ld bc,16*3; 16 x #Sprites
     369.  00:434D  CD 5C 00                call  LDIRVM 
     370.  00:4350  C1                  	POP BC
     371.  00:4351                      
     372.  00:4351                      .DUMP_SPR_ATTS_END:
     373.  00:4351  C9                      ret
     374.  00:4352                      
     375.  00:4352                      DUMP_SPR_P1:    
     376.  00:4352                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------	
     377.  00:4352  2A FD C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     378.  00:4355  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     379.  00:4358  C5                      PUSH BC
     380.  00:4359  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     381.  00:435C  CD 5C 00                call  LDIRVM 
     382.  00:435F  C1                  	POP BC
     383.  00:4360                      
     384.  00:4360                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     385.  00:4360                      
     386.  00:4360  2A FF C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     387.  00:4363  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     388.  00:4366  C5                      PUSH BC
     389.  00:4367  01 30 00            	ld bc,16*3; 16 x #Sprites
     390.  00:436A  CD 5C 00                call  LDIRVM 
     391.  00:436D  C1                  	POP BC
     392.  00:436E                      	
     393.  00:436E                      
     394.  00:436E                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     395.  00:436E                      ;    xor a
     396.  00:436E                      ;	di			; set VRAM address to 1800h
     397.  00:436E                      ;	out (99h),a		; lower byte 00
     398.  00:436E                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     399.  00:436E                      ;	ei
     400.  00:436E                      ;	out (99h),a		; note that this is protected by the ei instruction
     401.  00:436E                      ;   push BC
     402.  00:436E                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     403.  00:436E                      ;	ld hl,(SPRITE_PTR_REPLACE)
     404.  00:436E                      
     405.  00:436E                      ;.loop1:
     406.  00:436E                      ;	outi			; send the data (HL) to port 98h 
     407.  00:436E                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     408.  00:436E                      ;   POP BC
     409.  00:436E                      
     410.  00:436E                          ; Replace 2 entries in sprite color table
     411.  00:436E                      ;    xor a
     412.  00:436E                      ;	di			; set VRAM address to 1800h
     413.  00:436E                      ;	out (99h),a		; lower byte 00
     414.  00:436E                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     415.  00:436E                      ;	ei
     416.  00:436E                      ;	out (99h),a		; note that this is protected by the ei instruction
     417.  00:436E                       ;   push BC
     418.  00:436E                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     419.  00:436E                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     420.  00:436E                      	
     421.  00:436E                      ;.loop2:
     422.  00:436E                      ;	outi			; send the data (HL) to port 98h 
     423.  00:436E                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     424.  00:436E                       ;   POP BC
     425.  00:436E                      
     426.  00:436E  C9                      ret
     427.  00:436F                      
     428.  00:436F                      SetPalette:
     429.  00:436F  AF                  	xor a
     430.  00:4370  F3                  	di
     431.  00:4371  D3 99               	out ($99),a
     432.  00:4373  3E 90               	ld a,16+128
     433.  00:4375  D3 99               	out ($99),a
     434.  00:4377  01 9A 20            	ld bc,$209A
     435.  00:437A  ED B3               	otir
     436.  00:437C  FB                  	ei
     437.  00:437D  C9                  	ret
      24   00:437E                          include "include\BTH_animate.asm"
       1.  00:437E                      ; Movimiento P1
       2.  00:437E                      move_up:
       3.  00:437E  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:437F                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:437F  AF                      XOR A
       6.  00:4380  32 75 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:4383  CD B1 44                CALL CHECK_DIRECTION_MAIN
       8.  00:4386                      
       9.  00:4386  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:4389  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:438B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:438C  DD 7E 01                ld a,(ix+1)
      13.  00:438F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:4390  CD E7 41                call get_bloque_en_X_Y
      15.  00:4393  FE 01                   cp 1
      16.  00:4395  CA AA 45                jp z,NO_MOVEMENT
      17.  00:4398                      
      18.  00:4398  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:439B  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:439D  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:439E  DD 7E 01                ld a,(ix+1)
      22.  00:43A1  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:43A3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:43A4  CD E7 41                call get_bloque_en_X_Y
      25.  00:43A7  FE 01                   cp 1
      26.  00:43A9  CA AA 45                jp z,NO_MOVEMENT
      27.  00:43AC                            
      28.  00:43AC  3E FF               	LD A, -MOV_SPEED
      29.  00:43AE  32 6C C0            	LD (CHAR_SPEED_Y), A
      30.  00:43B1  CD 3E 45                call UPDATE_MOVEMENT   
      31.  00:43B4  CD 66 45                call ANIMATE_P1
      32.  00:43B7                          ;JP no_arrows
      33.  00:43B7  C9                      ret
      34.  00:43B8                      
      35.  00:43B8                      move_down:
      36.  00:43B8  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:43B9                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:43B9  3E 01                   LD A,$01
      39.  00:43BB  32 75 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:43BE  CD B1 44                CALL CHECK_DIRECTION_MAIN
      41.  00:43C1                      
      42.  00:43C1  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      43.  00:43C4  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:43C6  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:43C7  DD 7E 01                ld a,(ix+1)
      46.  00:43CA  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:43CB  CD E7 41                call get_bloque_en_X_Y
      48.  00:43CE  FE 01                   cp 1
      49.  00:43D0  CA AA 45                jp z,NO_MOVEMENT
      50.  00:43D3                      
      51.  00:43D3  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      52.  00:43D6  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:43D8  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:43D9  DD 7E 01                ld a,(ix+1)
      55.  00:43DC  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:43DE  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:43DF  CD E7 41                call get_bloque_en_X_Y
      58.  00:43E2  FE 01                   cp 1
      59.  00:43E4  CA AA 45                jp z,NO_MOVEMENT
      60.  00:43E7                          
      61.  00:43E7  3E 01                   LD A, MOV_SPEED
      62.  00:43E9  32 6C C0            	LD (CHAR_SPEED_Y), A
      63.  00:43EC  CD 3E 45                call UPDATE_MOVEMENT    
      64.  00:43EF  CD 66 45                call ANIMATE_P1
      65.  00:43F2                          ;JP no_arrows
      66.  00:43F2  C9                      ret
      67.  00:43F3                      
      68.  00:43F3                      move_right:
      69.  00:43F3  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:43F4                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:43F4  CB 69                   BIT KB_UP, C
      72.  00:43F6  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:43F8  CB 71                   BIT KB_DOWN, C
      74.  00:43FA  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:43FC  3E 03                   LD A,$03
      76.  00:43FE  32 75 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:4401  CD B1 44                CALL CHECK_DIRECTION_MAIN
      78.  00:4404                      
      79.  00:4404                      .KB_UPDOWN_PRESSED:
      80.  00:4404  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:4407  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:4409  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:440A  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      84.  00:440D  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:440F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:4410  CD E7 41                call get_bloque_en_X_Y
      87.  00:4413  FE 01                   cp 1
      88.  00:4415  CA AA 45                jp z,NO_MOVEMENT
      89.  00:4418                      
      90.  00:4418                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:4418  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:441B  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:441D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:441E  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      95.  00:4421  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:4423  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:4424  CD E7 41                call get_bloque_en_X_Y
      98.  00:4427  FE 01                   cp 1
      99.  00:4429  CA AA 45                jp z,NO_MOVEMENT
     100.  00:442C                      
     101.  00:442C                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:442C  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:442F  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:4431  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:4432  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     106.  00:4435  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:4437  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:4438  CD E7 41                call get_bloque_en_X_Y
     109.  00:443B  FE 01                   cp 1
     110.  00:443D  CA AA 45                jp z,NO_MOVEMENT    
     111.  00:4440                          
     112.  00:4440  3E 01                   LD A, MOV_SPEED
     113.  00:4442  32 6B C0            	LD (CHAR_SPEED_X), A
     114.  00:4445  CD 3E 45                call UPDATE_MOVEMENT
     115.  00:4448  CB 69                   BIT KB_UP, C
     116.  00:444A  C8                      ret z
     117.  00:444B  CB 71                   BIT KB_DOWN, C
     118.  00:444D  C8                      ret z
     119.  00:444E  CD 66 45                call ANIMATE_P1    
     120.  00:4451  C9                      ret
     121.  00:4452                      
     122.  00:4452                      move_left:
     123.  00:4452  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:4453                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:4453  CB 69                   BIT KB_UP, C
     126.  00:4455  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:4457  CB 71                   BIT KB_DOWN, C
     128.  00:4459  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:445B  3E 02                   LD A,$02
     130.  00:445D  32 75 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:4460  CD B1 44                CALL CHECK_DIRECTION_MAIN
     132.  00:4463                      .KB_UPDOWN_PRESSED:
     133.  00:4463  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:4466  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:4468  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:4469  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     137.  00:446C  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:446E  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:446F  CD E7 41                call get_bloque_en_X_Y
     140.  00:4472  FE 01                   cp 1
     141.  00:4474  CA AA 45                jp z,NO_MOVEMENT
     142.  00:4477                      
     143.  00:4477                          ;Miramos el tile inferior parte central del personaje
     144.  00:4477  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:447A  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:447C  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:447D  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     148.  00:4480  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:4482  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:4483  CD E7 41                call get_bloque_en_X_Y
     151.  00:4486  FE 01                   cp 1
     152.  00:4488  CA AA 45                jp z,NO_MOVEMENT
     153.  00:448B                      
     154.  00:448B                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:448B  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:448E  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:4490  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:4491  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     159.  00:4494  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:4496  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:4497  CD E7 41                call get_bloque_en_X_Y
     162.  00:449A  FE 01                   cp 1
     163.  00:449C  CA AA 45                jp z,NO_MOVEMENT
     164.  00:449F                      
     165.  00:449F  3E FF                   LD A, -MOV_SPEED
     166.  00:44A1  32 6B C0            	LD (CHAR_SPEED_X), A
     167.  00:44A4  CD 3E 45                call UPDATE_MOVEMENT     
     168.  00:44A7  CB 69                   BIT KB_UP, C
     169.  00:44A9  C8                      ret z
     170.  00:44AA  CB 71                   BIT KB_DOWN, C
     171.  00:44AC  C8                      ret z
     172.  00:44AD  CD 66 45                call ANIMATE_P1    
     173.  00:44B0  C9                      ret
     174.  00:44B1                      
     175.  00:44B1                      CHECK_DIRECTION_MAIN:
     176.  00:44B1  3A 74 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:44B4  2A 75 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:44B7  BD                  	CP L		            	                ;Son iguales?
     179.  00:44B8  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:44B9  3A 75 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:44BC  FE 01                   CP $01
     182.  00:44BE  CA D3 44                JP Z,.SET_DIR_DOWN
     183.  00:44C1  FE 00                   CP $00
     184.  00:44C3  CA E8 44                JP Z,.SET_DIR_UP
     185.  00:44C6  FE 03                   CP $03
     186.  00:44C8  CA 12 45                JP Z,.SET_DIR_RIGHT
     187.  00:44CB  FE 02                   CP $02
     188.  00:44CD  CA FD 44                JP Z,.SET_DIR_LEFT
     189.  00:44D0  C3 27 45                JP .FINISH
     190.  00:44D3                          
     191.  00:44D3                      .SET_DIR_DOWN:    
     192.  00:44D3  21 C0 80                ld hl, SPRITE_P1_DOWN
     193.  00:44D6  22 FD C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:44D9                          
     195.  00:44D9  21 C0 86                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:44DC  22 FF C0                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:44DF  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:44E2  CD 52 43                CALL DUMP_SPR_P1    
     199.  00:44E5                      
     200.  00:44E5  C3 27 45                JP .FINISH
     201.  00:44E8                      
     202.  00:44E8                      .SET_DIR_UP:
     203.  00:44E8  21 00 80                ld hl, SPRITE_P1_UP
     204.  00:44EB  22 FD C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:44EE                          
     206.  00:44EE  21 60 86                ld hl, SPRITE_COLOR_P1_UP
     207.  00:44F1  22 FF C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:44F4  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:44F7  CD 52 43                CALL DUMP_SPR_P1
     210.  00:44FA  C3 27 45                JP .FINISH
     211.  00:44FD                      
     212.  00:44FD                      .SET_DIR_LEFT:    
     213.  00:44FD  21 80 81                ld hl, SPRITE_P1_LEFT
     214.  00:4500  22 FD C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:4503                          
     216.  00:4503  21 BC 8D                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:4506  22 FF C0                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:4509  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:450C  CD 52 43                CALL DUMP_SPR_P1   
     220.  00:450F  C3 27 45                JP .FINISH
     221.  00:4512                      
     222.  00:4512                      .SET_DIR_RIGHT:
     223.  00:4512  21 40 82                ld hl, SPRITE_P1_RIGHT
     224.  00:4515  22 FD C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:4518                          
     226.  00:4518  21 20 87                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:451B  22 FF C0                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:451E  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:4521                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:4521  CD 52 43                CALL DUMP_SPR_P1
     231.  00:4524  C3 27 45                JP .FINISH
     232.  00:4527                      
     233.  00:4527                      .FINISH:
     234.  00:4527  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:4528  32 77 C0                LD (CHAR_MIN_STEP), A   
     236.  00:452B  3A 75 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:452E  32 74 C0                LD (CHAR_DIR_MAIN),A    
     238.  00:4531                      
     239.  00:4531                          ; ponemos el primer frame del sprite
     240.  00:4531  DD 36 02 00             LD (ix+2), $00
     241.  00:4535  DD 36 06 04             LD (ix+6), $04
     242.  00:4539  DD 36 0A 08             LD (ix+10), $08
     243.  00:453D                          ;CALL DUMP_SPR_ATTS
     244.  00:453D  C9                      RET
     245.  00:453E                      
     246.  00:453E                      UPDATE_MOVEMENT:
     247.  00:453E  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     248.  00:4541  2A 6C C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:4544  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:4545                          
     251.  00:4545  DD 77 00            	LD (ix), A
     252.  00:4548  DD 77 04                LD (ix+4), A
     253.  00:454B  DD 77 08                LD (ix+8), A
     254.  00:454E                      	
     255.  00:454E  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     256.  00:4551  2A 6B C0            	LD HL, (CHAR_SPEED_X)
     257.  00:4554  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     258.  00:4555                          
     259.  00:4555  DD 77 01            	LD (ix+1), A
     260.  00:4558  DD 77 05                LD (ix+5), A
     261.  00:455B  DD 77 09                LD (ix+9), A	
     262.  00:455E                      
     263.  00:455E  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     264.  00:455F  32 6B C0                LD (CHAR_SPEED_X),A
     265.  00:4562  32 6C C0                LD (CHAR_SPEED_Y),A	
     266.  00:4565  C9                      RET
     267.  00:4566                      
     268.  00:4566                      ANIMATE_P1:
     269.  00:4566                          ; Animación/pasos de personaje	
     270.  00:4566  3A 77 C0                LD A, (CHAR_MIN_STEP)
     271.  00:4569  FE 05                   CP MAX_CHAR_STEPS
     272.  00:456B  C2 A4 45                JP NZ,.NO_CHAR_PATTERN_CHANGE
     273.  00:456E                          
     274.  00:456E  AF                      XOR A
     275.  00:456F  32 77 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     276.  00:4572  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     277.  00:4575  FE 00                   CP $00
     278.  00:4577  CA 8D 45                JP Z,.SET_SPR_1P_2
     279.  00:457A  DD 36 02 00             LD (ix+2), $00
     280.  00:457E  DD 36 06 04             LD (ix+6), $04
     281.  00:4582  DD 36 0A 08             LD (ix+10), $08
     282.  00:4586  2A FF C0                ld hl, (SPRITE_COLOR_REPLACE)
     283.  00:4589  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     284.  00:458C  C9                      ret
     285.  00:458D                      
     286.  00:458D                      .SET_SPR_1P_2:
     287.  00:458D  DD 36 02 0C             LD (ix+2), $0C
     288.  00:4591  DD 36 06 10             LD (ix+6), $10
     289.  00:4595  DD 36 0A 14             LD (ix+10), $14
     290.  00:4599                              
     291.  00:4599  2A FF C0                ld HL, (SPRITE_COLOR_REPLACE)
     292.  00:459C  11 30 00                ld DE,48
     293.  00:459F  19                      ADD HL, DE
     294.  00:45A0  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     295.  00:45A3                          ;ld a, 0
     296.  00:45A3  C9                  	ret
     297.  00:45A4                      
     298.  00:45A4                      .NO_CHAR_PATTERN_CHANGE    
     299.  00:45A4  C6 01                   ADD 1
     300.  00:45A6  32 77 C0                LD (CHAR_MIN_STEP), A    
     301.  00:45A9  C9                      ret
     302.  00:45AA                      
     303.  00:45AA                      NO_MOVEMENT:    
     304.  00:45AA  C9                      ret
     305.  00:45AB                      
     306.  00:45AB                      MOVE_SHOOT:
     307.  00:45AB  3A 76 C0                LD A,(CHAR_MAIN_SHOOT)    
     308.  00:45AE  FE 01                   CP $01
     309.  00:45B0  CA DB 45                JP Z,.MOVE_SHOOT_LEFT
     310.  00:45B3  FE 02                   CP $02
     311.  00:45B5  CA C3 45                JP Z,.MOVE_SHOOT_RIGHT
     312.  00:45B8  FE 03                   CP $03
     313.  00:45BA  CA CB 45                JP Z,.MOVE_SHOOT_UP    
     314.  00:45BD  FE 04                   CP $04
     315.  00:45BF  CA D3 45                JP Z,.MOVE_SHOOT_DOWN
     316.  00:45C2  C9                      RET
     317.  00:45C3                      
     318.  00:45C3                      .MOVE_SHOOT_RIGHT:        
     319.  00:45C3  3E 03                   LD A, MOV_SPEED_SHOOT
     320.  00:45C5  32 79 C0            	LD (CHAR_SPEED_SHOOT), A    
     321.  00:45C8  C3 E0 45                JP .CHECK_SHOOT_DISTANCE
     322.  00:45CB                      
     323.  00:45CB                      .MOVE_SHOOT_UP:        
     324.  00:45CB  3E FD                   LD A, -MOV_SPEED_SHOOT
     325.  00:45CD  32 79 C0            	LD (CHAR_SPEED_SHOOT), A    
     326.  00:45D0  C3 E0 45                JP .CHECK_SHOOT_DISTANCE
     327.  00:45D3                      
     328.  00:45D3                      .MOVE_SHOOT_DOWN:
     329.  00:45D3  3E 03                   LD A, MOV_SPEED_SHOOT
     330.  00:45D5  32 79 C0            	LD (CHAR_SPEED_SHOOT), A    
     331.  00:45D8  C3 E0 45                JP .CHECK_SHOOT_DISTANCE
     332.  00:45DB                      
     333.  00:45DB                      .MOVE_SHOOT_LEFT:    
     334.  00:45DB  3E FD                   LD A, -MOV_SPEED_SHOOT
     335.  00:45DD  32 79 C0            	LD (CHAR_SPEED_SHOOT), A    
     336.  00:45E0                      
     337.  00:45E0                      .CHECK_SHOOT_DISTANCE:
     338.  00:45E0                          ; Miramos si va a izq o der
     339.  00:45E0  3A 76 C0                LD A,(CHAR_MAIN_SHOOT)    
     340.  00:45E3  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     341.  00:45E5  D2 F5 45                JP NC,.ADD_SHOOT_Y
     342.  00:45E8                          ; Movemos el disparo
     343.  00:45E8  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     344.  00:45EB  2A 79 C0            	LD HL, (CHAR_SPEED_SHOOT)
     345.  00:45EE  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     346.  00:45EF  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     347.  00:45F2  C3 FF 45                JP .ADD_DISTANCE
     348.  00:45F5                      .ADD_SHOOT_Y
     349.  00:45F5                          ; Movemos el disparo
     350.  00:45F5  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     351.  00:45F8  2A 79 C0            	LD HL, (CHAR_SPEED_SHOOT)
     352.  00:45FB  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     353.  00:45FC  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     354.  00:45FF                      
     355.  00:45FF                      .ADD_DISTANCE:
     356.  00:45FF  3A 78 C0                LD A,(CHAR_DISTANCE_SHOOT)
     357.  00:4602  C6 03                   ADD MOV_SPEED_SHOOT
     358.  00:4604  32 78 C0                LD (CHAR_DISTANCE_SHOOT),A    
     359.  00:4607  FE 30                   CP MAX_DISTANCE_SHOOT
     360.  00:4609  C0                      RET NZ
     361.  00:460A                      
     362.  00:460A                      .HIDE_SHOOT:
     363.  00:460A  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     364.  00:460E  AF                      XOR A
     365.  00:460F  32 76 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     366.  00:4612  32 78 C0                LD (CHAR_DISTANCE_SHOOT),A
     367.  00:4615  C9                      RET
     368.  00:4616                      
     369.  00:4616                      SHOOT_MAIN_CHAR:    
     370.  00:4616  3A 76 C0                LD A, (CHAR_MAIN_SHOOT)
     371.  00:4619  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     372.  00:461B  C8                      RET Z;,MAIN_LOOP
     373.  00:461C  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     374.  00:461E  C8                      RET Z;,MAIN_LOOP
     375.  00:461F  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     376.  00:4621  C8                      RET Z;,MAIN_LOOP
     377.  00:4622  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     378.  00:4624  C8                      RET Z;,MAIN_LOOP
     379.  00:4625                      
     380.  00:4625  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     381.  00:4629                      
     382.  00:4629  DD 7E 00                LD A, (ix)          
     383.  00:462C  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     384.  00:462F                      
     385.  00:462F  3A 74 C0                LD A, (CHAR_DIR_MAIN)
     386.  00:4632  FE 03                   CP $03
     387.  00:4634  CA 50 46                JP Z,.SHOOT_RIGHT
     388.  00:4637  FE 00                   CP $00
     389.  00:4639  CA 5F 46                JP Z,.SHOOT_UP
     390.  00:463C  FE 01                   CP $01
     391.  00:463E  CA 72 46                JP Z,.SHOOT_DOWN
     392.  00:4641                          ; SHOOT LEFT
     393.  00:4641  3E 01                   LD A,$01                ; SHOOT LEFT
     394.  00:4643  32 76 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     395.  00:4646  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     396.  00:4649  21 F4 FF            	LD HL, -12
     397.  00:464C  85                  	ADD L
     398.  00:464D                          
     399.  00:464D  C3 82 46                JP .CONTINUE
     400.  00:4650                      
     401.  00:4650                      .SHOOT_RIGHT:    
     402.  00:4650  3E 02                   LD A,$02
     403.  00:4652  32 76 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     404.  00:4655                          
     405.  00:4655  DD 7E 01                LD A, (ix+1)			;cargamos la X
     406.  00:4658  21 0C 00            	LD HL, 12
     407.  00:465B  85                  	ADD L
     408.  00:465C  C3 82 46                JP .CONTINUE
     409.  00:465F                      
     410.  00:465F                      .SHOOT_UP:
     411.  00:465F  3E 03                   LD A,$03
     412.  00:4661  32 76 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     413.  00:4664                          
     414.  00:4664                          ; Sumamos el desplazamiento a la Y
     415.  00:4664  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     416.  00:4667  D6 10                   SUB 16
     417.  00:4669  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     418.  00:466C                          ;LD (ix+17), D
     419.  00:466C  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     420.  00:466F  C3 82 46                JP .CONTINUE
     421.  00:4672                      
     422.  00:4672                      .SHOOT_DOWN
     423.  00:4672  3E 04               	LD A,$04
     424.  00:4674  32 76 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     425.  00:4677                          
     426.  00:4677                          ; Sumamos el desplazamiento a la Y
     427.  00:4677  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     428.  00:467A  C6 10                   ADD 16
     429.  00:467C  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     430.  00:467F                          ;LD (ix+17), D
     431.  00:467F  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     432.  00:4682                      
     433.  00:4682                      .CONTINUE:
     434.  00:4682                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     435.  00:4682  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     436.  00:4685                          ;jp MAIN_LOOP
     437.  00:4685  C9                      ret
     438.  00:4686                      
     439.  00:4686                      BOUNCE_ANDY:    
     440.  00:4686  21 8C 8D                ld hl, SPRITE_COLOR_P1_RED
     441.  00:4689  22 FF C0                ld (SPRITE_COLOR_REPLACE), HL
     442.  00:468C  22 01 C1                ld (SPRITE_COLOR_REPLACE2), HL
     443.  00:468F                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     444.  00:468F  CD 52 43                CALL DUMP_SPR_P1
     445.  00:4692                      
     446.  00:4692  DD 7E 00                LD A, (ix)
     447.  00:4695  C6 10                   ADD 16
     448.  00:4697  DD 77 00                LD (ix), A
     449.  00:469A  DD 77 04                LD (ix+4), A
     450.  00:469D  DD 77 08                LD (ix+8), A
     451.  00:46A0                      
     452.  00:46A0  C9                      ret
      25   00:46A1                      	include "include\VDP.asm"
       1.  00:46A1                      ; Offset commands registers
       2.  00:46A1  (00:0000)           VDP_SX		 EQU 0
       3.  00:46A1  (00:0002)           VDP_SY		 EQU 2
       4.  00:46A1  (00:0004)           VDP_DX		 EQU 4
       5.  00:46A1  (00:0006)           VDP_DY		 EQU 6
       6.  00:46A1  (00:0008)           VDP_NX		 EQU 8
       7.  00:46A1  (00:000A)           VDP_NY		 EQU 10
       8.  00:46A1  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:46A1  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:46A1  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:46A1                      
      12.  00:46A1                      ; Offset for sprite commands from memory
      13.  00:46A1                      
      14.  00:46A1                      ; VDP Commands
      15.  00:46A1  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:46A1  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:46A1  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:46A1  (00:0098)           CMD_LMMM	equ	$98
      19.  00:46A1  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:46A1  (00:0080)           CMD_LMMV    equ $80
      21.  00:46A1                      
      22.  00:46A1                      ; Logical operations
      23.  00:46A1  (00:0000)           VDP_IMP		equ	%0000
      24.  00:46A1  (00:0001)           VDP_AND		equ	%0001
      25.  00:46A1  (00:0002)           VDP_OR		equ	%0010
      26.  00:46A1  (00:0003)           VDP_XOR		equ	%0011
      27.  00:46A1  (00:0004)           VDP_NOT		equ	%0100
      28.  00:46A1  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:46A1  (00:0009)           VDP_TAND	equ	%1001
      30.  00:46A1  (00:000A)           VDP_TOR		equ	%1010
      31.  00:46A1  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:46A1  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:46A1                      
      34.  00:46A1                      ; Tile
      35.  00:46A1  (00:0010)           ENERGY_WIDTH		equ	16		; Blood drops
      36.  00:46A1  (00:0020)           TILE_WIDTH			equ	32
      37.  00:46A1  (00:0010)           TILE_HEIGHT			equ	16
      38.  00:46A1  (00:0001)           TILES_VDP_PAGE			equ	1		; Page where tiles are stored
      39.  00:46A1  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      40.  00:46A1  (00:0002)           BACK_BUFFER			equ 2		; we will draw to page 1
      41.  00:46A1  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      42.  00:46A1                      
      43.  00:46A1                      ; Tile Map
      44.  00:46A1  (00:0000)           TILENUM_OFFSET	equ 0
      45.  00:46A1  (00:0001)           DX_OFFSET	equ 1
      46.  00:46A1  (00:0002)           DY_OFFSET	equ 2
      47.  00:46A1  (00:0003)           REPS_OFFSET	equ 3
      48.  00:46A1  (00:0004)           TILEMAP_SIZE	equ 4
      49.  00:46A1                      
      50.  00:46A1                      ; Metatiles
      51.  00:46A1  (00:0000)           METATILE_SX		equ 0
      52.  00:46A1  (00:0001)           METATILE_SY		equ 1
      53.  00:46A1  (00:0002)           METATILE_NX		equ 2
      54.  00:46A1  (00:0003)           METATILE_NY		equ 3
      55.  00:46A1  (00:0004)           METATILE_SIZE	equ 4
      56.  00:46A1                      
      57.  00:46A1                      ; Font
      58.  00:46A1  (00:0008)           FONT_HEIGHT			equ 8
      59.  00:46A1  (00:0008)           FONT_WIDTH			equ 8
      60.  00:46A1  (00:00D4)           FONT_Y_OFFSET_1L	equ 212
      61.  00:46A1  (00:00DC)           FONT_Y_OFFSET_2L	equ 220
      62.  00:46A1                      
      63.  00:46A1                      ; Dialog Box
      64.  00:46A1  (00:0014)           DIAGBOX_HEIGHT	equ 20
      65.  00:46A1  (00:00FF)           DIAGBOX_WIDTH	equ 255
      66.  00:46A1                      
      67.  00:46A1                      ;---------------------------------------------------------------------------
      68.  00:46A1                      ; Init the RAM buffers used to draw a tile, energy and entities
      69.  00:46A1                      ;---------------------------------------------------------------------------
      70.  00:46A1                      initVDPBuffers:
      71.  00:46A1  21 36 4A            		ld	hl,charDatROM
      72.  00:46A4  11 21 C0            		ld	de,charDat
      73.  00:46A7  01 0F 00            		ld	bc,15
      74.  00:46AA  ED B0               		ldir
      75.  00:46AC                      
      76.  00:46AC  21 45 4A            		ld	hl,tileDatROM
      77.  00:46AF  11 30 C0            		ld	de,tileDat
      78.  00:46B2  01 0F 00            		ld	bc,15
      79.  00:46B5  ED B0               		ldir
      80.  00:46B7                      		
      81.  00:46B7  21 54 4A            		ld	hl,tileDatTransROM
      82.  00:46BA  11 3F C0            		ld	de,tileDatTrans
      83.  00:46BD  01 0F 00            		ld	bc,15
      84.  00:46C0  ED B0               		ldir	
      85.  00:46C2                      
      86.  00:46C2  21 63 4A            		ld	hl,energyDatROM
      87.  00:46C5  11 4E C0            		ld	de,energyDat
      88.  00:46C8  01 0F 00            		ld	bc,15
      89.  00:46CB  ED B0               		ldir	
      90.  00:46CD                      
      91.  00:46CD  21 87 51            		ld 	hl, init_playerDAT
      92.  00:46D0  11 05 C0            		ld de, ENTITY_PLAYER_POINTER
      93.  00:46D3  01 09 00            		ld bc,ENTITY_SIZE
      94.  00:46D6  ED B0               		ldir
      95.  00:46D8                      
      96.  00:46D8  21 90 51            		ld 	hl, enemy1_stg1DAT
      97.  00:46DB                      		;add hl, 9			; ENTITY_SIZE
      98.  00:46DB  11 0E C0            		ld de, ENTITY_ENEMY1_POINTER
      99.  00:46DE  01 09 00            		ld bc,ENTITY_SIZE
     100.  00:46E1  ED B0               		ldir
     101.  00:46E3                      
     102.  00:46E3  C9                  		ret
     103.  00:46E4                      
     104.  00:46E4                      print_strings_dialog_box:		
     105.  00:46E4                      
     106.  00:46E4  FD 66 01            	LD H, (IY+1)
     107.  00:46E7  FD 6E 00            	LD L, (IY)
     108.  00:46EA  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
     109.  00:46ED  FD E5               	PUSH IY
     110.  00:46EF  CD 11 47                call print_string 
     111.  00:46F2  FD E1                   POP IY
     112.  00:46F4                      
     113.  00:46F4  FD 66 03            	LD H, (IY+3)
     114.  00:46F7  FD 6E 02            	LD L, (IY+2)
     115.  00:46FA  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
     116.  00:46FD  FD E5               	PUSH IY
     117.  00:46FF  CD 11 47                call print_string 
     118.  00:4702  FD E1               	POP IY
     119.  00:4704                      
     120.  00:4704  FD 66 05                LD H, (IY+5)
     121.  00:4707  FD 6E 04            	LD L, (IY+4)
     122.  00:470A  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
     123.  00:470D  CD 11 47                call print_string 
     124.  00:4710  C9                  	RET
     125.  00:4711                      
     126.  00:4711                      print_string:       
     127.  00:4711                      	
     128.  00:4711                      	;LD HL, string01
     129.  00:4711                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
     130.  00:4711                      .loop_str:
     131.  00:4711  7E                  	LD A, (HL)
     132.  00:4712  A7                  	AND A
     133.  00:4713  C8                  	RET Z
     134.  00:4714                      
     135.  00:4714  D6 20               	SUB 32
     136.  00:4716  CB 07               	RLC A
     137.  00:4718  CB 07               	RLC A	
     138.  00:471A                          
     139.  00:471A  06 00               	LD B, 0
     140.  00:471C  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
     141.  00:471D                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
     142.  00:471D                      				; Si #ASCII > 63 -> 2ª línea
     143.  00:471D                      				; segunda línea - ((#ASCII -32)*4)+1024
     144.  00:471D                      	
     145.  00:471D  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
     146.  00:471E  E5                  	PUSH HL
     147.  00:471F  21 BC 8E            	LD HL, FONT
     148.  00:4722  09                  	ADD HL, BC
     149.  00:4723  FE 40               	CP 64
     150.  00:4725  DA 2C 47            	JP C, .first_line_font
     151.  00:4728  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     152.  00:472B  09                  	ADD HL, BC
     153.  00:472C                      
     154.  00:472C                      .first_line_font:
     155.  00:472C  22 05 C1                LD (BITMAP), HL
     156.  00:472F                          
     157.  00:472F  06 01               	LD B, :FONT
     158.  00:4731  D5                  	PUSH DE
     159.  00:4732  CD 45 47                call print_char
     160.  00:4735  D1                      POP DE
     161.  00:4736                      	
     162.  00:4736  FD 21 04 00         	LD IY, 4
     163.  00:473A  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     164.  00:473C  FD 54               	LD D, IYH
     165.  00:473E  FD 5D               	LD E, IYL
     166.  00:4740                      	
     167.  00:4740                      
     168.  00:4740  E1                  	POP HL
     169.  00:4741  23                  	INC HL
     170.  00:4742  18 CD               	JR .loop_str
     171.  00:4744                          
     172.  00:4744  C9                      RET
     173.  00:4745                      
     174.  00:4745                      print_char
     175.  00:4745  AF                  		XOR A		
     176.  00:4746  0E 00               		ld		c,0
     177.  00:4748                      		;ld		de,0
     178.  00:4748  ED 53 68 C0         		LD (CHR_ACR), DE
     179.  00:474C  CD 90 42                	call	_vdpsetvramwr		
     180.  00:474F  78                  		ld	a, b			; 1st page bitmap
     181.  00:4750                      		;ld	d,a
     182.  00:4750                      		;ld	(_bank2),a
     183.  00:4750  2A 05 C1            		ld	hl,(BITMAP)		; Bitmap address
     184.  00:4753  3E 08               		ld	a, 8			; #lineas del caracter
     185.  00:4755  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     186.  00:4758  ED B3                       otir
     187.  00:475A  01 7C 00                    LD BC, 124
     188.  00:475D  09                          ADD HL, BC
     189.  00:475E  F5                  		PUSH AF
     190.  00:475F                      
     191.  00:475F  FD 2A 68 C0         		LD IY, (CHR_ACR)
     192.  00:4763  01 80 00            		LD BC, 128
     193.  00:4766  FD 09               		ADD IY, BC
     194.  00:4768  FD 54               		LD D, IYH
     195.  00:476A  FD 5D               		LD E, IYL
     196.  00:476C  A9                  		XOR C
     197.  00:476D  ED 53 68 C0         		LD (CHR_ACR), DE
     198.  00:4771  CD 90 42            		call	_vdpsetvramwr		
     199.  00:4774  F1                  		POP AF		
     200.  00:4775                      
     201.  00:4775  3D                  		dec	a
     202.  00:4776  20 DD               		jr	nz,1b		
     203.  00:4778  C9                  		ret 
     204.  00:4779                      
     205.  00:4779                      CLEAR_DIALOG_BOX_v1:		
     206.  00:4779  0E 00               		LD C,0
     207.  00:477B  11 28 5C            		LD DE, 5C28H
     208.  00:477E  ED 53 68 C0         		LD (CHR_ACR), DE
     209.  00:4782  CD 90 42            		call _vdpsetvramwr
     210.  00:4785  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     211.  00:4787  21 1C 8E            1:		LD HL, BLANK_DATA
     212.  00:478A  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     213.  00:478D  ED B3               		OTIR
     214.  00:478F                      
     215.  00:478F  F5                  		PUSH AF
     216.  00:4790  FD 2A 68 C0         		LD IY, (CHR_ACR)
     217.  00:4794  01 80 00            		LD BC, 128
     218.  00:4797  FD 09               		ADD IY, BC
     219.  00:4799  FD 54               		LD D, IYH
     220.  00:479B  FD 5D               		LD E, IYL
     221.  00:479D  0E 00               		LD C,0
     222.  00:479F  ED 53 68 C0         		LD (CHR_ACR), DE
     223.  00:47A3  CD 90 42            		call	_vdpsetvramwr		
     224.  00:47A6  F1                  		POP AF		
     225.  00:47A7                      
     226.  00:47A7  3D                  		DEC a
     227.  00:47A8  20 DD               		JR NZ,1b
     228.  00:47AA  C9                  		RET
     229.  00:47AB                      
     230.  00:47AB                      CLEAR_DIALOG_BOX_v2:
     231.  00:47AB  0E 00               		LD C,0
     232.  00:47AD  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     233.  00:47B0  ED 53 68 C0         		LD (CHR_ACR), DE
     234.  00:47B4  CD 90 42            		call _vdpsetvramwr
     235.  00:47B7  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     236.  00:47B9  21 1C 8E            1:		LD HL, BLANK_DATA
     237.  00:47BC  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     238.  00:47BF  ED B3               		OTIR
     239.  00:47C1                      
     240.  00:47C1  F5                  		PUSH AF
     241.  00:47C2  FD 2A 68 C0         		LD IY, (CHR_ACR)
     242.  00:47C6  01 80 00            		LD BC, 128
     243.  00:47C9  FD 09               		ADD IY, BC
     244.  00:47CB  FD 54               		LD D, IYH
     245.  00:47CD  FD 5D               		LD E, IYL
     246.  00:47CF  0E 00               		LD C,0
     247.  00:47D1  ED 53 68 C0         		LD (CHR_ACR), DE
     248.  00:47D5  CD 90 42            		call	_vdpsetvramwr		
     249.  00:47D8  F1                  		POP AF		
     250.  00:47D9                      
     251.  00:47D9  3D                  		DEC a
     252.  00:47DA  20 DD               		JR NZ,1b
     253.  00:47DC  C9                  		RET
     254.  00:47DD                      	
     255.  00:47DD                      CLEAR_DIALOG_BOX:
     256.  00:47DD  21 81 4A            		LD HL, DiagBoxToFrontkBufROM
     257.  00:47E0  CD 26 48            		CALL VDPCMD
     258.  00:47E3  C9                  		RET
     259.  00:47E4                      
     260.  00:47E4                      
     261.  00:47E4                      ; -----------------------------------------------------------------------------------
     262.  00:47E4                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     263.  00:47E4                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     264.  00:47E4                      ; -----------------------------------------------------------------------------------
     265.  00:47E4  (00:F3E0)           VDP_01: EQU   $F3E0
     266.  00:47E4  (00:FFE7)           VDP_08: EQU   $FFE7
     267.  00:47E4  (00:FFE8)           VDP_09: EQU   $FFE8
     268.  00:47E4                      
     269.  00:47E4                      SETPAG:				; SETPAG [A]
     270.  00:47E4  0F                  	RRCA
     271.  00:47E5  0F                  	RRCA
     272.  00:47E6  0F                  	RRCA
     273.  00:47E7  F6 1F               	OR	%00011111
     274.  00:47E9  F3                  	DI
     275.  00:47EA  D3 99               	OUT	($99),A
     276.  00:47EC  3E 82               	LD	A,$80+2
     277.  00:47EE  FB                  	EI
     278.  00:47EF  D3 99               	OUT	($99),A
     279.  00:47F1  C9                  	RET
     280.  00:47F2                      
     281.  00:47F2                      SET_WR:				; SET_WR [AHL]
     282.  00:47F2  CB 04               	RLC	H
     283.  00:47F4  17                  	RLA
     284.  00:47F5  CB 04               	RLC	H
     285.  00:47F7  17                  	RLA
     286.  00:47F8  CB 3C               	SRL	H
     287.  00:47FA  CB 3C               	SRL	H
     288.  00:47FC  F3                  	DI
     289.  00:47FD  D3 99               	OUT	($99),A
     290.  00:47FF  3E 8E               	LD	A,$80+14
     291.  00:4801  D3 99               	OUT	($99),A
     292.  00:4803  7D                  	LD	A,L
     293.  00:4804                      ;	NOP				; MSX2+
     294.  00:4804  D3 99               	OUT	($99),A
     295.  00:4806  7C                  	LD	A,H
     296.  00:4807  F6 40               	OR	64
     297.  00:4809  D3 99               	OUT	($99),A
     298.  00:480B  FB                  	EI
     299.  00:480C  C9                  	RET
     300.  00:480D                      
     301.  00:480D                      SET_RD:				; SET_RD [AHL]
     302.  00:480D  CB 04               	RLC	H
     303.  00:480F  17                  	RLA
     304.  00:4810  CB 04               	RLC	H
     305.  00:4812  17                  	RLA
     306.  00:4813  CB 3C               	SRL	H
     307.  00:4815  CB 3C               	SRL	H
     308.  00:4817  F3                  	DI
     309.  00:4818  D3 99               	OUT	($99),A
     310.  00:481A  3E 8E               	LD	A,$80+14
     311.  00:481C  D3 99               	OUT	($99),A
     312.  00:481E  7D                  	LD	A,L
     313.  00:481F                      ;	NOP				; MSX2+
     314.  00:481F  D3 99               	OUT	($99),A
     315.  00:4821  7C                  	LD	A,H
     316.  00:4822                      ;	NOP				; MSX2+
     317.  00:4822  D3 99               	OUT	($99),A
     318.  00:4824  FB                  	EI
     319.  00:4825  C9                  	RET
     320.  00:4826                      
     321.  00:4826                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     322.  00:4826  CD 39 48            	CALL	WAITCE
     323.  00:4829  F3                  	DI
     324.  00:482A  3E 20               	LD	A,$20
     325.  00:482C  D3 99               	OUT	($99),A
     326.  00:482E  3E 91               	LD	A,$80+17
     327.  00:4830  D3 99               	OUT	($99),A
     328.  00:4832  FB                  	EI
     329.  00:4833  01 9B 0F            	LD	BC,$0F9B
     330.  00:4836  ED B3               	OTIR
     331.  00:4838  C9                  	RET
     332.  00:4839                      
     333.  00:4839                      WAITCE:				; WAITCE
     334.  00:4839  3E 02               	LD	A,$02
     335.  00:483B  F3                  	DI
     336.  00:483C  D3 99               	OUT	($99),A
     337.  00:483E  3E 8F               	LD	A,$80+15
     338.  00:4840  D3 99               	OUT	($99),A
     339.  00:4842  DB 99               	IN	A,($99)
     340.  00:4844  1F                  	RRA
     341.  00:4845  3E 00               	LD	A,$00
     342.  00:4847  D3 99               	OUT	($99),A
     343.  00:4849  3E 8F               	LD	A,$80+15
     344.  00:484B  FB                  	EI
     345.  00:484C  D3 99               	OUT	($99),A
     346.  00:484E  38 E9               	JR	C,WAITCE
     347.  00:4850  C9                  	RET
     348.  00:4851                      
     349.  00:4851                      ENASCR:				; Enable Screen
     350.  00:4851  3A E0 F3            	LD	A,(VDP_01)
     351.  00:4854  F6 40               	OR	%01000000
     352.  00:4856  18 05               	JR	DISSCR.OUT
     353.  00:4858                      
     354.  00:4858                      DISSCR:				; Disable Screen
     355.  00:4858  3A E0 F3            	LD	A,(VDP_01)
     356.  00:485B  E6 BF               	AND	%10111111
     357.  00:485D  32 E0 F3            .OUT:	LD	(VDP_01),A
     358.  00:4860  F3                  	DI
     359.  00:4861  D3 99               	OUT	($99),A
     360.  00:4863  3E 81               	LD	A,$80+1
     361.  00:4865  FB                  	EI
     362.  00:4866  D3 99               	OUT	($99),A
     363.  00:4868  C9                  	RET
     364.  00:4869                      
     365.  00:4869                      ENASPR:				; Enable Sprites
     366.  00:4869  3A E7 FF            	LD	A,(VDP_08)
     367.  00:486C  E6 FD               	AND	%11111101
     368.  00:486E  18 05               	JR	DISSPR.OUT
     369.  00:4870                      
     370.  00:4870                      DISSPR:				; Disable Sprites
     371.  00:4870  3A E7 FF            	LD	A,(VDP_08)
     372.  00:4873  F6 02               	OR	%00000010
     373.  00:4875  32 E7 FF            .OUT:	LD	(VDP_08),A
     374.  00:4878  F3                  	DI
     375.  00:4879  D3 99               	OUT	($99),A
     376.  00:487B  3E 88               	LD	A,$80+8
     377.  00:487D  FB                  	EI
     378.  00:487E  D3 99               	OUT	($99),A
     379.  00:4880  C9                  	RET
     380.  00:4881                      
     381.  00:4881                      LIN192:				; Set 192 lines
     382.  00:4881  3A E8 FF            	LD	A,(VDP_09)
     383.  00:4884  F6 80               	OR	%10000000
     384.  00:4886  18 05               	JR	LIN212.OUT
     385.  00:4888                      
     386.  00:4888                      LIN212:				; Set 212 lines
     387.  00:4888  3A E8 FF            	LD	A,(VDP_09)
     388.  00:488B  E6 7F               	AND	%01111111
     389.  00:488D  32 E8 FF            .OUT:	LD	(VDP_09),A
     390.  00:4890  F3                  	DI
     391.  00:4891  D3 99               	OUT	($99),A
     392.  00:4893  3E 89               	LD	A,$80+9
     393.  00:4895  FB                  	EI
     394.  00:4896  D3 99               	OUT	($99),A
     395.  00:4898  C9                  	RET
     396.  00:4899                      ;
     397.  00:4899                      ; This lil' routine waits until the VDP is done copying.
     398.  00:4899                      ;
     399.  00:4899                      VDP_Ready:
     400.  00:4899  3E 02                   ld a,2
     401.  00:489B  F3                      di
     402.  00:489C  D3 99                   out (#99),a     ; select s#2
     403.  00:489E  3E 8F                   ld a,15+128
     404.  00:48A0  D3 99                   out (#99),a
     405.  00:48A2  DB 99                   in a,(#99)
     406.  00:48A4  1F                      rra
     407.  00:48A5  3E 00                   ld a,0          ; back to s#0, enable ints
     408.  00:48A7  D3 99                   out (#99),a
     409.  00:48A9  3E 8F                   ld a,15+128
     410.  00:48AB  FB                      ei
     411.  00:48AC  D3 99                   out (#99),a     ; loop if vdp not ready (CE)
     412.  00:48AE  DA 99 48                jp c,VDP_Ready
     413.  00:48B1  C9                      ret
     414.  00:48B2                      
     415.  00:48B2                      ;INPUT: A - ANDY'S MAX ENERGY
     416.  00:48B2                      DRAW_ANDY_ENERGY:		
     417.  00:48B2  11 00 00            	LD DE, 0
     418.  00:48B5  FD 21 4E C0         	LD IY, energyDat
     419.  00:48B9                          ;LD (IY + VDP_SX), 128      ; SXL - Tile 4
     420.  00:48B9                          ;LD (IY+VDP_SY), 0      ; SYL	
     421.  00:48B9                          ;LD (IY + VDP_DX), A     ; DXL    
     422.  00:48B9  FD 36 06 C2             LD (IY + VDP_DY), 194      ; DYL    
     423.  00:48BD  3A 08 C0            	LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)		; cargamos la energia de Andy
     424.  00:48C0  FE 00               	CP 0
     425.  00:48C2  28 32               	JR Z, .draw_empty_drops
     426.  00:48C4                      	;LD A, 24  ; TESTS	
     427.  00:48C4                      
     428.  00:48C4                      .check_next_drop
     429.  00:48C4  FE 04               	CP 4
     430.  00:48C6  CA E4 48            	JP Z, .draw_half_drop	
     431.  00:48C9  FD 36 00 80         	LD (IY + VDP_SX), 128      ; SXL - Tile 4
     432.  00:48CD  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     433.  00:48D0  F5                  	PUSH AF
     434.  00:48D1  7A                  	LD A, D
     435.  00:48D2  C6 10               	ADD A, 16
     436.  00:48D4  57                  	LD D, A 	
     437.  00:48D5  21 4E C0            	LD HL, energyDat
     438.  00:48D8  CD 26 48                CALL VDPCMD
     439.  00:48DB  1C                  	INC E
     440.  00:48DC  F1                  	POP AF
     441.  00:48DD  D6 08               	SUB 8
     442.  00:48DF  C2 C4 48            	JP NZ, .check_next_drop
     443.  00:48E2                      	;ret
     444.  00:48E2  18 12               	JR .draw_empty_drops
     445.  00:48E4                      
     446.  00:48E4                      .draw_half_drop		
     447.  00:48E4  FD 36 00 90         	LD (IY + VDP_SX), 144      ; SXL - Tile 5
     448.  00:48E8  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     449.  00:48EB  7A                  	LD A, D
     450.  00:48EC  C6 10               	ADD A, 16
     451.  00:48EE  57                  	LD D, A 	
     452.  00:48EF  21 4E C0                LD HL, energyDat
     453.  00:48F2  CD 26 48                CALL VDPCMD
     454.  00:48F5  1C                  	INC E
     455.  00:48F6                      	;ret
     456.  00:48F6                      
     457.  00:48F6                      .draw_empty_drops
     458.  00:48F6  21 10 40            		LD HL, ANDY_MAX_ENERGY
     459.  00:48F9  ED 4B 20 C0         		LD BC, (current_level)
     460.  00:48FD  06 00               		LD B,0
     461.  00:48FF  09                  		ADD HL, BC
     462.  00:4900                      		;INC HL
     463.  00:4900  7E                  		LD A, (HL)
     464.  00:4901                      		;LD A, 24
     465.  00:4901  CB 3F CB 3F CB 3F   [3]     srl a       ;a/8
     466.  00:4907  93                  		sub e
     467.  00:4908  C8                  		ret Z		; si es cero volvemos, full energy
     468.  00:4909                      .loop
     469.  00:4909  FD 36 00 A0         		LD (IY + VDP_SX), 160      ; SXL - Tile 6
     470.  00:490D  FD 72 04            		LD (IY + VDP_DX), D     ; DXL    
     471.  00:4910  21 4E C0                	LD HL, energyDat
     472.  00:4913  F5                  		PUSH AF
     473.  00:4914  7A                  		LD A, D
     474.  00:4915  C6 10               		ADD A, 16
     475.  00:4917  57                  		LD D, A 			
     476.  00:4918  CD 26 48                	CALL VDPCMD
     477.  00:491B  F1                  		pop AF
     478.  00:491C  3D                  		dec a
     479.  00:491D  C2 09 49            		jp nz, .loop
     480.  00:4920  C9                  		ret
     481.  00:4921                      		;ld a, (ENTITY_PLAYER_POINTER+3)	; Andy's energy
     482.  00:4921                      
     483.  00:4921                      ; Draw a background tile - Background
     484.  00:4921                      ; Input:
     485.  00:4921                      ; A - Number of tile
     486.  00:4921                      ; D - X
     487.  00:4921                      ; E - Y
     488.  00:4921                      draw_tile:
     489.  00:4921  FD 21 30 C0         	LD IY, tileDat
     490.  00:4925  C3 2C 49            	JP draw_tile_common
     491.  00:4928                      
     492.  00:4928                      ; Draw a background tile - Transparent
     493.  00:4928                      ; Input:
     494.  00:4928                      ; A - Number of tile
     495.  00:4928                      ; D - X
     496.  00:4928                      ; E - Y
     497.  00:4928                      draw_tile_trans:
     498.  00:4928  FD 21 3F C0         	LD IY, tileDatTrans
     499.  00:492C                      	
     500.  00:492C                      draw_tile_common:
     501.  00:492C  21 06 9A            	LD HL, metatiles_data
     502.  00:492F  87                  	ADD A,A
     503.  00:4930  87                  	ADD A,A ; A*4 (size of metatiles data)
     504.  00:4931  06 00               	LD B, 0
     505.  00:4933  4F                  	LD C, A
     506.  00:4934  09                  	ADD HL, BC
     507.  00:4935                      	;LD IY, tileDat
     508.  00:4935  7E                  	LD A, (HL)
     509.  00:4936  FD 77 00            	LD (IY + VDP_SX), A
     510.  00:4939  23                  	INC HL
     511.  00:493A  7E                  	LD A, (HL)
     512.  00:493B  FD 77 02            	LD (IY + VDP_SY), A
     513.  00:493E  23                  	INC HL
     514.  00:493F  7E                  	LD A, (HL)
     515.  00:4940  FD 77 08            	LD (IY + VDP_NX), A
     516.  00:4943  23                  	INC HL
     517.  00:4944  7E                  	LD A, (HL)
     518.  00:4945  FD 77 0A            	LD (IY + VDP_NY), A
     519.  00:4948  FD 72 04            	LD (IY + VDP_DX), D
     520.  00:494B  FD 73 06            	LD (IY + VDP_DY), E
     521.  00:494E  FD E5               	PUSH IY
     522.  00:4950  E1                  	POP HL
     523.  00:4951  CD 26 48            	CALL VDPCMD
     524.  00:4954  C9                  	ret
     525.  00:4955                      
     526.  00:4955                      print_strings_dialog_box_v2:
     527.  00:4955                      
     528.  00:4955  FD 66 01            	LD H, (IY+1)
     529.  00:4958  FD 6E 00            	LD L, (IY)
     530.  00:495B  3E C2               	LD A, FIRST_LINE_DLG_BOX_v2	; Aquí irá el offset de la memoria del VDP en base a X, Y
     531.  00:495D  FD E5               	PUSH IY
     532.  00:495F  CD 70 49                call print_string_v2
     533.  00:4962  FD E1                   POP IY
     534.  00:4964                      
     535.  00:4964  FD 66 03            	LD H, (IY+3)
     536.  00:4967  FD 6E 02            	LD L, (IY+2)
     537.  00:496A  3E CA                   LD A, SEC_LINE_DLG_BOX_v2	; Aquí irá el offset de la memoria del VDP en base a X, Y    
     538.  00:496C                      	;PUSH IY
     539.  00:496C  CD 70 49                call print_string_v2
     540.  00:496F                      	;POP IY
     541.  00:496F                      
     542.  00:496F  C9                  	RET
     543.  00:4970                      
     544.  00:4970                      print_string_v2:	
     545.  00:4970                      	
     546.  00:4970  FD 21 21 C0         	LD IY, charDat
     547.  00:4974  FD 77 06            	LD (IY+VDP_DY), A
     548.  00:4977  16 00               	LD D, 0		; acumulador de la DX
     549.  00:4979                      .loop_str:
     550.  00:4979                      	
     551.  00:4979  7E                  	LD A, (HL)
     552.  00:497A  A7                  	AND A		; if A = 0 -> RET
     553.  00:497B  C8                  	RET Z	
     554.  00:497C  FE 40               	CP 64		 ; Si #ASCII > 63 -> 2ª línea
     555.  00:497E  DA 87 49            	JP C, .first_line_font
     556.  00:4981  FD 36 02 DC         	LD (IY+VDP_SY), FONT_Y_OFFSET_2L		; Cargamos la SY	
     557.  00:4985  18 04               	JR .continue
     558.  00:4987                      
     559.  00:4987                      .first_line_font:
     560.  00:4987  FD 36 02 D4             LD (IY+VDP_SY), FONT_Y_OFFSET_1L		; Cargamos la SY	
     561.  00:498B                          
     562.  00:498B                      .continue:
     563.  00:498B  D6 20               	SUB 32
     564.  00:498D  CB 07               	RLC A
     565.  00:498F  CB 07               	RLC A	
     566.  00:4991  CB 07               	RLC A		; numero 0: ASCII #48 - 32 = 16 * 8 = SX número 0, Y = 0	
     567.  00:4993                      	
     568.  00:4993  FD 77 00            	LD (IY+VDP_SX), A		; Cargamos la SX
     569.  00:4996  FD 72 04            	LD (IY+VDP_DX), D		; Cargamos la DX
     570.  00:4999                      	
     571.  00:4999  E5                  	PUSH HL
     572.  00:499A  21 21 C0            	LD HL, charDat
     573.  00:499D  CD 26 48            	CALL VDPCMD	
     574.  00:49A0                      	
     575.  00:49A0  7A                  	LD A, D
     576.  00:49A1  C6 08               	ADD FONT_WIDTH	; Le sumo 8 para que empiece a escribir el next char 8 pixels a la derecha 
     577.  00:49A3  57                  	LD D, A	
     578.  00:49A4                      
     579.  00:49A4  E1                  	POP HL
     580.  00:49A5  23                  	INC HL
     581.  00:49A6  18 D1               	JR .loop_str
     582.  00:49A8                          
     583.  00:49A8  C9                      RET
     584.  00:49A9                      
     585.  00:49A9                      ; Loads the screen image using the tile map
     586.  00:49A9                      
     587.  00:49A9                      load_screen_v2:	
     588.  00:49A9  FD 2A 01 C0         	LD IY, (stg_map_ptr_back)
     589.  00:49AD                      
     590.  00:49AD                      .map_element	
     591.  00:49AD  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)
     592.  00:49B0  21 06 9A            	LD HL, metatiles_data
     593.  00:49B3  87                  	ADD A,A
     594.  00:49B4  87                  	ADD A,A ; A*4 (size of metatiles data)
     595.  00:49B5  C6 02               	ADD A, METATILE_NX
     596.  00:49B7  06 00               	LD B, 0
     597.  00:49B9  4F                  	LD C, A
     598.  00:49BA  09                  	ADD HL, BC
     599.  00:49BB                      	
     600.  00:49BB  4E                  	LD C, (HL)	; Guardamos el ancho de la tile
     601.  00:49BC                      	
     602.  00:49BC  FD 56 01            	LD D, (IY+DX_OFFSET)
     603.  00:49BF  FD 46 03            	LD B, (IY+REPS_OFFSET)
     604.  00:49C2                      	
     605.  00:49C2                      .loop1	
     606.  00:49C2  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)	
     607.  00:49C5  FD 5E 02            	LD E, (IY+DY_OFFSET)	
     608.  00:49C8                      	
     609.  00:49C8  C5                  	PUSH BC
     610.  00:49C9  FD E5               	PUSH IY	
     611.  00:49CB  CD 21 49            	call draw_tile
     612.  00:49CE  FD E1               	POP IY
     613.  00:49D0  C1                  	POP BC
     614.  00:49D1  7A                  	LD A, D
     615.  00:49D2  81                  	ADD C
     616.  00:49D3  57                  	LD D, a		; We add the tile width
     617.  00:49D4                      
     618.  00:49D4  78                  	LD A, B
     619.  00:49D5  3D                  	DEC A
     620.  00:49D6  47                  	LD B, A
     621.  00:49D7  20 E9               	JR NZ, .loop1	 
     622.  00:49D9                      
     623.  00:49D9  7A                  	LD A, D
     624.  00:49DA  FE FF               	CP 255
     625.  00:49DC  20 02               	JR NZ, .next_element
     626.  00:49DE  AF                  	XOR a
     627.  00:49DF  57                  	LD D, A
     628.  00:49E0                      
     629.  00:49E0                      .next_element
     630.  00:49E0                      [4]	INC IY		; TILEMAP_SIZE
     630.  00:49E0  FD 23 FD 23 FD 23 FD 23 
     631.  00:49E8  FD 7E 00            	LD A, (IY)
     632.  00:49EB  FE FF               	CP 255
     633.  00:49ED  20 BE               	JR NZ, .map_element
     634.  00:49EF                      
     635.  00:49EF                      	; Transparent Tiles
     636.  00:49EF  FD 2A 03 C0         	LD IY, (stg_map_ptr_front)
     637.  00:49F3                      
     638.  00:49F3                      .map_element_trans
     639.  00:49F3  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)
     640.  00:49F6  21 06 9A            	LD HL, metatiles_data
     641.  00:49F9  87                  	ADD A,A
     642.  00:49FA  87                  	ADD A,A ; A*4 (size of metatiles data)
     643.  00:49FB  C6 02               	ADD A, METATILE_NX
     644.  00:49FD  06 00               	LD B, 0
     645.  00:49FF  4F                  	LD C, A
     646.  00:4A00  09                  	ADD HL, BC
     647.  00:4A01                      	
     648.  00:4A01  4E                  	LD C, (HL)	; Guardamos el ancho de la tile
     649.  00:4A02                      	
     650.  00:4A02  FD 56 01            	LD D, (IY+DX_OFFSET)
     651.  00:4A05  FD 46 03            	LD B, (IY+REPS_OFFSET)
     652.  00:4A08                      	
     653.  00:4A08                      .loop1_trans
     654.  00:4A08  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)	
     655.  00:4A0B  FD 5E 02            	LD E, (IY+DY_OFFSET)	
     656.  00:4A0E                      	
     657.  00:4A0E  C5                  	PUSH BC
     658.  00:4A0F  FD E5               	PUSH IY	
     659.  00:4A11  CD 28 49            	call draw_tile_trans
     660.  00:4A14  FD E1               	POP IY
     661.  00:4A16  C1                  	POP BC
     662.  00:4A17  7A                  	LD A, D
     663.  00:4A18  81                  	ADD C
     664.  00:4A19  57                  	LD D, a		; We add the tile width
     665.  00:4A1A                      
     666.  00:4A1A  78                  	LD A, B
     667.  00:4A1B  3D                  	DEC A
     668.  00:4A1C  47                  	LD B, A
     669.  00:4A1D  20 E9               	JR NZ, .loop1_trans 
     670.  00:4A1F                      
     671.  00:4A1F  7A                  	LD A, D
     672.  00:4A20  FE FF               	CP 255
     673.  00:4A22  20 02               	JR NZ, .next_element_trans
     674.  00:4A24  AF                  	XOR a
     675.  00:4A25  57                  	LD D, A
     676.  00:4A26                      
     677.  00:4A26                      .next_element_trans
     678.  00:4A26                      [4]	INC IY		; TILEMAP_SIZE
     678.  00:4A26  FD 23 FD 23 FD 23 FD 23 
     679.  00:4A2E  FD 7E 00            	LD A, (IY)
     680.  00:4A31  FE FF               	CP 255
     681.  00:4A33  20 BE               	JR NZ, .map_element_trans
     682.  00:4A35  C9                  	ret
      26   00:4A36                          include "include\VDP_Data.asm"
       1.  00:4A36                      ; VDP COMMAND PARAMETER
       2.  00:4A36                      ;                               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:4A36                      charDatROM:                 db	0, 0, 0, FRONT_BUFFER, 0, 0, 0, FRONT_BUFFER, FONT_WIDTH, 0, FONT_HEIGHT, 0, 0, 0, CMD_HMMM
       3.  00:4A36  00 00 00 00 00 00 00 00 08 00 08 00 00 00 D0 
       4.  00:4A45                      tileDatROM:                 db	0, 0, 0, TILES_VDP_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       4.  00:4A45  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D0 
       5.  00:4A54                      tileDatTransROM:			db	0, 0, 0, TILES_VDP_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_LMMM | VDP_TIMP;CMD_LMMM;CMD_HMMM
       5.  00:4A54  00 00 00 01 00 00 00 00 20 00 10 00 00 00 98 
       6.  00:4A63                      energyDatROM:               db	0, 0, 0, TILES_VDP_PAGE, 0, 0, 0, FRONT_BUFFER, ENERGY_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       6.  00:4A63  00 00 00 01 00 00 00 00 10 00 10 00 00 00 D0 
       7.  00:4A72                      DiagBoxToBackBufROM:        db	0, 0, 192, FRONT_BUFFER, 0, 0, 192, BACK_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       7.  00:4A72  00 00 C0 00 00 00 C0 02 FF 00 14 00 00 00 D0 
       8.  00:4A81                      DiagBoxToFrontkBufROM:      db	0, 0, 192, BACK_BUFFER, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       8.  00:4A81  00 00 C0 02 00 00 C0 00 FF 00 14 00 00 00 D0 
       9.  00:4A90                      DiagBoxClearROM:            db	0, 0, 192, TILES_VDP_PAGE, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       9.  00:4A90  00 00 C0 01 00 00 C0 00 FF 00 14 00 00 00 D0 
      27   00:4A9F                      ; SFX
      28   00:4A9F                          include	"include\PT3_player.s"
       1.  00:4A9F                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:4A9F                      		; --- Can be assembled with asMSX ---
       3.  00:4A9F                      		; --- ROM version: MSX-KUN        ---
       4.  00:4A9F                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:4A9F                      
       6.  00:4A9F                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:4A9F                      ;
       8.  00:4A9F                      ; This version of the replayer can be used with any note table
       9.  00:4A9F                      ; This version also allows the use of PT3 commands
      10.  00:4A9F                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:4A9F                      ;
      12.  00:4A9F                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:4A9F                      ;
      14.  00:4A9F                      ; ROM LENGTH: 1549 bytes
      15.  00:4A9F                      ; RAM LENGTH:  576 bytes
      16.  00:4A9F                      
      17.  00:4A9F                      
      18.  00:4A9F                      
      19.  00:4A9F                      ;SJASM version by BTV 2016
      20.  00:4A9F                      
      21.  00:4A9F                      
      22.  00:4A9F                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:4A9F                      
      24.  00:4A9F                      ;ChannelsVars
      25.  00:4A9F                      ;struc	CHNPRM
      26.  00:4A9F                      ;reset group
      27.  00:4A9F  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:4A9F  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:4A9F  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:4A9F  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:4A9F  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:4A9F  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:4A9F  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:4A9F  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:4A9F  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:4A9F                      ;reset group
      37.  00:4A9F                      
      38.  00:4A9F  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:4A9F                      
      40.  00:4A9F                      ;IX for PTDECOD here [+12]
      41.  00:4A9F  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:4A9F  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:4A9F  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:4A9F  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:4A9F  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:4A9F  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:4A9F  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:4A9F  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:4A9F                       ;Enabled - 0,SimpleGliss - 2
      50.  00:4A9F  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:4A9F  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:4A9F  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:4A9F  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:4A9F  (00:0017)           CHNPRM_Volume	equ 23	;RESB 1
      55.  00:4A9F  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:4A9F                      ;endstruc
      57.  00:4A9F                      
      58.  00:4A9F                      ;struc	AR
      59.  00:4A9F  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:4A9F  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:4A9F  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:4A9F  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:4A9F  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:4A9F  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:4A9F  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:4A9F  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:4A9F  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:4A9F  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:4A9F                      ;endstruc
      70.  00:4A9F                      
      71.  00:4A9F                      		; --- CODE STARTS HERE ---
      72.  00:4A9F                      
      73.  00:4A9F  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:4AA2  CB FE               		SET	7,[HL]
      75.  00:4AA4  CB 46               		BIT	0,[HL]
      76.  00:4AA6  C8                  		RET	Z
      77.  00:4AA7  E1                  		POP	HL
      78.  00:4AA8  21 79 F0            		LD	HL,DelyCnt
      79.  00:4AAB  34                  		INC	[HL]
      80.  00:4AAC  21 3D F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:4AAF  34                  		INC	[HL]
      82.  00:4AB0  AF                  PT3_MUTE:	XOR	A
      83.  00:4AB1  67                  		LD	H,A
      84.  00:4AB2  6F                  		LD	L,A
      85.  00:4AB3  32 47 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:4AB6  22 48 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:4AB9  C3 02 50            		JP	ROUT_A0
      88.  00:4ABC                      
      89.  00:4ABC                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:4ABC  22 00 F0            		LD [PT3_MODADDR],HL
      91.  00:4ABF  E5                  		PUSH HL
      92.  00:4AC0  11 64 00            		LD DE,100
      93.  00:4AC3  19                  		ADD HL,DE
      94.  00:4AC4  7E                  		LD A,[HL]
      95.  00:4AC5  32 1B F0            		LD [PT3_Delay],A
      96.  00:4AC8  E5                  		PUSH HL
      97.  00:4AC9  DD E1               		POP IX
      98.  00:4ACB  19                  		ADD HL,DE
      99.  00:4ACC  22 02 F0            		LD [PT3_CrPsPtr],HL
     100.  00:4ACF  DD 5E 02            		LD E,[IX+102-100]
     101.  00:4AD2  19                  		ADD HL,DE
     102.  00:4AD3  23                  		INC HL
     103.  00:4AD4  22 17 F0            		LD [PT3_LPosPtr],HL
     104.  00:4AD7  D1                  		POP DE
     105.  00:4AD8  DD 6E 03            		LD L,[IX+103-100]
     106.  00:4ADB  DD 66 04            		LD H,[IX+104-100]
     107.  00:4ADE  19                  		ADD HL,DE
     108.  00:4ADF  22 19 F0            		LD [PT3_PatsPtr],HL
     109.  00:4AE2  21 A9 00            		LD HL,169
     110.  00:4AE5  19                  		ADD HL,DE
     111.  00:4AE6  22 06 F0            		LD [PT3_OrnPtrs],HL
     112.  00:4AE9  21 69 00            		LD HL,105
     113.  00:4AEC  19                  		ADD HL,DE
     114.  00:4AED  22 04 F0            		LD [PT3_SAMPTRS],HL
     115.  00:4AF0  21 00 F0            		LD HL,PT3_SETUP
     116.  00:4AF3  CB BE               		RES 7,[HL]
     117.  00:4AF5                      
     118.  00:4AF5                      		; --- note table data depacker ---
     119.  00:4AF5                      		; Depacks first 12 tones of each tone table
     120.  00:4AF5                      
     121.  00:4AF5  11 76 50            		LD DE,T_PACK
     122.  00:4AF8  01 B0 F1            		LD BC,T1_+(2*49)-1
     123.  00:4AFB  1A                  .TP_0:		LD A,[DE]
     124.  00:4AFC  13                  		INC DE
     125.  00:4AFD  FE 1E               		CP 15*2
     126.  00:4AFF  30 06               		JR NC,.TP_1
     127.  00:4B01  67                  		LD H,A
     128.  00:4B02  1A                  		LD A,[DE]
     129.  00:4B03  6F                  		LD L,A
     130.  00:4B04  13                  		INC DE
     131.  00:4B05  18 07               		JR .TP_2
     132.  00:4B07  D5                  .TP_1:		PUSH DE
     133.  00:4B08  16 00               		LD D,0
     134.  00:4B0A  5F                  		LD E,A
     135.  00:4B0B  19                  		ADD HL,DE
     136.  00:4B0C  19                  		ADD HL,DE
     137.  00:4B0D  D1                  		POP DE
     138.  00:4B0E  7C                  .TP_2:		LD A,H
     139.  00:4B0F  02                  		LD [BC],A
     140.  00:4B10  0B                  		DEC BC
     141.  00:4B11  7D                  		LD A,L
     142.  00:4B12  02                  		LD [BC],A
     143.  00:4B13  0B                  		DEC BC
     144.  00:4B14  D6 F0               		SUB $F0
     145.  00:4B16  20 E3               		JR NZ,.TP_0
     146.  00:4B18                      
     147.  00:4B18                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:4B18  21 22 F0            		LD HL,VARS
     149.  00:4B1B  77                  		LD [HL],A
     150.  00:4B1C  11 23 F0            		LD DE,VARS+1
     151.  00:4B1F  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:4B22  ED B0               		LDIR
     153.  00:4B24                      
     154.  00:4B24  3C                  		INC A
     155.  00:4B25  32 79 F0            		LD [DelyCnt],A
     156.  00:4B28  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:4B2B  22 3D F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:4B2E  22 5A F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4B31  22 77 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:4B34                      
     161.  00:4B34  21 72 50            		LD HL,EMPTYSAMORN
     162.  00:4B37  22 11 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:4B3A  22 2F F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:4B3D  22 4C F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:4B40  22 69 F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:4B43                      
     167.  00:4B43  22 31 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:4B46  22 4E F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:4B49  22 6B F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:4B4C                      					    ;also EMPTYSAMORN comment
     171.  00:4B4C                      
     172.  00:4B4C                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:4B4C  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:4B4F  17                  		RLA
     175.  00:4B50  E6 07               		AND 7
     176.  00:4B52  21 22 50            		LD HL,NT_DATA
     177.  00:4B55  D5                  		PUSH DE
     178.  00:4B56  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:4B57  87                  		ADD A,A
     180.  00:4B58  5F                  		LD E,A
     181.  00:4B59  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:4B5A  5E                  		LD E,[HL]
     183.  00:4B5B  23                  		INC HL
     184.  00:4B5C  CB 3B               		SRL E
     185.  00:4B5E  9F                  		SBC A,A
     186.  00:4B5F  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:4B61  32 20 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:4B64  3E C9               		LD A,$C9		; RET CODE
     189.  00:4B66  32 21 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:4B69  EB                  		EX DE,HL
     191.  00:4B6A  C1                  		POP BC ;BC=T1_
     192.  00:4B6B  09                  		ADD HL,BC
     193.  00:4B6C                      
     194.  00:4B6C  1A                  		LD A,[DE]                           
     195.  00:4B6D                      
     196.  00:4B6D  01 32 50            		LD BC,T_
     197.  00:4B70  81                  		ADD A,C
     198.  00:4B71  4F                  		LD C,A
     199.  00:4B72  88                  		ADC A,B
     200.  00:4B73                      
     201.  00:4B73  91                  		SUB C
     202.  00:4B74  47                  		LD B,A
     203.  00:4B75  C5                  		PUSH BC
     204.  00:4B76  11 7F F0            		LD DE,NT_
     205.  00:4B79  D5                  		PUSH DE
     206.  00:4B7A                      
     207.  00:4B7A  06 0C               		LD B,12
     208.  00:4B7C  C5                  .L1:		PUSH BC
     209.  00:4B7D  4E                  		LD C,[HL]
     210.  00:4B7E  23                  		INC HL
     211.  00:4B7F  E5                  		PUSH HL
     212.  00:4B80  46                  		LD B,[HL]
     213.  00:4B81                      
     214.  00:4B81  D5                  		PUSH DE
     215.  00:4B82  EB                  		EX DE,HL
     216.  00:4B83  11 17 00            		LD DE,23
     217.  00:4B86  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:4B89                      
     219.  00:4B89  CB 38               .L2:		SRL B
     220.  00:4B8B  CB 19               		RR C
     221.  00:4B8D  CD 20 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:4B90  79                  		LD A,C
     223.  00:4B91  8A                  		ADC A,D	;=ADC 0
     224.  00:4B92  77                  		LD [HL],A
     225.  00:4B93  23                  		INC HL
     226.  00:4B94  78                  		LD A,B
     227.  00:4B95  8A                  		ADC A,D
     228.  00:4B96  77                  		LD [HL],A
     229.  00:4B97  19                  		ADD HL,DE
     230.  00:4B98  DD 25               		db $DD,$25	;DEC XH
     231.  00:4B9A  20 ED               		JR NZ,.L2
     232.  00:4B9C                      
     233.  00:4B9C  D1                  		POP DE
     234.  00:4B9D  13                  		INC DE
     235.  00:4B9E  13                  		INC DE
     236.  00:4B9F  E1                  		POP HL
     237.  00:4BA0  23                  		INC HL
     238.  00:4BA1  C1                  		POP BC
     239.  00:4BA2  10 D8               		DJNZ .L1
     240.  00:4BA4                      
     241.  00:4BA4  E1                  		POP HL
     242.  00:4BA5  D1                  		POP DE
     243.  00:4BA6                      
     244.  00:4BA6  7B                  		LD A,E
     245.  00:4BA7  D5                  		PUSH DE
     246.  00:4BA8  11 3E 50            		LD DE,TCOLD_1
     247.  00:4BAB  BB                  		CP E
     248.  00:4BAC  D1                  		POP DE
     249.  00:4BAD  20 05               		JR NZ,.CORR_1
     250.  00:4BAF  3E FD               		LD A,$FD
     251.  00:4BB1  32 AD F0            		LD [NT_+$2E],A
     252.  00:4BB4                      
     253.  00:4BB4  1A                  .CORR_1:	LD A,[DE]
     254.  00:4BB5  A7                  		AND A
     255.  00:4BB6  28 11               		JR Z,.TC_EXIT
     256.  00:4BB8  1F                  		RRA
     257.  00:4BB9  F5                  		PUSH AF
     258.  00:4BBA  87                  		ADD A,A
     259.  00:4BBB  4F                  		LD C,A
     260.  00:4BBC  09                  		ADD HL,BC
     261.  00:4BBD  F1                  		POP AF
     262.  00:4BBE  30 02               		JR NC,.CORR_2
     263.  00:4BC0  35                  		DEC [HL]
     264.  00:4BC1  35                  		DEC [HL]
     265.  00:4BC2  34                  .CORR_2:	INC [HL]
     266.  00:4BC3  A7                  		AND A
     267.  00:4BC4  ED 42               		SBC HL,BC
     268.  00:4BC6  13                  		INC DE
     269.  00:4BC7  18 EB               		JR .CORR_1
     270.  00:4BC9                      
     271.  00:4BC9                      .TC_EXIT:	;POP AF
     272.  00:4BC9                      
     273.  00:4BC9                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:4BC9  21 11 00            		ld	hl,$11
     275.  00:4BCC  54                  		ld	d,h
     276.  00:4BCD  5C                  		ld	e,h
     277.  00:4BCE  DD 21 4F F1         		ld	IX,VT_+16
     278.  00:4BD2  06 0F               		ld	b,15
     279.  00:4BD4  E5                  .INITV1:	push	hl
     280.  00:4BD5  19                  		add	hl,de
     281.  00:4BD6  EB                  		ex	de,hl
     282.  00:4BD7  ED 62               		sbc	hl,hl
     283.  00:4BD9  48                  		ld	c,b
     284.  00:4BDA  06 10               		ld	b,16
     285.  00:4BDC  7D                  .INITV2:	ld	a,l
     286.  00:4BDD  17                  		rla
     287.  00:4BDE  7C                  		ld	a,h
     288.  00:4BDF  CE 00               		adc	a,0
     289.  00:4BE1  DD 77 00            		ld	[ix],a
     290.  00:4BE4  DD 23               		inc	ix
     291.  00:4BE6  19                  		add	hl,de
     292.  00:4BE7  10 F3               		djnz	.INITV2
     293.  00:4BE9  E1                  		pop	hl
     294.  00:4BEA  7B                  		ld	a,e
     295.  00:4BEB  FE 77               		cp	$77
     296.  00:4BED  20 01               		jr	nz,.INITV3
     297.  00:4BEF  1C                  		inc	e
     298.  00:4BF0  41                  .INITV3:	ld	b,c
     299.  00:4BF1  10 E1               		djnz	.INITV1
     300.  00:4BF3                      
     301.  00:4BF3  C9                  		RET
     302.  00:4BF4                      
     303.  00:4BF4                      		;pattern decoder
     304.  00:4BF4  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:4BF8  CD 7E 4D            		CALL SETORN
     306.  00:4BFB  0A                  		LD A,[BC]
     307.  00:4BFC  03                  		INC BC
     308.  00:4BFD  0F                  		RRCA
     309.  00:4BFE                      
     310.  00:4BFE  87                  PD_SAM:		ADD A,A
     311.  00:4BFF  5F                  PD_SAM_:	LD E,A
     312.  00:4C00  16 00               		LD D,0
     313.  00:4C02  2A 04 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:4C05  19                  		ADD HL,DE
     315.  00:4C06  5E                  		LD E,[HL]
     316.  00:4C07  23                  		INC HL
     317.  00:4C08  56                  		LD D,[HL]
     318.  00:4C09  2A 00 F0            		LD HL,[PT3_MODADDR]
     319.  00:4C0C  19                  		ADD HL,DE
     320.  00:4C0D  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:4C10  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:4C13  18 41               		JR PD_LOOP
     323.  00:4C15                      
     324.  00:4C15  07                  PD_VOL:		RLCA
     325.  00:4C16  07                  		RLCA
     326.  00:4C17  07                  		RLCA
     327.  00:4C18  07                  		RLCA
     328.  00:4C19  DD 77 0B            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:4C1C  18 3B               		JR PD_LP2
     330.  00:4C1E                      	
     331.  00:4C1E  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:4C21  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:4C24  18 33               		JR PD_LP2
     334.  00:4C26                      
     335.  00:4C26  3D                  PD_SorE:	DEC A
     336.  00:4C27  20 07               		JR NZ,PD_ENV
     337.  00:4C29  0A                  		LD A,[BC]
     338.  00:4C2A  03                  		INC BC
     339.  00:4C2B  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:4C2E  18 29               		JR PD_LP2
     341.  00:4C30                      
     342.  00:4C30  CD 62 4D            PD_ENV:		CALL SETENV
     343.  00:4C33  18 24               		JR PD_LP2
     344.  00:4C35                      
     345.  00:4C35  CD 7E 4D            PD_ORN:		CALL SETORN
     346.  00:4C38  18 1C               		JR PD_LOOP
     347.  00:4C3A                             
     348.  00:4C3A  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:4C3D  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4C40  C4 62 4D            		CALL NZ,SETENV
     351.  00:4C43  0A                  		LD A,[BC]
     352.  00:4C44  03                  		INC BC
     353.  00:4C45  18 B8               		JR PD_SAM_
     354.  00:4C47                      
     355.  00:4C47  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:4C4A  32 0E F0            		LD [PT3_PrNote],A
     357.  00:4C4D  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4C50  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4C53  22 0F F0            		LD [PT3_PrSlide],HL
     360.  00:4C56                      
     361.  00:4C56  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:4C59  0A                  PD_LP2:		LD A,[BC]
     363.  00:4C5A  03                  		INC BC
     364.  00:4C5B  83                  		ADD A,E
     365.  00:4C5C  38 96               		JR C,PD_OrSm
     366.  00:4C5E  82                  		ADD A,D
     367.  00:4C5F  28 4A               		JR Z,PD_FIN
     368.  00:4C61  38 9B               		JR C,PD_SAM
     369.  00:4C63  83                  		ADD A,E
     370.  00:4C64  28 25               		JR Z,PD_REL
     371.  00:4C66  38 AD               		JR C,PD_VOL
     372.  00:4C68  83                  		ADD A,E
     373.  00:4C69  28 B3               		JR Z,PD_EOff
     374.  00:4C6B  38 B9               		JR C,PD_SorE
     375.  00:4C6D  C6 60               		ADD A,96
     376.  00:4C6F  38 20               		JR C,PD_NOTE
     377.  00:4C71  83                  		ADD A,E
     378.  00:4C72  38 C1               		JR C,PD_ORN
     379.  00:4C74  82                  		ADD A,D
     380.  00:4C75  38 0F               		JR C,PD_NOIS
     381.  00:4C77  83                  		ADD A,E
     382.  00:4C78  38 C0               		JR C,PD_ESAM
     383.  00:4C7A  87                  		ADD A,A
     384.  00:4C7B  5F                  		LD E,A
     385.  00:4C7C  21 B7 2C            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:4C7F  19                  		ADD HL,DE
     387.  00:4C80  5E                  		LD E,[HL]
     388.  00:4C81  23                  		INC HL
     389.  00:4C82  56                  		LD D,[HL]
     390.  00:4C83  D5                  		PUSH DE
     391.  00:4C84  18 D0               		JR PD_LOOP
     392.  00:4C86                      
     393.  00:4C86  32 7D F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:4C89  18 CE               		JR PD_LP2
     395.  00:4C8B                      
     396.  00:4C8B  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:4C8F  18 08               		JR PD_RES
     398.  00:4C91                      	
     399.  00:4C91  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:4C94  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:4C98  AF                  		XOR A
     402.  00:4C99                      
     403.  00:4C99  ED 73 08 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:4C9D  DD F9               		LD SP,IX
     405.  00:4C9F  67                  		LD H,A
     406.  00:4CA0  6F                  		LD L,A
     407.  00:4CA1  E5                  		PUSH HL
     408.  00:4CA2  E5                  		PUSH HL
     409.  00:4CA3  E5                  		PUSH HL
     410.  00:4CA4  E5                  		PUSH HL
     411.  00:4CA5  E5                  		PUSH HL
     412.  00:4CA6  E5                  		PUSH HL
     413.  00:4CA7  ED 7B 08 F0         		LD SP,[PT3_PDSP]
     414.  00:4CAB                      
     415.  00:4CAB  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:4CAE  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:4CB1  C9                  		RET
     418.  00:4CB2                      
     419.  00:4CB2  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:4CB6  0A                  		LD A,[BC]
     421.  00:4CB7  03                  		INC BC
     422.  00:4CB8                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:4CB8                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:4CB8  03                  		INC BC
     425.  00:4CB9  03                  		INC BC
     426.  00:4CBA  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:4CBD  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:4CC0  11 7F F0            		LD DE,NT_
     429.  00:4CC3  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:4CC6  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:4CC9  87                  		ADD A,A
     432.  00:4CCA  6F                  		LD L,A
     433.  00:4CCB  26 00               		LD H,0
     434.  00:4CCD  19                  		ADD HL,DE
     435.  00:4CCE  7E                  		LD A,[HL]
     436.  00:4CCF  23                  		INC HL
     437.  00:4CD0  66                  		LD H,[HL]
     438.  00:4CD1  6F                  		LD L,A
     439.  00:4CD2  E5                  		PUSH HL
     440.  00:4CD3  3A 0E F0            		LD A,[PT3_PrNote]
     441.  00:4CD6  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:4CD9  87                  		ADD A,A
     443.  00:4CDA  6F                  		LD L,A
     444.  00:4CDB  26 00               		LD H,0
     445.  00:4CDD  19                  		ADD HL,DE
     446.  00:4CDE  5E                  		LD E,[HL]
     447.  00:4CDF  23                  		INC HL
     448.  00:4CE0  56                  		LD D,[HL]
     449.  00:4CE1  E1                  		POP HL
     450.  00:4CE2  ED 52               		SBC HL,DE
     451.  00:4CE4  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:4CE7  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:4CEA  ED 5B 0F F0         		LD DE,[PT3_PrSlide]
     454.  00:4CEE  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4CF1  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4CF4  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4CF5  03                  		INC BC
     458.  00:4CF6  08                  		EX AF,AF'
     459.  00:4CF7  0A                  		LD A,[BC]
     460.  00:4CF8  03                  		INC BC
     461.  00:4CF9  A7                  		AND A
     462.  00:4CFA  28 01               		JR Z,.NOSIG
     463.  00:4CFC  EB                  		EX DE,HL
     464.  00:4CFD  ED 52               .NOSIG:	SBC HL,DE
     465.  00:4CFF  F2 07 4D            		JP P,SET_STP
     466.  00:4D02  2F                  		CPL
     467.  00:4D03  08                  		EX AF,AF'
     468.  00:4D04  ED 44               		NEG
     469.  00:4D06  08                  		EX AF,AF'
     470.  00:4D07  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:4D0A  08                  		EX AF,AF'
     472.  00:4D0B  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:4D0E  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4D12  C9                  		RET
     475.  00:4D13                      
     476.  00:4D13  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4D17  0A                  		LD A,[BC]
     478.  00:4D18  03                  		INC BC
     479.  00:4D19  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:4D1C  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:4D1F  0A                  		LD A,[BC]
     482.  00:4D20  03                  		INC BC
     483.  00:4D21  08                  		EX AF,AF'
     484.  00:4D22  0A                  		LD A,[BC]
     485.  00:4D23  03                  		INC BC
     486.  00:4D24  18 E1               		JR SET_STP
     487.  00:4D26                      
     488.  00:4D26  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4D27  03                  		INC BC
     490.  00:4D28  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:4D2B  C9                  		RET
     492.  00:4D2C                      
     493.  00:4D2C  0A                  C_ORPOS:	LD A,[BC]
     494.  00:4D2D  03                  		INC BC
     495.  00:4D2E  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4D31  C9                  		RET
     497.  00:4D32                      
     498.  00:4D32  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4D33  03                  		INC BC
     500.  00:4D34  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4D37  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:4D3A  0A                  		LD A,[BC]
     503.  00:4D3B  03                  		INC BC
     504.  00:4D3C  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:4D3F  AF                  		XOR A
     506.  00:4D40  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4D43  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4D46  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4D49  C9                  		RET
     510.  00:4D4A                      
     511.  00:4D4A  0A                  C_ENGLS:	LD A,[BC]
     512.  00:4D4B  03                  		INC BC
     513.  00:4D4C  32 1D F0            		LD [PT3_Env_Del],A
     514.  00:4D4F  32 7C F0            		LD [CurEDel],A
     515.  00:4D52  0A                  		LD A,[BC]
     516.  00:4D53  03                  		INC BC
     517.  00:4D54  6F                  		LD L,A
     518.  00:4D55  0A                  		LD A,[BC]
     519.  00:4D56  03                  		INC BC
     520.  00:4D57  67                  		LD H,A
     521.  00:4D58  22 1E F0            		LD [PT3_ESldAdd],HL
     522.  00:4D5B  C9                  		RET
     523.  00:4D5C                      
     524.  00:4D5C  0A                  C_DELAY:	LD A,[BC]
     525.  00:4D5D  03                  		INC BC
     526.  00:4D5E  32 1B F0            		LD [PT3_Delay],A
     527.  00:4D61  C9                  		RET
     528.  00:4D62                      	
     529.  00:4D62  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4D65  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:4D68  0A                  		LD A,[BC]
     532.  00:4D69  03                  		INC BC
     533.  00:4D6A  67                  		LD H,A
     534.  00:4D6B  0A                  		LD A,[BC]
     535.  00:4D6C  03                  		INC BC
     536.  00:4D6D  6F                  		LD L,A
     537.  00:4D6E  22 4D F1            		LD [EnvBase],HL
     538.  00:4D71  AF                  		XOR A
     539.  00:4D72  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4D75  32 7C F0            		LD [CurEDel],A
     541.  00:4D78  67                  		LD H,A
     542.  00:4D79  6F                  		LD L,A
     543.  00:4D7A  22 7A F0            		LD [CurESld],HL
     544.  00:4D7D  C9                  C_NOP:		RET
     545.  00:4D7E                      
     546.  00:4D7E  87                  SETORN:		ADD A,A
     547.  00:4D7F  5F                  		LD E,A
     548.  00:4D80  16 00               		LD D,0
     549.  00:4D82  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4D85  2A 06 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:4D88  19                  		ADD HL,DE
     552.  00:4D89  5E                  		LD E,[HL]
     553.  00:4D8A  23                  		INC HL
     554.  00:4D8B  56                  		LD D,[HL]
     555.  00:4D8C  2A 00 F0            		LD HL,[PT3_MODADDR]
     556.  00:4D8F  19                  		ADD HL,DE
     557.  00:4D90  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:4D93  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:4D96  C9                  		RET
     560.  00:4D97                      
     561.  00:4D97                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:4D97  7D 4D               SPCCOMS:	dw C_NOP
     563.  00:4D99  13 4D               		dw C_GLISS
     564.  00:4D9B  B2 4C               		dw C_PORTM
     565.  00:4D9D  26 4D               		dw C_SMPOS
     566.  00:4D9F  2C 4D               		dw C_ORPOS
     567.  00:4DA1  32 4D               		dw C_VIBRT
     568.  00:4DA3  7D 4D               		dw C_NOP
     569.  00:4DA5  7D 4D               		dw C_NOP
     570.  00:4DA7  4A 4D               		dw C_ENGLS
     571.  00:4DA9  5C 4D               		dw C_DELAY
     572.  00:4DAB  7D 4D               		dw C_NOP
     573.  00:4DAD  7D 4D               		dw C_NOP
     574.  00:4DAF  7D 4D               		dw C_NOP
     575.  00:4DB1  7D 4D               		dw C_NOP
     576.  00:4DB3  7D 4D               		dw C_NOP
     577.  00:4DB5  7D 4D               		dw C_NOP
     578.  00:4DB7                      
     579.  00:4DB7  AF                  CHREGS:		XOR A
     580.  00:4DB8  32 49 F1            		LD [AYREGS+AR_AmplC],A
     581.  00:4DBB  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:4DBF  E5                  		PUSH HL
     583.  00:4DC0  CA E6 4E            		JP Z,.CH_EXIT
     584.  00:4DC3  ED 73 0A F0         		LD [PT3_CSP],SP
     585.  00:4DC7  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:4DCA  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:4DCD  F9                  		LD SP,HL
     588.  00:4DCE  D1                  		POP DE
     589.  00:4DCF  67                  		LD H,A
     590.  00:4DD0  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:4DD3  6F                  		LD L,A
     592.  00:4DD4  39                  		ADD HL,SP
     593.  00:4DD5  3C                  		INC A
     594.  00:4DD6  BA                  		CP D
     595.  00:4DD7  38 01               		JR C,.CH_ORPS
     596.  00:4DD9  7B                  		LD A,E
     597.  00:4DDA  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:4DDD  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:4DE0  86                  		ADD A,[HL]
     600.  00:4DE1  F2 E5 4D            		JP P,.CH_NTP
     601.  00:4DE4  AF                  		XOR A
     602.  00:4DE5  FE 60               .CH_NTP:	CP 96
     603.  00:4DE7  38 02               		JR C,.CH_NOK
     604.  00:4DE9  3E 5F               		LD A,95
     605.  00:4DEB  87                  .CH_NOK:	ADD A,A
     606.  00:4DEC  08                  		EX AF,AF'
     607.  00:4DED  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4DF0  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4DF3  F9                  		LD SP,HL
     610.  00:4DF4  D1                  		POP DE
     611.  00:4DF5  26 00               		LD H,0
     612.  00:4DF7  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4DFA  47                  		LD B,A
     614.  00:4DFB  87                  		ADD A,A
     615.  00:4DFC  87                  		ADD A,A
     616.  00:4DFD  6F                  		LD L,A
     617.  00:4DFE  39                  		ADD HL,SP
     618.  00:4DFF  F9                  		LD SP,HL
     619.  00:4E00  78                  		LD A,B
     620.  00:4E01  3C                  		INC A
     621.  00:4E02  BA                  		CP D
     622.  00:4E03  38 01               		JR C,.CH_SMPS
     623.  00:4E05  7B                  		LD A,E
     624.  00:4E06  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4E09  C1                  		POP BC
     626.  00:4E0A  E1                  		POP HL
     627.  00:4E0B  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4E0E  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4E11  19                  		ADD HL,DE
     630.  00:4E12  CB 70               		BIT 6,B
     631.  00:4E14  28 06               		JR Z,.CH_NOAC
     632.  00:4E16  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4E19  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4E1C  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4E1D  08                  		EX AF,AF'
     636.  00:4E1E  6F                  		LD L,A
     637.  00:4E1F  26 00               		LD H,0
     638.  00:4E21  31 7F F0            		LD SP,NT_
     639.  00:4E24  39                  		ADD HL,SP
     640.  00:4E25  F9                  		LD SP,HL
     641.  00:4E26  E1                  		POP HL
     642.  00:4E27  19                  		ADD HL,DE
     643.  00:4E28  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4E2B  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4E2E  19                  		ADD HL,DE
     646.  00:4E2F  ED 7B 0A F0         		LD SP,[PT3_CSP]
     647.  00:4E33  E3                  		EX [SP],HL
     648.  00:4E34  AF                  		XOR A
     649.  00:4E35  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4E38  28 3E               		JR Z,.CH_AMP
     651.  00:4E3A  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4E3D  20 39               		JR NZ,.CH_AMP
     653.  00:4E3F  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4E42  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4E45  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4E48  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4E4B  7C                  		LD A,H
     658.  00:4E4C  19                  		ADD HL,DE
     659.  00:4E4D  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4E50  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4E53  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4E57  20 1F               		JR NZ,.CH_AMP
     663.  00:4E59  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4E5C  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4E5F  A7                  		AND A
     666.  00:4E60  28 01               		JR Z,.CH_STPP
     667.  00:4E62  EB                  		EX DE,HL
     668.  00:4E63  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4E65  FA 78 4E            		JP M,.CH_AMP
     670.  00:4E68  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4E6B  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4E6E  AF                  		XOR A
     673.  00:4E6F  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4E72  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4E75  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4E78  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4E7B  CB 79               		BIT 7,C
     678.  00:4E7D  28 13               		JR Z,.CH_NOAM
     679.  00:4E7F  CB 71               		BIT 6,C
     680.  00:4E81  28 07               		JR Z,.CH_AMIN
     681.  00:4E83  FE 0F               		CP 15
     682.  00:4E85  28 0B               		JR Z,.CH_NOAM
     683.  00:4E87  3C                  		INC A
     684.  00:4E88  18 05               		JR .CH_SVAM
     685.  00:4E8A  FE F1               .CH_AMIN:	CP -15
     686.  00:4E8C  28 04               		JR Z,.CH_NOAM
     687.  00:4E8E  3D                  		DEC A
     688.  00:4E8F  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4E92  6F                  .CH_NOAM:	LD L,A
     690.  00:4E93  78                  		LD A,B
     691.  00:4E94  E6 0F               		AND 15
     692.  00:4E96  85                  		ADD A,L
     693.  00:4E97  F2 9B 4E            		JP P,.CH_APOS
     694.  00:4E9A  AF                  		XOR A
     695.  00:4E9B  FE 10               .CH_APOS:	CP 16
     696.  00:4E9D  38 02               		JR C,.CH_VOL
     697.  00:4E9F  3E 0F               		LD A,15
     698.  00:4EA1  DD B6 17            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4EA4  6F                  		LD L,A
     700.  00:4EA5  26 00               		LD H,0
     701.  00:4EA7  11 3F F1            		LD DE,VT_
     702.  00:4EAA  19                  		ADD HL,DE
     703.  00:4EAB  7E                  		LD A,[HL]
     704.  00:4EAC  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4EAE  20 03               		JR NZ,.CH_NOEN
     706.  00:4EB0  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4EB3  32 49 F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4EB6  CB 78               		BIT 7,B
     709.  00:4EB8  79                  		LD A,C
     710.  00:4EB9  28 19               		JR Z,.NO_ENSL
     711.  00:4EBB  17                  		RLA
     712.  00:4EBC  17                  		RLA
     713.  00:4EBD  CB 2F               		SRA A
     714.  00:4EBF  CB 2F               		SRA A
     715.  00:4EC1  CB 2F               		SRA A
     716.  00:4EC3  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4EC6  CB 68               		BIT 5,B
     718.  00:4EC8  28 03               		JR Z,.NO_ENAC
     719.  00:4ECA  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4ECD  21 1C F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4ED0  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4ED1                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4ED1  77                  		LD [HL],A
     724.  00:4ED2  18 0E               		JR .CH_MIX
     725.  00:4ED4  1F                  .NO_ENSL:	RRA
     726.  00:4ED5  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4ED8  32 7E F0            		LD [AddToNs],A
     728.  00:4EDB  CB 68               		BIT 5,B
     729.  00:4EDD  28 03               		JR Z,.CH_MIX
     730.  00:4EDF  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4EE2  78                  .CH_MIX:	LD A,B
     732.  00:4EE3  1F                  		RRA
     733.  00:4EE4  E6 48               		AND $48
     734.  00:4EE6  21 46 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4EE9  B6                  		OR [HL]
     736.  00:4EEA  0F                  		RRCA
     737.  00:4EEB  77                  		LD [HL],A
     738.  00:4EEC  E1                  		POP HL
     739.  00:4EED  AF                  		XOR A
     740.  00:4EEE  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4EF1  C8                  		RET Z
     742.  00:4EF2  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4EF5  C0                  		RET NZ
     744.  00:4EF6  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4EF9  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4EFC  1F                  		RRA
     747.  00:4EFD  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4F00  38 03               		JR C,.CH_ONDL
     749.  00:4F02  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4F05  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4F08  C9                  		RET
     752.  00:4F09                      
     753.  00:4F09  AF                  PT3_PLAY:	XOR A
     754.  00:4F0A  32 1C F0            		LD [PT3_AddToEn],A
     755.  00:4F0D  32 46 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:4F10  3D                  		DEC A
     757.  00:4F11  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:4F14  21 79 F0            		LD HL,DelyCnt
     759.  00:4F17  35                  		DEC [HL]
     760.  00:4F18  C2 9F 4F            		JP NZ,.PL2
     761.  00:4F1B  21 3D F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4F1E  35                  		DEC [HL]
     763.  00:4F1F  20 4E               		JR NZ,.PL1B
     764.  00:4F21  ED 4B 11 F0         		LD BC,[PT3_AdInPtA]
     765.  00:4F25  0A                  		LD A,[BC]
     766.  00:4F26  A7                  		AND A
     767.  00:4F27  20 3B               		JR NZ,.PL1A
     768.  00:4F29  57                  		LD D,A
     769.  00:4F2A  32 7D F0            		LD [Ns_Base],A
     770.  00:4F2D  2A 02 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:4F30  23                  		INC HL
     772.  00:4F31  7E                  		LD A,[HL]
     773.  00:4F32  3C                  		INC A
     774.  00:4F33  20 08               		JR NZ,.PLNLP
     775.  00:4F35  CD 9F 4A            		CALL CHECKLP
     776.  00:4F38  2A 17 F0            		LD HL,[PT3_LPosPtr]
     777.  00:4F3B  7E                  		LD A,[HL]
     778.  00:4F3C  3C                  		INC A
     779.  00:4F3D  22 02 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4F40  3D                  		DEC A
     781.  00:4F41  87                  		ADD A,A
     782.  00:4F42  5F                  		LD E,A
     783.  00:4F43  CB 12               		RL D
     784.  00:4F45  2A 19 F0            		LD HL,[PT3_PatsPtr]
     785.  00:4F48  19                  		ADD HL,DE
     786.  00:4F49  ED 5B 00 F0         		LD DE,[PT3_MODADDR]
     787.  00:4F4D  ED 73 0C F0         		LD [PT3_PSP],SP
     788.  00:4F51  F9                  		LD SP,HL
     789.  00:4F52  E1                  		POP HL
     790.  00:4F53  19                  		ADD HL,DE
     791.  00:4F54  44                  		LD B,H
     792.  00:4F55  4D                  		LD C,L
     793.  00:4F56  E1                  		POP HL
     794.  00:4F57  19                  		ADD HL,DE
     795.  00:4F58  22 13 F0            		LD [PT3_AdInPtB],HL
     796.  00:4F5B  E1                  		POP HL
     797.  00:4F5C  19                  		ADD HL,DE
     798.  00:4F5D  22 15 F0            		LD [PT3_AdInPtC],HL
     799.  00:4F60  ED 7B 0C F0         		LD SP,[PT3_PSP]
     800.  00:4F64                      
     801.  00:4F64  DD 21 2E F0         .PL1A:		LD IX,ChanA+12
     802.  00:4F68  CD 47 4C            		CALL PTDECOD
     803.  00:4F6B  ED 43 11 F0         		LD [PT3_AdInPtA],BC
     804.  00:4F6F                      
     805.  00:4F6F  21 5A F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4F72  35                  		DEC [HL]
     807.  00:4F73  20 0F               		JR NZ,.PL1C
     808.  00:4F75  DD 21 4B F0         		LD IX,ChanB+12
     809.  00:4F79  ED 4B 13 F0         		LD BC,[PT3_AdInPtB]
     810.  00:4F7D  CD 47 4C            		CALL PTDECOD
     811.  00:4F80  ED 43 13 F0         		LD [PT3_AdInPtB],BC
     812.  00:4F84                      
     813.  00:4F84  21 77 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4F87  35                  		DEC [HL]
     815.  00:4F88  20 0F               		JR NZ,.PL1D
     816.  00:4F8A  DD 21 68 F0         		LD IX,ChanC+12
     817.  00:4F8E  ED 4B 15 F0         		LD BC,[PT3_AdInPtC]
     818.  00:4F92  CD 47 4C            		CALL PTDECOD
     819.  00:4F95  ED 43 15 F0         		LD [PT3_AdInPtC],BC
     820.  00:4F99                      
     821.  00:4F99  3A 1B F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:4F9C  32 79 F0            		LD [DelyCnt],A
     823.  00:4F9F                      
     824.  00:4F9F  DD 21 22 F0         .PL2:		LD IX,ChanA
     825.  00:4FA3  2A 3F F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:4FA6  CD B7 4D            		CALL CHREGS
     827.  00:4FA9  22 3F F1            		LD [AYREGS+AR_TonA],HL
     828.  00:4FAC  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:4FAF  32 47 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:4FB2  DD 21 3F F0         		LD IX,ChanB
     831.  00:4FB6  2A 41 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:4FB9  CD B7 4D            		CALL CHREGS
     833.  00:4FBC  22 41 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:4FBF  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:4FC2  32 48 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:4FC5  DD 21 5C F0         		LD IX,ChanC
     837.  00:4FC9  2A 43 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:4FCC  CD B7 4D            		CALL CHREGS
     839.  00:4FCF  22 43 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:4FD2                      
     841.  00:4FD2  2A 7D F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:4FD5  7C                  		LD A,H
     843.  00:4FD6  85                  		ADD A,L
     844.  00:4FD7  32 45 F1            		LD [AYREGS+AR_Noise],A
     845.  00:4FDA                      
     846.  00:4FDA  3A 1C F0            		LD A,[PT3_AddToEn]
     847.  00:4FDD  5F                  		LD E,A
     848.  00:4FDE  87                  		ADD A,A
     849.  00:4FDF  9F                  		SBC A,A
     850.  00:4FE0  57                  		LD D,A
     851.  00:4FE1  2A 4D F1            		LD HL,[EnvBase]
     852.  00:4FE4  19                  		ADD HL,DE
     853.  00:4FE5  ED 5B 7A F0         		LD DE,[CurESld]
     854.  00:4FE9  19                  		ADD HL,DE
     855.  00:4FEA  22 4A F1            		LD [AYREGS+AR_Env],HL
     856.  00:4FED                      
     857.  00:4FED  AF                  		XOR A
     858.  00:4FEE  21 7C F0            		LD HL,CurEDel
     859.  00:4FF1  B6                  		OR [HL]
     860.  00:4FF2  C8                  		RET Z
     861.  00:4FF3  35                  		DEC [HL]
     862.  00:4FF4  C0                  		RET NZ
     863.  00:4FF5  3A 1D F0            		LD A,[PT3_Env_Del]
     864.  00:4FF8  77                  		LD [HL],A
     865.  00:4FF9  2A 1E F0            		LD HL,[PT3_ESldAdd]
     866.  00:4FFC  19                  		ADD HL,DE
     867.  00:4FFD  22 7A F0            		LD [CurESld],HL
     868.  00:5000  C9                  		RET
     869.  00:5001                      
     870.  00:5001  AF                  PT3_ROUT:	XOR A
     871.  00:5002                      	
     872.  00:5002                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:5002  21 46 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:5005  CB FE               		set	7,[hl]
     875.  00:5007  CB B6               		res	6,[hl]
     876.  00:5009                      
     877.  00:5009  0E A0               		LD C,$A0
     878.  00:500B  21 3F F1            		LD HL,AYREGS
     879.  00:500E  ED 79               .LOUT:		OUT [C],A
     880.  00:5010  0C                  		INC C
     881.  00:5011  ED A3               		OUTI 
     882.  00:5013  0D                  		DEC C
     883.  00:5014  3C                  		INC A
     884.  00:5015  FE 0D               		CP 13
     885.  00:5017  20 F5               		JR NZ,.LOUT
     886.  00:5019  ED 79               		OUT [C],A
     887.  00:501B  7E                  		LD A,[HL]
     888.  00:501C  A7                  		AND A
     889.  00:501D  F8                  		RET M
     890.  00:501E  0C                  		INC C
     891.  00:501F  ED 79               		OUT [C],A
     892.  00:5021  C9                  		RET
     893.  00:5022                      
     894.  00:5022  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:5023  2A                  		db TCNEW_0-T_
     896.  00:5024  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:5025  00                  		db TCOLD_0-T_
     898.  00:5026  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:5027  0C                  		db TCNEW_1-T_
     900.  00:5028  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:5029  0C                  		db TCOLD_1-T_
     902.  00:502A  94                  		db (T_NEW_2-T1_)*2
     903.  00:502B  35                  		db TCNEW_2-T_
     904.  00:502C  30                  		db (T_OLD_2-T1_)*2
     905.  00:502D  0E                  		db TCOLD_2-T_
     906.  00:502E  60                  		db (T_NEW_3-T1_)*2
     907.  00:502F  20                  		db TCNEW_3-T_
     908.  00:5030  60                  		db (T_OLD_3-T1_)*2
     909.  00:5031  21                  		db TCOLD_3-T_
     910.  00:5032                      
     911.  00:5032                      T_:
     912.  00:5032                      
     913.  00:5032                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:5032  01 05 09 0B 0D 0F 13 15 
     914.  00:503A  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:503E                      TCNEW_1:	
     916.  00:503E  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:5040                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:5040  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:5049                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:5049  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:5052  57                  TCNEW_3:	db $56+1
     920.  00:5053                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:5053  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:505C                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:505C  1D 21 23 27 2B 2D 31 55 
     922.  00:5064  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:5067                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:5067  1B 21 25 29 2B 3B 4D 5F 
     924.  00:506F  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:5072                      
     926.  00:5072  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:5076                      
     928.  00:5076                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:5076  0D                  		db ($06EC*2)/256
     930.  00:5077  D8                  		db #d8
     931.  00:5078  69                  		db $0755-$06EC
     932.  00:5079  70                  		db $07C5-$0755
     933.  00:507A  76                  		db $083B-$07C5
     934.  00:507B  7D                  		db $08B8-$083B
     935.  00:507C  85                  		db $093D-$08B8
     936.  00:507D  8D                  		db $09CA-$093D
     937.  00:507E  95                  		db $0A5F-$09CA
     938.  00:507F  9D                  		db $0AFC-$0A5F
     939.  00:5080  A8                  		db $0BA4-$0AFC
     940.  00:5081  B1                  		db $0C55-$0BA4
     941.  00:5082  BB                  		db $0D10-$0C55
     942.  00:5083  0C                  		db ($066D*2)/256
     943.  00:5084  DA                  		db #da
     944.  00:5085  62                  		db $06CF-$066D
     945.  00:5086  68                  		db $0737-$06CF
     946.  00:5087  6D                  		db $07A4-$0737
     947.  00:5088  75                  		db $0819-$07A4
     948.  00:5089  7B                  		db $0894-$0819
     949.  00:508A  83                  		db $0917-$0894
     950.  00:508B  8A                  		db $09A1-$0917
     951.  00:508C  92                  		db $0A33-$09A1
     952.  00:508D  9C                  		db $0ACF-$0A33
     953.  00:508E  A4                  		db $0B73-$0ACF
     954.  00:508F  AF                  		db $0C22-$0B73
     955.  00:5090  B8                  		db $0CDA-$0C22
     956.  00:5091  0E                  		db ($0704*2)/256
     957.  00:5092  08                  		db #08
     958.  00:5093  6A                  		db $076E-$0704
     959.  00:5094  72                  		db $07E0-$076E
     960.  00:5095  78                  		db $0858-$07E0
     961.  00:5096  7E                  		db $08D6-$0858
     962.  00:5097  86                  		db $095C-$08D6
     963.  00:5098  90                  		db $09EC-$095C
     964.  00:5099  96                  		db $0A82-$09EC
     965.  00:509A  A0                  		db $0B22-$0A82
     966.  00:509B  AA                  		db $0BCC-$0B22
     967.  00:509C  B4                  		db $0C80-$0BCC
     968.  00:509D  BE                  		db $0D3E-$0C80
     969.  00:509E  0F                  		db ($07E0*2)/256
     970.  00:509F  C0                  		db #c0
     971.  00:50A0  78                  		db $0858-$07E0
     972.  00:50A1  88                  		db $08E0-$0858
     973.  00:50A2  80                  		db $0960-$08E0
     974.  00:50A3  90                  		db $09F0-$0960
     975.  00:50A4  98                  		db $0A88-$09F0
     976.  00:50A5  A0                  		db $0B28-$0A88
     977.  00:50A6  B0                  		db $0BD8-$0B28
     978.  00:50A7  A8                  		db $0C80-$0BD8
     979.  00:50A8  E0                  		db $0D60-$0C80
     980.  00:50A9  B0                  		db $0E10-$0D60
     981.  00:50AA  E8                  		db $0EF8-$0E10
     982.  00:50AB                      
     983.  00:50AB                      
     984.  00:50AB                      	;Variables del replayer... las coloco desde aqui.
     985.  00:50AB                      	;mirar que hace la directiva MAP del SJASM
     986.  00:50AB  (F000)              	map		#F000
     987.  00:50AB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     988.  00:50AB  (00:F000)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
     989.  00:50AB                                          ;bit7 is set each time, when loop point is passed
     990.  00:50AB  (00:F000)           PT3_MODADDR:	#2
     991.  00:50AB  (00:F002)           PT3_CrPsPtr:		#2
     992.  00:50AB  (00:F004)           PT3_SAMPTRS:		#2
     993.  00:50AB  (00:F006)           PT3_OrnPtrs:		#2
     994.  00:50AB  (00:F008)           PT3_PDSP:		#2
     995.  00:50AB  (00:F00A)           PT3_CSP:		#2 
     996.  00:50AB  (00:F00C)           PT3_PSP:		#2
     997.  00:50AB  (00:F00E)           PT3_PrNote:		#1
     998.  00:50AB  (00:F00F)           PT3_PrSlide:		#2
     999.  00:50AB  (00:F011)           PT3_AdInPtA:		#2
    1000.  00:50AB  (00:F013)           PT3_AdInPtB:		#2
    1001.  00:50AB  (00:F015)           PT3_AdInPtC:		#2
    1002.  00:50AB  (00:F017)           PT3_LPosPtr:		#2
    1003.  00:50AB  (00:F019)           PT3_PatsPtr:		#2
    1004.  00:50AB  (00:F01B)           PT3_Delay:		#1
    1005.  00:50AB  (00:F01C)           PT3_AddToEn:		#1
    1006.  00:50AB  (00:F01D)           PT3_Env_Del:		#1
    1007.  00:50AB  (00:F01E)           PT3_ESldAdd:		#2
    1008.  00:50AB  (00:F020)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1009.  00:50AB                      
    1010.  00:50AB  (00:F022)           VARS:			#0
    1011.  00:50AB                      
    1012.  00:50AB  (00:F022)           ChanA:			#29			;CHNPRM_Size
    1013.  00:50AB  (00:F03F)           ChanB:			#29			;CHNPRM_Size
    1014.  00:50AB  (00:F05C)           ChanC:			#29			;CHNPRM_Size
    1015.  00:50AB                      
    1016.  00:50AB                      ;GlobalVars
    1017.  00:50AB  (00:F079)           DelyCnt:		#1
    1018.  00:50AB  (00:F07A)           CurESld:		#2
    1019.  00:50AB  (00:F07C)           CurEDel:		#1
    1020.  00:50AB  (00:F07D)           Ns_Base_AddToNs:	#0
    1021.  00:50AB  (00:F07D)           Ns_Base:		#1
    1022.  00:50AB  (00:F07E)           AddToNs:		#1
    1023.  00:50AB                      
    1024.  00:50AB  (00:F07F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1025.  00:50AB                      
    1026.  00:50AB  (00:F13F)           AYREGS:			#0
    1027.  00:50AB  (00:F13F)           VT_:			#14
    1028.  00:50AB  (00:F14D)           EnvBase:		#2
    1029.  00:50AB  (00:F14F)           VAR0END:		#0
    1030.  00:50AB                      
    1031.  00:50AB  (00:F14F)           T1_:			#0		
    1032.  00:50AB  (00:F14F)           T_NEW_1:		#0
    1033.  00:50AB  (00:F14F)           T_OLD_1:		#24
    1034.  00:50AB  (00:F167)           T_OLD_2:		#24
    1035.  00:50AB  (00:F17F)           T_NEW_3:		#0
    1036.  00:50AB  (00:F17F)           T_OLD_3:		#2
    1037.  00:50AB  (00:F181)           T_OLD_0:		#0
    1038.  00:50AB  (00:F181)           T_NEW_0:		#24
    1039.  00:50AB  (00:F199)           T_NEW_2:		#166
    1040.  00:50AB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
    1041.  00:50AB  (0000)                  ENDMAP
      29   00:50AB                      ; AFX
      30   00:50AB                          include "include\ayFX-ROM.ASM"
       1.  00:50AB                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:50AB                      
       3.  00:50AB                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:50AB                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:50AB                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:50AB                      		; --- v1.2f/r	ayFX bank support
       7.  00:50AB                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:50AB                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:50AB                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:50AB                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:50AB                      		; --- v1.0	Initial release
      12.  00:50AB                      
      13.  00:50AB                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:50AB                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:50AB  (00:0000)           AYFXRELATIVE: 	equ 0
      16.  00:50AB                      
      17.  00:50AB                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:50AB                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:50AB  22 E8 C3            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:50AE  AF                  		xor	a				; a:=0
      21.  00:50AF  32 E7 C3            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:50B2  3C                  		inc	a				; Starting channel (=1)
      23.  00:50B3  32 F1 C3            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:50B6                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:50B6  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:50B8  32 EA C3            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:50BB  C9                  		ret					; Return
      28.  00:50BC                      
      29.  00:50BC                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:50BC                      		; --- INPUT: A -> sound to be played ---
      31.  00:50BC                      		; ---        C -> sound priority     ---
      32.  00:50BC  C5                  		push	bc				; Store bc in stack
      33.  00:50BD  D5                  		push	de				; Store de in stack
      34.  00:50BE  E5                  		push	hl				; Store hl in stack
      35.  00:50BF                      		; --- Check if the index is in the bank ---
      36.  00:50BF  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:50C0  2A E8 C3            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:50C3  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:50C4  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:50C5  28 06               		jr	z,.CHECK_PRI			; ...goto @@CHECK_PRI
      41.  00:50C7                      		; The bank has less than 256 samples
      42.  00:50C7  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:50C8  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:50C9  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:50CB  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:50CD                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:50CD                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:50CD  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:50CE  3A EA C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:50D1  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:50D2  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:50D4  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:50D6                      		; --- Set new priority ---
      54.  00:50D6  79                  		ld	a,c				; a:=New priority
      55.  00:50D7  E6 0F               		and	$0F				; We mask the priority
      56.  00:50D9  32 EA C3            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:50DC                      
      58.  00:50DC                      		IF ( AYFXRELATIVE == 1 )
      59.  00:50DC                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:50DC                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:50DC                    ~ 			ld	a,15				; a:=15
      62.  00:50DC                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:50DC                    ~ 			jr	z,@@INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:50DC                    ~ 			add	a,a				; a:=a*2
      65.  00:50DC                    ~ 			add	a,a				; a:=a*4
      66.  00:50DC                    ~ 			add	a,a				; a:=a*8
      67.  00:50DC                    ~ 			add	a,a				; a:=a*16
      68.  00:50DC                    ~ 			ld	e,a				; e:=a
      69.  00:50DC                    ~ 			ld	d,0				; de:=a
      70.  00:50DC                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:50DC                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:50DC                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:50DC                    ~ 		ENDIF
      74.  00:50DC                      
      75.  00:50DC                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:50DC  ED 5B E8 C3         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:50E0  13                  		inc	de				; de points to the increments table of the bank
      78.  00:50E1  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:50E2  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:50E4  29                  		add	hl,hl				; hl:=hl*2
      81.  00:50E5  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:50E6  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:50E7  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:50E8  56                  		ld	d,[hl]				; de:=increment
      85.  00:50E9  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:50EA  22 EB C3            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:50ED  AF                  		xor	a				; a:=0 (no errors)
      88.  00:50EE  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:50EF  D1                  		pop	de				; Retrieve de from stack
      90.  00:50F0  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:50F1  C9                  		ret					; Return
      92.  00:50F2                      
      93.  00:50F2                      		IF ( AYFXRELATIVE == 1 )
      94.  00:50F2                    ~ 	.INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:50F2                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:50F2                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:50F2                    ~ 			jr	.INIT_END			; Jumps to @@INIT_END
      98.  00:50F2                    ~ 		ENDIF
      99.  00:50F2                      
     100.  00:50F2                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:50F2  3A EA C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:50F5  B7                  		or	a				; If priority has bit 7 on...
     103.  00:50F6  F8                  		ret	m				; ...return
     104.  00:50F7                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:50F7  3A E7 C3            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:50FA  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:50FC  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:50FE  21 F1 C3            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:5101  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:5102  20 02               		jr	nz,.TAKECB			; If not zero jump to @@TAKECB
     111.  00:5104  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:5106                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:5106  2A EB C3            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:5109  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:510A  23                  		inc	hl				; Increment pointer
     116.  00:510B                      		; --- Check if there's new tone on stream ---
     117.  00:510B  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:510D  28 08               		jr	z,.CHECK_NN			; ...jump to @@CHECK_NN (no new tone)
     119.  00:510F                      		; --- Extract new tone from stream ---
     120.  00:510F  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:5110  23                  		inc	hl				; Increment pointer
     122.  00:5111  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:5112  23                  		inc	hl				; Increment pointer
     124.  00:5113  ED 53 ED C3         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:5117                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:5117  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:5119  28 09               		jr	z,.SETPOINTER			; ...jump to @@SETPOINTER (no new noise)
     128.  00:511B                      		; --- Extract new noise from stream ---
     129.  00:511B  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:511C  23                  		inc	hl				; Increment pointer
     131.  00:511D  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:511F  28 95               		jr	z,ayFX_END			; ...jump to ayFX_END
     133.  00:5121  32 EF C3            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:5124                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:5124  22 EB C3            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:5127                      		; --- Extract volume ---
     137.  00:5127  79                  		ld	a,c				; a:=Control byte
     138.  00:5128  E6 0F               		and	$0F				; lower nibble
     139.  00:512A                      
     140.  00:512A                      		IF ( AYFXRELATIVE == 1 )
     141.  00:512A                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:512A                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:512A                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:512A                    ~ 			ld	d,0				; d:=0
     145.  00:512A                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:512A                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:512A                    ~ 			or	a				; If relative volume is zero...
     148.  00:512A                    ~ 		ENDIF
     149.  00:512A                      
     150.  00:512A  32 F0 C3            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:512D  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:512E                      		; -------------------------------------
     153.  00:512E                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:512E                      		; -------------------------------------
     155.  00:512E                      		; --- Set noise channel ---
     156.  00:512E  CB 79               		bit	7,c				; If noise is off...
     157.  00:5130  20 06               		jr	nz,.SETMASKS			; ...jump to @@SETMASKS
     158.  00:5132  3A EF C3            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:5135  32 45 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:5138                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:5138  79                  		ld	a,c				; a:=Control byte
     162.  00:5139  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:513B  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:513D  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:513E                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:513E  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:513F  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:5140  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:5142                      		; --- Dump to correct channel ---
     170.  00:5142  21 F1 C3            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:5145  46                  		ld	b,[hl]				; Channel counter
     172.  00:5146                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:5146  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:5148                      .LAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:5148  CD 77 51            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:514B  32 49 F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:514E  CB 51               		bit	2,c				; If tone is off...
     178.  00:5150  C0                  		ret	nz				; ...return
     179.  00:5151  22 43 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:5154  C9                  		ret					; Return
     181.  00:5155                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:5155  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:5157  0F                  		rrca					; Rotate right OR mask
     184.  00:5158  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:515A                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:515A  CD 77 51            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:515D  32 48 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:5160  CB 49               		bit	1,c				; If tone is off...
     189.  00:5162  C0                  		ret	nz				; ...return
     190.  00:5163  22 41 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:5166  C9                  		ret					; Return
     192.  00:5167                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:5167  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:5169  0F                  		rrca					; Rotate right OR mask
     195.  00:516A                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:516A  CD 77 51            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:516D  32 47 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:5170  CB 41               		bit	0,c				; If tone is off...
     199.  00:5172  C0                  		ret	nz				; ...return
     200.  00:5173  22 3F F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:5176  C9                  		ret					; Return
     202.  00:5177                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:5177  4F                  		ld	c,a				; c:=OR mask
     204.  00:5178  3A 46 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:517B  A2                  		and	d				; AND mask
     206.  00:517C  B1                  		or	c				; OR mask
     207.  00:517D  32 46 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:5180  3A F0 C3            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:5183  2A ED C3            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:5186  C9                  		ret					; Return
     211.  00:5187                      
     212.  00:5187                      		IF ( AYFXRELATIVE == 1 )
     213.  00:5187                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:5187                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:5187                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:5187                    ~ 		ENDIF
      31   00:5187                      ; entities
      32   00:5187                          include "include\entities.asm"
       1.  00:5187                      ; Entities struct
       2.  00:5187                      ; 0 - on/off
       3.  00:5187                      ; 1 - x
       4.  00:5187                      ; 2 - y
       5.  00:5187                      ; 3 - energy
       6.  00:5187                      ; 4 - ENEMY_COLLISION_OFFSET_X
       7.  00:5187                      ; 5 - ENEMY_COLLISION_OFFSET_Y
       8.  00:5187                      ; 6 - ENEMY_COLLISION_WIDTH
       9.  00:5187                      ; 7 - ENEMY_COLLISION_HEIGHT
      10.  00:5187                      ; 8 - spritenumber in spat
      11.  00:5187                      ; 9 - damage
      12.  00:5187                      
      13.  00:5187                      init_playerDAT: db 1,$7F,$69,24,12,12,15,15,0
      13.  00:5187  01 7F 69 18 0C 0C 0F 0F 00 
      14.  00:5190                      enemy1_stg1DAT: db 1,$AF,$0F,4,16,16,16,16,4
      14.  00:5190  01 AF 0F 04 10 10 10 10 04 
      15.  00:5199                      
      33   00:5199                      START
      34   00:5199                      	; CODE
      35   00:5199  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      36   00:519C  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      37   00:519E  23                  	inc hl ; FORCLR+1
      38   00:519F  36 00               	ld [hl],0 ; Color de fondo 1=negro
      39   00:51A1  23                  	inc hl ; FORCLR+2
      40   00:51A2  36 00               	ld [hl],0 ; Color del borde 1=negro
      41   00:51A4  3E 08               	LD A,8
      42   00:51A6                      	;CALL CHGMOD    	
      43   00:51A6  CD C3 42                CALL SETPAGES32K
      44   00:51A9                      	;CALL opening_screen
      45   00:51A9                      	
      46   00:51A9                      	;CALL CHGET
      47   00:51A9                      	; Empieza el juego    
      48   00:51A9  CD 30 42            	call ClearVram_MSX2		
      49   00:51AC  CD D6 42            	call SET_SCREEN5_MODE    
      50   00:51AF  CD 24 42                call Set212Lines
      51   00:51B2  3E 01                   ld	a, SPR_DATA_PAGE			; page 
      52   00:51B4  32 00 70            	ld	(_bank2),a
      53   00:51B7                      
      54   00:51B7                          ; init sfx
      55   00:51B7  F3                      di	
      56   00:51B8  21 77 57            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
      57   00:51BB                          ;PUSH IX
      58   00:51BB  CD BC 4A                call	PT3_INIT			; Inicia el reproductor de PT3
      59   00:51BE  21 B3 96            	ld hl, AFX
      60   00:51C1  CD AB 50                call ayFX_SETUP
      61   00:51C4                          ;POP IX
      62   00:51C4  FB                      ei
      63   00:51C5                      
      64   00:51C5  CD DD 51                call INIT_CHARS_VARS
      65   00:51C8  CD A1 46                call initVDPBuffers    
      66   00:51CB                      
      67   00:51CB  3E FF                   LD A, -MOV_SPEED_GHOST
      68   00:51CD  32 6D C0            	LD (CHAR_SPEED_X_GHOST), A
      69   00:51D0  21 9C 8E                LD HL, PaletteData
      70   00:51D3  CD 6F 43                CALL SetPalette
      71   00:51D6                          
      72   00:51D6                              
      73   00:51D6                          ; Load Data to VDP and start entities
      74   00:51D6  CD 7E 52                CALL PRE_STAGE1
      75   00:51D9                          ; Start STG1    
      76   00:51D9  CD 99 52                CALL STAGE1
      77   00:51DC                      
      78   00:51DC                          ;call MAIN_LOOP
      79   00:51DC                          ;CALL CHGET
      80   00:51DC  C9                  	ret
      81   00:51DD                      
      82   00:51DD                      INIT_CHARS_VARS:    
      83   00:51DD  DD 21 7A C0             ld ix, SPRITE_ATTRS           
      84   00:51E1                          
      85   00:51E1  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      86   00:51E5  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      87   00:51E9  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      88   00:51ED                      
      89   00:51ED  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      90   00:51F1  DD 36 05 7F             ld (ix+5), 7Fh
      91   00:51F5  DD 36 06 04             ld (ix+6), 04h        
      92   00:51F9                      
      93   00:51F9  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      94   00:51FD  DD 36 09 7F             ld (ix+9), 7Fh
      95   00:5201  DD 36 0A 08             ld (ix+10), 08h        
      96   00:5205                      
      97   00:5205  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
      98   00:5209  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
      99   00:520D  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
     100   00:5211                          
     101   00:5211  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
     102   00:5215  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
     103   00:5219  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
     104   00:521D                          
     105   00:521D  AF                      XOR A
     106   00:521E  32 20 C0                LD (current_level), A
     107   00:5221  32 6A C0                LD (JIFFY_TEMP),A
     108   00:5224  32 6B C0                LD (CHAR_SPEED_X),A
     109   00:5227  32 6C C0                LD (CHAR_SPEED_Y),A
     110   00:522A  32 6D C0                LD (CHAR_SPEED_X_GHOST),A
     111   00:522D  32 72 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
     112   00:5230  32 75 C0                LD (CHAR_NEW_DIR_MAIN),A    
     113   00:5233  32 76 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
     114   00:5236  32 78 C0                LD (CHAR_DISTANCE_SHOOT),A
     115   00:5239  32 79 C0                LD (CHAR_SPEED_SHOOT),A
     116   00:523C  32 6F C0                LD (CHAR_GHOST_DEAD),A
     117   00:523F  32 77 C0                LD (CHAR_MIN_STEP), A
     118   00:5242  32 01 C1                LD (SPRITE_COLOR_REPLACE2), A
     119   00:5245  32 61 C0                LD (SHOWING_GUS_DIALOG), A
     120   00:5248  32 60 C0                LD (SHOWING_JOHN_DIALOG), A
     121   00:524B  32 5F C0                LD (SHOWING_MIKE_DIALOG), A
     122   00:524E  32 5E C0                LD (SHOWING_SKULL_STG1_DIALOG), A    
     123   00:5251  32 5D C0                LD (stg1_puzzle_solved), A
     124   00:5254  32 62 C0                LD (stg2_puzzle_solved), A
     125   00:5257  32 64 C0                LD (PLAYING_NOTE1_STG2), A
     126   00:525A  32 65 C0                LD (PLAYING_NOTE2_STG2), A
     127   00:525D  32 66 C0                LD (PLAYING_NOTE3_STG2), A
     128   00:5260  32 67 C0                LD (SHOWING_MURRAY_STG2), A
     129   00:5263  32 5F 00                LD (counter_P1_flickering), A
     130   00:5266                      
     131   00:5266                         ; LD A,$FF
     132   00:5266                          ;LD (OLD_KEY_PRESSED), A
     133   00:5266  32 00 C0                LD (counter_stg_solved), A
     134   00:5269  3E 01                   LD A,$01
     135   00:526B  32 74 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     136   00:526E                      
     137   00:526E  21 C0 80                ld hl, SPRITE_P1_DOWN
     138   00:5271  22 FD C0                ld (SPRITE_PTR_REPLACE), HL    
     139   00:5274  21 C0 86                ld hl, SPRITE_COLOR_P1_DOWN
     140   00:5277  22 FF C0                ld (SPRITE_COLOR_REPLACE), HL
     141   00:527A  22 01 C1                LD (SPRITE_COLOR_REPLACE2), HL
     142   00:527D                      
     143   00:527D                          
     144   00:527D  C9                      ret
     145   00:527E                      PRE_STAGE1
     146   00:527E                          ; Switch segment to TILES_PAGE
     147   00:527E  3E 02                   ld	a, TILES_PAGE			; page 
     148   00:5280  32 00 70            	ld	(_bank2),a
     149   00:5283                          
     150   00:5283                          ;We load the tiles on page 1 of VDP
     151   00:5283  21 00 80                LD HL, TILES1    
     152   00:5286  CD 20 43                call load_tiles_vdp
     153   00:5289                      
     154   00:5289                          ; Switch segment to SPR_DATA_PAGE
     155   00:5289  3E 01                   ld	a, SPR_DATA_PAGE			; page 
     156   00:528B  32 00 70            	ld	(_bank2),a
     157   00:528E                      
     158   00:528E                          ;We load the font on page 1 of VDP
     159   00:528E  CD 2A 43                call load_font_vdp
     160   00:5291                      
     161   00:5291                          ; set energy
     162   00:5291  21 10 40                LD HL, ANDY_MAX_ENERGY
     163   00:5294                          ;ADD HL, current_level
     164   00:5294  7E                      LD A, (HL)  ; no offset for level 1
     165   00:5295                          ;LD A, 0
     166   00:5295  32 08 C0                LD (ENTITY_PLAYER_POINTER+3), A
     167   00:5298                      
     168   00:5298  C9                      RET
     169   00:5299                      
     170   00:5299                      STAGE1:
     171   00:5299  CD 58 48                CALL DISSCR
     172   00:529C                          ;LD HL, CEMENTER1
     173   00:529C                          ;LD (BITMAP), HL
     174   00:529C                          ;LD B, :CEMENTER1
     175   00:529C                          ;call load_screen
     176   00:529C                          
     177   00:529C                          ; Draw screen using map and metatiles
     178   00:529C  21 4E 9A                LD HL, stg1_map_back
     179   00:529F  22 01 C0                LD (stg_map_ptr_back), HL
     180   00:52A2                          
     181   00:52A2  21 D7 9A                LD HL, stg1_map_front
     182   00:52A5  22 03 C0                LD (stg_map_ptr_front), HL
     183   00:52A8                           
     184   00:52A8  CD A9 49                call load_screen_v2    
     185   00:52AB                          
     186   00:52AB  CD FB 42                call DUMP_SPR_ALL
     187   00:52AE  CD 52 43                CALL DUMP_SPR_P1
     188   00:52B1                          
     189   00:52B1  21 8C 87                LD HL, mapa1
     190   00:52B4  11 07 C1                LD DE, MAP_RAM
     191   00:52B7  01 E0 02                LD BC, 736
     192   00:52BA  ED B0                   LDIR
     193   00:52BC                          
     194   00:52BC  21 07 C1                LD HL, MAP_RAM
     195   00:52BF  22 03 C1                LD (MAPA), HL    
     196   00:52C2                              
     197   00:52C2  CD B2 48                CALL DRAW_ANDY_ENERGY
     198   00:52C5                      
     199   00:52C5  3A 5D C0                LD A, (stg1_puzzle_solved)
     200   00:52C8  FE 04                   CP 4
     201   00:52CA  20 1F                   JR NZ, .nobackfromstg2
     202   00:52CC                              ; Open the gate!
     203   00:52CC  3E 03                   LD A, 3
     204   00:52CE  16 70                   LD D, 112
     205   00:52D0  1E 00                   LD E, 0
     206   00:52D2  CD 21 49                CALL draw_tile
     207   00:52D5                      
     208   00:52D5                          ; Modify MAP
     209   00:52D5  21 80 87                LD HL,stg1_gate
     210   00:52D8  11 15 C1                LD DE, MAP_RAM+14
     211   00:52DB  01 04 00                LD BC, 4
     212   00:52DE  ED B0                   LDIR
     213   00:52E0                      
     214   00:52E0  21 80 87                LD HL,stg1_gate
     215   00:52E3  11 35 C1                LD DE, MAP_RAM+46
     216   00:52E6  01 04 00                LD BC, 4
     217   00:52E9  ED B0                   LDIR
     218   00:52EB                          
     219   00:52EB                      .nobackfromstg2
     220   00:52EB                              ; Copy the energy bar to back buffer
     221   00:52EB  21 72 4A                LD HL, DiagBoxToBackBufROM
     222   00:52EE  CD 26 48            	call VDPCMD
     223   00:52F1                      ;	call VDP_Ready
     224   00:52F1  CD 51 48                CALL ENASCR    
     225   00:52F4                        
     226   00:52F4                      MAIN_LOOP:
     227   00:52F4                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     228   00:52F4                          
     229   00:52F4  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     230   00:52F7  FE 00                   CP $00
     231   00:52F9  CA 77 55                JP Z, STAGE2
     232   00:52FC  CD 37 43                call DUMP_SPR_ATTS    
     233   00:52FF                      
     234   00:52FF                      .check_tombs:
     235   00:52FF                      
     236   00:52FF  3A 5D C0                LD A, (stg1_puzzle_solved)
     237   00:5302  FE 03                   CP 3
     238   00:5304  CA 51 54                JP Z, .check_counter_puzzle_solved
     239   00:5307  FE 04                   CP 4
     240   00:5309  CA 68 54                JP Z, .animate_ghost
     241   00:530C                      
     242   00:530C  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     243   00:530F  FE C8                   CP MIKE_TOMB_STG1_X
     244   00:5311  20 62                   JR NZ, .check_john_tomb    
     245   00:5313                          
     246   00:5313  3A 5D C0                LD A, (stg1_puzzle_solved)
     247   00:5316  FE 02                   CP 2
     248   00:5318  C2 4F 53                JP NZ, .puzzle_wrong_order
     249   00:531B  3C                      INC A
     250   00:531C  32 5D C0                LD (stg1_puzzle_solved), A
     251   00:531F                          ; Open the gate!    
     252   00:531F  3E 03                   LD A, 3
     253   00:5321  16 70                   LD D, 112
     254   00:5323  1E 00                   LD E, 0
     255   00:5325  CD 21 49                CALL draw_tile
     256   00:5328                      
     257   00:5328  FD 21 10 41             LD IY, stg1_puzzle_solved_strings
     258   00:532C  CD 55 49                CALL print_strings_dialog_box_v2
     259   00:532F                      
     260   00:532F                          ; Modify MAP
     261   00:532F  21 80 87                LD HL,stg1_gate
     262   00:5332  11 15 C1                LD DE, MAP_RAM+14
     263   00:5335  01 04 00                LD BC, 4
     264   00:5338  ED B0                   LDIR
     265   00:533A                      
     266   00:533A  21 80 87                LD HL,stg1_gate
     267   00:533D  11 35 C1                LD DE, MAP_RAM+46
     268   00:5340  01 04 00                LD BC, 4
     269   00:5343  ED B0                   LDIR
     270   00:5345                          ; afx
     271   00:5345  3E 02                   LD A,2
     272   00:5347  0E 00                   LD C, 0
     273   00:5349  CD BC 50                CALL ayFX_INIT
     274   00:534C                      
     275   00:534C  C3 68 54                JP .animate_ghost
     276   00:534F                      
     277   00:534F                      .puzzle_wrong_order
     278   00:534F  3A 5F C0                LD A, (SHOWING_MIKE_DIALOG)
     279   00:5352  FE 01                   CP 1
     280   00:5354  CA 68 54                JP Z, .animate_ghost    
     281   00:5357  FD 21 16 40             LD IY, mike_tomb_strings
     282   00:535B  CD 55 49                CALL print_strings_dialog_box_v2
     283   00:535E  3E 01                   LD A,1
     284   00:5360  32 5F C0                LD (SHOWING_MIKE_DIALOG), A
     285   00:5363  AF                      XOR A
     286   00:5364  32 5D C0                LD (stg1_puzzle_solved), A
     287   00:5367                      
     288   00:5367  21 86 87                LD HL,stg1_gate_blocked
     289   00:536A  11 34 C1                LD DE, MAP_RAM+45
     290   00:536D  01 06 00                LD BC, 6
     291   00:5370  ED B0                   LDIR
     292   00:5372                      
     293   00:5372  C3 68 54                JP .animate_ghost
     294   00:5375                      
     295   00:5375                      .check_john_tomb:
     296   00:5375  FE 29                   CP JOHN_TOMB_STG1_X
     297   00:5377  20 33                   jr nz, .check_gus_tomb
     298   00:5379  3A 60 C0                LD A, (SHOWING_JOHN_DIALOG)
     299   00:537C  FE 01                   CP 1
     300   00:537E  CA 68 54                JP Z, .animate_ghost
     301   00:5381  FD 21 55 40             LD IY, john_tomb_strings
     302   00:5385  CD 55 49                CALL print_strings_dialog_box_v2
     303   00:5388  3E 01                   LD A,1
     304   00:538A  32 60 C0                LD (SHOWING_JOHN_DIALOG), A
     305   00:538D  3A 5D C0                LD A, (stg1_puzzle_solved)
     306   00:5390  FE 01                   CP 1
     307   00:5392  C2 68 54                JP NZ, .animate_ghost
     308   00:5395  3C                      INC A
     309   00:5396  32 5D C0                LD (stg1_puzzle_solved), A
     310   00:5399                          ; Half open gate
     311   00:5399  3E 02                   LD A, 2
     312   00:539B  16 70                   LD D, 112
     313   00:539D  1E 00                   LD E, 0
     314   00:539F  CD 21 49                CALL draw_tile
     315   00:53A2                      
     316   00:53A2                          ; afx
     317   00:53A2  3E 00                   LD A,0
     318   00:53A4  0E 00                   LD C, 0
     319   00:53A6  CD BC 50                CALL ayFX_INIT
     320   00:53A9                      
     321   00:53A9  C3 68 54                JP .animate_ghost
     322   00:53AC                      
     323   00:53AC                      .check_gus_tomb:
     324   00:53AC  FE 49                   CP GUS_TOMB_STG1_X
     325   00:53AE  C2 ED 53                JP nz, .check_skull_hint
     326   00:53B1  3A 61 C0                LD A, (SHOWING_GUS_DIALOG)
     327   00:53B4  FE 01                   CP 1
     328   00:53B6  CA 68 54                JP Z, .animate_ghost
     329   00:53B9  DD 7E 00                LD A, (ix)
     330   00:53BC  FE 78                   CP GUS_TOMB_STG1_Y
     331   00:53BE  DA 68 54                jp c, .animate_ghost
     332   00:53C1  FD 21 92 40             LD IY, gus_tomb_strings
     333   00:53C5  CD 55 49                CALL print_strings_dialog_box_v2
     334   00:53C8  3E 01                   LD A,1
     335   00:53CA  32 61 C0                LD (SHOWING_GUS_DIALOG), A
     336   00:53CD  32 5D C0                LD (stg1_puzzle_solved), A
     337   00:53D0                          ; Remove the lockpad    
     338   00:53D0  3E 01                   LD A, 1
     339   00:53D2  16 70                   LD D, 112
     340   00:53D4  1E 00                   LD E, 0
     341   00:53D6  CD 21 49                call draw_tile
     342   00:53D9                      
     343   00:53D9  21 80 87                LD HL,stg1_gate
     344   00:53DC  11 36 C1                LD DE, MAP_RAM+47
     345   00:53DF  01 02 00                LD BC, 2
     346   00:53E2  ED B0                   LDIR
     347   00:53E4                      
     348   00:53E4                          ; afx
     349   00:53E4  3E 01                   LD A,1
     350   00:53E6  0E 00                   LD C, 0
     351   00:53E8  CD BC 50                CALL ayFX_INIT
     352   00:53EB                      
     353   00:53EB  18 7B                   JR .animate_ghost
     354   00:53ED                      
     355   00:53ED                      .check_skull_hint:
     356   00:53ED  FE 69                   CP SKULL_TOMB_STG1_X
     357   00:53EF  20 20                   jr nz, .check_mike_dialog_box
     358   00:53F1                              
     359   00:53F1  DD 7E 00                LD A, (ix)
     360   00:53F4  FE 5A                   CP SKULL_TOMB_STG1_Y1
     361   00:53F6  38 19                   jr c, .check_mike_dialog_box
     362   00:53F8  FE 64                   CP SKULL_TOMB_STG1_Y2
     363   00:53FA  30 15                   jr nc, .check_mike_dialog_box
     364   00:53FC                      
     365   00:53FC  3A 5E C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     366   00:53FF  FE 01                   CP 1
     367   00:5401  28 65                   JR Z, .animate_ghost
     368   00:5403  FD 21 D3 40             LD IY, stg1_skull_strings
     369   00:5407  CD 55 49                CALL print_strings_dialog_box_v2
     370   00:540A  3E 01                   LD A,1
     371   00:540C  32 5E C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     372   00:540F  18 57                   JR .animate_ghost
     373   00:5411                      
     374   00:5411                      .check_mike_dialog_box
     375   00:5411  3A 5F C0                LD A, (SHOWING_MIKE_DIALOG)
     376   00:5414  FE 01                   CP 1
     377   00:5416  20 09                   JR nz, .check_gus_dialog
     378   00:5418  CD DD 47                CALL CLEAR_DIALOG_BOX
     379   00:541B  AF                      XOR A
     380   00:541C  32 5F C0                LD (SHOWING_MIKE_DIALOG), A
     381   00:541F  18 47                   JR .animate_ghost
     382   00:5421                      
     383   00:5421                      .check_gus_dialog
     384   00:5421  3A 61 C0                LD A, (SHOWING_GUS_DIALOG)
     385   00:5424  FE 01                   CP 1
     386   00:5426  20 09                   JR nz, .check_john_dialog
     387   00:5428  CD DD 47                CALL CLEAR_DIALOG_BOX
     388   00:542B  AF                      XOR A
     389   00:542C  32 61 C0                LD (SHOWING_GUS_DIALOG), A
     390   00:542F  18 37                   JR .animate_ghost
     391   00:5431                      
     392   00:5431                      .check_john_dialog
     393   00:5431  3A 60 C0                LD A, (SHOWING_JOHN_DIALOG)
     394   00:5434  FE 01                   CP 1
     395   00:5436  20 09                   JR nz, .check_skull_dialog
     396   00:5438  CD DD 47                CALL CLEAR_DIALOG_BOX
     397   00:543B  AF                      XOR A
     398   00:543C  32 60 C0                LD (SHOWING_JOHN_DIALOG), A
     399   00:543F  18 27                   JR .animate_ghost
     400   00:5441                      
     401   00:5441                      .check_skull_dialog
     402   00:5441  3A 5E C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     403   00:5444  FE 01                   CP 1
     404   00:5446  20 20                   JR nz, .animate_ghost
     405   00:5448  CD DD 47                CALL CLEAR_DIALOG_BOX
     406   00:544B  AF                      XOR A
     407   00:544C  32 5E C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     408   00:544F  18 17                   JR .animate_ghost    
     409   00:5451                      
     410   00:5451                      .check_counter_puzzle_solved
     411   00:5451  3A 00 C0                LD A, (counter_stg_solved)
     412   00:5454  FE 6F                   CP counter_stg1_solved_max
     413   00:5456  30 06                   JR nc, .hide_dialog_puzzle_solved
     414   00:5458  3C                      INC A
     415   00:5459  32 00 C0                LD (counter_stg_solved), A
     416   00:545C  18 0A                   jr .animate_ghost
     417   00:545E                      
     418   00:545E                      .hide_dialog_puzzle_solved
     419   00:545E  3A 5D C0                LD A, (stg1_puzzle_solved)
     420   00:5461  3C                      INC a
     421   00:5462  32 5D C0                LD (stg1_puzzle_solved), A
     422   00:5465  CD DD 47                call CLEAR_DIALOG_BOX    
     423   00:5468                      
     424   00:5468                      .animate_ghost    
     425   00:5468  3A 6F C0                LD A,(CHAR_GHOST_DEAD)
     426   00:546B  FE 01                   CP $01
     427   00:546D  CA E1 54                JP Z,.continue
     428   00:5470  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     429   00:5473  2A 6D C0            	LD HL, (CHAR_SPEED_X_GHOST)
     430   00:5476  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     431   00:5477                          
     432   00:5477  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     433   00:547A  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     434   00:547D  FE 50                   CP $50
     435   00:547F  CA 8A 54                JP Z,.CHANGE_DIR_RIGHT
     436   00:5482  FE AF                   CP $AF
     437   00:5484  CA 97 54                JP Z,.CHANGE_DIR_LEFT
     438   00:5487                          		
     439   00:5487  C3 A0 54                JP .check_pattern
     440   00:548A                      
     441   00:548A                      .CHANGE_DIR_RIGHT:
     442   00:548A  3E 01                   LD A, MOV_SPEED_GHOST
     443   00:548C  32 6D C0            	LD (CHAR_SPEED_X_GHOST), A
     444   00:548F  3E FF                   LD A,$FF
     445   00:5491  32 72 C0                LD (CHAR_DIR_GHOST1),A
     446   00:5494  C3 A0 54                JP .check_pattern
     447   00:5497                      
     448   00:5497                      .CHANGE_DIR_LEFT:
     449   00:5497  3E FF                   LD A, -MOV_SPEED_GHOST
     450   00:5499  32 6D C0            	LD (CHAR_SPEED_X_GHOST), A
     451   00:549C  AF                      XOR A   ; Pone A a 0
     452   00:549D  32 72 C0                LD (CHAR_DIR_GHOST1),A
     453   00:54A0                      
     454   00:54A0                      .check_pattern:
     455   00:54A0  3A 72 C0                LD A,(CHAR_DIR_GHOST1)
     456   00:54A3  FE FF                   CP $FF
     457   00:54A5  CA C6 54                JP Z,.check_pattern_RIGHT
     458   00:54A8  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     459   00:54AB  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     460   00:54AD  CA BB 54                jp z,.change_pattern_L
     461   00:54B0  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     462   00:54B4  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     463   00:54B8  C3 E1 54                jp .continue
     464   00:54BB                      .change_pattern_L:
     465   00:54BB  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     466   00:54BF  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     467   00:54C3  C3 E1 54                jp .continue
     468   00:54C6                      
     469   00:54C6                      .check_pattern_RIGHT
     470   00:54C6  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     471   00:54C9  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     472   00:54CB  CA D9 54                jp z,.change_pattern_R
     473   00:54CE  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     474   00:54D2  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     475   00:54D6  C3 E1 54                jp .continue
     476   00:54D9                      .change_pattern_R:
     477   00:54D9  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     478   00:54DD  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     479   00:54E1                      
     480   00:54E1                      .continue:    
     481   00:54E1  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)     ; Cargamos la X
     482   00:54E4  32 0F C0                LD (ENTITY_ENEMY1_POINTER+1), A
     483   00:54E7  DD 7E 10                LD A, (ix+SPR_GHOST_STG1)           ; Cargamos la Y
     484   00:54EA  32 10 C0                LD (ENTITY_ENEMY1_POINTER+2), A
     485   00:54ED                          
     486   00:54ED  FD 21 0E C0             LD IY, ENTITY_ENEMY1_POINTER
     487   00:54F1  CD A8 41                CALL EnemyCollisionCheck
     488   00:54F4  30 23                   JR NC, .move_shoot
     489   00:54F6                          ; Collision
     490   00:54F6  3A 08 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     491   00:54F9  D6 04                   SUB 4    
     492   00:54FB  32 08 C0                LD (ENTITY_PLAYER_POINTER+ENTITY_ENERGY), A
     493   00:54FE  3E 07                   LD A, 7
     494   00:5500  0E 00                   LD C, 0
     495   00:5502  CD BC 50                CALL ayFX_INIT  
     496   00:5505  CD B2 48                call DRAW_ANDY_ENERGY
     497   00:5508                          ; Copiamos al buffer parte inferior de pantalla
     498   00:5508  21 72 4A                LD HL, DiagBoxToBackBufROM
     499   00:550B  CD 26 48            	call VDPCMD
     500   00:550E                      
     501   00:550E  CD 86 46                call BOUNCE_ANDY
     502   00:5511  3A 08 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     503   00:5514  FE 00                   CP 0
     504   00:5516  CA C2 57                JP Z, game_over
     505   00:5519                      
     506   00:5519                      .move_shoot:
     507   00:5519  CD AB 45                CALL MOVE_SHOOT
     508   00:551C                      .CHECK_GHOST:
     509   00:551C                          ; Comprobamos si hay colision con el fantasma
     510   00:551C  3A 6F C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     511   00:551F  FE 01                   CP $01
     512   00:5521  CA 45 55                JP Z,.check_KB
     513   00:5524                      
     514   00:5524  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     515   00:5527  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     516   00:552A  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     517   00:552D  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     518   00:5530  CD D7 41                call check_spr_collision
     519   00:5533  FE 01                   CP 1
     520   00:5535  C2 45 55                JP NZ,.check_KB
     521   00:5538                      
     522   00:5538                      .KILL_GHOST:
     523   00:5538  3E 01                   LD A,1
     524   00:553A  32 6F C0                LD (CHAR_GHOST_DEAD),A
     525   00:553D  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     526   00:5541  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     527   00:5545                      
     528   00:5545                      .check_KB:
     529   00:5545  76                      halt    	
     530   00:5546  F3                  	di       
     531   00:5547  DD E5                   PUSH IX
     532   00:5549  CD 01 50            	call	PT3_ROUT			;envia datos a al PSG 	   
     533   00:554C  CD 09 4F            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     534   00:554F  CD F2 50            	call ayFX_PLAY
     535   00:5552  DD E1                   POP IX
     536   00:5554  FB                      ei
     537   00:5555                      
     538   00:5555  3E 08                   ld a, 8
     539   00:5557  CD 41 01            	call SNSMAT   
     540   00:555A                          
     541   00:555A  4F                      LD C,A    
     542   00:555B                          
     543   00:555B  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     544   00:555D  CC F3 43                call z, move_right
     545   00:5560                          
     546   00:5560  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     547   00:5562  CC 52 44                call z, move_left
     548   00:5565                      
     549   00:5565  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     550   00:5567  CC 7E 43                call z, move_up
     551   00:556A                      
     552   00:556A  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     553   00:556C  CC B8 43                call z, move_down
     554   00:556F                      
     555   00:556F                      no_arrows:
     556   00:556F  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     557   00:5571  CC 16 46                call z,SHOOT_MAIN_CHAR
     558   00:5574                      
     559   00:5574                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     560   00:5574                          ;ret z
     561   00:5574                          
     562   00:5574  C3 F4 52                jp MAIN_LOOP
     563   00:5577                      
     564   00:5577                      
     565   00:5577                      STAGE2:
     566   00:5577  CD 58 48                CALL DISSCR
     567   00:557A  76                      halt
     568   00:557B  F3                  	di       
     569   00:557C  DD E5                   PUSH IX	
     570   00:557E  CD 01 50                call	PT3_ROUT			;envia datos a al PSG 	   
     571   00:5581  CD 09 4F            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     572   00:5584  DD E1               	POP IX
     573   00:5586  FB                      ei
     574   00:5587                          ;LD HL, CEMENTER2
     575   00:5587                          ;LD (BITMAP), HL
     576   00:5587                          ;LD B, :CEMENTER2
     577   00:5587                      
     578   00:5587                          ;call load_screen
     579   00:5587                          
     580   00:5587                          ; Draw screen using map and metatiles
     581   00:5587  21 F0 9A                LD HL, stg2_map_back
     582   00:558A  22 01 C0                LD (stg_map_ptr_back), HL
     583   00:558D                          
     584   00:558D  21 51 9B                LD HL, stg2_map_front
     585   00:5590  22 03 C0                LD (stg_map_ptr_front), HL
     586   00:5593                           
     587   00:5593  CD A9 49                call load_screen_v2    
     588   00:5596                      
     589   00:5596  21 6C 8A                LD HL, mapa2
     590   00:5599  22 03 C1                LD (MAPA), HL
     591   00:559C                      
     592   00:559C  3E 01                   ld	a, SPR_DATA_PAGE			; page 
     593   00:559E  32 00 70            	ld	(_bank2),a
     594   00:55A1                       
     595   00:55A1                          ; Ponemos el P1 por encima del marco
     596   00:55A1  DD 36 00 AF             LD (ix), 175      ; mask 0
     597   00:55A5  DD 36 04 AF             LD (ix+4), 175    ; mask 1
     598   00:55A9  DD 36 08 AF             LD (ix+8), 175    ; mask 2
     599   00:55AD                          
     600   00:55AD  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     601   00:55B1  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     602   00:55B5                          
     603   00:55B5  CD FB 42                CALL DUMP_SPR_ALL
     604   00:55B8  CD 52 43                CALL DUMP_SPR_P1        
     605   00:55BB                          
     606   00:55BB                          ;LD HL, ANDY_MAX_ENERGY
     607   00:55BB                          ;LD A, (HL)  
     608   00:55BB                          ;INC A           ; level 1
     609   00:55BB                          ;LD (ENTITY_PLAYER_POINTER+3), A
     610   00:55BB                      
     611   00:55BB                          ;XOR a
     612   00:55BB                          ;LD (current_level), A
     613   00:55BB  CD DD 47                CALL CLEAR_DIALOG_BOX
     614   00:55BE  CD B2 48                CALL DRAW_ANDY_ENERGY
     615   00:55C1                          
     616   00:55C1  CD 51 48                CALL ENASCR
     617   00:55C4                          
     618   00:55C4                      MAIN_LOOP2:
     619   00:55C4                          ;halt    
     620   00:55C4  76                      halt
     621   00:55C5  F3                  	di       
     622   00:55C6  DD E5                   PUSH IX
     623   00:55C8  CD 01 50            	call	PT3_ROUT			;envia datos a al PSG 	   
     624   00:55CB  CD 09 4F            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     625   00:55CE  CD F2 50            	call ayFX_PLAY
     626   00:55D1  DD E1                   POP IX
     627   00:55D3  FB                      ei
     628   00:55D4  DD 7E 00                LD A, (ix)    
     629   00:55D7  FE B0                   CP 176      ; Miramos si la Y es 160 para pasar a stg1
     630   00:55D9  C2 FB 55                JP NZ, .no_screen_change
     631   00:55DC                          ; Ponemos el P1 al principio de la pantalla 1
     632   00:55DC  DD 36 00 01             LD (ix), 1          ; P1.Y = 1
     633   00:55E0  DD 36 04 01             LD (ix+4), 1
     634   00:55E4  DD 36 08 01             LD (ix+8), 1
     635   00:55E8                      
     636   00:55E8  3A 6F C0                LD A, (CHAR_GHOST_DEAD)
     637   00:55EB  FE 01                   CP $01
     638   00:55ED  CA F8 55                JP Z, .GHOST_DEAD
     639   00:55F0  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     640   00:55F4  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     641   00:55F8                      .GHOST_DEAD:    
     642   00:55F8  CD 99 52                CALL STAGE1
     643   00:55FB                      
     644   00:55FB                      .no_screen_change:
     645   00:55FB                          ; Check if the puzzle is solved, then don't check tiles
     646   00:55FB  3A 62 C0                LD A, (stg2_puzzle_solved)
     647   00:55FE  FE 04                   CP 4
     648   00:5600  CA 97 57                JP Z, .continue
     649   00:5603  FE 03                   CP 3
     650   00:5605  20 5A                   JR NZ, .check_murray_tile
     651   00:5607                      
     652   00:5607  3A 00 C0                LD A, (counter_stg_solved)
     653   00:560A  FE 5F                   CP counter_stg2_solved_max
     654   00:560C  30 34                   JR nc, .open_gargoyle_gate
     655   00:560E  3C                      INC A
     656   00:560F  32 00 C0                LD (counter_stg_solved), A
     657   00:5612                      
     658   00:5612  3A 63 C0                LD A, (stg2_delay_border_change)
     659   00:5615  FE 05                   CP STG2_DELAY_CYCLES
     660   00:5617  C2 3B 56                JP NZ, .inc_stg2_delay_border_change
     661   00:561A  AF                      XOR A
     662   00:561B  32 63 C0                LD (stg2_delay_border_change), A
     663   00:561E  3A EB F3                LD A, (BDRCLR)
     664   00:5621  FE 0F                   CP 15
     665   00:5623  28 0B                   JR Z, .change_bdr_clr
     666   00:5625                          ; change border color to black
     667   00:5625  21 EB F3                ld hl,BDRCLR
     668   00:5628  36 0F                   ld (HL), 15
     669   00:562A  CD 62 00                call CHGCLR    
     670   00:562D  C3 97 57                JP .continue
     671   00:5630                      
     672   00:5630                      .change_bdr_clr
     673   00:5630                          ; change border color to red
     674   00:5630  21 EB F3                ld HL,BDRCLR
     675   00:5633  36 01                   ld (HL), 1
     676   00:5635  CD 62 00                call CHGCLR
     677   00:5638  C3 97 57                JP .continue
     678   00:563B                      
     679   00:563B                      .inc_stg2_delay_border_change
     680   00:563B  3C                      INC A
     681   00:563C  32 63 C0                LD (stg2_delay_border_change), A
     682   00:563F  C3 97 57                JP .continue
     683   00:5642                      
     684   00:5642                      .open_gargoyle_gate
     685   00:5642                          ; Open gargoyle Tile
     686   00:5642  3E 11                   LD A, 17
     687   00:5644  16 78                   LD D, 120
     688   00:5646  1E 50                   LD E, 80
     689   00:5648  CD 21 49                call draw_tile
     690   00:564B                          ; Change border color
     691   00:564B  21 EB F3                ld hl,BDRCLR
     692   00:564E  36 0F                   ld (HL), 15
     693   00:5650  CD 62 00                call CHGCLR
     694   00:5653  3A 62 C0                LD A, (stg2_puzzle_solved)
     695   00:5656  3C                      INC A
     696   00:5657  32 62 C0                LD (stg2_puzzle_solved), A
     697   00:565A                              ; afx
     698   00:565A  3E 00                   LD A,0
     699   00:565C  0E 00                   LD C, 0
     700   00:565E  CD BC 50                CALL ayFX_INIT
     701   00:5661                      
     702   00:5661                      .check_murray_tile
     703   00:5661                          ; Check murray coords
     704   00:5661  DD 7E 00                LD A, (ix)
     705   00:5664  FE AC                   CP STG2_MURRAY_YH
     706   00:5666  30 29                   JR NC, .check_tile1
     707   00:5668  FE 9C                   CP STG2_MURRAY_YL
     708   00:566A  38 25                   JR C, .check_tile1
     709   00:566C                          ; XH > X > XL
     710   00:566C  DD 7E 01                LD A, (ix+1)
     711   00:566F  FE 71                   CP STG2_MURRAY_X
     712   00:5671  20 1E                   JR NZ, .check_tile1    
     713   00:5673                          ; Check if the dialog is showing
     714   00:5673  3A 67 C0                LD A, (SHOWING_MURRAY_STG2)
     715   00:5676  FE 01                   CP 1
     716   00:5678  CA 97 57                jp z, .continue
     717   00:567B                      
     718   00:567B                          ; Showing dialog
     719   00:567B  3E 01                   LD A, 1
     720   00:567D  32 67 C0                LD (SHOWING_MURRAY_STG2), A
     721   00:5680  FD 21 6D 41             LD IY, stg2_skull_strings
     722   00:5684  CD 55 49                CALL print_strings_dialog_box_v2
     723   00:5687  3E 06                   LD A, 6
     724   00:5689  0E 00                   LD C, 0
     725   00:568B  CD BC 50                CALL ayFX_INIT  
     726   00:568E  C3 97 57                jp .continue
     727   00:5691                      
     728   00:5691                      .check_tile1:
     729   00:5691                          ; check X,Y to play Black Sabbath
     730   00:5691                          ; Ya tenemos en A la Y
     731   00:5691                          ; YH > y > YL
     732   00:5691  DD 7E 00                LD A, (ix)
     733   00:5694  FE 70                   CP STG2_TILE1_YH
     734   00:5696  30 65                   JR NC, .check_tile3
     735   00:5698  FE 60                   CP STG2_TILE1_YL
     736   00:569A  38 61                   JR C, .check_tile3
     737   00:569C                          ; XH > X > XL    
     738   00:569C  DD 7E 01                LD A, (ix+1)
     739   00:569F  FE 78                   CP STG2_TILE1_XH
     740   00:56A1  30 27                   JR NC, .check_next_tile
     741   00:56A3  FE 70                   CP STG2_TILE1_XL
     742   00:56A5  38 23                   JR C, .check_next_tile
     743   00:56A7                          ; Check if the tile is pressed
     744   00:56A7  3A 64 C0                LD A, (PLAYING_NOTE1_STG2)
     745   00:56AA  FE 01                   CP 1
     746   00:56AC  CA 97 57                jp z, .continue
     747   00:56AF                          
     748   00:56AF                          ; Playing note
     749   00:56AF  3E 01                   LD A, 1
     750   00:56B1  32 64 C0                LD (PLAYING_NOTE1_STG2), A
     751   00:56B4                          ;We set the puzzle to 1
     752   00:56B4  32 62 C0                LD (stg2_puzzle_solved), A
     753   00:56B7                      
     754   00:56B7  3E 03                   LD A, 3
     755   00:56B9  0E 00                   LD C, 0
     756   00:56BB  CD BC 50                CALL ayFX_INIT    
     757   00:56BE                          
     758   00:56BE  3E 08                   LD A, 8
     759   00:56C0  16 70                   LD D, 112
     760   00:56C2  1E 70                   LD E, 112
     761   00:56C4  CD 21 49                CALL draw_tile
     762   00:56C7  C3 97 57                jp .continue
     763   00:56CA                      
     764   00:56CA                      .check_next_tile:
     765   00:56CA  FE 81                   CP STG2_TILE2_XH
     766   00:56CC  30 2F                   JR NC, .check_tile3
     767   00:56CE  FE 79                   CP STG2_TILE2_XL
     768   00:56D0  38 2B                   JR C, .check_tile3
     769   00:56D2                          ; Check if the tile is pressed
     770   00:56D2  3A 65 C0                LD A, (PLAYING_NOTE2_STG2)
     771   00:56D5  FE 01                   CP 1
     772   00:56D7  CA 97 57                jp z, .continue
     773   00:56DA                          
     774   00:56DA                          ; Playing note
     775   00:56DA  3E 01                   LD A, 1
     776   00:56DC  32 65 C0                LD (PLAYING_NOTE2_STG2), A
     777   00:56DF                          
     778   00:56DF  3E 04                   LD A, 4
     779   00:56E1  0E 00                   LD C, 0
     780   00:56E3  CD BC 50                CALL ayFX_INIT    
     781   00:56E6                          ; Draw pressed tile
     782   00:56E6  3E 08                   LD A, 8
     783   00:56E8  16 80                   LD D, 128
     784   00:56EA  1E 70                   LD E, 112
     785   00:56EC  CD 21 49                CALL draw_tile
     786   00:56EF                          ; Check puzzle
     787   00:56EF  3A 62 C0                LD A, (stg2_puzzle_solved)
     788   00:56F2  FE 01                   CP 1
     789   00:56F4  20 04                   JR NZ, .wrong_order
     790   00:56F6  3C                      INC A
     791   00:56F7  32 62 C0                LD (stg2_puzzle_solved), A
     792   00:56FA                          
     793   00:56FA                      .wrong_order    
     794   00:56FA                      
     795   00:56FA  C3 97 57                JP .continue
     796   00:56FD                      
     797   00:56FD                      .check_tile3:
     798   00:56FD                          ; YH > y > YL
     799   00:56FD  FE 90                   CP STG2_TILE3_YH
     800   00:56FF  30 46                   JR NC, .check_walk_on_tile3
     801   00:5701  FE 80                   CP STG2_TILE3_YL
     802   00:5703  38 42                   JR C, .check_walk_on_tile3
     803   00:5705                          ; XH > X > XL
     804   00:5705  DD 7E 01                LD A, (ix+1)
     805   00:5708  FE 81                   CP STG2_TILE3_XH
     806   00:570A  30 3B                   JR NC, .check_walk_on_tile3
     807   00:570C  FE 79                   CP STG2_TILE3_XL
     808   00:570E  38 37                   JR C, .check_walk_on_tile3
     809   00:5710                             
     810   00:5710                          ; Check if the tile is pressed
     811   00:5710  3A 66 C0                LD A, (PLAYING_NOTE3_STG2)
     812   00:5713  FE 01                   CP 1
     813   00:5715  CA 97 57                jp z, .continue
     814   00:5718                              
     815   00:5718                          ; Playing note
     816   00:5718  3E 01                   LD A, 1
     817   00:571A  32 66 C0                LD (PLAYING_NOTE3_STG2), A
     818   00:571D                      
     819   00:571D  3E 05                   LD A, 5
     820   00:571F  0E 00                   LD C, 0
     821   00:5721  CD BC 50                CALL ayFX_INIT    
     822   00:5724                      
     823   00:5724  3E 08                   LD A, 8
     824   00:5726  16 80                   LD D, 128
     825   00:5728  1E 90                   LD E, 144
     826   00:572A  CD 21 49                CALL draw_tile
     827   00:572D                          ; Check puzzle
     828   00:572D  3A 62 C0                LD A, (stg2_puzzle_solved)
     829   00:5730  FE 02                   CP 2
     830   00:5732  20 0D                   JR NZ, .wrong_order_tile3
     831   00:5734  3C                      INC A
     832   00:5735  32 62 C0                LD (stg2_puzzle_solved), A    
     833   00:5738                          ; reset the counter to wait until the note is played
     834   00:5738  AF                      XOR A
     835   00:5739  32 00 C0                LD (counter_stg_solved), A
     836   00:573C  32 63 C0                LD (stg2_delay_border_change), A
     837   00:573F  18 56                   JR .continue
     838   00:5741                      
     839   00:5741                      .wrong_order_tile3
     840   00:5741                          ;reset the counter
     841   00:5741  AF                      XOR A
     842   00:5742  32 62 C0                LD (stg2_puzzle_solved), A    
     843   00:5745  18 50                   JR .continue
     844   00:5747                      
     845   00:5747                      .check_walk_on_tile3
     846   00:5747  3A 66 C0                LD A, (PLAYING_NOTE3_STG2)
     847   00:574A  FE 01                   CP 1
     848   00:574C  20 0F                   JR NZ, .check_walk_on_tile2
     849   00:574E  3E 07                   LD A, 7
     850   00:5750  16 80                   LD D, 128
     851   00:5752  1E 90                   LD E, 144
     852   00:5754  CD 21 49                CALL draw_tile
     853   00:5757  AF                      XOR A
     854   00:5758  32 66 C0                LD (PLAYING_NOTE3_STG2), A
     855   00:575B  18 3A                   jr .continue
     856   00:575D                      
     857   00:575D                      .check_walk_on_tile2
     858   00:575D  3A 65 C0                LD A, (PLAYING_NOTE2_STG2)
     859   00:5760  FE 01                   CP 1
     860   00:5762  20 0F                   JR NZ, .check_walk_on_tile1
     861   00:5764  3E 07                   LD A, 7
     862   00:5766  16 80                   LD D, 128
     863   00:5768  1E 70                   LD E, 112
     864   00:576A  CD 21 49                CALL draw_tile
     865   00:576D  AF                      XOR A
     866   00:576E  32 65 C0                LD (PLAYING_NOTE2_STG2), A
     867   00:5771  18 24                   jr .continue
     868   00:5773                      
     869   00:5773                      .check_walk_on_tile1
     870   00:5773  3A 64 C0                LD A, (PLAYING_NOTE1_STG2)
     871   00:5776  FE 01                   CP 1
     872   00:5778  20 0F                   JR NZ, .check_murray_dialog
     873   00:577A  3E 07                   LD A, 7
     874   00:577C  16 70                   LD D, 112
     875   00:577E  1E 70                   LD E, 112
     876   00:5780  CD 21 49                CALL draw_tile
     877   00:5783  AF                      XOR A
     878   00:5784  32 64 C0                LD (PLAYING_NOTE1_STG2), A
     879   00:5787  18 0E                   jr .continue
     880   00:5789                      
     881   00:5789                      .check_murray_dialog
     882   00:5789  3A 67 C0                LD A, (SHOWING_MURRAY_STG2)
     883   00:578C  FE 01                   CP 1
     884   00:578E  20 07                   JR NZ, .continue
     885   00:5790  AF                      XOR a
     886   00:5791  32 67 C0                LD (SHOWING_MURRAY_STG2), A
     887   00:5794  CD DD 47                call CLEAR_DIALOG_BOX
     888   00:5797                      
     889   00:5797                      .continue:
     890   00:5797  CD 37 43                call DUMP_SPR_ATTS      
     891   00:579A  CD AB 45                CALL MOVE_SHOOT    
     892   00:579D                      
     893   00:579D  3E 08                   ld a, 8
     894   00:579F  CD 41 01            	call SNSMAT   
     895   00:57A2  4F                      LD C,A    
     896   00:57A3                              
     897   00:57A3  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     898   00:57A5  CC F3 43                call z, move_right
     899   00:57A8                          
     900   00:57A8  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     901   00:57AA  CC 52 44                call z, move_left
     902   00:57AD                      
     903   00:57AD  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     904   00:57AF  CC 7E 43                call z, move_up
     905   00:57B2                      
     906   00:57B2  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     907   00:57B4  CC B8 43                call z, move_down
     908   00:57B7                      
     909   00:57B7  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     910   00:57B9  CC 16 46                call z,SHOOT_MAIN_CHAR
     911   00:57BC                      
     912   00:57BC  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     913   00:57BE  C8                      ret z
     914   00:57BF                      
     915   00:57BF  C3 C4 55                jp MAIN_LOOP2
     916   00:57C2                      
     917   00:57C2                      game_over:
     918   00:57C2  FD 21 49 41             LD IY, game_over_strings
     919   00:57C6  CD 55 49                call print_strings_dialog_box_v2    
     920   00:57C9  CD B0 4A                call PT3_MUTE
     921   00:57CC                      
     922   00:57CC                      .loop1   
     923   00:57CC  76                      halt
     924   00:57CD  3E 08                   ld a, 8
     925   00:57CF  CD 41 01            	call SNSMAT   
     926   00:57D2  4F                      LD C,A    
     927   00:57D3                              
     928   00:57D3  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     929   00:57D5  CA 99 51                JP z,START
     930   00:57D8                      
     931   00:57D8  18 F2                   JR .loop1
     932   00:57DA                      
     933   00:57DA                      SONG:
     934   00:57DA  (0F92)                  incbin "sfx\Nostalgy_sincabecera.pt3"
     935   00:676C  (01)                 PAGE 1
     936   01:8000                      ; CODE O NO
     937   01:8000                          include "include\BTH_data.asm"    
       1.  01:8000                      SPRITE_P1_UP:
       2.  01:8000                          ; UP 1        
       3.  01:8000                          ; mask 0
       4.  01:8000                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  01:8000  07 0F 05 1F 1F 3F 3F 7F 
       5.  01:8008                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  01:8008  00 4F 70 38 0C 0E 07 04 
       6.  01:8010                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  01:8010  E0 F0 A0 F8 F8 F8 FC FE 
       7.  01:8018                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  01:8018  06 F2 1E 3C 30 70 C0 00 
       8.  01:8020                          ; mask 1
       9.  01:8020                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  01:8020  00 00 18 00 1F 00 00 00 
      10.  01:8028                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  01:8028  7F 50 4F 3F 0F 0F 07 02 
      11.  01:8030                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  01:8030  00 00 10 00 FC 00 00 00 
      12.  01:8038                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  01:8038  F2 0E FE FC F0 F0 A0 00 
      13.  01:8040                          ; mask 2
      14.  01:8040                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  01:8040  00 00 1A 00 00 00 00 00 
      15.  01:8048                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  01:8048  7F 60 00 00 00 00 07 00 
      16.  01:8050                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  01:8050  00 00 50 00 00 00 00 00 
      17.  01:8058                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  01:8058  FA 0E 00 00 00 00 80 00 
      18.  01:8060                          
      19.  01:8060                          ; UP 2
      20.  01:8060                          ; mask 0
      21.  01:8060                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  01:8060  07 0F 05 1F 1F 3F 3F 7F 
      22.  01:8068                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  01:8068  10 4F 70 38 0C 0E 05 00 
      23.  01:8070                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  01:8070  E0 F0 A0 F8 F8 F8 FC FE 
      24.  01:8078                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  01:8078  02 F2 1E 3C 30 70 E0 40 
      25.  01:8080                          ; mask 1
      26.  01:8080                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  01:8080  00 00 18 00 1F 00 00 00 
      27.  01:8088                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  01:8088  4F 70 7F 3F 0F 0F 03 00 
      28.  01:8090                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  01:8090  00 00 10 00 FC 00 00 00 
      29.  01:8098                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  01:8098  FE 06 F2 FC F0 F0 E0 20 
      30.  01:80A0                          ; mask 2
      31.  01:80A0                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  01:80A0  00 00 1A 00 00 00 00 00 
      32.  01:80A8                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  01:80A8  6F 70 00 00 00 00 01 00 
      33.  01:80B0                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  01:80B0  00 00 50 00 00 00 00 00 
      34.  01:80B8                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  01:80B8  FE 0A 00 00 00 00 E0 00 
      35.  01:80C0                          
      36.  01:80C0                      SPRITE_P1_DOWN:
      37.  01:80C0                          ; DOWN 1 - 00h
      38.  01:80C0                          ; mask 0
      39.  01:80C0                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  01:80C0  07 0F 04 06 0F 07 1F 3F 
      40.  01:80C8                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  01:80C8  4C 4E 4E 3C 0C 0E 0F 08 
      41.  01:80D0                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  01:80D0  E0 F0 20 20 70 E0 F8 FC 
      42.  01:80D8                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  01:80D8  32 72 7E 7C 70 F0 C0 00 
      43.  01:80E0                          ; mask 1
      44.  01:80E0                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  01:80E0  00 00 19 19 10 3A 3A 78 
      45.  01:80E8                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  01:80E8  5F 5E 7E 3C 0C 0E 0F 04 
      46.  01:80F0                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  01:80F0  00 00 90 D8 88 58 5C 1E 
      47.  01:80F8                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  01:80F8  F6 FE FE 3C 30 70 A0 00 
      48.  01:8100                          ; mask 2
      49.  01:8100                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  01:8100  00 00 1B 00 10 00 00 00 
      50.  01:8108                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  01:8108  6F 6F 7F 3F 0F 0F 0F 00 
      51.  01:8110                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  01:8110  00 00 D0 00 8C 00 00 00 
      52.  01:8118                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  01:8118  FA 7E 7E BC B0 70 80 00 
      53.  01:8120                          
      54.  01:8120                          ; DOWN 2
      55.  01:8120                          ; mask 0 - 0Ch    
      56.  01:8120                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  01:8120  07 0F 04 06 0F 07 1F 3F 
      57.  01:8128                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  01:8128  4C 4E 7E 3C 0C 0E 05 00 
      58.  01:8130                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  01:8130  E0 F0 20 20 70 E0 F8 FC 
      59.  01:8138                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  01:8138  32 72 72 7C 70 F0 E0 40 
      60.  01:8140                          ; mask 1
      61.  01:8140                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  01:8140  00 00 19 19 10 3A 3A 78 
      62.  01:8148                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  01:8148  5F 7E 7E 3C 0C 0E 03 00 
      63.  01:8150                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  01:8150  00 00 90 D8 88 58 5C 1E 
      64.  01:8158                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  01:8158  F6 F6 FE 3C 30 70 E0 20 
      65.  01:8160                          ; mask 2
      66.  01:8160                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  01:8160  00 00 1B 00 10 00 00 00 
      67.  01:8168                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  01:8168  6F 7F 7F 3F 0F 0F 01 00 
      68.  01:8170                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  01:8170  00 00 D0 00 8C 00 00 00 
      69.  01:8178                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  01:8178  FA 7A 7E BC B0 70 E0 00 
      70.  01:8180                      
      71.  01:8180                      SPRITE_P1_LEFT:         
      72.  01:8180                          ; --- Slot 3
      73.  01:8180                          ; mask 0
      74.  01:8180                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  01:8180  07 0F 02 05 07 07 0F 0F 
      75.  01:8188                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  01:8188  07 03 03 03 01 03 03 04 
      76.  01:8190                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  01:8190  E0 F0 80 00 A0 E0 C0 C0 
      77.  01:8198                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  01:8198  E0 B0 70 F0 F0 F0 C0 00 
      78.  01:81A0                          ; mask 1
      79.  01:81A0                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  01:81A0  00 00 18 1A 08 0A 12 10 
      80.  01:81A8                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  01:81A8  08 03 02 02 01 03 03 03 
      81.  01:81B0                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  01:81B0  00 00 78 F8 5C 1C 7E 7E 
      82.  01:81B8                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  01:81B8  FE 3E 7E 7C F8 F8 B0 00 
      83.  01:81C0                          ; mask 2
      84.  01:81C0                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  01:81C0  00 00 1D 00 28 00 00 00 
      85.  01:81C8                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  01:81C8  00 07 06 06 07 07 03 00 
      86.  01:81D0                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  01:81D0  00 00 78 00 5C 00 00 00 
      87.  01:81D8                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  01:81D8  00 7E FE 7C F8 F8 80 00 
      88.  01:81E0                          ; --- Slot 4
      89.  01:81E0                          ; mask 0
      90.  01:81E0                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  01:81E0  07 0F 02 05 07 07 0F 0F 
      91.  01:81E8                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  01:81E8  07 03 03 03 01 03 04 00 
      92.  01:81F0                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  01:81F0  E0 F0 80 00 A0 E0 C0 C0 
      93.  01:81F8                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  01:81F8  E0 B0 D0 D0 F0 F0 E0 40 
      94.  01:8200                          ; mask 1
      95.  01:8200                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  01:8200  00 00 18 1A 08 0A 12 10 
      96.  01:8208                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  01:8208  08 03 03 03 01 03 03 00 
      97.  01:8210                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  01:8210  00 00 78 F8 5C 1C 7E 7E 
      98.  01:8218                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  01:8218  FE 3E 9E 9C 98 F8 E0 30 
      99.  01:8220                          ; mask 2
     100.  01:8220                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  01:8220  00 00 1D 00 28 00 00 00 
     101.  01:8228                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  01:8228  00 07 07 07 07 07 00 00 
     102.  01:8230                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  01:8230  00 00 78 00 5C 00 00 00 
     103.  01:8238                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  01:8238  00 7E BE BC 98 F8 E0 00 
     104.  01:8240                      
     105.  01:8240                      SPRITE_P1_RIGHT:
     106.  01:8240                          ; --- Slot 0
     107.  01:8240                          ; mask 0
     108.  01:8240                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  01:8240  07 0F 01 00 05 07 03 03 
     109.  01:8248                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  01:8248  07 0D 0E 0F 0F 0F 03 00 
     110.  01:8250                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  01:8250  E0 F0 40 A0 E0 E0 F0 F0 
     111.  01:8258                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  01:8258  E0 C0 C0 C0 80 C0 C0 20 
     112.  01:8260                          ; mask 1
     113.  01:8260                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  01:8260  00 00 1E 1F 3A 38 7E 7E 
     114.  01:8268                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  01:8268  7F 7C 7E 3E 1F 1F 0D 00 
     115.  01:8270                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  01:8270  00 00 18 58 10 50 48 08 
     116.  01:8278                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  01:8278  10 C0 40 40 80 C0 C0 C0 
     117.  01:8280                          ; mask 2
     118.  01:8280                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  01:8280  00 00 1E 00 3A 00 00 00 
     119.  01:8288                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  01:8288  00 7E 7F 3E 1F 1F 01 00 
     120.  01:8290                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  01:8290  00 00 B8 00 14 00 00 00 
     121.  01:8298                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  01:8298  00 E0 60 60 E0 E0 C0 00 
     122.  01:82A0                          
     123.  01:82A0                          ; --- Slot 2
     124.  01:82A0                         ; mask 0
     125.  01:82A0                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  01:82A0  07 0F 01 00 05 07 03 03 
     126.  01:82A8                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  01:82A8  07 0D 0B 0B 0F 0F 07 02 
     127.  01:82B0                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  01:82B0  E0 F0 40 A0 E0 E0 F0 F0 
     128.  01:82B8                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  01:82B8  E0 C0 C0 C0 80 C0 20 00 
     129.  01:82C0                          ; mask 1
     130.  01:82C0                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  01:82C0  00 00 1E 1F 3A 38 7E 7E 
     131.  01:82C8                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  01:82C8  7F 7C 79 39 19 1F 07 0C 
     132.  01:82D0                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  01:82D0  00 00 18 58 10 50 48 08 
     133.  01:82D8                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  01:82D8  10 C0 C0 C0 80 C0 C0 00 
     134.  01:82E0                              ; mask 2
     135.  01:82E0                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  01:82E0  00 00 1E 00 3A 00 00 00 
     136.  01:82E8                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  01:82E8  00 7E 7D 3D 19 1F 07 00 
     137.  01:82F0                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  01:82F0  00 00 B8 00 14 00 00 00 
     138.  01:82F8                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  01:82F8  00 E0 E0 E0 E0 E0 00 00 
     139.  01:8300                          
     140.  01:8300                      SPRITE_PATTERN:    
     141.  01:8300                          ; P1 - DOWN 1 
     142.  01:8300                          ; DOWN 1 - 00h
     143.  01:8300                          ; mask 0
     144.  01:8300                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  01:8300  07 0F 04 06 0F 07 1F 3F 
     145.  01:8308                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  01:8308  4C 4E 4E 3C 0C 0E 0F 08 
     146.  01:8310                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  01:8310  E0 F0 20 20 70 E0 F8 FC 
     147.  01:8318                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  01:8318  32 72 7E 7C 70 F0 C0 00 
     148.  01:8320                          ; mask 1
     149.  01:8320                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  01:8320  00 00 19 19 10 3A 3A 78 
     150.  01:8328                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  01:8328  5F 5E 7E 3C 0C 0E 0F 04 
     151.  01:8330                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  01:8330  00 00 90 D8 88 58 5C 1E 
     152.  01:8338                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  01:8338  F6 FE FE 3C 30 70 A0 00 
     153.  01:8340                          ; mask 2
     154.  01:8340                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  01:8340  00 00 1B 00 10 00 00 00 
     155.  01:8348                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  01:8348  6F 6F 7F 3F 0F 0F 0F 00 
     156.  01:8350                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  01:8350  00 00 D0 00 8C 00 00 00 
     157.  01:8358                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  01:8358  FA 7E 7E BC B0 70 80 00 
     158.  01:8360                          
     159.  01:8360                          ; DOWN 2
     160.  01:8360                          ; mask 0 - 0Ch    
     161.  01:8360                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  01:8360  07 0F 04 06 0F 07 1F 3F 
     162.  01:8368                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  01:8368  4C 4E 7E 3C 0C 0E 05 00 
     163.  01:8370                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  01:8370  E0 F0 20 20 70 E0 F8 FC 
     164.  01:8378                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  01:8378  32 72 72 7C 70 F0 E0 40 
     165.  01:8380                          ; mask 1
     166.  01:8380                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  01:8380  00 00 19 19 10 3A 3A 78 
     167.  01:8388                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  01:8388  5F 7E 7E 3C 0C 0E 03 00 
     168.  01:8390                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  01:8390  00 00 90 D8 88 58 5C 1E 
     169.  01:8398                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  01:8398  F6 F6 FE 3C 30 70 E0 20 
     170.  01:83A0                          ; mask 2
     171.  01:83A0                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  01:83A0  00 00 1B 00 10 00 00 00 
     172.  01:83A8                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  01:83A8  6F 7F 7F 3F 0F 0F 01 00 
     173.  01:83B0                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  01:83B0  00 00 D0 00 8C 00 00 00 
     174.  01:83B8                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  01:83B8  FA 7A 7E BC B0 70 E0 00 
     175.  01:83C0                          
     176.  01:83C0                          ; Antichrist - RIGHT
     177.  01:83C0                          ; mask 0 - 18h    
     178.  01:83C0                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  01:83C0  00 00 00 01 01 01 01 01 
     179.  01:83C8                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  01:83C8  01 01 07 07 01 01 00 00 
     180.  01:83D0                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  01:83D0  00 00 00 80 80 80 80 80 
     181.  01:83D8                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  01:83D8  80 80 E0 E0 80 80 00 00 
     182.  01:83E0                      
     183.  01:83E0                          ;Ghost 1 Left - 1CH
     184.  01:83E0                          ; mask 0
     185.  01:83E0                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  01:83E0  03 04 08 68 B5 90 50 40 
     186.  01:83E8                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  01:83E8  22 20 10 10 08 06 03 00 
     187.  01:83F0                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  01:83F0  C0 E0 70 36 BB 33 26 06 
     188.  01:83F8                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  01:83F8  0C 18 3E 19 07 0C F8 E0 
     189.  01:8400                          ; mask 1    20h
     190.  01:8400                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  01:8400  00 07 0F 6F DF FF 6F 7F 
     191.  01:8408                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  01:8408  3F 3F 1F 1F 0F 05 03 00 
     192.  01:8410                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  01:8410  00 20 90 D6 DD DD DA FA 
     193.  01:8418                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  01:8418  F4 E8 CE EF FB F4 18 00 
     194.  01:8420                          
     195.  01:8420                          ; Ghost 2 Left - 24h
     196.  01:8420                          ; mask 0    24-h
     197.  01:8420                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  01:8420  03 04 08 08 65 B0 90 40 
     198.  01:8428                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  01:8428  22 20 10 10 08 06 01 00 
     199.  01:8430                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  01:8430  C0 E0 70 30 B6 3B 27 06 
     200.  01:8438                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  01:8438  0C 18 3C 1A 06 0C F0 C0 
     201.  01:8440                          ; mask 1    28h
     202.  01:8440                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  01:8440  00 07 0F 0F 6F DF EF 7F 
     203.  01:8448                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  01:8448  3F 3F 1F 1F 0F 05 01 00 
     204.  01:8450                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  01:8450  00 20 90 D0 D6 DD D9 FA 
     205.  01:8458                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  01:8458  F4 E8 CC EE FA F4 30 00 
     206.  01:8460                      
     207.  01:8460                          ; Ghost 1 Right - 2Ch
     208.  01:8460                          ; mask 0
     209.  01:8460                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  01:8460  03 07 0E 6C DD CC 64 60 
     210.  01:8468                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  01:8468  30 18 7C 98 E0 30 1F 07 
     211.  01:8470                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  01:8470  C0 20 10 16 AD 09 0A 02 
     212.  01:8478                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  01:8478  44 04 08 08 10 60 C0 00 
     213.  01:8480                          ; mask 1    - 30h
     214.  01:8480                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  01:8480  00 04 09 6B BB BB 5B 5F 
     215.  01:8488                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  01:8488  2F 17 73 F7 DF 2F 18 00 
     216.  01:8490                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  01:8490  00 E0 F0 F6 FB FF F6 FE 
     217.  01:8498                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  01:8498  FC FC F8 F8 F0 A0 C0 00 
     218.  01:84A0                          
     219.  01:84A0                          ; Ghost 2 Right - 34h
     220.  01:84A0                          ; mask 0
     221.  01:84A0                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  01:84A0  03 07 0E 0C 6D DC E4 60 
     222.  01:84A8                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  01:84A8  30 18 3C 58 60 30 0F 03 
     223.  01:84B0                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  01:84B0  C0 20 10 10 A6 0D 09 02 
     224.  01:84B8                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  01:84B8  44 04 08 08 10 60 80 00 
     225.  01:84C0                          ; mask 1    38h
     226.  01:84C0                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  01:84C0  00 04 09 0B 6B BB 9B 5F 
     227.  01:84C8                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  01:84C8  2F 17 33 77 5F 2F 0C 00 
     228.  01:84D0                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  01:84D0  00 E0 F0 F0 F6 FB F7 FE 
     229.  01:84D8                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  01:84D8  FC FC F8 F8 F0 A0 80 00 
     230.  01:84E0                          
     231.  01:84E0                      
     232.  01:84E0                          ; Esqueleto Left - 1
     233.  01:84E0                          ; mask 0 - 3Ch
     234.  01:84E0                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  01:84E0  1F 1B 2E 24 3F 1F 1F 00 
     235.  01:84E8                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  01:84E8  03 05 09 04 01 02 02 04 
     236.  01:84F0                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  01:84F0  80 C0 C0 C0 80 00 00 80 
     237.  01:84F8                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  01:84F8  E0 D0 C8 C4 C0 20 20 40 
     238.  01:8500                          ; mask 1 - 40h
     239.  01:8500                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  01:8500  1F 1F 3F 3F 3F 1E 0A 00 
     240.  01:8508                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  01:8508  03 05 09 04 01 00 00 00 
     241.  01:8510                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  01:8510  00 80 80 80 00 00 00 00 
     242.  01:8518                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  01:8518  80 10 88 84 80 00 00 00 
     243.  01:8520                      
     244.  01:8520                          ; Esqueleto Left - 2
     245.  01:8520                          ; mask 0 - 44h
     246.  01:8520                          ; mask 0
     247.  01:8520                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  01:8520  0F 0D 17 12 1F 0F 0F 00 
     248.  01:8528                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  01:8528  03 05 09 10 01 06 08 00 
     249.  01:8530                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  01:8530  C0 E0 60 60 C0 80 80 80 
     250.  01:8538                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  01:8538  E0 D0 C8 D0 C0 20 20 50 
     251.  01:8540                          ; mask 1 - 48h
     252.  01:8540                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  01:8540  0F 0F 1F 1F 1F 0F 05 00 
     253.  01:8548                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  01:8548  03 05 09 10 01 00 00 00 
     254.  01:8550                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  01:8550  80 C0 C0 C0 80 00 00 00 
     255.  01:8558                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  01:8558  80 10 88 90 80 00 20 40 
     256.  01:8560                          
     257.  01:8560                          ; Esqueleto Right - 1
     258.  01:8560                          ; mask 0 - 4Ch
     259.  01:8560                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  01:8560  01 03 03 03 01 00 00 01 
     260.  01:8568                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  01:8568  07 0B 13 23 03 04 04 02 
     261.  01:8570                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  01:8570  F8 D8 74 24 FC F8 F8 00 
     262.  01:8578                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  01:8578  C0 A0 90 20 80 40 40 20 
     263.  01:8580                          ; mask 1 - 50h
     264.  01:8580                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  01:8580  00 01 01 01 00 00 00 00 
     265.  01:8588                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  01:8588  01 08 11 21 01 00 00 00 
     266.  01:8590                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  01:8590  F8 F8 FC FC FC 78 50 00 
     267.  01:8598                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  01:8598  C0 A0 90 20 80 00 00 00 
     268.  01:85A0                          
     269.  01:85A0                          ; Esqueleto Right - 2
     270.  01:85A0                          ; mask 0 - 54h
     271.  01:85A0                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  01:85A0  03 07 06 06 03 01 01 01 
     272.  01:85A8                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  01:85A8  07 0B 13 0B 03 04 04 0A 
     273.  01:85B0                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  01:85B0  F0 B0 E8 48 F8 F0 F0 00 
     274.  01:85B8                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  01:85B8  C0 A0 90 08 80 60 10 00 
     275.  01:85C0                          ; mask 1 - 58h
     276.  01:85C0                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  01:85C0  01 03 03 03 01 00 00 00 
     277.  01:85C8                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  01:85C8  01 08 11 09 01 00 04 02 
     278.  01:85D0                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  01:85D0  F0 F0 F8 F8 F8 F0 A0 00 
     279.  01:85D8                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  01:85D8  C0 A0 90 08 80 00 00 00 
     280.  01:85E0                      
     281.  01:85E0                      SPRITE_COLOR_TABLE:       
     282.  01:85E0                           ;P1 - DOWN 1
     283.  01:85E0                          ;DOWN 1
     284.  01:85E0                          ; attr 0
     285.  01:85E0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  01:85E0  05 05 0A 0B 0B 0B 0B 0B 
     286.  01:85E8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  01:85E8  04 04 04 0A 0A 0A 08 08 
     287.  01:85F0                          ; attr 1
     288.  01:85F0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  01:85F0  00 00 44 45 45 45 45 45 
     289.  01:85F8                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  01:85F8  4A 4A 4A 44 44 44 45 45 
     290.  01:8600                          ; attr 2
     291.  01:8600                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  01:8600  00 00 41 00 40 00 00 00 
     292.  01:8608                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  01:8608  41 41 41 41 41 41 42 00 
     293.  01:8610                               
     294.  01:8610                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  01:8610                          ; Disparo - antichrist    
     296.  01:8610                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  01:8610  00 00 00 0A 0A 0A 0A 0A 
     297.  01:8618                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  01:8618  0A 0A 0A 0A 0A 0A 00 00 
     298.  01:8620                          ; Fantasma
     299.  01:8620                          ; attr 0
     300.  01:8620                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  01:8620  0F 08 08 08 08 08 08 08 
     301.  01:8628                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  01:8628  08 08 08 08 08 08 08 0F 
     302.  01:8630                          ; attr 1
     303.  01:8630                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  01:8630  00 47 47 47 47 47 47 47 
     304.  01:8638                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  01:8638  47 47 47 47 47 47 47 00 
     305.  01:8640                          
     306.  01:8640                          
     307.  01:8640                          ; Esqueleto Left 1
     308.  01:8640                          ; attr 0
     309.  01:8640                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  01:8640  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  01:8648                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  01:8648  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  01:8650                          ; attr 1
     312.  01:8650                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  01:8650  41 49 49 49 41 41 41 00 
     313.  01:8658                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  01:8658  41 41 41 41 41 00 00 00 
     314.  01:8660                      
     315.  01:8660                      SPRITE_COLOR_P1_UP:
     316.  01:8660                          ;UP 1
     317.  01:8660                          ; attr 0
     318.  01:8660                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  01:8660  05 05 0A 05 05 05 05 05 
     319.  01:8668                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  01:8668  0A 05 0B 0A 0A 0A 08 08 
     320.  01:8670                          ; attr 1
     321.  01:8670                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  01:8670  00 00 44 00 40 00 00 00 
     322.  01:8678                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  01:8678  44 4A 45 45 45 45 45 45 
     323.  01:8680                          ; attr 2
     324.  01:8680                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  01:8680  00 00 41 00 00 00 00 00 
     325.  01:8688                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  01:8688  41 41 00 00 00 00 42 00 
     326.  01:8690                          
     327.  01:8690                          ;SPRITE_COLOR_P1_UP2:
     328.  01:8690                          ;UP 1
     329.  01:8690                          ; attr 0
     330.  01:8690                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  01:8690  05 05 0A 05 05 05 05 05 
     331.  01:8698                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  01:8698  0A 05 0B 0A 0A 0A 08 08 
     332.  01:86A0                          ; attr 1
     333.  01:86A0                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  01:86A0  00 00 44 00 40 00 00 00 
     334.  01:86A8                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  01:86A8  44 4A 45 45 45 45 45 45 
     335.  01:86B0                          ; attr 2
     336.  01:86B0                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  01:86B0  00 00 41 00 00 00 00 00 
     337.  01:86B8                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  01:86B8  41 41 00 00 00 00 42 00 
     338.  01:86C0                      
     339.  01:86C0                      
     340.  01:86C0                      SPRITE_COLOR_P1_DOWN:
     341.  01:86C0                          ;DOWN 1
     342.  01:86C0                          ; attr 0
     343.  01:86C0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  01:86C0  05 05 0A 0B 0B 0B 0B 0B 
     344.  01:86C8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  01:86C8  04 04 04 0A 0A 0A 08 08 
     345.  01:86D0                          ; attr 1
     346.  01:86D0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  01:86D0  00 00 44 45 45 45 45 45 
     347.  01:86D8                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  01:86D8  4A 4A 4A 44 44 44 45 45 
     348.  01:86E0                          ; attr 2
     349.  01:86E0                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  01:86E0  00 00 41 00 40 00 00 00 
     350.  01:86E8                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  01:86E8  41 41 41 41 41 41 42 00 
     351.  01:86F0                          ;SPRITE_COLOR_P1_DOWN2:
     352.  01:86F0                          ;DOWN 1
     353.  01:86F0                          ; attr 0
     354.  01:86F0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  01:86F0  05 05 0A 0B 0B 0B 0B 0B 
     355.  01:86F8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  01:86F8  04 04 04 0A 0A 0A 08 08 
     356.  01:8700                          ; attr 1
     357.  01:8700                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  01:8700  00 00 44 45 45 45 45 45 
     358.  01:8708                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  01:8708  4A 4A 4A 44 44 44 45 45 
     359.  01:8710                          ; attr 2
     360.  01:8710                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  01:8710  00 00 41 00 40 00 00 00 
     361.  01:8718                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  01:8718  41 41 41 41 41 41 42 00 
     362.  01:8720                      
     363.  01:8720                      SPRITE_COLOR_P1_RIGHT:
     364.  01:8720                          ; attr 0
     365.  01:8720                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  01:8720  05 05 0A 0B 0B 0B 0B 0B 
     366.  01:8728                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  01:8728  0B 0A 0A 0B 0A 0A 08 08 
     367.  01:8730                          ; attr 1
     368.  01:8730                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  01:8730  00 00 44 45 45 45 45 45 
     369.  01:8738                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  01:8738  45 44 44 44 44 44 45 45 
     370.  01:8740                          ; attr 2
     371.  01:8740                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  01:8740  00 00 41 00 40 00 00 00 
     372.  01:8748                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  01:8748  00 41 41 41 41 41 42 00 
     373.  01:8750                             
     374.  01:8750                          ; attr 0
     375.  01:8750                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  01:8750  05 05 0A 0B 0B 0B 0B 0B 
     376.  01:8758                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  01:8758  0B 0A 0A 0A 0B 0A 08 08 
     377.  01:8760                          ; attr 1
     378.  01:8760                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  01:8760  00 00 44 45 45 45 45 45 
     379.  01:8768                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  01:8768  45 44 44 44 44 44 45 45 
     380.  01:8770                          ; attr 2
     381.  01:8770                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  01:8770  00 00 41 00 40 00 00 00 
     382.  01:8778                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  01:8778  00 41 41 41 41 41 42 00 
     383.  01:8780                      
     384.  01:8780                      stg1_gate:
     385.  01:8780  00 00 00 00 00 00       DB #00,#00,#00,#00,#00,#00
     386.  01:8786                      stg1_gate_blocked:
     387.  01:8786  01 01 01 01 01 01       DB #01,#01,#01,#01,#01,#01
     388.  01:878C                      mapa1:
     389.  01:878C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     389.  01:878C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     389.  01:879C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  01:87AC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     390.  01:87AC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  01:87BC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     391.  01:87CC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  01:87CC  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  01:87DC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  01:87EC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  01:87EC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  01:87FC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  01:880C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  01:880C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     393.  01:881C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  01:882C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  01:882C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     394.  01:883C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  01:884C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  01:884C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     395.  01:885C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  01:886C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  01:886C  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  01:887C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  01:888C                          
     398.  01:888C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  01:888C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  01:889C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  01:88AC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  01:88AC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  01:88BC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  01:88CC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  01:88CC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  01:88DC  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  01:88EC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     401.  01:88EC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  01:88FC  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     402.  01:890C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     402.  01:890C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  01:891C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     403.  01:892C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  01:892C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  01:893C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  01:894C                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     404.  01:894C  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     404.  01:895C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     405.  01:896C                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  01:896C  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     405.  01:897C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  01:898C                      
     407.  01:898C                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  01:898C  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     407.  01:899C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  01:89AC                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  01:89AC  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     408.  01:89BC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  01:89CC                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  01:89CC  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     409.  01:89DC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  01:89EC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  01:89EC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     410.  01:89FC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  01:8A0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     411.  01:8A0C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  01:8A1C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  01:8A2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  01:8A2C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     412.  01:8A3C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  01:8A4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     413.  01:8A4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  01:8A5C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  01:8A6C                      
     415.  01:8A6C                      mapa2:
     416.  01:8A6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  01:8A6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  01:8A7C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  01:8A8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  01:8A8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  01:8A9C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  01:8AAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  01:8AAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  01:8ABC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  01:8ACC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  01:8ACC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  01:8ADC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  01:8AEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  01:8AEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  01:8AFC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  01:8B0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  01:8B0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  01:8B1C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  01:8B2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  01:8B2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  01:8B3C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  01:8B4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  01:8B4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  01:8B5C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  01:8B6C                            
     425.  01:8B6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  01:8B6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  01:8B7C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  01:8B8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  01:8B8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  01:8B9C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  01:8BAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  01:8BAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  01:8BBC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  01:8BCC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  01:8BCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     428.  01:8BDC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  01:8BEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  01:8BEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     429.  01:8BFC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  01:8C0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  01:8C0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  01:8C1C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  01:8C2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  01:8C2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  01:8C3C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  01:8C4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  01:8C4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  01:8C5C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  01:8C6C                            
     434.  01:8C6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  01:8C6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  01:8C7C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  01:8C8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  01:8C8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  01:8C9C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  01:8CAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  01:8CAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  01:8CBC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  01:8CCC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  01:8CCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     437.  01:8CDC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  01:8CEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  01:8CEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     438.  01:8CFC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  01:8D0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  01:8D0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     439.  01:8D1C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  01:8D2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  01:8D2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     440.  01:8D3C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  01:8D4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  01:8D4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     441.  01:8D5C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  01:8D6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  01:8D6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     442.  01:8D7C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  01:8D8C                      
     444.  01:8D8C                      SPRITE_COLOR_P1_RED:
     445.  01:8D8C                          DB $0A,$0F,$0A,$0F,$0A,$0F,$0A,$0F
     445.  01:8D8C  0A 0F 0A 0F 0A 0F 0A 0F 
     446.  01:8D94                          DB $0A,$0F,$0A,$0F,$0A,$0F,$0A,$0F
     446.  01:8D94  0A 0F 0A 0F 0A 0F 0A 0F 
     447.  01:8D9C                      
     448.  01:8D9C                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     448.  01:8D9C  0A 0A 0A 0A 0A 0A 0A 0A 
     449.  01:8DA4                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     449.  01:8DA4  0A 0A 0A 0A 0A 0A 0A 0A 
     450.  01:8DAC                      
     451.  01:8DAC                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     451.  01:8DAC  0A 0A 0A 0A 0A 0A 0A 0A 
     452.  01:8DB4                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     452.  01:8DB4  0A 0A 0A 0A 0A 0A 0A 0A 
     453.  01:8DBC                      
     454.  01:8DBC                      SPRITE_COLOR_P1_LEFT:
     455.  01:8DBC                          ; attr 0
     456.  01:8DBC                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     456.  01:8DBC  05 05 0A 0B 0B 0B 0B 0B 
     457.  01:8DC4                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     457.  01:8DC4  0B 0A 0A 0B 0A 0A 08 08 
     458.  01:8DCC                          ; attr 1
     459.  01:8DCC                          DB $00,$00,$44,$45,$45,$45,$45,$45
     459.  01:8DCC  00 00 44 45 45 45 45 45 
     460.  01:8DD4                          DB $45,$44,$44,$44,$44,$44,$45,$45
     460.  01:8DD4  45 44 44 44 44 44 45 45 
     461.  01:8DDC                          ; attr 2
     462.  01:8DDC                          DB $00,$00,$41,$00,$40,$00,$00,$00
     462.  01:8DDC  00 00 41 00 40 00 00 00 
     463.  01:8DE4                          DB $00,$41,$41,$41,$41,$41,$42,$00
     463.  01:8DE4  00 41 41 41 41 41 42 00 
     464.  01:8DEC                          ;SPRITE_COLOR_P1_LEFT2:    
     465.  01:8DEC                          ; attr 0
     466.  01:8DEC                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     466.  01:8DEC  05 05 0A 0B 0B 0B 0B 0B 
     467.  01:8DF4                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     467.  01:8DF4  0B 0A 0A 0A 0B 0A 08 08 
     468.  01:8DFC                          ; attr 1
     469.  01:8DFC                          DB $00,$00,$44,$45,$45,$45,$45,$45
     469.  01:8DFC  00 00 44 45 45 45 45 45 
     470.  01:8E04                          DB $45,$44,$44,$44,$44,$44,$45,$45
     470.  01:8E04  45 44 44 44 44 44 45 45 
     471.  01:8E0C                          ; attr 2
     472.  01:8E0C                          DB $00,$00,$41,$00,$40,$00,$00,$00
     472.  01:8E0C  00 00 41 00 40 00 00 00 
     473.  01:8E14                          DB $00,$41,$41,$41,$41,$41,$42,$00
     473.  01:8E14  00 41 41 41 41 41 42 00 
     474.  01:8E1C                      
     475.  01:8E1C                      BLANK_DATA:
     476.  01:8E1C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     476.  01:8E1C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     476.  01:8E2C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  01:8E3C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     477.  01:8E3C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  01:8E4C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  01:8E5C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     478.  01:8E5C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  01:8E6C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  01:8E7C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     479.  01:8E7C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  01:8E8C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     480.  01:8E9C                      
     481.  01:8E9C                          
     482.  01:8E9C                      PaletteData:
     483.  01:8E9C                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     484.  01:8E9C  02 00                   db 0x02, 0x00 ; Color index 0
     485.  01:8E9E  30 00                   db 0x30, 0x00 ; Color index 1
     486.  01:8EA0  70 06                   db 0x70, 0x06 ; Color index 2
     487.  01:8EA2  50 00                   db 0x50, 0x00 ; Color index 3
     488.  01:8EA4  11 01                   db 0x11, 0x01 ; Color index 4
     489.  01:8EA6  22 02                   db 0x22, 0x02 ; Color index 5
     490.  01:8EA8  06 02                   db 0x06, 0x02 ; Color index 6
     491.  01:8EAA  77 07                   db 0x77, 0x07 ; Color index 7
     492.  01:8EAC  33 03                   db 0x33, 0x03 ; Color index 8
     493.  01:8EAE  66 06                   db 0x66, 0x06 ; Color index 9
     494.  01:8EB0  70 00                   db 0x70, 0x00 ; Color index 10
     495.  01:8EB2  64 05                   db 0x64, 0x05 ; Color index 11
     496.  01:8EB4  50 03                   db 0x50, 0x03 ; Color index 12
     497.  01:8EB6  02 04                   db 0x02, 0x04 ; Color index 13
     498.  01:8EB8  01 02                   db 0x01, 0x02 ; Color index 14
     499.  01:8EBA  00 00                   db 0x00, 0x00 ; Color index 15
     938   01:8EBC                      FONT:
     939   01:8EBC  (07F7)               INCBIN "gfx\FONT.SC5",#7
     940   01:96B3                      AFX:
     941   01:96B3  (0353)                  incbin "sfx\cementer_sounds.afb"
     942   01:9A06                          ;incbin "sfx\test.pt3"
     943   01:9A06                          ;incbin "sfx\G-6sin_cabecera.pt3"
     944   01:9A06                      ; GFX
     945   01:9A06                          include "include\metatiles.asm"
       1.  01:9A06                      metatiles_data:
       2.  01:9A06                          ; SX, SY, NX, NY
       3.  01:9A06  00 00 20 10             db 0, 0, 32, 16   ; 0 - gate lockpad
       4.  01:9A0A  20 00 20 10             db 32, 0, 32, 16  ; 1 - gate closed
       5.  01:9A0E  40 00 20 10             db 64, 0, 32, 16  ; 2 - gate half opened
       6.  01:9A12  60 00 20 10             db 96, 0, 32, 16  ; 3 - gate opened
       7.  01:9A16                      
       8.  01:9A16  80 00 10 10             db 128, 0, 16, 16  ; 4 - blood drop full
       9.  01:9A1A  90 00 10 10             db 144, 0, 16, 16  ; 5 - blood drop half
      10.  01:9A1E  A0 00 10 10             db 160, 0, 16, 16  ; 6 - blood drop empty
      11.  01:9A22                      
      12.  01:9A22  B0 00 10 10             db 176, 0, 16, 16  ; 7 - Tile
      13.  01:9A26  C0 00 10 10             db 192, 0, 16, 16  ; 8 - Pressed tile
      14.  01:9A2A                      
      15.  01:9A2A  D0 00 10 10             db 208, 0, 16, 16  ; 9 - Gress
      16.  01:9A2E  E0 00 10 10             db 224, 0, 16, 16  ; 10 - Skull
      17.  01:9A32  F0 00 10 10             db 240, 0, 16, 16  ; 11 - Tree
      18.  01:9A36                      
      19.  01:9A36  00 10 10 10             db 0, 16, 16, 16  ; 12 - Tomb Antich
      20.  01:9A3A  10 10 10 10             db 16, 16, 16, 16  ; 13 - Tomb RIP
      21.  01:9A3E  20 10 10 10             db 32, 16, 16, 16  ; 14 - Tomb Christ
      22.  01:9A42                      
      23.  01:9A42  30 10 40 50             db 48, 16, 64, 80  ; 15 - Gargoyle
      24.  01:9A46  70 10 30 60             db 112, 16, 48, 96  ; 16 - Cross
      25.  01:9A4A  00 20 10 10             db 0, 32, 16, 16  ; 17 - Gargoyle Door 
     946   01:9A4E                          include "gfx\stg1_map.asm"
       1.  01:9A4E                      stg1_map_back:
       2.  01:9A4E                      ; Background Tiles - #Tile, X, Y, #reps
       3.  01:9A4E  09 00 00 07         	db 9, 0, 0, 7	
       4.  01:9A52  00 70 00 01         	db 0, 112, 0, 1	
       5.  01:9A56  09 90 00 07         	db 9, 144, 0, 7	
       6.  01:9A5A                      
       7.  01:9A5A  09 00 10 07         	db 9, 0, 16, 7
       8.  01:9A5E  07 70 10 02         	db 7, 112, 16, 2
       9.  01:9A62  09 90 10 07         	db 9, 144, 16, 7
      10.  01:9A66                      
      11.  01:9A66  09 00 20 03         	db 9, 0, 32, 3
      12.  01:9A6A  07 30 20 06         	db 7, 48, 32, 6
      13.  01:9A6E  09 90 20 07         	db 9, 144, 32, 7
      14.  01:9A72                      
      15.  01:9A72  09 00 30 07         	db 9, 0, 48, 7
      16.  01:9A76  07 70 30 02         	db 7, 112, 48, 2
      17.  01:9A7A  09 90 30 07         	db 9, 144, 48, 7
      18.  01:9A7E                      
      19.  01:9A7E  09 00 40 07         	db 9, 0, 64, 7
      20.  01:9A82  07 70 40 02         	db 7, 112, 64, 2
      21.  01:9A86  09 90 40 07         	db 9, 144, 64, 7
      22.  01:9A8A                      
      23.  01:9A8A  09 00 50 07         	db 9, 0, 80, 7
      24.  01:9A8E  07 70 50 02         	db 7, 112, 80, 2
      25.  01:9A92  09 90 50 07         	db 9, 144, 80, 7
      26.  01:9A96                      
      27.  01:9A96  09 00 60 07         	db 9, 0, 96, 7
      28.  01:9A9A  07 70 60 06         	db 7, 112, 96, 6
      29.  01:9A9E  09 D0 60 03         	db 9, 208, 96, 3
      30.  01:9AA2                      
      31.  01:9AA2  09 00 70 07         	db 9, 0, 112, 7
      32.  01:9AA6  07 70 70 02         	db 7, 112, 112, 2
      33.  01:9AAA  09 90 70 07         	db 9, 144, 112, 7
      34.  01:9AAE                      
      35.  01:9AAE  09 00 80 05         	db 9, 0, 128, 5
      36.  01:9AB2  07 50 80 04         	db 7, 80, 128, 4
      37.  01:9AB6  09 90 80 07         	db 9, 144, 128, 7
      38.  01:9ABA                      
      39.  01:9ABA  09 00 90 07         	db 9, 0, 144, 7
      40.  01:9ABE  07 70 90 02         	db 7, 112, 144, 2
      41.  01:9AC2  09 90 90 07         	db 9, 144, 144, 7
      42.  01:9AC6                      
      43.  01:9AC6  09 00 A0 07         	db 9, 0, 160, 7
      44.  01:9ACA  07 70 A0 02         	db 7, 112, 160, 2
      45.  01:9ACE  09 90 A0 07         	db 9, 144, 160, 7
      46.  01:9AD2                      
      47.  01:9AD2  09 00 B0 10         	db 9, 0, 176, 16
      48.  01:9AD6                      
      49.  01:9AD6  FF                  	db 255		; fin
      50.  01:9AD7                      	
      51.  01:9AD7                      stg1_map_front:
      52.  01:9AD7                      	; Transparent Tiles
      53.  01:9AD7  0A 60 60 01         	db 10, 96, 96, 1	; Skull
      54.  01:9ADB  0D 20 20 01         	db 13, 32, 32, 1	; RIP
      55.  01:9ADF  0C 40 80 01         	db 12, 64, 128, 1	; Antichrist
      56.  01:9AE3  0E D0 60 01         	db 14, 208, 96, 1	; Christ
      57.  01:9AE7                      
      58.  01:9AE7  0B 9E 34 01         	db 11, 158, 52, 1	; Tree 1
      59.  01:9AEB  0B AC 34 01         	db 11, 172, 52, 1	; Tree 1
      60.  01:9AEF  FF                  	db 255	; fin
      61.  01:9AF0                      
     947   01:9AF0                          include "gfx\stg2_map.asm"
       1.  01:9AF0                      stg2_map_back:
       2.  01:9AF0                      ; Background Tiles - #Tile, X, Y, #reps
       3.  01:9AF0  09 00 00 10         	db 9, 0, 0, 16    		
       4.  01:9AF4  09 00 10 10         	db 9, 0, 16, 16
       5.  01:9AF8  09 00 20 10         	db 9, 0, 32, 16	
       6.  01:9AFC  09 00 30 10         	db 9, 0, 48, 16
       7.  01:9B00  09 00 40 10         	db 9, 0, 64, 16
       8.  01:9B04  09 00 50 10         	db 9, 0, 80, 16
       9.  01:9B08                      
      10.  01:9B08  09 00 60 07         	db 9, 0, 96, 7	
      11.  01:9B0C  07 70 60 02         	db 7, 112, 96, 2
      12.  01:9B10  09 90 60 07         	db 9, 144, 96, 7
      13.  01:9B14                      
      14.  01:9B14  09 00 70 07             db 9, 0, 112, 7	
      15.  01:9B18  07 70 70 02         	db 7, 112, 112, 2
      16.  01:9B1C  09 90 70 07         	db 9, 144, 112, 7
      17.  01:9B20                      
      18.  01:9B20  09 00 80 07             db 9, 0, 128, 7	
      19.  01:9B24  07 70 80 02         	db 7, 112, 128, 2
      20.  01:9B28  09 90 80 07         	db 9, 144, 128, 7
      21.  01:9B2C                      
      22.  01:9B2C  09 00 90 07             db 9, 0, 144, 7	
      23.  01:9B30  07 70 90 02         	db 7, 112, 144, 2
      24.  01:9B34  09 90 90 07         	db 9, 144, 144, 7
      25.  01:9B38                      
      26.  01:9B38  09 00 A0 07             db 9, 0, 160, 7	
      27.  01:9B3C  07 70 A0 02         	db 7, 112, 160, 2
      28.  01:9B40  09 90 A0 07         	db 9, 144, 160, 7
      29.  01:9B44                      
      30.  01:9B44  09 00 B0 07             db 9, 0, 176, 7	
      31.  01:9B48  07 70 B0 02         	db 7, 112, 176, 2
      32.  01:9B4C  09 90 B0 07         	db 9, 144, 176, 7
      33.  01:9B50                      	
      34.  01:9B50  FF                  	db 255		; fin
      35.  01:9B51                      	
      36.  01:9B51                      stg2_map_front:
      37.  01:9B51                      	; Transparent Tiles
      38.  01:9B51  0A 60 A0 01         	db 10, 96, 160, 1	; Skull	
      39.  01:9B55                      
      40.  01:9B55  0B 10 70 01         	db 11, 16, 112, 1	; Tree 1
      41.  01:9B59  0B E0 70 01         	db 11, 224, 112, 1	; Tree 2
      42.  01:9B5D  0B 50 90 01             db 11, 80, 144, 1	; Tree 3
      43.  01:9B61  0B A0 90 01         	db 11, 160, 144, 1	; Tree 4
      44.  01:9B65                      
      45.  01:9B65  0F 60 10 01         	db 15, 96, 16, 1	; Gargoyle
      46.  01:9B69  10 18 08 01         	db 16, 24, 8, 1	; Cross 1
      47.  01:9B6D  10 B8 08 01             db 16, 184, 8, 1	; Cross 2
      48.  01:9B71  FF                  	db 255	; fin
      49.  01:9B72                      
     948   01:9B72  (02)                 PAGE 2
     949   02:8000                      TILES1:
     950   02:8000  (3801)               INCBIN "gfx\tiles1.sc5",#7
     951   02:B801                      
     952   02:B801  (03)                 PAGE 3
     953   03:8000                      
     954   03:8000  (04)                 PAGE 4
     955   04:8000  (05)                 PAGE 5
     956   05:8000  (06)                 PAGE 6
     957   06:8000  (07)                 PAGE 7
     958   07:8000                      CEMENTER1
     959   07:8000                       ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     960   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     961   07:C000  (08)                 PAGE 8
     962   08:8000  (200D)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     963   08:A00D  (09)                 PAGE 9
     964   09:8000                      GRAPHIC
     965   09:8000                      ; INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     966   09:8000  (0A)                 PAGE 10
     967   0A:8000                      ; INCBIN "gfx\BTH.SR8",#4007,#4000
     968   0A:8000                      
     969   0A:8000  (0B)                 PAGE 11
     970   0B:8000                      ; INCBIN "gfx\BTH.SR8",#8007,#4000
     971   0B:8000                      
     972   0B:8000  (0C)                 PAGE 12
     973   0C:8000                      ; INCBIN "gfx\BTH.SR8",#C007
     974   0C:8000                      
     975   0C:8000  (0D)                 PAGE 13
     976   0D:8000                      CEMENTER2
     977   0D:8000                      ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     978   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     979   0D:C000  (0E)                 PAGE 14
     980   0E:8000  (200E)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     981   0E:A00E  (0F)                 PAGE 15
     982   0F:C000                      ;---------------------------------------------------------
     983   0F:C000                      ; Variables
     984   0F:C000                      ;---------------------------------------------------------
     985   0F:C000                      	
     986   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     987   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     988   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     989   0F:C000                      ;ETC
     990   0F:C000                      ;
     991   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ; Counter stage1 puzzle solved
       2.  0F:C000  00 (1)              counter_stg_solved ds 1
       3.  0F:C001                      
       4.  0F:C001                      ; Stage Map Pointer
       5.  0F:C001  00 (2)              stg_map_ptr_back ds 2
       6.  0F:C003  00 (2)              stg_map_ptr_front ds 2
       7.  0F:C005                      
       8.  0F:C005                      ;entities data
       9.  0F:C005  00 (27)             ENTITY_DATA: ds 27 ;  10 bytes, 3 entities
      10.  0F:C020  (0F:C005)           ENTITY_PLAYER_POINTER:  EQU ENTITY_DATA
      11.  0F:C020  (0F:C00E)           ENTITY_ENEMY1_POINTER:  EQU ENTITY_DATA+9
      12.  0F:C020  (0F:C017)           ENTITY_ENEMY2_POINTER:  EQU ENTITY_DATA+18
      13.  0F:C020                      
      14.  0F:C020  00 (1)              current_level: 	ds 1
      15.  0F:C021                      
      16.  0F:C021                      ; VDP variables
      17.  0F:C021  00 (15)             charDat: ds 15
      18.  0F:C030  00 (15)             tileDat: ds 15
      19.  0F:C03F  00 (15)             tileDatTrans: ds 15
      20.  0F:C04E  00 (15)             energyDat: ds 15
      21.  0F:C05D                      
      22.  0F:C05D                      ; puzzle 1st stage
      23.  0F:C05D  00 (1)              stg1_puzzle_solved DS 1
      24.  0F:C05E                      
      25.  0F:C05E  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
      26.  0F:C05F  00 (1)              SHOWING_MIKE_DIALOG  DS 1
      27.  0F:C060  00 (1)              SHOWING_JOHN_DIALOG  DS 1
      28.  0F:C061  00 (1)              SHOWING_GUS_DIALOG  DS 1
      29.  0F:C062                      
      30.  0F:C062                      ; puzzle 2nd stage
      31.  0F:C062  00 (1)              stg2_puzzle_solved DS 1
      32.  0F:C063  00 (1)              stg2_delay_border_change DS 1
      33.  0F:C064                      
      34.  0F:C064  00 (1)              PLAYING_NOTE1_STG2  DS 1
      35.  0F:C065  00 (1)              PLAYING_NOTE2_STG2  DS 1
      36.  0F:C066  00 (1)              PLAYING_NOTE3_STG2  DS 1
      37.  0F:C067  00 (1)              SHOWING_MURRAY_STG2  DS 1
      38.  0F:C068                      
      39.  0F:C068  00 (2)              CHR_ACR DS 2
      40.  0F:C06A                      ;PTR_STR_DX DS 1
      41.  0F:C06A                      ;PTR_STR_DY DS 1
      42.  0F:C06A                      
      43.  0F:C06A                      ;LAST_KEY_PRESSED DS 1
      44.  0F:C06A                      ;OLD_KEY_PRESSED DS 1
      45.  0F:C06A  00                  JIFFY_TEMP DB $00
      46.  0F:C06B  00                  CHAR_SPEED_X DB $00
      47.  0F:C06C  00                  CHAR_SPEED_Y DB $00
      48.  0F:C06D  00                  CHAR_SPEED_X_GHOST DB $00
      49.  0F:C06E  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      50.  0F:C06F  00 (1)              CHAR_GHOST_DEAD DS 1
      51.  0F:C070  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      52.  0F:C071  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      53.  0F:C072  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      54.  0F:C073  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      55.  0F:C074  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      56.  0F:C075  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      57.  0F:C076  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      58.  0F:C077  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      59.  0F:C078  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      60.  0F:C079  00 (1)              CHAR_SPEED_SHOOT DS 1
      61.  0F:C07A                      SPRITE_ATTRS:
      62.  0F:C07A  00 (128)                DS 128
      63.  0F:C0FA                      SLOTBIOS:
      64.  0F:C0FA  00 (1)                  DS 1
      65.  0F:C0FB                      SLOTGAME:
      66.  0F:C0FB  00 (1)                  DS 1
      67.  0F:C0FC                      SLOTRAM:
      68.  0F:C0FC  00 (1)                  DS 1
      69.  0F:C0FD                      SPRITE_PTR_REPLACE:
      70.  0F:C0FD  00 (2)                  DS 2
      71.  0F:C0FF                      SPRITE_COLOR_REPLACE:
      72.  0F:C0FF  00 (2)                  DS 2
      73.  0F:C101                      SPRITE_COLOR_REPLACE2:
      74.  0F:C101  00 (2)                  DS 2
      75.  0F:C103                      MAPA:
      76.  0F:C103  00 (2)                  DS 2
      77.  0F:C105                      BITMAP:
      78.  0F:C105  00 (2)                  DS 2
      79.  0F:C107                      MAP_RAM:
      80.  0F:C107  00 (736)                DS 736
     992   0F:C3E7                          include "include\ayFX-RAM.ASM"
       1.  0F:C3E7                      		; --- ayFX REPLAYER v1.31 ---
       2.  0F:C3E7                      
       3.  0F:C3E7                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  0F:C3E7                      
       5.  0F:C3E7  00 (1)              ayFX_MODE:	ds	1			; ayFX mode
       6.  0F:C3E8  00 (2)              ayFX_BANK:	ds	2			; Current ayFX Bank
       7.  0F:C3EA  00 (1)              ayFX_PRIORITY:	ds	1			; Current ayFX stream priotity
       8.  0F:C3EB  00 (2)              ayFX_POINTER:	ds	2			; Pointer to the current ayFX stream
       9.  0F:C3ED  00 (2)              ayFX_TONE:	ds	2			; Current tone of the ayFX stream
      10.  0F:C3EF  00 (1)              ayFX_NOISE:	ds	1			; Current noise of the ayFX stream
      11.  0F:C3F0  00 (1)              ayFX_VOLUME:	ds	1			; Current volume of the ayFX stream
      12.  0F:C3F1  00 (1)              ayFX_CHANNEL:	ds	1			; PSG channel to play the ayFX stream
      13.  0F:C3F2                      IF ( AYFXRELATIVE == 1 )
      14.  0F:C3F2                    ~ 	ayFX_VT:	sds	2			; ayFX relative volume table pointer
      15.  0F:C3F2                    ~ ENDIF
      16.  0F:C3F2                      
      17.  0F:C3F2                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      18.  0F:C3F2                      ;AYREGS:		.ds	14			; Ram copy of PSG registers
      19.  0F:C3F2                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     993   0F:C3F2  (0000)              	ENDMAP
     994   0F:C3F2                        

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:00000069   CLRSPR
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000062   CHGCLR
00:0000006F   counter_stg1_solved_max
00:0000005F   counter_stg2_solved_max
00:0000005F   counter_P1_flickering
00:00000001   SPR_DATA_PAGE
00:00000002   TILES_PAGE
00:00000009   ENTITY_SIZE
00:0000000F   PLAYER_COLLISION_OFFSET_X
00:00000010   PLAYER_COLLISION_OFFSET_Y
00:0000000E   PLAYER_WIDTH
00:00000010   PLAYER_HEIGHT
00:00000001   ENEMY_X
00:00000002   ENEMY_Y
00:00000003   ENTITY_ENERGY
00:00000004   ENEMY_COLLISION_OFFSET_X
00:00000005   ENEMY_COLLISION_OFFSET_Y
00:00000006   ENEMY_COLLISION_WIDTH
00:00000007   ENEMY_COLLISION_HEIGHT
00:00000008 X SPRITENUMBER_SPAT
00:00000009 X damage
00:00000078   STG2_TILE1_XH
00:00000070   STG2_TILE1_XL
00:00000070   STG2_TILE1_YH
00:00000060   STG2_TILE1_YL
00:00000081   STG2_TILE2_XH
00:00000079   STG2_TILE2_XL
00:00000070 X STG2_TILE2_YH
00:00000060 X STG2_TILE2_YL
00:00000081   STG2_TILE3_XH
00:00000079   STG2_TILE3_XL
00:00000090   STG2_TILE3_YH
00:00000080   STG2_TILE3_YL
00:00000071   STG2_MURRAY_X
00:000000AC   STG2_MURRAY_YH
00:0000009C   STG2_MURRAY_YL
00:00000005   STG2_DELAY_CYCLES
00:00004010   ANDY_MAX_ENERGY
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:000000C2   FIRST_LINE_DLG_BOX_v2
00:000000CA   SEC_LINE_DLG_BOX_v2
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006 X MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:0000F3EA X BAKCLR
00:0000F3EB   BDRCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018 X SPR_GHOST_STG2
00:0000003C X SPR_GHOST_STG2_PTRN_L1
00:00000044 X SPR_GHOST_STG2_PTRN_L2
00:0000004C X SPR_GHOST_STG2_PTRN_R1
00:00000054 X SPR_GHOST_STG2_PTRN_R2
00:00004016   mike_tomb_strings
00:0000401C   string01M
00:00004038   string02M
00:00004054   string03M
00:00004055   john_tomb_strings
00:0000405B   string01J
00:00004076   string02J
00:00004091   string03J
00:00004092   gus_tomb_strings
00:00004098   string01G
00:000040B5   string02G
00:000040D2   string03G
00:000040D3   stg1_skull_strings
00:000040D9   string01Sk
00:000040F4   string02Sk
00:0000410F   string03Sk
00:00004110   stg1_puzzle_solved_strings
00:00004116   string01P
00:0000412F   string02P
00:00004148   string03P
00:00004149   game_over_strings
00:0000414F   string01GO
00:00004161   string02GO
00:0000416C   string03GO
00:0000416D   stg2_skull_strings
00:00004173   string01Sk2
00:0000418D   string02Sk2
00:000041A7   string03Sk2
00:000041A8   EnemyCollisionCheck
00:000041CE   EnemyCollisionCheck.check
00:000041D5   EnemyCollisionCheck.other
00:000041D7   check_spr_collision
00:000041E4   check_spr_collision.no_collision
00:000041E7   get_bloque_en_X_Y
00:00004208   SetVdp_Write
00:00004224   Set212Lines
00:00004230   ClearVram_MSX2
00:0000423A   ClearVram_MSX2.loop_2
00:0000423C   ClearVram_MSX2.loop_1
00:0000423E   ClearVram_MSX2.loop
00:0000424B X opening_screen
00:0000426E X load_screen
00:00004290   _vdpsetvramwr
00:000042A1 X _vdpsetvramwr14
00:000042AA   GETSLOT
00:000042C1   EXIT
00:000042C3   SETPAGES32K
00:000042C8   NOPRET
00:000042D6   SET_SCREEN5_MODE
00:000042FB   DUMP_SPR_ALL
00:00004320   load_tiles_vdp
00:0000432A   load_font_vdp
00:00004337   DUMP_SPR_ATTS
00:00004351 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004352   DUMP_SPR_P1
00:0000436F   SetPalette
00:0000437E   move_up
00:000043B8   move_down
00:000043F3   move_right
00:00004404   move_right.KB_UPDOWN_PRESSED
00:00004452   move_left
00:00004463   move_left.KB_UPDOWN_PRESSED
00:000044B1   CHECK_DIRECTION_MAIN
00:000044D3   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000044E8   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:000044FD   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:00004512   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:00004527   CHECK_DIRECTION_MAIN.FINISH
00:0000453E   UPDATE_MOVEMENT
00:00004566   ANIMATE_P1
00:0000458D   ANIMATE_P1.SET_SPR_1P_2
00:000045A4   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:000045AA   NO_MOVEMENT
00:000045AB   MOVE_SHOOT
00:000045C3   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:000045CB   MOVE_SHOOT.MOVE_SHOOT_UP
00:000045D3   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000045DB   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000045E0   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:000045F5   MOVE_SHOOT.ADD_SHOOT_Y
00:000045FF   MOVE_SHOOT.ADD_DISTANCE
00:0000460A X MOVE_SHOOT.HIDE_SHOOT
00:00004616   SHOOT_MAIN_CHAR
00:00004650   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:0000465F   SHOOT_MAIN_CHAR.SHOOT_UP
00:00004672   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:00004682   SHOOT_MAIN_CHAR.CONTINUE
00:00004686   BOUNCE_ANDY
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008   VDP_NX
00:0000000A   VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098   CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008   VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000010   ENERGY_WIDTH
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_VDP_PAGE
00:00008000 X TILES_START_ADDR
00:00000002   BACK_BUFFER
00:00000000   FRONT_BUFFER
00:00000000   TILENUM_OFFSET
00:00000001   DX_OFFSET
00:00000002   DY_OFFSET
00:00000003   REPS_OFFSET
00:00000004 X TILEMAP_SIZE
00:00000000 X METATILE_SX
00:00000001 X METATILE_SY
00:00000002   METATILE_NX
00:00000003 X METATILE_NY
00:00000004 X METATILE_SIZE
00:00000008   FONT_HEIGHT
00:00000008   FONT_WIDTH
00:000000D4   FONT_Y_OFFSET_1L
00:000000DC   FONT_Y_OFFSET_2L
00:00000014   DIAGBOX_HEIGHT
00:000000FF   DIAGBOX_WIDTH
00:000046A1   initVDPBuffers
00:000046E4 X print_strings_dialog_box
00:00004711   print_string
00:00004711   print_string.loop_str
00:0000472C   print_string.first_line_font
00:00004745   print_char
00:00004779 X CLEAR_DIALOG_BOX_v1
00:000047AB X CLEAR_DIALOG_BOX_v2
00:000047DD   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:000047E4 X SETPAG
00:000047F2 X SET_WR
00:0000480D X SET_RD
00:00004826   VDPCMD
00:00004839   WAITCE
00:00004851   ENASCR
00:00004858   DISSCR
00:0000485D   DISSCR.OUT
00:00004869 X ENASPR
00:00004870 X DISSPR
00:00004875   DISSPR.OUT
00:00004881 X LIN192
00:00004888 X LIN212
00:0000488D   LIN212.OUT
00:00004899   VDP_Ready
00:000048B2   DRAW_ANDY_ENERGY
00:000048C4   DRAW_ANDY_ENERGY.check_next_drop
00:000048E4   DRAW_ANDY_ENERGY.draw_half_drop
00:000048F6   DRAW_ANDY_ENERGY.draw_empty_drops
00:00004909   DRAW_ANDY_ENERGY.loop
00:00004921   draw_tile
00:00004928   draw_tile_trans
00:0000492C   draw_tile_common
00:00004955   print_strings_dialog_box_v2
00:00004970   print_string_v2
00:00004979   print_string_v2.loop_str
00:00004987   print_string_v2.first_line_font
00:0000498B   print_string_v2.continue
00:000049A9   load_screen_v2
00:000049AD   load_screen_v2.map_element
00:000049C2   load_screen_v2.loop1
00:000049E0   load_screen_v2.next_element
00:000049F3   load_screen_v2.map_element_trans
00:00004A08   load_screen_v2.loop1_trans
00:00004A26   load_screen_v2.next_element_trans
00:00004A36   charDatROM
00:00004A45   tileDatROM
00:00004A54   tileDatTransROM
00:00004A63   energyDatROM
00:00004A72   DiagBoxToBackBufROM
00:00004A81   DiagBoxToFrontkBufROM
00:00004A90 X DiagBoxClearROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:00000017   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:00004A9F   CHECKLP
00:00004AB0   PT3_MUTE
00:00004ABC   PT3_INIT
00:00004AFB   PT3_INIT.TP_0
00:00004B07   PT3_INIT.TP_1
00:00004B0E   PT3_INIT.TP_2
00:00004B7C   PT3_INIT.L1
00:00004B89   PT3_INIT.L2
00:00004B8D X PT3_INIT.L3
00:00004BB4   PT3_INIT.CORR_1
00:00004BC2   PT3_INIT.CORR_2
00:00004BC9   PT3_INIT.TC_EXIT
00:00004BD4   PT3_INIT.INITV1
00:00004BDC   PT3_INIT.INITV2
00:00004BF0   PT3_INIT.INITV3
00:00004BF4   PD_OrSm
00:00004BFE   PD_SAM
00:00004BFF   PD_SAM_
00:00004C15   PD_VOL
00:00004C1E   PD_EOff
00:00004C26   PD_SorE
00:00004C30   PD_ENV
00:00004C35   PD_ORN
00:00004C3A   PD_ESAM
00:00004C47   PTDECOD
00:00004C56   PD_LOOP
00:00004C59   PD_LP2
00:00004C86   PD_NOIS
00:00004C8B   PD_REL
00:00004C91   PD_NOTE
00:00004C99   PD_RES
00:00004CAB   PD_FIN
00:00004CB2   C_PORTM
00:00004CFD   C_PORTM.NOSIG
00:00004D07   SET_STP
00:00004D13   C_GLISS
00:00004D26   C_SMPOS
00:00004D2C   C_ORPOS
00:00004D32   C_VIBRT
00:00004D4A   C_ENGLS
00:00004D5C   C_DELAY
00:00004D62   SETENV
00:00004D7D   C_NOP
00:00004D7E   SETORN
00:00004D97   SPCCOMS
00:00004DB7   CHREGS
00:00004DDA   CHREGS.CH_ORPS
00:00004DE5   CHREGS.CH_NTP
00:00004DEB   CHREGS.CH_NOK
00:00004E06   CHREGS.CH_SMPS
00:00004E1C   CHREGS.CH_NOAC
00:00004E63   CHREGS.CH_STPP
00:00004E78   CHREGS.CH_AMP
00:00004E8A   CHREGS.CH_AMIN
00:00004E8F   CHREGS.CH_SVAM
00:00004E92   CHREGS.CH_NOAM
00:00004E9B   CHREGS.CH_APOS
00:00004EA1   CHREGS.CH_VOL
00:00004EAC X CHREGS.CH_ENV
00:00004EB3   CHREGS.CH_NOEN
00:00004ECD   CHREGS.NO_ENAC
00:00004ED4   CHREGS.NO_ENSL
00:00004EE2   CHREGS.CH_MIX
00:00004EE6   CHREGS.CH_EXIT
00:00004F05   CHREGS.CH_ONDL
00:00004F09   PT3_PLAY
00:00004F3D   PT3_PLAY.PLNLP
00:00004F64   PT3_PLAY.PL1A
00:00004F6F   PT3_PLAY.PL1B
00:00004F84   PT3_PLAY.PL1C
00:00004F99   PT3_PLAY.PL1D
00:00004F9F   PT3_PLAY.PL2
00:00005001   PT3_ROUT
00:00005002   ROUT_A0
00:0000500E   ROUT_A0.LOUT
00:00005022   NT_DATA
00:00005032   T_
00:00005032   TCOLD_0
00:0000503E   TCNEW_1
00:0000503E   TCOLD_1
00:00005040   TCOLD_2
00:00005052   TCNEW_3
00:00005053   TCOLD_3
00:0000505C   TCNEW_0
00:00005067   TCNEW_2
00:00005072   EMPTYSAMORN
00:00005076   T_PACK
00:0000F000   PT3_SETUP
00:0000F000   PT3_MODADDR
00:0000F002   PT3_CrPsPtr
00:0000F004   PT3_SAMPTRS
00:0000F006   PT3_OrnPtrs
00:0000F008   PT3_PDSP
00:0000F00A   PT3_CSP
00:0000F00C   PT3_PSP
00:0000F00E   PT3_PrNote
00:0000F00F   PT3_PrSlide
00:0000F011   PT3_AdInPtA
00:0000F013   PT3_AdInPtB
00:0000F015   PT3_AdInPtC
00:0000F017   PT3_LPosPtr
00:0000F019   PT3_PatsPtr
00:0000F01B   PT3_Delay
00:0000F01C   PT3_AddToEn
00:0000F01D   PT3_Env_Del
00:0000F01E   PT3_ESldAdd
00:0000F020   PT3_NTL3
00:0000F022   VARS
00:0000F022   ChanA
00:0000F03F   ChanB
00:0000F05C   ChanC
00:0000F079   DelyCnt
00:0000F07A   CurESld
00:0000F07C   CurEDel
00:0000F07D   Ns_Base_AddToNs
00:0000F07D   Ns_Base
00:0000F07E   AddToNs
00:0000F07F   NT_
00:0000F13F   AYREGS
00:0000F13F   VT_
00:0000F14D   EnvBase
00:0000F14F   VAR0END
00:0000F14F   T1_
00:0000F14F   T_NEW_1
00:0000F14F   T_OLD_1
00:0000F167   T_OLD_2
00:0000F17F   T_NEW_3
00:0000F17F   T_OLD_3
00:0000F181   T_OLD_0
00:0000F181   T_NEW_0
00:0000F199   T_NEW_2
00:00000000 X AYFXRELATIVE
00:000050AB   ayFX_SETUP
00:000050B6   ayFX_END
00:000050BC   ayFX_INIT
00:000050CD   ayFX_INIT.CHECK_PRI
00:000050EE   ayFX_INIT.INIT_END
00:000050F2   ayFX_PLAY
00:00005106   ayFX_PLAY.TAKECB
00:00005117   ayFX_PLAY.CHECK_NN
00:00005124   ayFX_PLAY.SETPOINTER
00:00005138   ayFX_PLAY.SETMASKS
00:00005146 X ayFX_PLAY.CHK1
00:00005148 X ayFX_PLAY.LAY_C
00:00005155   ayFX_PLAY.CHK2
00:0000515A X ayFX_PLAY.PLAY_B
00:00005167   ayFX_PLAY.CHK3
00:0000516A X ayFX_PLAY.PLAY_A
00:00005177   ayFX_PLAY.SETMIXER
00:00005187   init_playerDAT
00:00005190   enemy1_stg1DAT
00:00005199   START
00:000051DD   INIT_CHARS_VARS
00:0000527E   PRE_STAGE1
00:00005299   STAGE1
00:000052EB   STAGE1.nobackfromstg2
00:000052F4   MAIN_LOOP
00:000052FF X MAIN_LOOP.check_tombs
00:0000534F   MAIN_LOOP.puzzle_wrong_order
00:00005375   MAIN_LOOP.check_john_tomb
00:000053AC   MAIN_LOOP.check_gus_tomb
00:000053ED   MAIN_LOOP.check_skull_hint
00:00005411   MAIN_LOOP.check_mike_dialog_box
00:00005421   MAIN_LOOP.check_gus_dialog
00:00005431   MAIN_LOOP.check_john_dialog
00:00005441   MAIN_LOOP.check_skull_dialog
00:00005451   MAIN_LOOP.check_counter_puzzle_solved
00:0000545E   MAIN_LOOP.hide_dialog_puzzle_solved
00:00005468   MAIN_LOOP.animate_ghost
00:0000548A   MAIN_LOOP.CHANGE_DIR_RIGHT
00:00005497   MAIN_LOOP.CHANGE_DIR_LEFT
00:000054A0   MAIN_LOOP.check_pattern
00:000054BB   MAIN_LOOP.change_pattern_L
00:000054C6   MAIN_LOOP.check_pattern_RIGHT
00:000054D9   MAIN_LOOP.change_pattern_R
00:000054E1   MAIN_LOOP.continue
00:00005519   MAIN_LOOP.move_shoot
00:0000551C X MAIN_LOOP.CHECK_GHOST
00:00005538 X MAIN_LOOP.KILL_GHOST
00:00005545   MAIN_LOOP.check_KB
00:0000556F X no_arrows
00:00005577   STAGE2
00:000055C4   MAIN_LOOP2
00:000055F8   MAIN_LOOP2.GHOST_DEAD
00:000055FB   MAIN_LOOP2.no_screen_change
00:00005630   MAIN_LOOP2.change_bdr_clr
00:0000563B   MAIN_LOOP2.inc_stg2_delay_border_change
00:00005642   MAIN_LOOP2.open_gargoyle_gate
00:00005661   MAIN_LOOP2.check_murray_tile
00:00005691   MAIN_LOOP2.check_tile1
00:000056CA   MAIN_LOOP2.check_next_tile
00:000056FA   MAIN_LOOP2.wrong_order
00:000056FD   MAIN_LOOP2.check_tile3
00:00005741   MAIN_LOOP2.wrong_order_tile3
00:00005747   MAIN_LOOP2.check_walk_on_tile3
00:0000575D   MAIN_LOOP2.check_walk_on_tile2
00:00005773   MAIN_LOOP2.check_walk_on_tile1
00:00005789   MAIN_LOOP2.check_murray_dialog
00:00005797   MAIN_LOOP2.continue
00:000057C2   game_over
00:000057CC   game_over.loop1
00:000057DA   SONG
01:00008000   SPRITE_P1_UP
01:000080C0   SPRITE_P1_DOWN
01:00008180   SPRITE_P1_LEFT
01:00008240   SPRITE_P1_RIGHT
01:00008300   SPRITE_PATTERN
01:000085E0   SPRITE_COLOR_TABLE
01:00008660   SPRITE_COLOR_P1_UP
01:000086C0   SPRITE_COLOR_P1_DOWN
01:00008720   SPRITE_COLOR_P1_RIGHT
01:00008780   stg1_gate
01:00008786   stg1_gate_blocked
01:0000878C   mapa1
01:00008A6C   mapa2
01:00008D8C   SPRITE_COLOR_P1_RED
01:00008DBC   SPRITE_COLOR_P1_LEFT
01:00008E1C   BLANK_DATA
01:00008E9C   PaletteData
01:00008EBC   FONT
01:000096B3   AFX
01:00009A06   metatiles_data
01:00009A4E   stg1_map_back
01:00009AD7   stg1_map_front
01:00009AF0   stg2_map_back
01:00009B51   stg2_map_front
02:00008000   TILES1
07:00008000 X CEMENTER1
09:00008000   GRAPHIC
0D:00008000 X CEMENTER2
0F:0000C000   counter_stg_solved
0F:0000C001   stg_map_ptr_back
0F:0000C003   stg_map_ptr_front
0F:0000C005   ENTITY_DATA
0F:0000C005   ENTITY_PLAYER_POINTER
0F:0000C00E   ENTITY_ENEMY1_POINTER
0F:0000C017 X ENTITY_ENEMY2_POINTER
0F:0000C020   current_level
0F:0000C021   charDat
0F:0000C030   tileDat
0F:0000C03F   tileDatTrans
0F:0000C04E   energyDat
0F:0000C05D   stg1_puzzle_solved
0F:0000C05E   SHOWING_SKULL_STG1_DIALOG
0F:0000C05F   SHOWING_MIKE_DIALOG
0F:0000C060   SHOWING_JOHN_DIALOG
0F:0000C061   SHOWING_GUS_DIALOG
0F:0000C062   stg2_puzzle_solved
0F:0000C063   stg2_delay_border_change
0F:0000C064   PLAYING_NOTE1_STG2
0F:0000C065   PLAYING_NOTE2_STG2
0F:0000C066   PLAYING_NOTE3_STG2
0F:0000C067   SHOWING_MURRAY_STG2
0F:0000C068   CHR_ACR
0F:0000C06A   JIFFY_TEMP
0F:0000C06B   CHAR_SPEED_X
0F:0000C06C   CHAR_SPEED_Y
0F:0000C06D   CHAR_SPEED_X_GHOST
0F:0000C06E X CHAR_SPEED_X_GHOST_STG2
0F:0000C06F   CHAR_GHOST_DEAD
0F:0000C070 X CHAR_GHOST_DEAD_STG2
0F:0000C071 X CHAR_MIN_STEP_STG2
0F:0000C072   CHAR_DIR_GHOST1
0F:0000C073 X CHAR_DIR_GHOST_STG2
0F:0000C074   CHAR_DIR_MAIN
0F:0000C075   CHAR_NEW_DIR_MAIN
0F:0000C076   CHAR_MAIN_SHOOT
0F:0000C077   CHAR_MIN_STEP
0F:0000C078   CHAR_DISTANCE_SHOOT
0F:0000C079   CHAR_SPEED_SHOOT
0F:0000C07A   SPRITE_ATTRS
0F:0000C0FA X SLOTBIOS
0F:0000C0FB X SLOTGAME
0F:0000C0FC X SLOTRAM
0F:0000C0FD   SPRITE_PTR_REPLACE
0F:0000C0FF   SPRITE_COLOR_REPLACE
0F:0000C101   SPRITE_COLOR_REPLACE2
0F:0000C103   MAPA
0F:0000C105   BITMAP
0F:0000C107   MAP_RAM
0F:0000C3E7   ayFX_MODE
0F:0000C3E8   ayFX_BANK
0F:0000C3EA   ayFX_PRIORITY
0F:0000C3EB   ayFX_POINTER
0F:0000C3ED   ayFX_TONE
0F:0000C3EF   ayFX_NOISE
0F:0000C3F0   ayFX_VOLUME
0F:0000C3F1   ayFX_CHANNEL


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00002772

   Address   Length Align   Label
   00004000   10092         ANDY_MAX_ENERGY
   0000676C       6         
   00006772    6286       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00001B72

   Address   Length Align   Label
   00008000    7026         SPRITE_P1_UP
   00009B72    9358       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003801

   Address   Length Align   Label
   00008000   14337         TILES1
   0000B801    2047       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 0000200D

   Address   Length Align   Label
   00008000    8205         
   0000A00D    8179       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 0000200E

   Address   Length Align   Label
   00008000    8206         
   0000A00E    8178       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000003F2

   Address   Length Align   Label
   0000C000    1010         counter_stg_solved
   0000C3F2   15374       <empty>
