Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.03.16 - 01:41:44]

.\bth.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:56E0                      
       3   00:56E0                      ;ROM ASCII16
       4   00:56E0                      		defpage	0,0x4000, 0x4000
       5   00:56E0                      		defpage	1,0x8000, 0x4000        
       6   00:56E0                      		defpage	2..14 ;Here it is determined rom size        
       7   00:56E0                              defpage	15,0xC000, 0x4000
       8   00:56E0                      
       9   00:56E0  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:56E0  (00:6000)           _bank1	equ	6000h
      11   00:56E0  (00:7000)           _bank2	equ	7000h
      12   00:56E0  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:56E6  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 FD 43 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010  (00:0041)           DISSCR                  equ #0041   ; Disable screen
      11.  00:4010  (00:0044)           ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
       2.  00:4010  (00:0007)           KB_RIGHT 				equ 7
       3.  00:4010  (00:0006)           KB_DOWN 				equ 6
       4.  00:4010  (00:0005)           KB_UP 					equ	5        
       5.  00:4010  (00:0004)           KB_LEFT 				equ	4
       6.  00:4010  (00:0003)           KB_DEL 					equ	3
       7.  00:4010  (00:0000)           KB_SPACE				equ	0
       8.  00:4010                      
       9.  00:4010  (00:0001)           MOV_SPEED				equ 1
      10.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      11.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      12.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      13.  00:4010  (00:0004)           MAX_CHAR_STEPS          equ 4       ; #steps pattern change MAIN CHAR
      14.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      15.  00:4010  (00:0098)           PORT_0                  equ 0x98
      16.  00:4010  (00:0099)           PORT_1                  equ 0x99
      17.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      18.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      19.  00:4010                      
      20.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan es entas direcciones valores globals del sistema
      21.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      22.  00:4010                      
      22   00:4010                      
      23   00:4010                      ; Funciones auxiliares
      24   00:4010                      	include "include\BTH_func.asm"
       1.  00:4010                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:4010                      ;Entrada:
       3.  00:4010                      ;   b - Y SPR1
       4.  00:4010                      ;   C - X SPR1
       5.  00:4010                      
       6.  00:4010                      ;   d - Y SPR2
       7.  00:4010                      ;   e - X SPR2
       8.  00:4010                      ;Salida:
       9.  00:4010                      ;   a - bloque
      10.  00:4010                      ;Modifica:
      11.  00:4010                      ;   a, hl, de
      12.  00:4010                      check_spr_collision:        
      13.  00:4010  78                          LD A,B          ; a = Y SPR1
      14.  00:4011  BA                          CP D
      15.  00:4012  C2 1D 40                    JP NZ,.no_collision
      16.  00:4015                      
      17.  00:4015  79                          LD A,C          ; a = X SPR1
      18.  00:4016  BB                          CP E
      19.  00:4017  C2 1D 40                    JP NZ,.no_collision
      20.  00:401A                      
      21.  00:401A  3E 01                       LD A,1
      22.  00:401C  C9                          RET
      23.  00:401D                      .no_collision
      24.  00:401D  3E 00                   LD A,0
      25.  00:401F  C9                      RET
      26.  00:4020                      
      27.  00:4020                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:4020                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:4020                      ;Entrada:
      30.  00:4020                      ;   d - X
      31.  00:4020                      ;   e - y
      32.  00:4020                      ;Salida:
      33.  00:4020                      ;   a - bloque
      34.  00:4020                      ;Modifica:
      35.  00:4020                      ;   a, hl, de
      36.  00:4020                      get_bloque_en_X_Y:
      37.  00:4020                              ;(y/8)*32+(x/8)
      38.  00:4020  7B                          ld a,e      ;a=y
      39.  00:4021  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:4027  26 00                       ld h,0
      41.  00:4029  6F                          ld l,a      ;hl=y/8
      42.  00:402A  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:402F                      
      44.  00:402F  7A                          ld a,d      ;a=x
      45.  00:4030  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:4036  16 00                       ld d,0
      47.  00:4038  5F                          ld e,a      ;de=x/8
      48.  00:4039  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:403A                      
      50.  00:403A  ED 5B 95 C0                 ld de,(MAPA)
      51.  00:403E  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:403F                      
      53.  00:403F  7E                          ld a,[hl]
      54.  00:4040  C9                          ret
      55.  00:4041                      
      56.  00:4041                      ; SCREEN 8
      57.  00:4041                      SetVdp_Write:
      58.  00:4041                      
      59.  00:4041                      	; transform address from 
      60.  00:4041                      	;
      61.  00:4041                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:4041                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:4041                      	;
      64.  00:4041                      	; to
      65.  00:4041                      	;
      66.  00:4041                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:4041                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:4041  CB 04                   rlc     h
      69.  00:4043  17                      rla
      70.  00:4044  CB 04                   rlc     h
      71.  00:4046  17                      rla
      72.  00:4047  CB 3C                   srl     h
      73.  00:4049  CB 3C                   srl     h
      74.  00:404B                      
      75.  00:404B  F3                      di
      76.  00:404C                      	    ; write bits a14-16 of address to R#14
      77.  00:404C  D3 99               	    out     (PORT_1), a
      78.  00:404E  3E 8E               	    ld      a, 14 + 128
      79.  00:4050  D3 99               	    out     (PORT_1), a
      80.  00:4052                      
      81.  00:4052                      	    ; write the other address bits to VDP PORT_1
      82.  00:4052  7D                  	    ld      a, l
      83.  00:4053  00                  	    nop
      84.  00:4054  D3 99               	    out     (PORT_1), a
      85.  00:4056  7C                  	    ld      a, h
      86.  00:4057  F6 40               	    or      64
      87.  00:4059  FB                      ei
      88.  00:405A  D3 99                   out     (PORT_1),a
      89.  00:405C  C9                      ret
      90.  00:405D                      
      91.  00:405D                      Set212Lines:
      92.  00:405D                              ; set LN (bit 7) of R#9 to 1
      93.  00:405D  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:4060  F6 80                       or      10000000b
      95.  00:4062  47                          ld      b, a
      96.  00:4063  0E 09                       ld      c, 9            ; register #
      97.  00:4065  CD 47 00                    call    WRTVDP
      98.  00:4068  C9                          ret
      99.  00:4069                      
     100.  00:4069                      ClearVram_MSX2:
     101.  00:4069  AF                          xor     a           ; set vram write base address
     102.  00:406A  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:406D  CD 41 40                    call    SetVdp_Write
     104.  00:4070  AF                          xor		a
     105.  00:4071                      
     106.  00:4071                          ; TODO: 
     107.  00:4071                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:4071                          ;   disable screen/sprites (should I ??)
     109.  00:4071                      
     110.  00:4071                          ; clear all 128kb of VRAM
     111.  00:4071  16 02               	ld		d, 2		; 2 repetitions
     112.  00:4073                      .loop_2:
     113.  00:4073  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:4075                      .loop_1:
     115.  00:4075  06 00               	ld		b, 0		; 256 repetitions
     116.  00:4077                      .loop:
     117.  00:4077  D3 98               	out		(PORT_0), a
     118.  00:4079  10 FC               	djnz	.loop
     119.  00:407B  0D                  	dec		c
     120.  00:407C  C2 75 40            	jp		nz, .loop_1
     121.  00:407F  15                  	dec		d
     122.  00:4080  C2 73 40            	jp		nz, .loop_2
     123.  00:4083                      
     124.  00:4083  C9                  	ret
     125.  00:4084                      
     126.  00:4084                      ; MEGAROM
     127.  00:4084                      
     128.  00:4084                      opening_screen		
     129.  00:4084  0E 00               		ld		c,0
     130.  00:4086  11 00 00            		ld		de,0
     131.  00:4089  CD C9 40            		call	_vdpsetvramwr
     132.  00:408C  1E 04               		ld	e,4
     133.  00:408E  3E 09               		ld	a, :GRAPHIC
     134.  00:4090  57                  		ld	d,a
     135.  00:4091  32 00 70            2:		ld	(_bank2),a
     136.  00:4094  21 00 80            		ld	hl,GRAPHIC
     137.  00:4097  01 98 00            		ld	bc,0x98
     138.  00:409A  3E 40               		ld	a,32*2
     139.  00:409C  ED B3               1:		otir
     140.  00:409E  3D                  		dec	a
     141.  00:409F  20 FB               		jr	nz,1b
     142.  00:40A1  14                  		inc	d
     143.  00:40A2  7A                  		ld	a,d
     144.  00:40A3  1D                  		dec	e
     145.  00:40A4  20 EB               		jr	nz,2b
     146.  00:40A6  C9                  		ret 
     147.  00:40A7                      
     148.  00:40A7                      load_screen
     149.  00:40A7  0E 00               		ld		c,0
     150.  00:40A9  11 00 00            		ld		de,0
     151.  00:40AC  CD C9 40            		call	_vdpsetvramwr
     152.  00:40AF  1E 02               		ld	e,2					; #pages
     153.  00:40B1  78                  		ld	a, b			; 1st page bitmap
     154.  00:40B2  57                  		ld	d,a
     155.  00:40B3  32 00 70            2:		ld	(_bank2),a
     156.  00:40B6  2A 97 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:40B9  01 98 00            		ld	bc,0x98
     158.  00:40BC  3E 40               		ld	a,64
     159.  00:40BE  ED B3               1:		otir
     160.  00:40C0  3D                  		dec	a
     161.  00:40C1  20 FB               		jr	nz,1b
     162.  00:40C3  14                  		inc	d
     163.  00:40C4  7A                  		ld	a,d
     164.  00:40C5  1D                  		dec	e
     165.  00:40C6  20 EB               		jr	nz,2b
     166.  00:40C8  C9                  		ret 
     167.  00:40C9                      
     168.  00:40C9                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:40C9                      
     170.  00:40C9                      _vdpsetvramwr:
     171.  00:40C9  79                  	ld a,c
     172.  00:40CA  CB 02               	rlc d
     173.  00:40CC  17                  	rla
     174.  00:40CD  CB 02               	rlc d
     175.  00:40CF  17                  	rla
     176.  00:40D0  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:40D2                      
     178.  00:40D2  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:40D4  3E 8E               	ld a,14+128
     180.  00:40D6  D3 99               	out (0x99),a
     181.  00:40D8  CB 3A               	srl d ; secondo shift.     
     182.  00:40DA                      _vdpsetvramwr14
     183.  00:40DA  7B                  	ld a,e ;set bits 0-7
     184.  00:40DB  D3 99               	out (0x99),a
     185.  00:40DD  7A                  	ld a,d ;set bits 8-13
     186.  00:40DE  F6 40               	or 0x40 ; + write access
     187.  00:40E0  D3 99               	out (0x99),a
     188.  00:40E2  C9                  	ret
     189.  00:40E3                      
     190.  00:40E3                      
     191.  00:40E3                      
     192.  00:40E3                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:40E3                      		; -----------------------------------------------------
     194.  00:40E3                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:40E3                      		; -----------------------------------------------------
     196.  00:40E3                      
     197.  00:40E3                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:40E3                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:40E3                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:40E3                      
     201.  00:40E3                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:40E3                      		; NINGUNA
     203.  00:40E3                      
     204.  00:40E3                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:40E3                      		; --- Entrada: a = SLOT                                           ---
     206.  00:40E3                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:40E3                      		; --- AUTOR: Konamiman                                            ---
     208.  00:40E3  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:40E5  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:40E6  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:40E8  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:40EB  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:40EC  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:40ED  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:40EF  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:40F1                      		; --- El slot esta expandido ---
     217.  00:40F1  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:40F2  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:40F3  23                  		inc	hl				; Incrementamos hl una...
     220.  00:40F4  23                  		inc	hl				; ...dos...
     221.  00:40F5  23                  		inc	hl				; ...tres...
     222.  00:40F6  23                  		inc	hl				; ...cuatro veces
     223.  00:40F7  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:40F8  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:40FA  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:40FB  C9                  		ret					; Volvemos
     227.  00:40FC                      
     228.  00:40FC                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:40FC  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:40FE  32 01 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:4101  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:4102                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:4102  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:4105  0F                  		rrca					; Rotamos a la derecha...
     235.  00:4106  0F                  		rrca					; ...dos veces
     236.  00:4107  CD E3 40            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:410A  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:410C  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:410F                      
     240.  00:410F                      SET_SCREEN5_MODE:
     241.  00:410F                           ;Cambiamos el modo de pantalla
     242.  00:410F                          ; BASIC: COLOR 15,1,1
     243.  00:410F                          ; Establecer los colores
     244.  00:410F  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:4112  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:4114  23                  	inc hl ; FORCLR+1
     247.  00:4115  36 01               	ld [hl],1 ; Color de fondo 1=negro
     248.  00:4117  23                  	inc hl ; FORCLR+2
     249.  00:4118  36 01               	ld [hl],1 ; Color del borde 1=negro
     250.  00:411A                      
     251.  00:411A  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     252.  00:411C  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     253.  00:411F                      ;
     254.  00:411F  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     255.  00:4122                          ;En or 0+0=0, 0+1=1, 1+1=1
     256.  00:4122                          ;En and 0+0=0, 0+1=0, 1+1=1
     257.  00:4122                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     258.  00:4122                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     259.  00:4122                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     260.  00:4122  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     261.  00:4124                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     262.  00:4124  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:4126                      
     264.  00:4126  47                      ld b,a ;carga en b el valor de a
     265.  00:4127  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     266.  00:4129  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     267.  00:412C  AF                      xor a ; ld a,0
     268.  00:412D  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     269.  00:4130  C9                      ret
     270.  00:4131                      
     271.  00:4131                      DUMP_SPR_ALL:
     272.  00:4131                      
     273.  00:4131                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     274.  00:4131                      
     275.  00:4131  21 70 49                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     276.  00:4134  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     277.  00:4137  01 A0 01                ld bc, 8*4*13; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     278.  00:413A  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     279.  00:413D                      
     280.  00:413D                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     281.  00:413D                      
     282.  00:413D  21 0C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     283.  00:4140  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     284.  00:4143  01 80 00                ld bc,128; 4 x #Sprites
     285.  00:4146  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     286.  00:4149                      
     287.  00:4149                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     288.  00:4149                      
     289.  00:4149  21 10 4B                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     290.  00:414C  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     291.  00:414F  01 D0 00                ld bc,16*13; 16 x #Sprites
     292.  00:4152  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     293.  00:4155  C9                      ret
     294.  00:4156                      	
     295.  00:4156                      DUMP_SPR_ATTS:
     296.  00:4156                      
     297.  00:4156                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     298.  00:4156                      
     299.  00:4156  21 0C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     300.  00:4159  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     301.  00:415C  01 1C 00                ld bc,28		; 6 x #Sprites
     302.  00:415F  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     303.  00:4162                      
     304.  00:4162                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     305.  00:4162                      ;	JP Z,.DUMP_SPR_ATTS_END
     306.  00:4162  2A 93 C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     307.  00:4165  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     308.  00:4168  C5                      PUSH BC
     309.  00:4169  01 30 00            	ld bc,16*3; 16 x #Sprites
     310.  00:416C  CD 5C 00                call  LDIRVM 
     311.  00:416F  C1                  	POP BC
     312.  00:4170                      
     313.  00:4170                      .DUMP_SPR_ATTS_END:
     314.  00:4170  C9                      ret
     315.  00:4171                      
     316.  00:4171                      DUMP_SPR_P1:    
     317.  00:4171                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:4171                      
     319.  00:4171  2A 8F C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:4174  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:4177  C5                      PUSH BC
     322.  00:4178  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     323.  00:417B  CD 5C 00                call  LDIRVM 
     324.  00:417E  C1                  	POP BC
     325.  00:417F                      
     326.  00:417F                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     327.  00:417F                      
     328.  00:417F  2A 91 C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     329.  00:4182  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     330.  00:4185  C5                      PUSH BC
     331.  00:4186  01 30 00            	ld bc,16*3; 16 x #Sprites
     332.  00:4189  CD 5C 00                call  LDIRVM 
     333.  00:418C  C1                  	POP BC
     334.  00:418D                      	
     335.  00:418D                      
     336.  00:418D                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     337.  00:418D                      ;    xor a
     338.  00:418D                      ;	di			; set VRAM address to 1800h
     339.  00:418D                      ;	out (99h),a		; lower byte 00
     340.  00:418D                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     341.  00:418D                      ;	ei
     342.  00:418D                      ;	out (99h),a		; note that this is protected by the ei instruction
     343.  00:418D                      ;   push BC
     344.  00:418D                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     345.  00:418D                      ;	ld hl,(SPRITE_PTR_REPLACE)
     346.  00:418D                      
     347.  00:418D                      ;.loop1:
     348.  00:418D                      ;	outi			; send the data (HL) to port 98h 
     349.  00:418D                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     350.  00:418D                      ;   POP BC
     351.  00:418D                      
     352.  00:418D                          ; Replace 2 entries in sprite color table
     353.  00:418D                      ;    xor a
     354.  00:418D                      ;	di			; set VRAM address to 1800h
     355.  00:418D                      ;	out (99h),a		; lower byte 00
     356.  00:418D                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     357.  00:418D                      ;	ei
     358.  00:418D                      ;	out (99h),a		; note that this is protected by the ei instruction
     359.  00:418D                       ;   push BC
     360.  00:418D                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     361.  00:418D                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     362.  00:418D                      	
     363.  00:418D                      ;.loop2:
     364.  00:418D                      ;	outi			; send the data (HL) to port 98h 
     365.  00:418D                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     366.  00:418D                       ;   POP BC
     367.  00:418D                      
     368.  00:418D  C9                      ret
     369.  00:418E                      
      25   00:418E                          include "include\BTH_animate.asm"
       1.  00:418E                      ; Movimiento P1
       2.  00:418E                      move_up:
       3.  00:418E  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:418F                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:418F  AF                      XOR A
       6.  00:4190  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:4193  CD 99 42                CALL CHECK_DIRECTION_MAIN
       8.  00:4196                      
       9.  00:4196  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:4199  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:419B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:419C  DD 7E 01                ld a,(ix+1)
      13.  00:419F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:41A0  CD 20 40                call get_bloque_en_X_Y
      15.  00:41A3  FE 01                   cp 1
      16.  00:41A5  CA 91 43                jp z,NO_MOVEMENT
      17.  00:41A8                      
      18.  00:41A8  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:41AB  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:41AD  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:41AE  DD 7E 01                ld a,(ix+1)
      22.  00:41B1  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:41B3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:41B4  CD 20 40                call get_bloque_en_X_Y
      25.  00:41B7  FE 01                   cp 1
      26.  00:41B9  CA 91 43                jp z,NO_MOVEMENT
      27.  00:41BC                            
      28.  00:41BC  3E FF               	LD A, -MOV_SPEED
      29.  00:41BE  32 02 C0            	LD (CHAR_SPEED_Y), A
      30.  00:41C1  CD 26 43                call UPDATE_MOVEMENT   
      31.  00:41C4                          ;JP no_arrows
      32.  00:41C4  C9                      ret
      33.  00:41C5                      
      34.  00:41C5                      move_down:
      35.  00:41C5  A9                      XOR C               ; Reseteamos la entrada del teclado
      36.  00:41C6                          ; Actualizamos la última tecla de dirección pulsada
      37.  00:41C6  3E 01                   LD A,$01
      38.  00:41C8  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
      39.  00:41CB  CD 99 42                CALL CHECK_DIRECTION_MAIN
      40.  00:41CE                      
      41.  00:41CE  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      42.  00:41D1  C6 11                   add 17 ; incrementamos en 15+2 el valor
      43.  00:41D3  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      44.  00:41D4  DD 7E 01                ld a,(ix+1)
      45.  00:41D7  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      46.  00:41D8  CD 20 40                call get_bloque_en_X_Y
      47.  00:41DB  FE 01                   cp 1
      48.  00:41DD  CA 91 43                jp z,NO_MOVEMENT
      49.  00:41E0                      
      50.  00:41E0  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      51.  00:41E3  C6 11                   add 17 ; incrementamos en 15 el valor
      52.  00:41E5  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      53.  00:41E6  DD 7E 01                ld a,(ix+1)
      54.  00:41E9  C6 0A                   add 10 ; miramos la segunda tile 8+2
      55.  00:41EB  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      56.  00:41EC  CD 20 40                call get_bloque_en_X_Y
      57.  00:41EF  FE 01                   cp 1
      58.  00:41F1  CA 91 43                jp z,NO_MOVEMENT
      59.  00:41F4                          
      60.  00:41F4  3E 01                   LD A, MOV_SPEED
      61.  00:41F6  32 02 C0            	LD (CHAR_SPEED_Y), A
      62.  00:41F9  CD 26 43                call UPDATE_MOVEMENT    
      63.  00:41FC                          ;JP no_arrows
      64.  00:41FC  C9                      ret
      65.  00:41FD                      
      66.  00:41FD                      move_right:
      67.  00:41FD  A9                      XOR C               ; Reseteamos la entrada del teclado
      68.  00:41FE                          ; Actualizamos la última tecla de dirección pulsada
      69.  00:41FE  3E 03                   LD A,$03
      70.  00:4200  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
      71.  00:4203  CD 99 42                CALL CHECK_DIRECTION_MAIN
      72.  00:4206                      
      73.  00:4206  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      74.  00:4209  C6 10                   add 16; incrementamos en 3 el valor
      75.  00:420B  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      76.  00:420C  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      77.  00:420F  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      78.  00:4211  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      79.  00:4212  CD 20 40                call get_bloque_en_X_Y
      80.  00:4215  FE 01                   cp 1
      81.  00:4217  CA 91 43                jp z,NO_MOVEMENT
      82.  00:421A                      
      83.  00:421A                          ;Miramos el tile del byte inferior del sprite - centro personaje
      84.  00:421A  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      85.  00:421D  C6 10                   add 16; incrementamos en 2 tiles el valor
      86.  00:421F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      87.  00:4220  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      88.  00:4223  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      89.  00:4225  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      90.  00:4226  CD 20 40                call get_bloque_en_X_Y
      91.  00:4229  FE 01                   cp 1
      92.  00:422B  CA 91 43                jp z,NO_MOVEMENT
      93.  00:422E                      
      94.  00:422E                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
      95.  00:422E  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      96.  00:4231  C6 10                   add 16; incrementamos en 2 tiles el valor
      97.  00:4233  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      98.  00:4234  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      99.  00:4237  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     100.  00:4239  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     101.  00:423A  CD 20 40                call get_bloque_en_X_Y
     102.  00:423D  FE 01                   cp 1
     103.  00:423F  CA 91 43                jp z,NO_MOVEMENT    
     104.  00:4242                          
     105.  00:4242  3E 01                   LD A, MOV_SPEED
     106.  00:4244  32 01 C0            	LD (CHAR_SPEED_X), A
     107.  00:4247  CD 26 43                call UPDATE_MOVEMENT      
     108.  00:424A                          ;JP no_arrows
     109.  00:424A  C9                      ret
     110.  00:424B                      
     111.  00:424B                      move_left:
     112.  00:424B  A9                      XOR C               ; Reseteamos la entrada del teclado
     113.  00:424C                          ; Actualizamos la última tecla de dirección pulsada
     114.  00:424C  3E 02                   LD A,$02
     115.  00:424E  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     116.  00:4251  CD 99 42                CALL CHECK_DIRECTION_MAIN
     117.  00:4254  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     118.  00:4257  D6 02                   sub 2 ; decrementamos en 2 el valor
     119.  00:4259  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     120.  00:425A  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     121.  00:425D  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     122.  00:425F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     123.  00:4260  CD 20 40                call get_bloque_en_X_Y
     124.  00:4263  FE 01                   cp 1
     125.  00:4265  CA 91 43                jp z,NO_MOVEMENT
     126.  00:4268                      
     127.  00:4268                          ;Miramos el tile inferior parte central del personaje
     128.  00:4268  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     129.  00:426B  D6 02                   sub 2 ; decrementamos en 2 el valor
     130.  00:426D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     131.  00:426E  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     132.  00:4271  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     133.  00:4273  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     134.  00:4274  CD 20 40                call get_bloque_en_X_Y
     135.  00:4277  FE 01                   cp 1
     136.  00:4279  CA 91 43                jp z,NO_MOVEMENT
     137.  00:427C                      
     138.  00:427C                          ;Miramos el tile inferior esquina inferior izquierda
     139.  00:427C  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     140.  00:427F  D6 02                   sub 2 ; decrementamos en 2 el valor
     141.  00:4281  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     142.  00:4282  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     143.  00:4285  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     144.  00:4287  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     145.  00:4288  CD 20 40                call get_bloque_en_X_Y
     146.  00:428B  FE 01                   cp 1
     147.  00:428D  CA 91 43                jp z,NO_MOVEMENT
     148.  00:4290                      
     149.  00:4290  3E FF                   LD A, -MOV_SPEED
     150.  00:4292  32 01 C0            	LD (CHAR_SPEED_X), A
     151.  00:4295  CD 26 43                call UPDATE_MOVEMENT     
     152.  00:4298                          ;JP no_arrows
     153.  00:4298  C9                      ret
     154.  00:4299                      
     155.  00:4299                      CHECK_DIRECTION_MAIN:
     156.  00:4299  3A 06 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     157.  00:429C  2A 07 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     158.  00:429F  BD                  	CP L		            	                ;Son iguales?
     159.  00:42A0  C8                  	RET Z                           			;Si son iguales, vuelvo
     160.  00:42A1  3A 07 C0                LD A,(CHAR_NEW_DIR_MAIN)
     161.  00:42A4  FE 01                   CP $01
     162.  00:42A6  CA BB 42                JP Z,.SET_DIR_DOWN
     163.  00:42A9  FE 00                   CP $00
     164.  00:42AB  CA D0 42                JP Z,.SET_DIR_UP
     165.  00:42AE  FE 03                   CP $03
     166.  00:42B0  CA FA 42                JP Z,.SET_DIR_RIGHT
     167.  00:42B3  FE 02                   CP $02
     168.  00:42B5  CA E5 42                JP Z,.SET_DIR_LEFT
     169.  00:42B8  C3 0F 43                JP .FINISH
     170.  00:42BB                          
     171.  00:42BB                      .SET_DIR_DOWN:    
     172.  00:42BB  21 30 47                ld hl, SPRITE_P1_DOWN
     173.  00:42BE  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     174.  00:42C1                          
     175.  00:42C1  21 E0 4B                ld hl, SPRITE_COLOR_P1_DOWN
     176.  00:42C4  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL    
     177.  00:42C7  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     178.  00:42CA  CD 71 41                CALL DUMP_SPR_P1    
     179.  00:42CD                      
     180.  00:42CD  C3 0F 43                JP .FINISH
     181.  00:42D0                      
     182.  00:42D0                      .SET_DIR_UP:
     183.  00:42D0  21 70 46                ld hl, SPRITE_P1_UP
     184.  00:42D3  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     185.  00:42D6                          
     186.  00:42D6  21 80 4B                ld hl, SPRITE_COLOR_P1_UP
     187.  00:42D9  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     188.  00:42DC  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     189.  00:42DF  CD 71 41                CALL DUMP_SPR_P1
     190.  00:42E2  C3 0F 43                JP .FINISH
     191.  00:42E5                      
     192.  00:42E5                      .SET_DIR_LEFT:    
     193.  00:42E5  21 F0 47                ld hl, SPRITE_P1_LEFT
     194.  00:42E8  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     195.  00:42EB                          
     196.  00:42EB  21 80 56                ld hl, SPRITE_COLOR_P1_LEFT
     197.  00:42EE  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     198.  00:42F1  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     199.  00:42F4  CD 71 41                CALL DUMP_SPR_P1   
     200.  00:42F7  C3 0F 43                JP .FINISH
     201.  00:42FA                      
     202.  00:42FA                      .SET_DIR_RIGHT:
     203.  00:42FA  21 B0 48                ld hl, SPRITE_P1_RIGHT
     204.  00:42FD  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:4300                          
     206.  00:4300  21 40 4C                ld hl, SPRITE_COLOR_P1_RIGHT
     207.  00:4303  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:4306  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:4309                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     210.  00:4309  CD 71 41                CALL DUMP_SPR_P1
     211.  00:430C  C3 0F 43                JP .FINISH
     212.  00:430F                      
     213.  00:430F                      .FINISH:
     214.  00:430F  AF                      XOR A   ; reseteamos el contador de pasos
     215.  00:4310  32 09 C0                LD (CHAR_MIN_STEP), A   
     216.  00:4313  3A 07 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     217.  00:4316  32 06 C0                LD (CHAR_DIR_MAIN),A    
     218.  00:4319                      
     219.  00:4319                          ; ponemos el primer frame del sprite
     220.  00:4319  DD 36 02 00             LD (ix+2), $00
     221.  00:431D  DD 36 06 04             LD (ix+6), $04
     222.  00:4321  DD 36 0A 08             LD (ix+10), $08
     223.  00:4325                          ;CALL DUMP_SPR_ATTS
     224.  00:4325  C9                      RET
     225.  00:4326                      
     226.  00:4326                      UPDATE_MOVEMENT:
     227.  00:4326  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     228.  00:4329  2A 02 C0            	LD HL, (CHAR_SPEED_Y)
     229.  00:432C  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     230.  00:432D                          
     231.  00:432D  DD 77 00            	LD (ix), A
     232.  00:4330  DD 77 04                LD (ix+4), A
     233.  00:4333  DD 77 08                LD (ix+8), A
     234.  00:4336                      	
     235.  00:4336  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     236.  00:4339  2A 01 C0            	LD HL, (CHAR_SPEED_X)
     237.  00:433C  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     238.  00:433D                          
     239.  00:433D  DD 77 01            	LD (ix+1), A
     240.  00:4340  DD 77 05                LD (ix+5), A
     241.  00:4343  DD 77 09                LD (ix+9), A	
     242.  00:4346                      
     243.  00:4346  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     244.  00:4347  32 01 C0                LD (CHAR_SPEED_X),A
     245.  00:434A  32 02 C0                LD (CHAR_SPEED_Y),A	
     246.  00:434D                      
     247.  00:434D                          ; Animación/pasos de personaje	
     248.  00:434D  3A 09 C0                LD A, (CHAR_MIN_STEP)
     249.  00:4350  FE 04                   CP MAX_CHAR_STEPS
     250.  00:4352  C2 8B 43                JP NZ,.NO_CHAR_PATTERN_CHANGE
     251.  00:4355                          
     252.  00:4355  AF                      XOR A
     253.  00:4356  32 09 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     254.  00:4359  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     255.  00:435C  FE 00                   CP $00
     256.  00:435E  CA 74 43                JP Z,.SET_SPR_1P_2
     257.  00:4361  DD 36 02 00             LD (ix+2), $00
     258.  00:4365  DD 36 06 04             LD (ix+6), $04
     259.  00:4369  DD 36 0A 08             LD (ix+10), $08
     260.  00:436D  2A 91 C0                ld hl, (SPRITE_COLOR_REPLACE)
     261.  00:4370  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     262.  00:4373  C9                      ret
     263.  00:4374                      
     264.  00:4374                      .SET_SPR_1P_2:
     265.  00:4374  DD 36 02 0C             LD (ix+2), $0C
     266.  00:4378  DD 36 06 10             LD (ix+6), $10
     267.  00:437C  DD 36 0A 14             LD (ix+10), $14
     268.  00:4380                              
     269.  00:4380  2A 91 C0                ld HL, (SPRITE_COLOR_REPLACE)
     270.  00:4383  11 30 00                ld DE,48
     271.  00:4386  19                      ADD HL, DE
     272.  00:4387  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     273.  00:438A                          ;ld a, 0
     274.  00:438A  C9                  	ret
     275.  00:438B                      
     276.  00:438B                      .NO_CHAR_PATTERN_CHANGE    
     277.  00:438B  C6 01                   ADD 1
     278.  00:438D  32 09 C0                LD (CHAR_MIN_STEP), A    
     279.  00:4390  C9                      ret
     280.  00:4391                      
     281.  00:4391                      NO_MOVEMENT:    
     282.  00:4391  C9                      ret
     283.  00:4392                      
     284.  00:4392                      MOVE_SHOOT:
     285.  00:4392  3A 08 C0                LD A,(CHAR_MAIN_SHOOT)    
     286.  00:4395  FE 01                   CP $01
     287.  00:4397  CA C2 43                JP Z,.MOVE_SHOOT_LEFT
     288.  00:439A  FE 02                   CP $02
     289.  00:439C  CA AA 43                JP Z,.MOVE_SHOOT_RIGHT
     290.  00:439F  FE 03                   CP $03
     291.  00:43A1  CA B2 43                JP Z,.MOVE_SHOOT_UP    
     292.  00:43A4  FE 04                   CP $04
     293.  00:43A6  CA BA 43                JP Z,.MOVE_SHOOT_DOWN
     294.  00:43A9  C9                      RET
     295.  00:43AA                      
     296.  00:43AA                      .MOVE_SHOOT_RIGHT:        
     297.  00:43AA  3E 03                   LD A, MOV_SPEED_SHOOT
     298.  00:43AC  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     299.  00:43AF  C3 C7 43                JP .CHECK_SHOOT_DISTANCE
     300.  00:43B2                      
     301.  00:43B2                      .MOVE_SHOOT_UP:        
     302.  00:43B2  3E FD                   LD A, -MOV_SPEED_SHOOT
     303.  00:43B4  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     304.  00:43B7  C3 C7 43                JP .CHECK_SHOOT_DISTANCE
     305.  00:43BA                      
     306.  00:43BA                      .MOVE_SHOOT_DOWN:
     307.  00:43BA  3E 03                   LD A, MOV_SPEED_SHOOT
     308.  00:43BC  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     309.  00:43BF  C3 C7 43                JP .CHECK_SHOOT_DISTANCE
     310.  00:43C2                      
     311.  00:43C2                      .MOVE_SHOOT_LEFT:    
     312.  00:43C2  3E FD                   LD A, -MOV_SPEED_SHOOT
     313.  00:43C4  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     314.  00:43C7                      
     315.  00:43C7                      .CHECK_SHOOT_DISTANCE:
     316.  00:43C7                          ; Miramos si va a izq o der
     317.  00:43C7  3A 08 C0                LD A,(CHAR_MAIN_SHOOT)    
     318.  00:43CA  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     319.  00:43CC  D2 DC 43                JP NC,.ADD_SHOOT_Y
     320.  00:43CF                          ; Movemos el disparo
     321.  00:43CF  DD 7E 11                LD A, (ix+17)          ;cargamos la X del disparo
     322.  00:43D2  2A 0B C0            	LD HL, (CHAR_SPEED_SHOOT)
     323.  00:43D5  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     324.  00:43D6  DD 77 11                LD (ix+17), A
     325.  00:43D9  C3 E6 43                JP .ADD_DISTANCE
     326.  00:43DC                      .ADD_SHOOT_Y
     327.  00:43DC                          ; Movemos el disparo
     328.  00:43DC  DD 7E 10                LD A, (ix+16)          ;cargamos la X del disparo
     329.  00:43DF  2A 0B C0            	LD HL, (CHAR_SPEED_SHOOT)
     330.  00:43E2  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     331.  00:43E3  DD 77 10                LD (ix+16), A
     332.  00:43E6                      
     333.  00:43E6                      .ADD_DISTANCE:
     334.  00:43E6  3A 0A C0                LD A,(CHAR_DISTANCE_SHOOT)
     335.  00:43E9  C6 03                   ADD MOV_SPEED_SHOOT
     336.  00:43EB  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A    
     337.  00:43EE  FE 30                   CP MAX_DISTANCE_SHOOT
     338.  00:43F0  C0                      RET NZ
     339.  00:43F1                      
     340.  00:43F1                      .HIDE_SHOOT:
     341.  00:43F1  DD 36 10 D9             LD (ix+16),217          ; Y = 217 para ocultar el Sprite
     342.  00:43F5  AF                      XOR A
     343.  00:43F6  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     344.  00:43F9  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A
     345.  00:43FC  C9                      RET
     346.  00:43FD                      
      26   00:43FD                      	;include "include\SETPAGES48K.asm"
      27   00:43FD                      
      28   00:43FD                      START
      29   00:43FD                      	; CODE
      30   00:43FD                      	;LD A,8
      31   00:43FD                      	;CALL CHGMOD    	
      32   00:43FD  CD FC 40                CALL SETPAGES32K
      33   00:4400                      ;	CALL opening_screen
      34   00:4400  3E 01               	LD A,1
      35   00:4402  32 00 70            	LD (_bank2),A
      36   00:4405                      ;	CALL CHGET
      37   00:4405                      	; Empieza el juego    
      38   00:4405  CD 69 40            	call ClearVram_MSX2		
      39   00:4408  CD 0F 41            	call SET_SCREEN5_MODE    
      40   00:440B  CD 5D 40                call Set212Lines
      41   00:440E                              
      42   00:440E  CD 1A 44                call INIT_CHARS_VARS
      43   00:4411  3E FF                   LD A, -MOV_SPEED_GHOST
      44   00:4413  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
      45   00:4416  CD 88 44                CALL STAGE1
      46   00:4419                          ;call MAIN_LOOP
      47   00:4419                          ;CALL CHGET
      48   00:4419  C9                  	ret
      49   00:441A                      
      50   00:441A                      
      51   00:441A                      INIT_CHARS_VARS:    
      52   00:441A  DD 21 0C C0             ld ix, SPRITE_ATTRS           
      53   00:441E                          
      54   00:441E  DD 36 00 07             ld (ix), 07h        ; Sprite 1 - $AF abajo
      55   00:4422  DD 36 01 09             ld (ix+1), 09h
      56   00:4426  DD 36 02 00             ld (ix+2), 00h    
      57   00:442A                      
      58   00:442A  DD 36 04 07             ld (ix+4), 07h     ; Sprite 2
      59   00:442E  DD 36 05 09             ld (ix+5), 09h
      60   00:4432  DD 36 06 04             ld (ix+6), 04h        
      61   00:4436                      
      62   00:4436  DD 36 08 07             ld (ix+8), 07h     ; Sprite 3
      63   00:443A  DD 36 09 09             ld (ix+9), 09h
      64   00:443E  DD 36 0A 08             ld (ix+10), 08h        
      65   00:4442                      
      66   00:4442  DD 36 0C 07             ld (ix+12), $07      ; Sprite 1 - Ghost
      67   00:4446  DD 36 0D B9             ld (ix+13), $B9
      68   00:444A  DD 36 0E 18             ld (ix+14), $18
      69   00:444E                          
      70   00:444E  AF                      XOR A
      71   00:444F  32 00 C0                LD (JIFFY_TEMP),A
      72   00:4452  32 01 C0                LD (CHAR_SPEED_X),A
      73   00:4455  32 02 C0                LD (CHAR_SPEED_Y),A
      74   00:4458  32 03 C0                LD (CHAR_SPEED_X_GHOST),A
      75   00:445B  32 05 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      76   00:445E  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A    
      77   00:4461  32 08 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      78   00:4464  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A
      79   00:4467  32 0B C0                LD (CHAR_SPEED_SHOOT),A
      80   00:446A  32 04 C0                LD (CHAR_GHOST_DEAD),A
      81   00:446D  32 09 C0                LD (CHAR_MIN_STEP), A
      82   00:4470  32 93 C0                LD (SPRITE_COLOR_REPLACE2), A
      83   00:4473  3E 01                   LD A,$01
      84   00:4475  32 06 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      85   00:4478                      
      86   00:4478  21 30 47                ld hl, SPRITE_P1_DOWN
      87   00:447B  22 8F C0                ld (SPRITE_PTR_REPLACE), HL    
      88   00:447E  21 E0 4B                ld hl, SPRITE_COLOR_P1_DOWN
      89   00:4481  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
      90   00:4484  22 93 C0                LD (SPRITE_COLOR_REPLACE2), HL
      91   00:4487  C9                      ret
      92   00:4488                      
      93   00:4488                      STAGE1:
      94   00:4488  CD 41 00                CALL DISSCR
      95   00:448B  21 00 80                LD HL, CEMENTER1
      96   00:448E  22 97 C0                LD (BITMAP), HL
      97   00:4491  06 07                   LD B, :CEMENTER1
      98   00:4493  CD A7 40                call load_screen
      99   00:4496                          
     100   00:4496  CD 31 41                call DUMP_SPR_ALL
     101   00:4499  CD 71 41                CALL DUMP_SPR_P1
     102   00:449C  21 A0 4C                LD HL, mapa1
     103   00:449F  22 95 C0                LD (MAPA), HL    
     104   00:44A2  CD 44 00                CALL ENASCR
     105   00:44A5                      
     106   00:44A5                      MAIN_LOOP:
     107   00:44A5                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     108   00:44A5  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     109   00:44A8  FE 00                   CP $00
     110   00:44AA  CA D4 45                JP Z, STAGE2
     111   00:44AD  CD 56 41                call DUMP_SPR_ATTS    
     112   00:44B0                          
     113   00:44B0  3A 04 C0                LD A,(CHAR_GHOST_DEAD)
     114   00:44B3  FE 01                   CP $01
     115   00:44B5  CA 16 45                JP Z,.continue
     116   00:44B8  DD 7E 0D                LD A, (ix+13)          ;cargamos la X del Fantasma
     117   00:44BB  2A 03 C0            	LD HL, (CHAR_SPEED_X_GHOST)
     118   00:44BE  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     119   00:44BF                          
     120   00:44BF  DD 77 0D            	LD (ix+13), A	
     121   00:44C2  FE 16                   CP $16
     122   00:44C4  CA CF 44                JP Z,.CHANGE_DIR_RIGHT
     123   00:44C7  FE B9                   CP $B9
     124   00:44C9  CA DC 44                JP Z,.CHANGE_DIR_LEFT
     125   00:44CC                          		
     126   00:44CC  C3 E5 44                JP .check_pattern
     127   00:44CF                      
     128   00:44CF                      .CHANGE_DIR_RIGHT:
     129   00:44CF  3E 01                   LD A, MOV_SPEED_GHOST
     130   00:44D1  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
     131   00:44D4  3E FF                   LD A,$FF
     132   00:44D6  32 05 C0                LD (CHAR_DIR_GHOST1),A
     133   00:44D9  C3 E5 44                JP .check_pattern
     134   00:44DC                      
     135   00:44DC                      .CHANGE_DIR_LEFT:
     136   00:44DC  3E FF                   LD A, -MOV_SPEED_GHOST
     137   00:44DE  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
     138   00:44E1  AF                      XOR A   ; Pone A a 0
     139   00:44E2  32 05 C0                LD (CHAR_DIR_GHOST1),A
     140   00:44E5                      
     141   00:44E5                      .check_pattern:
     142   00:44E5  3A 05 C0                LD A,(CHAR_DIR_GHOST1)
     143   00:44E8  FE FF                   CP $FF
     144   00:44EA  CA 03 45                JP Z,.check_pattern_RIGHT
     145   00:44ED  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     146   00:44F0  FE 18                   CP $18
     147   00:44F2  CA FC 44                jp z,.change_pattern_L
     148   00:44F5  DD 36 0E 18             LD (ix+14),$18
     149   00:44F9  C3 16 45                jp .continue
     150   00:44FC                      .change_pattern_L:
     151   00:44FC  DD 36 0E 1C             LD (ix+14),$1C
     152   00:4500  C3 16 45                jp .continue
     153   00:4503                      
     154   00:4503                      .check_pattern_RIGHT
     155   00:4503  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     156   00:4506  FE 20                   CP $20
     157   00:4508  CA 12 45                jp z,.change_pattern_R
     158   00:450B  DD 36 0E 20             LD (ix+14),$20
     159   00:450F  C3 16 45                jp .continue
     160   00:4512                      .change_pattern_R:
     161   00:4512  DD 36 0E 24             LD (ix+14),$24
     162   00:4516                      
     163   00:4516                      .continue:    
     164   00:4516  CD 92 43                CALL MOVE_SHOOT
     165   00:4519                      .CHECK_GHOST:
     166   00:4519                          ; Comprobamos si hay colision con el fantasma
     167   00:4519  3A 04 C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     168   00:451C  FE 01                   CP $01
     169   00:451E  CA 3E 45                JP Z,.check_KB
     170   00:4521                      
     171   00:4521  DD 46 10                LD B,(ix+16)         ; Y del disparo
     172   00:4524  DD 4E 11                LD C,(ix+17)         ; X del disparo
     173   00:4527  DD 56 0C                LD D,(ix+12)         ; Y del fantasma 
     174   00:452A  DD 5E 0D                LD E,(ix+13)         ; X del fantasma
     175   00:452D  CD 10 40                call check_spr_collision
     176   00:4530  FE 01                   CP 1
     177   00:4532  C2 3E 45                JP NZ,.check_KB
     178   00:4535                      
     179   00:4535                      .KILL_GHOST:
     180   00:4535  3E 01                   LD A,1
     181   00:4537  32 04 C0                LD (CHAR_GHOST_DEAD),A
     182   00:453A  DD 36 0C D9             LD (ix+12),217    
     183   00:453E                      
     184   00:453E                      .check_KB:
     185   00:453E  76                      halt    
     186   00:453F                      
     187   00:453F  3E 08                   ld a, 8
     188   00:4541  CD 41 01            	call SNSMAT   
     189   00:4544  4F                      LD C,A    
     190   00:4545                          
     191   00:4545  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     192   00:4547  CC FD 41                call z, move_right
     193   00:454A                          
     194   00:454A  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     195   00:454C  CC 4B 42                call z, move_left
     196   00:454F                      
     197   00:454F  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     198   00:4551  CC 8E 41                call z, move_up
     199   00:4554                      
     200   00:4554  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     201   00:4556  CC C5 41                call z, move_down
     202   00:4559                      
     203   00:4559                      no_arrows:
     204   00:4559  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     205   00:455B  CC 64 45                call z,SHOOT_MAIN_CHAR
     206   00:455E                      
     207   00:455E  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     208   00:4560  C8                      ret z
     209   00:4561                      
     210   00:4561  C3 A5 44                jp MAIN_LOOP
     211   00:4564                      
     212   00:4564                      SHOOT_MAIN_CHAR:    
     213   00:4564  3A 08 C0                LD A, (CHAR_MAIN_SHOOT)
     214   00:4567  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     215   00:4569  C8                      RET Z;,MAIN_LOOP
     216   00:456A  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     217   00:456C  C8                      RET Z;,MAIN_LOOP
     218   00:456D  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     219   00:456F  C8                      RET Z;,MAIN_LOOP
     220   00:4570  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     221   00:4572  C8                      RET Z;,MAIN_LOOP
     222   00:4573                      
     223   00:4573  DD 36 12 28             ld (ix+18), $28     ; Sprite Disparo
     224   00:4577                      
     225   00:4577  DD 7E 00                LD A, (ix)          
     226   00:457A  DD 77 10                ld (ix+16), A       ; Asignamos la Y del personaje    
     227   00:457D                      
     228   00:457D  3A 06 C0                LD A, (CHAR_DIR_MAIN)
     229   00:4580  FE 03                   CP $03
     230   00:4582  CA 9E 45                JP Z,.SHOOT_RIGHT
     231   00:4585  FE 00                   CP $00
     232   00:4587  CA AD 45                JP Z,.SHOOT_UP
     233   00:458A  FE 01                   CP $01
     234   00:458C  CA C0 45                JP Z,.SHOOT_DOWN
     235   00:458F                          ; SHOOT LEFT
     236   00:458F  3E 01                   LD A,$01                ; SHOOT LEFT
     237   00:4591  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     238   00:4594  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     239   00:4597  21 F4 FF            	LD HL, -12
     240   00:459A  85                  	ADD L
     241   00:459B                          
     242   00:459B  C3 D0 45                JP .CONTINUE
     243   00:459E                      
     244   00:459E                      .SHOOT_RIGHT:    
     245   00:459E  3E 02                   LD A,$02
     246   00:45A0  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     247   00:45A3                          
     248   00:45A3  DD 7E 01                LD A, (ix+1)			;cargamos la X
     249   00:45A6  21 0C 00            	LD HL, 12
     250   00:45A9  85                  	ADD L
     251   00:45AA  C3 D0 45                JP .CONTINUE
     252   00:45AD                      
     253   00:45AD                      .SHOOT_UP:
     254   00:45AD  3E 03                   LD A,$03
     255   00:45AF  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     256   00:45B2                          
     257   00:45B2                          ; Sumamos el desplazamiento a la Y
     258   00:45B2  DD 7E 10                LD A, (ix+16)
     259   00:45B5  D6 10                   SUB 16
     260   00:45B7  DD 77 10                LD (ix+16), A    
     261   00:45BA                          ;LD (ix+17), D
     262   00:45BA  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     263   00:45BD  C3 D0 45                JP .CONTINUE
     264   00:45C0                      
     265   00:45C0                      .SHOOT_DOWN
     266   00:45C0  3E 04               	LD A,$04
     267   00:45C2  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     268   00:45C5                          
     269   00:45C5                          ; Sumamos el desplazamiento a la Y
     270   00:45C5  DD 7E 10                LD A, (ix+16)
     271   00:45C8  C6 10                   ADD 16
     272   00:45CA  DD 77 10                LD (ix+16), A    
     273   00:45CD                          ;LD (ix+17), D
     274   00:45CD  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     275   00:45D0                      
     276   00:45D0                      .CONTINUE:
     277   00:45D0                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     278   00:45D0  DD 77 11                ld (ix+17), A       ; Asignamos la X del personaje + el desplazamiento        
     279   00:45D3                          ;jp MAIN_LOOP
     280   00:45D3  C9                      ret
     281   00:45D4                      
     282   00:45D4                      STAGE2:
     283   00:45D4  CD 41 00                CALL DISSCR
     284   00:45D7  21 00 80                LD HL, CEMENTER2
     285   00:45DA  22 97 C0                LD (BITMAP), HL
     286   00:45DD  06 0D                   LD B, :CEMENTER2
     287   00:45DF                      
     288   00:45DF  CD A7 40                call load_screen
     289   00:45E2  21 E0 4F                LD HL, mapa2
     290   00:45E5  22 95 C0                LD (MAPA), HL
     291   00:45E8                      
     292   00:45E8  DD 36 00 C4             LD (ix), 196    ; Ponemos el P1 abajo
     293   00:45EC  DD 36 04 C4             LD (ix+4), 196    
     294   00:45F0  DD 36 08 C4             LD (ix+8), 196    
     295   00:45F4                          
     296   00:45F4  DD 36 0C D9             LD (ix+12),217  ; ocultamos el fantasma
     297   00:45F8                          
     298   00:45F8  CD 31 41                call DUMP_SPR_ALL    
     299   00:45FB  CD 71 41                CALL DUMP_SPR_P1
     300   00:45FE                          ; Esqueleto
     301   00:45FE  DD 36 14 10             LD (ix+20), 10h
     302   00:4602  DD 36 15 10             LD (ix+21), 10h
     303   00:4606  DD 36 16 2C             LD (ix+22), 2Ch
     304   00:460A                      
     305   00:460A  DD 36 18 10             LD (ix+24), 10h
     306   00:460E  DD 36 19 10             LD (ix+25), 10h
     307   00:4612  DD 36 1A 30             LD (ix+26), 30h
     308   00:4616                      
     309   00:4616  CD 44 00                CALL ENASCR
     310   00:4619                          
     311   00:4619                      MAIN_LOOP2:
     312   00:4619  76                      halt    
     313   00:461A                      
     314   00:461A  DD 7E 00                LD A, (ix)    
     315   00:461D  FE C6                   CP 198
     316   00:461F  C2 45 46                JP NZ, .no_screen_change
     317   00:4622  DD 36 00 01             LD (ix), 1          ; SP1 - Y = 1
     318   00:4626  DD 36 04 01             LD (ix+4), 1
     319   00:462A  DD 36 08 01             LD (ix+8), 1
     320   00:462E                      
     321   00:462E  3A 04 C0                LD A, (CHAR_GHOST_DEAD)
     322   00:4631  FE 01                   CP $01
     323   00:4633  CA 3A 46                JP Z, .GHOST_DEAD
     324   00:4636  DD 36 0C 07             ld (ix+12), $07      ; Sprite 1 - Ghost
     325   00:463A                      .GHOST_DEAD:
     326   00:463A  DD 36 14 D9             LD (ix+20),217  ; ocultamos el esqueleto
     327   00:463E  DD 36 18 D9             LD (ix+24),217  ; ocultamos el esqueleto
     328   00:4642  CD 88 44                CALL STAGE1
     329   00:4645                      
     330   00:4645                      .no_screen_change:
     331   00:4645                      
     332   00:4645  CD 56 41                call DUMP_SPR_ATTS    
     333   00:4648  CD 92 43                CALL MOVE_SHOOT
     334   00:464B                      
     335   00:464B                          ; Movemos el fantasma
     336   00:464B                      
     337   00:464B  3E 08                   ld a, 8
     338   00:464D  CD 41 01            	call SNSMAT   
     339   00:4650  4F                      LD C,A    
     340   00:4651                              
     341   00:4651  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     342   00:4653  CC FD 41                call z, move_right
     343   00:4656                          
     344   00:4656  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     345   00:4658  CC 4B 42                call z, move_left
     346   00:465B                      
     347   00:465B  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     348   00:465D  CC 8E 41                call z, move_up
     349   00:4660                      
     350   00:4660  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     351   00:4662  CC C5 41                call z, move_down
     352   00:4665                      
     353   00:4665                      .no_arrows:
     354   00:4665  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     355   00:4667  CC 64 45                call z,SHOOT_MAIN_CHAR
     356   00:466A                      
     357   00:466A  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     358   00:466C  C8                      ret z
     359   00:466D                      
     360   00:466D  C3 19 46                jp MAIN_LOOP2
     361   00:4670                      
     362   00:4670                      include "include\BTH_data.asm"
       1.  00:4670                      SPRITE_P1_UP:
       2.  00:4670                          ; UP 1        
       3.  00:4670                          ; mask 0
       4.  00:4670                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
       4.  00:4670  03 0F 1F 1F 1F 3F 1F 0F 
       5.  00:4678                          DB $30,$78,$60,$60,$03,$03,$06,$0E
       5.  00:4678  30 78 60 60 03 03 06 0E 
       6.  00:4680                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
       6.  00:4680  E0 F0 F8 F8 FC F8 FC F0 
       7.  00:4688                          DB $0E,$18,$06,$00,$C0,$E0,$F0,$00    
       7.  00:4688  0E 18 06 00 C0 E0 F0 00 
       8.  00:4690                          ; mask 1
       9.  00:4690                          DB $00,$00,$00,$00,$00,$00,$00,$00
       9.  00:4690  00 00 00 00 00 00 00 00 
      10.  00:4698                          DB $0F,$00,$03,$03,$01,$01,$00,$00
      10.  00:4698  0F 00 03 03 01 01 00 00 
      11.  00:46A0                          DB $00,$00,$00,$00,$00,$00,$00,$00
      11.  00:46A0  00 00 00 00 00 00 00 00 
      12.  00:46A8                          DB $F0,$06,$C0,$C0,$80,$80,$80,$00
      12.  00:46A8  F0 06 C0 C0 80 80 80 00 
      13.  00:46B0                          ; mask 2
      14.  00:46B0                          DB $00,$00,$00,$00,$00,$00,$00,$00
      14.  00:46B0  00 00 00 00 00 00 00 00 
      15.  00:46B8                          DB $00,$07,$01,$01,$00,$00,$00,$00
      15.  00:46B8  00 07 01 01 00 00 00 00 
      16.  00:46C0                          DB $00,$00,$00,$00,$00,$00,$00,$00
      16.  00:46C0  00 00 00 00 00 00 00 00 
      17.  00:46C8                          DB $00,$E0,$80,$80,$00,$00,$00,$00    
      17.  00:46C8  00 E0 80 80 00 00 00 00 
      18.  00:46D0                      
      19.  00:46D0                          ; UP 2
      20.  00:46D0                          ; mask 0
      21.  00:46D0                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
      21.  00:46D0  03 0F 1F 1F 1F 3F 1F 0F 
      22.  00:46D8                          DB $70,$18,$60,$00,$03,$07,$0E,$00
      22.  00:46D8  70 18 60 00 03 07 0E 00 
      23.  00:46E0                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
      23.  00:46E0  E0 F0 F8 F8 FC F8 FC F0 
      24.  00:46E8                          DB $0C,$1E,$06,$06,$C0,$C0,$E0,$70    
      24.  00:46E8  0C 1E 06 06 C0 C0 E0 70 
      25.  00:46F0                          ; mask 1
      26.  00:46F0                          DB $00,$00,$00,$00,$00,$00,$00,$00
      26.  00:46F0  00 00 00 00 00 00 00 00 
      27.  00:46F8                          DB $0F,$60,$03,$03,$01,$01,$00,$00
      27.  00:46F8  0F 60 03 03 01 01 00 00 
      28.  00:4700                          DB $00,$00,$00,$00,$00,$00,$00,$00
      28.  00:4700  00 00 00 00 00 00 00 00 
      29.  00:4708                          DB $F0,$00,$C0,$C0,$80,$80,$80,$00
      29.  00:4708  F0 00 C0 C0 80 80 80 00 
      30.  00:4710                          ; mask 2
      31.  00:4710                          DB $00,$00,$00,$00,$00,$00,$00,$00
      31.  00:4710  00 00 00 00 00 00 00 00 
      32.  00:4718                          DB $00,$07,$01,$01,$00,$00,$00,$00
      32.  00:4718  00 07 01 01 00 00 00 00 
      33.  00:4720                          DB $00,$00,$00,$00,$00,$00,$00,$00
      33.  00:4720  00 00 00 00 00 00 00 00 
      34.  00:4728                          DB $00,$E0,$80,$80,$00,$00,$00,$00
      34.  00:4728  00 E0 80 80 00 00 00 00 
      35.  00:4730                      
      36.  00:4730                      SPRITE_P1_DOWN:
      37.  00:4730                          ; DOWN 1 - 00h
      38.  00:4730                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      38.  00:4730  03 0F 00 0A 0E 0D 07 03 
      39.  00:4738                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
      39.  00:4738  3E 7B 60 60 03 03 06 0E 
      40.  00:4740                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      40.  00:4740  E0 F0 A0 90 70 B0 E0 C0 
      41.  00:4748                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
      41.  00:4748  7E D8 06 00 C0 E0 F0 00 
      42.  00:4750                          ; mask 1 - 04h
      43.  00:4750                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      43.  00:4750  00 00 1F 15 11 32 18 0C 
      44.  00:4758                          DB $01,$00,$03,$03,$01,$01,$00,$00
      44.  00:4758  01 00 03 03 01 01 00 00 
      45.  00:4760                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      45.  00:4760  00 00 58 68 8C 48 1C 30 
      46.  00:4768                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
      46.  00:4768  80 06 C0 C0 80 80 80 00 
      47.  00:4770                          ; mask 2 - 08h
      48.  00:4770                          DB $00,$00,$00,$00,$00,$30,$00,$00
      48.  00:4770  00 00 00 00 00 30 00 00 
      49.  00:4778                          DB $00,$04,$00,$00,$00,$00,$00,$00
      49.  00:4778  00 04 00 00 00 00 00 00 
      50.  00:4780                          DB $00,$00,$00,$00,$00,$08,$00,$00
      50.  00:4780  00 00 00 00 00 08 00 00 
      51.  00:4788                          DB $00,$20,$00,$00,$00,$00,$00,$00
      51.  00:4788  00 20 00 00 00 00 00 00 
      52.  00:4790                      
      53.  00:4790                          ; DOWN 2
      54.  00:4790                          ; mask 0 - 0Ch
      55.  00:4790                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      55.  00:4790  03 0F 00 0A 0E 0D 07 03 
      56.  00:4798                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
      56.  00:4798  7E 1B 60 00 03 07 0E 00 
      57.  00:47A0                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      57.  00:47A0  E0 F0 A0 90 70 B0 E0 C0 
      58.  00:47A8                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
      58.  00:47A8  7C DE 06 06 C0 C0 E0 70 
      59.  00:47B0                          ; mask 1 - 10h
      60.  00:47B0                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      60.  00:47B0  00 00 1F 15 11 32 18 0C 
      61.  00:47B8                          DB $01,$60,$03,$03,$01,$01,$00,$00
      61.  00:47B8  01 60 03 03 01 01 00 00 
      62.  00:47C0                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      62.  00:47C0  00 00 58 68 8C 48 1C 30 
      63.  00:47C8                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
      63.  00:47C8  80 00 C0 C0 80 80 80 00 
      64.  00:47D0                          ; mask 2 - 14h
      65.  00:47D0                          DB $00,$00,$00,$00,$00,$30,$00,$00
      65.  00:47D0  00 00 00 00 00 30 00 00 
      66.  00:47D8                          DB $00,$04,$00,$00,$00,$00,$00,$00
      66.  00:47D8  00 04 00 00 00 00 00 00 
      67.  00:47E0                          DB $00,$00,$00,$00,$00,$08,$00,$00
      67.  00:47E0  00 00 00 00 00 08 00 00 
      68.  00:47E8                          DB $00,$20,$00,$00,$00,$00,$00,$00
      68.  00:47E8  00 20 00 00 00 00 00 00 
      69.  00:47F0                      
      70.  00:47F0                      SPRITE_P1_LEFT:         
      71.  00:47F0                          ; --- Slot 1
      72.  00:47F0                          ; mask 0
      73.  00:47F0                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      73.  00:47F0  07 1F 03 07 0B 1F 0F 07 
      74.  00:47F8                          DB $03,$0F,$30,$30,$03,$01,$01,$03
      74.  00:47F8  03 0F 30 30 03 01 01 03 
      75.  00:4800                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      75.  00:4800  C0 E0 00 80 C0 C0 80 00 
      76.  00:4808                          DB $C0,$80,$00,$00,$D8,$B0,$20,$00
      76.  00:4808  C0 80 00 00 D8 B0 20 00 
      77.  00:4810                          ; mask 1
      78.  00:4810                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      78.  00:4810  00 00 0C 18 34 00 00 00 
      79.  00:4818                          DB $0C,$00,$09,$03,$00,$00,$00,$00
      79.  00:4818  0C 00 09 03 00 00 00 00 
      80.  00:4820                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      80.  00:4820  00 00 F0 78 38 3C 70 F8 
      81.  00:4828                          DB $00,$78,$C0,$F8,$18,$10,$00,$00
      81.  00:4828  00 78 C0 F8 18 10 00 00 
      82.  00:4830                          ; mask 2
      83.  00:4830                          DB $00,$00,$00,$00,$30,$00,$00,$00
      83.  00:4830  00 00 00 00 30 00 00 00 
      84.  00:4838                          DB $00,$00,$01,$00,$00,$00,$00,$00
      84.  00:4838  00 00 01 00 00 00 00 00 
      85.  00:4840                          DB $00,$00,$00,$00,$38,$00,$00,$00
      85.  00:4840  00 00 00 00 38 00 00 00 
      86.  00:4848                          DB $3C,$00,$F0,$38,$00,$00,$00,$00
      86.  00:4848  3C 00 F0 38 00 00 00 00 
      87.  00:4850                              
      88.  00:4850                          ; --- Slot 3
      89.  00:4850                          ; mask 0
      90.  00:4850                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      90.  00:4850  07 1F 03 07 0B 1F 0F 07 
      91.  00:4858                          DB $03,$0F,$01,$03,$03,$01,$03,$06
      91.  00:4858  03 0F 01 03 03 01 03 06 
      92.  00:4860                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      92.  00:4860  C0 E0 00 80 C0 C0 80 00 
      93.  00:4868                          DB $C0,$80,$F0,$F8,$D8,$D0,$40,$C0
      93.  00:4868  C0 80 F0 F8 D8 D0 40 C0 
      94.  00:4870                          ; mask 1
      95.  00:4870                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      95.  00:4870  00 00 0C 18 34 00 00 00 
      96.  00:4878                          DB $0C,$30,$31,$00,$00,$00,$00,$00
      96.  00:4878  0C 30 31 00 00 00 00 00 
      97.  00:4880                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      97.  00:4880  00 00 F0 78 38 3C 70 F8 
      98.  00:4888                          DB $00,$00,$C0,$38,$18,$10,$00,$00
      98.  00:4888  00 00 C0 38 18 10 00 00 
      99.  00:4890                          ; mask 2
     100.  00:4890                          DB $00,$00,$00,$00,$30,$00,$00,$00
     100.  00:4890  00 00 00 00 30 00 00 00 
     101.  00:4898                          DB $00,$00,$30,$00,$00,$00,$00,$00
     101.  00:4898  00 00 30 00 00 00 00 00 
     102.  00:48A0                          DB $00,$00,$00,$00,$38,$00,$00,$00
     102.  00:48A0  00 00 00 00 38 00 00 00 
     103.  00:48A8                          DB $3C,$78,$00,$00,$00,$00,$00,$00
     103.  00:48A8  3C 78 00 00 00 00 00 00 
     104.  00:48B0                      
     105.  00:48B0                      SPRITE_P1_RIGHT:
     106.  00:48B0                          ; --- Slot 0
     107.  00:48B0                          ; mask 0
     108.  00:48B0                          DB $03,$07,$00,$01,$03,$03,$01,$00
     108.  00:48B0  03 07 00 01 03 03 01 00 
     109.  00:48B8                          DB $03,$01,$00,$00,$1B,$0D,$04,$00
     109.  00:48B8  03 01 00 00 1B 0D 04 00 
     110.  00:48C0                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     110.  00:48C0  E0 F8 C0 E0 D0 F8 F0 E0 
     111.  00:48C8                          DB $C0,$F0,$0C,$0C,$C0,$80,$80,$C0
     111.  00:48C8  C0 F0 0C 0C C0 80 80 C0 
     112.  00:48D0                          ; mask 1
     113.  00:48D0                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     113.  00:48D0  00 00 0F 1E 1C 3C 0E 1F 
     114.  00:48D8                          DB $00,$1E,$03,$1F,$18,$08,$00,$00
     114.  00:48D8  00 1E 03 1F 18 08 00 00 
     115.  00:48E0                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     115.  00:48E0  00 00 30 18 2C 00 00 00 
     116.  00:48E8                          DB $30,$00,$90,$C0,$00,$00,$00,$00
     116.  00:48E8  30 00 90 C0 00 00 00 00 
     117.  00:48F0                          ; mask 2
     118.  00:48F0                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     118.  00:48F0  00 00 00 00 1C 00 00 00 
     119.  00:48F8                          DB $3C,$00,$0F,$1C,$00,$00,$00,$00
     119.  00:48F8  3C 00 0F 1C 00 00 00 00 
     120.  00:4900                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     120.  00:4900  00 00 00 00 0C 00 00 00 
     121.  00:4908                          DB $00,$00,$80,$00,$00,$00,$00,$00
     121.  00:4908  00 00 80 00 00 00 00 00 
     122.  00:4910                      
     123.  00:4910                          ; --- Slot 2
     124.  00:4910                          ; mask 0
     125.  00:4910                          DB $03,$07,$00,$01,$03,$03,$01,$00
     125.  00:4910  03 07 00 01 03 03 01 00 
     126.  00:4918                          DB $03,$01,$0F,$1F,$1B,$0B,$02,$03
     126.  00:4918  03 01 0F 1F 1B 0B 02 03 
     127.  00:4920                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     127.  00:4920  E0 F8 C0 E0 D0 F8 F0 E0 
     128.  00:4928                          DB $C0,$F0,$80,$C0,$C0,$80,$C0,$60
     128.  00:4928  C0 F0 80 C0 C0 80 C0 60 
     129.  00:4930                          ; mask 1
     130.  00:4930                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     130.  00:4930  00 00 0F 1E 1C 3C 0E 1F 
     131.  00:4938                          DB $00,$00,$03,$1C,$18,$08,$00,$00
     131.  00:4938  00 00 03 1C 18 08 00 00 
     132.  00:4940                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     132.  00:4940  00 00 30 18 2C 00 00 00 
     133.  00:4948                          DB $30,$0C,$8C,$00,$00,$00,$00,$00
     133.  00:4948  30 0C 8C 00 00 00 00 00 
     134.  00:4950                          ; mask 2
     135.  00:4950                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     135.  00:4950  00 00 00 00 1C 00 00 00 
     136.  00:4958                          DB $3C,$1E,$00,$00,$00,$00,$00,$00
     136.  00:4958  3C 1E 00 00 00 00 00 00 
     137.  00:4960                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     137.  00:4960  00 00 00 00 0C 00 00 00 
     138.  00:4968                          DB $00,$00,$0C,$00,$00,$00,$00,$00
     138.  00:4968  00 00 0C 00 00 00 00 00 
     139.  00:4970                      
     140.  00:4970                      SPRITE_PATTERN:    
     141.  00:4970                          ; DOWN 1 
     142.  00:4970                          ; mask 0 - 00h
     143.  00:4970                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     143.  00:4970  03 0F 00 0A 0E 0D 07 03 
     144.  00:4978                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
     144.  00:4978  3E 7B 60 60 03 03 06 0E 
     145.  00:4980                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     145.  00:4980  E0 F0 A0 90 70 B0 E0 C0 
     146.  00:4988                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
     146.  00:4988  7E D8 06 00 C0 E0 F0 00 
     147.  00:4990                          ; mask 1 - 04h
     148.  00:4990                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     148.  00:4990  00 00 1F 15 11 32 18 0C 
     149.  00:4998                          DB $01,$00,$03,$03,$01,$01,$00,$00
     149.  00:4998  01 00 03 03 01 01 00 00 
     150.  00:49A0                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     150.  00:49A0  00 00 58 68 8C 48 1C 30 
     151.  00:49A8                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
     151.  00:49A8  80 06 C0 C0 80 80 80 00 
     152.  00:49B0                          ; mask 2 - 08h
     153.  00:49B0                          DB $00,$00,$00,$00,$00,$30,$00,$00
     153.  00:49B0  00 00 00 00 00 30 00 00 
     154.  00:49B8                          DB $00,$04,$00,$00,$00,$00,$00,$00
     154.  00:49B8  00 04 00 00 00 00 00 00 
     155.  00:49C0                          DB $00,$00,$00,$00,$00,$08,$00,$00
     155.  00:49C0  00 00 00 00 00 08 00 00 
     156.  00:49C8                          DB $00,$20,$00,$00,$00,$00,$00,$00
     156.  00:49C8  00 20 00 00 00 00 00 00 
     157.  00:49D0                      
     158.  00:49D0                          ; DOWN 2 
     159.  00:49D0                          ; mask 0 - 0Ch
     160.  00:49D0                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     160.  00:49D0  03 0F 00 0A 0E 0D 07 03 
     161.  00:49D8                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
     161.  00:49D8  7E 1B 60 00 03 07 0E 00 
     162.  00:49E0                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     162.  00:49E0  E0 F0 A0 90 70 B0 E0 C0 
     163.  00:49E8                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
     163.  00:49E8  7C DE 06 06 C0 C0 E0 70 
     164.  00:49F0                          ; mask 1 - 10h
     165.  00:49F0                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     165.  00:49F0  00 00 1F 15 11 32 18 0C 
     166.  00:49F8                          DB $01,$60,$03,$03,$01,$01,$00,$00
     166.  00:49F8  01 60 03 03 01 01 00 00 
     167.  00:4A00                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     167.  00:4A00  00 00 58 68 8C 48 1C 30 
     168.  00:4A08                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
     168.  00:4A08  80 00 C0 C0 80 80 80 00 
     169.  00:4A10                          ; mask 2 - 14h
     170.  00:4A10                          DB $00,$00,$00,$00,$00,$30,$00,$00
     170.  00:4A10  00 00 00 00 00 30 00 00 
     171.  00:4A18                          DB $00,$04,$00,$00,$00,$00,$00,$00
     171.  00:4A18  00 04 00 00 00 00 00 00 
     172.  00:4A20                          DB $00,$00,$00,$00,$00,$08,$00,$00
     172.  00:4A20  00 00 00 00 00 08 00 00 
     173.  00:4A28                          DB $00,$20,$00,$00,$00,$00,$00,$00
     173.  00:4A28  00 20 00 00 00 00 00 00 
     174.  00:4A30                          
     175.  00:4A30                          ;Ghost 1 Left - 18H
     176.  00:4A30                          DB 00h,01h,07h,0fh,1fh,3fh,7fh,01h
     176.  00:4A30  00 01 07 0F 1F 3F 7F 01 
     177.  00:4A38                          DB $15,$14,$7f,$3f,$3f,$3f,$3f,$7f
     177.  00:4A38  15 14 7F 3F 3F 3F 3F 7F 
     178.  00:4A40                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     178.  00:4A40  00 E0 80 00 00 80 80 C0 
     179.  00:4A48                          DB $c0,$e0,$f0,$f8,$fc,$fc,$fe,$ff  
     179.  00:4A48  C0 E0 F0 F8 FC FC FE FF 
     180.  00:4A50                          
     181.  00:4A50                          ; Ghost 2 Left - 1Ch
     182.  00:4A50                          DB $00,$01,$07,$0f,$1f,$3f,$7f,$01
     182.  00:4A50  00 01 07 0F 1F 3F 7F 01 
     183.  00:4A58                          DB $15,$14,$7f,$3f,$3f,$7f,$7f,$83
     183.  00:4A58  15 14 7F 3F 3F 7F 7F 83 
     184.  00:4A60                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     184.  00:4A60  00 E0 80 00 00 80 80 C0 
     185.  00:4A68                          DB $c0,$e0,$e0,$f0,$f8,$fc,$fe,$ff      
     185.  00:4A68  C0 E0 E0 F0 F8 FC FE FF 
     186.  00:4A70                      
     187.  00:4A70                          ; Ghost 1 Right - 20h
     188.  00:4A70                          DB $00,$07,$01,$00,$00,$01,$01,$03
     188.  00:4A70  00 07 01 00 00 01 01 03 
     189.  00:4A78                          DB $03,$07,$07,$0f,$1f,$3f,$7f,$ff
     189.  00:4A78  03 07 07 0F 1F 3F 7F FF 
     190.  00:4A80                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     190.  00:4A80  00 80 E0 F0 F8 FC FE 80 
     191.  00:4A88                          DB $a8,$28,$fe,$fc,$fc,$fe,$fe,$c1
     191.  00:4A88  A8 28 FE FC FC FE FE C1 
     192.  00:4A90                          
     193.  00:4A90                          ; Ghost 2 Right - 24h
     194.  00:4A90                          DB $00,$07,$01,$00,$00,$01,$01,$03
     194.  00:4A90  00 07 01 00 00 01 01 03 
     195.  00:4A98                          DB $03,$07,$0f,$1f,$3f,$3f,$7f,$ff
     195.  00:4A98  03 07 0F 1F 3F 3F 7F FF 
     196.  00:4AA0                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     196.  00:4AA0  00 80 E0 F0 F8 FC FE 80 
     197.  00:4AA8                          DB $a8,$28,$fe,$fc,$fc,$fc,$fc,$fe  
     197.  00:4AA8  A8 28 FE FC FC FC FC FE 
     198.  00:4AB0                      
     199.  00:4AB0                          ; Antichrist - RIGHT
     200.  00:4AB0                          ; mask 0 - 28h
     201.  00:4AB0                          ;DB $00,$00,$00,$03,$07,$0F,$1E,$1E
     202.  00:4AB0                          ;DB $1E,$1C,$1E,$0F,$07,$03,$00,$00
     203.  00:4AB0                          ;DB $00,$00,$00,$00,$80,$C0,$E0,$F0
     204.  00:4AB0                          ;DB $F8,$70,$E0,$C0,$80,$00,$00,$00
     205.  00:4AB0                          DB $00,$00,$00,$01,$01,$01,$01,$01
     205.  00:4AB0  00 00 00 01 01 01 01 01 
     206.  00:4AB8                          DB $01,$01,$07,$07,$01,$01,$00,$00
     206.  00:4AB8  01 01 07 07 01 01 00 00 
     207.  00:4AC0                          DB $00,$00,$00,$80,$80,$80,$80,$80
     207.  00:4AC0  00 00 00 80 80 80 80 80 
     208.  00:4AC8                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     208.  00:4AC8  80 80 E0 E0 80 80 00 00 
     209.  00:4AD0                      
     210.  00:4AD0                      
     211.  00:4AD0                          ; Esqueleto
     212.  00:4AD0                          ; mask 0 - 2Ch
     213.  00:4AD0                              ; --- Slot 0    
     214.  00:4AD0                          DB $01,$03,$03,$03,$01,$00,$00,$01
     214.  00:4AD0  01 03 03 03 01 00 00 01 
     215.  00:4AD8                          DB $07,$0B,$13,$0B,$03,$04,$04,$0C
     215.  00:4AD8  07 0B 13 0B 03 04 04 0C 
     216.  00:4AE0                          DB $F8,$F8,$74,$24,$FC,$F8,$F8,$00
     216.  00:4AE0  F8 F8 74 24 FC F8 F8 00 
     217.  00:4AE8                          DB $C0,$A0,$90,$20,$80,$40,$40,$60    
     217.  00:4AE8  C0 A0 90 20 80 40 40 60 
     218.  00:4AF0                          ; mask 1 - 30h
     219.  00:4AF0                          DB $00,$01,$01,$01,$00,$00,$00,$00
     219.  00:4AF0  00 01 01 01 00 00 00 00 
     220.  00:4AF8                          DB $00,$08,$11,$09,$01,$00,$00,$00
     220.  00:4AF8  00 08 11 09 01 00 00 00 
     221.  00:4B00                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     221.  00:4B00  F8 F8 FC FC FC 78 50 00 
     222.  00:4B08                          DB $00,$A0,$90,$20,$80,$00,$00,$00    
     222.  00:4B08  00 A0 90 20 80 00 00 00 
     223.  00:4B10                      
     224.  00:4B10                      SPRITE_COLOR_TABLE:       
     225.  00:4B10                           ;DOWN 1
     226.  00:4B10                          ; attr 0
     227.  00:4B10                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     227.  00:4B10  06 06 0B 0B 0B 0B 0B 0B 
     228.  00:4B18                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     228.  00:4B18  0C 0C 0B 0B 04 04 04 04 
     229.  00:4B20                          ; attr 1
     230.  00:4B20                          DB $00,$00,$46,$46,$46,$44,$46,$46
     230.  00:4B20  00 00 46 46 46 44 46 46 
     231.  00:4B28                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     231.  00:4B28  4B 4B 44 44 42 42 42 00 
     232.  00:4B30                          ; attr 2
     233.  00:4B30                          DB $00,$00,$00,$00,$00,$42,$00,$00
     233.  00:4B30  00 00 00 00 00 42 00 00 
     234.  00:4B38                          DB $00,$46,$00,$00,$00,$00,$00,$00
     234.  00:4B38  00 46 00 00 00 00 00 00 
     235.  00:4B40                               
     236.  00:4B40                          ; Cada posición ha de corresponder con la tabla de atributos    
     237.  00:4B40                      
     238.  00:4B40                          ; Fantasma
     239.  00:4B40                          DB $08,$08,$08,$08,$08,$08,$08,$08
     239.  00:4B40  08 08 08 08 08 08 08 08 
     240.  00:4B48                          DB $08,$08,$08,$08,$08,$08,$08,$08
     240.  00:4B48  08 08 08 08 08 08 08 08 
     241.  00:4B50                          ; Fantasma
     242.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     243.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     244.  00:4B50                          ; Fantasma
     245.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     246.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     247.  00:4B50                          ; Fantasma
     248.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     249.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08    
     250.  00:4B50                          ; Me ahorro los colores del fantasma, la 4a posicion del array de atributos será para el disparo
     251.  00:4B50                          ; Boomerang
     252.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     253.  00:4B50                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     254.  00:4B50                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     254.  00:4B50  00 00 00 0F 0F 0F 0F 0F 
     255.  00:4B58                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     255.  00:4B58  0F 0F 0F 0F 0F 0F 00 00 
     256.  00:4B60                          ; Esqueleto 1
     257.  00:4B60                          ; attr 0
     258.  00:4B60                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     258.  00:4B60  0E 0E 0E 0E 0E 0E 0E 0E 
     259.  00:4B68                          DB $0F,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     259.  00:4B68  0F 0E 0E 0E 0E 0F 0F 0F 
     260.  00:4B70                          ; Esqueleto 2
     261.  00:4B70                          ; attr 1
     262.  00:4B70                          DB $41,$41,$49,$49,$41,$41,$41,$00
     262.  00:4B70  41 41 49 49 41 41 41 00 
     263.  00:4B78                          DB $00,$41,$41,$41,$41,$00,$00,$00
     263.  00:4B78  00 41 41 41 41 00 00 00 
     264.  00:4B80                      
     265.  00:4B80                      SPRITE_COLOR_P1_UP:
     266.  00:4B80                          ;UP 1
     267.  00:4B80                          ; attr 0
     268.  00:4B80                          DB $06,$06,$06,$06,$06,$06,$06,$06
     268.  00:4B80  06 06 06 06 06 06 06 06 
     269.  00:4B88                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     269.  00:4B88  0C 0C 0B 0B 04 04 04 04 
     270.  00:4B90                          ; attr 1
     271.  00:4B90                          DB $00,$00,$00,$00,$00,$00,$00,$00
     271.  00:4B90  00 00 00 00 00 00 00 00 
     272.  00:4B98                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     272.  00:4B98  46 4B 44 44 42 42 42 00 
     273.  00:4BA0                          ; attr 2
     274.  00:4BA0                          DB $00,$00,$00,$00,$00,$00,$00,$00
     274.  00:4BA0  00 00 00 00 00 00 00 00 
     275.  00:4BA8                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     275.  00:4BA8  00 46 42 42 00 00 00 00 
     276.  00:4BB0                          
     277.  00:4BB0                          ;SPRITE_COLOR_P1_UP2:
     278.  00:4BB0                          ;UP 1
     279.  00:4BB0                          ; attr 0
     280.  00:4BB0                          DB $06,$06,$06,$06,$06,$06,$06,$06
     280.  00:4BB0  06 06 06 06 06 06 06 06 
     281.  00:4BB8                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     281.  00:4BB8  0C 0C 0B 0B 04 04 04 04 
     282.  00:4BC0                          ; attr 1
     283.  00:4BC0                          DB $00,$00,$00,$00,$00,$00,$00,$00
     283.  00:4BC0  00 00 00 00 00 00 00 00 
     284.  00:4BC8                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     284.  00:4BC8  46 4B 44 44 42 42 42 00 
     285.  00:4BD0                          ; attr 2
     286.  00:4BD0                          DB $00,$00,$00,$00,$00,$00,$00,$00
     286.  00:4BD0  00 00 00 00 00 00 00 00 
     287.  00:4BD8                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     287.  00:4BD8  00 46 42 42 00 00 00 00 
     288.  00:4BE0                      
     289.  00:4BE0                      SPRITE_COLOR_P1_DOWN:
     290.  00:4BE0                          ;DOWN 1
     291.  00:4BE0                          ; attr 0
     292.  00:4BE0                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     292.  00:4BE0  06 06 0B 0B 0B 0B 0B 0B 
     293.  00:4BE8                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     293.  00:4BE8  0C 0C 0B 0B 04 04 04 04 
     294.  00:4BF0                          ; attr 1
     295.  00:4BF0                          DB $00,$00,$46,$46,$46,$44,$46,$46
     295.  00:4BF0  00 00 46 46 46 44 46 46 
     296.  00:4BF8                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     296.  00:4BF8  4B 4B 44 44 42 42 42 00 
     297.  00:4C00                          ; attr 2
     298.  00:4C00                          DB $00,$00,$00,$00,$00,$42,$00,$00
     298.  00:4C00  00 00 00 00 00 42 00 00 
     299.  00:4C08                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     299.  00:4C08  00 46 00 00 00 00 00 00 
     300.  00:4C10                      
     301.  00:4C10                          ;SPRITE_COLOR_P1_DOWN2:
     302.  00:4C10                          ;DOWN 1
     303.  00:4C10                          ; attr 0
     304.  00:4C10                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     304.  00:4C10  06 06 0B 0B 0B 0B 0B 0B 
     305.  00:4C18                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     305.  00:4C18  0C 0C 0B 0B 04 04 04 04 
     306.  00:4C20                          ; attr 1
     307.  00:4C20                          DB $00,$00,$46,$46,$46,$44,$46,$46
     307.  00:4C20  00 00 46 46 46 44 46 46 
     308.  00:4C28                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     308.  00:4C28  4B 4B 44 44 42 42 42 00 
     309.  00:4C30                          ; attr 2
     310.  00:4C30                          DB $00,$00,$00,$00,$00,$42,$00,$00
     310.  00:4C30  00 00 00 00 00 42 00 00 
     311.  00:4C38                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     311.  00:4C38  00 46 00 00 00 00 00 00 
     312.  00:4C40                      
     313.  00:4C40                      SPRITE_COLOR_P1_RIGHT:
     314.  00:4C40                          ; attr 0
     315.  00:4C40                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     315.  00:4C40  06 06 0B 0B 0B 0B 0B 0B 
     316.  00:4C48                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     316.  00:4C48  0C 0C 0B 0B 04 04 04 04 
     317.  00:4C50                          ; attr 1
     318.  00:4C50                          DB $00,$00,$46,$46,$44,$46,$46,$46
     318.  00:4C50  00 00 46 46 44 46 46 46 
     319.  00:4C58                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     319.  00:4C58  4B 46 4C 44 42 42 00 00 
     320.  00:4C60                          ; attr 2
     321.  00:4C60                          DB $00,$00,$00,$00,$42,$00,$00,$00
     321.  00:4C60  00 00 00 00 42 00 00 00 
     322.  00:4C68                          DB $46,$00,$46,$42,$00,$00,$00,$00
     322.  00:4C68  46 00 46 42 00 00 00 00 
     323.  00:4C70                          ; attr 0
     324.  00:4C70                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     324.  00:4C70  06 06 0B 0B 0B 0B 0B 0B 
     325.  00:4C78                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     325.  00:4C78  0C 0C 06 04 04 04 04 04 
     326.  00:4C80                          ; attr 1
     327.  00:4C80                          DB $00,$00,$46,$46,$44,$46,$46,$46
     327.  00:4C80  00 00 46 46 44 46 46 46 
     328.  00:4C88                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     328.  00:4C88  4B 4B 4A 42 42 42 00 00 
     329.  00:4C90                          ; attr 2
     330.  00:4C90                          DB $00,$00,$00,$00,$42,$00,$00,$00
     330.  00:4C90  00 00 00 00 42 00 00 00 
     331.  00:4C98                          DB $46,$46,$41,$00,$00,$00,$00,$00
     331.  00:4C98  46 46 41 00 00 00 00 00 
     332.  00:4CA0                      
     333.  00:4CA0                      mapa1:
     334.  00:4CA0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     334.  00:4CA0  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     334.  00:4CB0  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     335.  00:4CC0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     335.  00:4CC0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     335.  00:4CD0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     336.  00:4CE0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     336.  00:4CE0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     336.  00:4CF0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     337.  00:4D00                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     337.  00:4D00  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     337.  00:4D10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     338.  00:4D20                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     338.  00:4D20  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     338.  00:4D30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     339.  00:4D40                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     339.  00:4D40  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     339.  00:4D50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     340.  00:4D60                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     340.  00:4D60  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     340.  00:4D70  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     341.  00:4D80                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     341.  00:4D80  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     341.  00:4D90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     342.  00:4DA0                            
     343.  00:4DA0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     343.  00:4DA0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     343.  00:4DB0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     344.  00:4DC0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     344.  00:4DC0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     344.  00:4DD0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     345.  00:4DE0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     345.  00:4DE0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     345.  00:4DF0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     346.  00:4E00                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     346.  00:4E00  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     346.  00:4E10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     347.  00:4E20                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     347.  00:4E20  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     347.  00:4E30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     348.  00:4E40                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     348.  00:4E40  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     348.  00:4E50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     349.  00:4E60                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     349.  00:4E60  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     349.  00:4E70  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     350.  00:4E80                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     350.  00:4E80  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     350.  00:4E90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     351.  00:4EA0                      
     352.  00:4EA0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     352.  00:4EA0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     352.  00:4EB0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     353.  00:4EC0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     353.  00:4EC0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     353.  00:4ED0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     354.  00:4EE0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     354.  00:4EE0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     354.  00:4EF0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     355.  00:4F00                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     355.  00:4F00  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     355.  00:4F10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     356.  00:4F20                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     356.  00:4F20  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     356.  00:4F30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     357.  00:4F40                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     357.  00:4F40  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     357.  00:4F50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     358.  00:4F60                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     358.  00:4F60  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     358.  00:4F70  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     359.  00:4F80                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     359.  00:4F80  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     359.  00:4F90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     360.  00:4FA0                            
     361.  00:4FA0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     361.  00:4FA0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     361.  00:4FB0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     362.  00:4FC0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     362.  00:4FC0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     362.  00:4FD0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     363.  00:4FE0                      
     364.  00:4FE0                      mapa2:
     365.  00:4FE0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     365.  00:4FE0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     365.  00:4FF0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     366.  00:5000                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     366.  00:5000  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     366.  00:5010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     367.  00:5020                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     367.  00:5020  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     367.  00:5030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     368.  00:5040                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     368.  00:5040  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     368.  00:5050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     369.  00:5060                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     369.  00:5060  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     369.  00:5070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     370.  00:5080                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     370.  00:5080  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     370.  00:5090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     371.  00:50A0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     371.  00:50A0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     371.  00:50B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     372.  00:50C0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     372.  00:50C0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     372.  00:50D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     373.  00:50E0                            
     374.  00:50E0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     374.  00:50E0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     374.  00:50F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     375.  00:5100                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     375.  00:5100  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     375.  00:5110  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     376.  00:5120                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     376.  00:5120  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     376.  00:5130  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     377.  00:5140                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     377.  00:5140  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     377.  00:5150  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     378.  00:5160                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     378.  00:5160  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     378.  00:5170  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     379.  00:5180                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     379.  00:5180  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     379.  00:5190  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     380.  00:51A0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     380.  00:51A0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     380.  00:51B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     381.  00:51C0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     381.  00:51C0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     381.  00:51D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     382.  00:51E0                      
     383.  00:51E0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     383.  00:51E0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     383.  00:51F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     384.  00:5200                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     384.  00:5200  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     384.  00:5210  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     385.  00:5220                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     385.  00:5220  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     385.  00:5230  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     386.  00:5240                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     386.  00:5240  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     386.  00:5250  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     387.  00:5260                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     387.  00:5260  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     387.  00:5270  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     388.  00:5280                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     388.  00:5280  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     388.  00:5290  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     389.  00:52A0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     389.  00:52A0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     389.  00:52B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     390.  00:52C0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     390.  00:52C0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     390.  00:52D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     391.  00:52E0                            
     392.  00:52E0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01              
     392.  00:52E0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  00:52F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     393.  00:5300                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     393.  00:5300  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     393.  00:5310  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     394.  00:5320                      
     395.  00:5320                      
     396.  00:5320                      mapa0:      
     397.  00:5320                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     397.  00:5320  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     397.  00:5330  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     398.  00:5340                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     398.  00:5340  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     398.  00:5350  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     399.  00:5360                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     399.  00:5360  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     399.  00:5370  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     400.  00:5380                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     400.  00:5380  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     400.  00:5390  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     401.  00:53A0                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     401.  00:53A0  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     401.  00:53B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     402.  00:53C0                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     402.  00:53C0  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     402.  00:53D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     403.  00:53E0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     403.  00:53E0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     403.  00:53F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     404.  00:5400                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     404.  00:5400  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     404.  00:5410  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     405.  00:5420                            
     406.  00:5420                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     406.  00:5420  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     406.  00:5430  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     407.  00:5440                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     407.  00:5440  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     407.  00:5450  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     408.  00:5460                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     408.  00:5460  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     408.  00:5470  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     409.  00:5480                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     409.  00:5480  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     409.  00:5490  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     410.  00:54A0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     410.  00:54A0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     410.  00:54B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     411.  00:54C0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     411.  00:54C0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     411.  00:54D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     412.  00:54E0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     412.  00:54E0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     412.  00:54F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     413.  00:5500                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     413.  00:5500  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     413.  00:5510  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     414.  00:5520                      
     415.  00:5520                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     415.  00:5520  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     415.  00:5530  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     416.  00:5540                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     416.  00:5540  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     416.  00:5550  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     417.  00:5560                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     417.  00:5560  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     417.  00:5570  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     418.  00:5580                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     418.  00:5580  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     418.  00:5590  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     419.  00:55A0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     419.  00:55A0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     419.  00:55B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     420.  00:55C0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     420.  00:55C0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     420.  00:55D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     421.  00:55E0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     421.  00:55E0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     421.  00:55F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     422.  00:5600                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  00:5600  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:5610  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:5620                            
     424.  00:5620                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     424.  00:5620  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:5630  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:5640                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  00:5640  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:5650  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:5660                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  00:5660  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:5670  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:5680                          
     428.  00:5680                      
     429.  00:5680                      SPRITE_COLOR_P1_LEFT:
     430.  00:5680                          ; attr 0
     431.  00:5680                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     431.  00:5680  06 06 0B 0B 0B 0B 0B 0B 
     432.  00:5688                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     432.  00:5688  0C 0C 0B 0B 04 04 04 04 
     433.  00:5690                          ; attr 1
     434.  00:5690                          DB $00,$00,$46,$46,$44,$46,$46,$46
     434.  00:5690  00 00 46 46 44 46 46 46 
     435.  00:5698                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     435.  00:5698  4B 46 4C 44 42 42 00 00 
     436.  00:56A0                          ; attr 2
     437.  00:56A0                          DB $00,$00,$00,$00,$42,$00,$00,$00
     437.  00:56A0  00 00 00 00 42 00 00 00 
     438.  00:56A8                          DB $46,$00,$46,$42,$00,$00,$00,$00
     438.  00:56A8  46 00 46 42 00 00 00 00 
     439.  00:56B0                          
     440.  00:56B0                          ;SPRITE_COLOR_P1_LEFT2:
     441.  00:56B0                          ; attr 0
     442.  00:56B0                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     442.  00:56B0  06 06 0B 0B 0B 0B 0B 0B 
     443.  00:56B8                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     443.  00:56B8  0C 0C 06 04 04 04 04 04 
     444.  00:56C0                          ; attr 1
     445.  00:56C0                          DB $00,$00,$46,$46,$44,$46,$46,$46
     445.  00:56C0  00 00 46 46 44 46 46 46 
     446.  00:56C8                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     446.  00:56C8  4B 4B 4A 42 42 42 00 00 
     447.  00:56D0                          ; attr 2
     448.  00:56D0                          DB $00,$00,$00,$00,$42,$00,$00,$00
     448.  00:56D0  00 00 00 00 42 00 00 00 
     449.  00:56D8                          DB $46,$46,$41,$00,$00,$00,$00,$00
     449.  00:56D8  46 46 41 00 00 00 00 00 
     363   00:56E0                      
     364   00:56E0  (01)                 PAGE 1
     365   01:8000                      ; CODE O NO
     366   01:8000                      
     367   01:8000  (02)                 PAGE 2
     368   02:8000                      
     369   02:8000  (03)                 PAGE 3
     370   03:8000                      
     371   03:8000  (04)                 PAGE 4
     372   04:8000  (05)                 PAGE 5
     373   05:8000  (06)                 PAGE 6
     374   06:8000                      
     375   06:8000  (07)                 PAGE 7
     376   07:8000                      CEMENTER1
     377   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     378   07:C000  (08)                 PAGE 8
     379   08:8000  (2A00)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     380   08:AA00  (09)                 PAGE 9
     381   09:8000                      GRAPHIC
     382   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     383   09:C000  (0A)                 PAGE 10
     384   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     385   0A:C000                      
     386   0A:C000  (0B)                 PAGE 11
     387   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     388   0B:C000                      
     389   0B:C000  (0C)                 PAGE 12
     390   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     391   0C:9400                      
     392   0C:9400  (0D)                 PAGE 13
     393   0D:8000                      CEMENTER2
     394   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     395   0D:C000  (0E)                 PAGE 14
     396   0E:8000  (2A00)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     397   0E:AA00  (0F)                 PAGE 15
     398   0F:C000                      ;---------------------------------------------------------
     399   0F:C000                      ; Variables
     400   0F:C000                      ;---------------------------------------------------------
     401   0F:C000                      	
     402   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     403   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     404   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     405   0F:C000                      ;ETC
     406   0F:C000                      ;
     407   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000  00                  JIFFY_TEMP DB $00
       2.  0F:C001  00                  CHAR_SPEED_X DB $00
       3.  0F:C002  00                  CHAR_SPEED_Y DB $00
       4.  0F:C003  00                  CHAR_SPEED_X_GHOST DB $00
       5.  0F:C004  00 (1)              CHAR_GHOST_DEAD DS 1
       6.  0F:C005  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
       7.  0F:C006  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
       8.  0F:C007  00 (1)              CHAR_NEW_DIR_MAIN DS 1
       9.  0F:C008  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      10.  0F:C009  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      11.  0F:C00A  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      12.  0F:C00B  00 (1)              CHAR_SPEED_SHOOT DS 1
      13.  0F:C00C                      SPRITE_ATTRS:
      14.  0F:C00C  00 (128)                DS 128
      15.  0F:C08C                      SLOTBIOS:
      16.  0F:C08C  00 (1)                  DS 1
      17.  0F:C08D                      SLOTGAME:
      18.  0F:C08D  00 (1)                  DS 1
      19.  0F:C08E                      SLOTRAM:
      20.  0F:C08E  00 (1)                  DS 1
      21.  0F:C08F                      SPRITE_PTR_REPLACE:
      22.  0F:C08F  00 (2)                  DS 2
      23.  0F:C091                      SPRITE_COLOR_REPLACE:
      24.  0F:C091  00 (2)                  DS 2
      25.  0F:C093                      SPRITE_COLOR_REPLACE2:
      26.  0F:C093  00 (2)                  DS 2
      27.  0F:C095                      MAPA:
      28.  0F:C095  00 (2)                  DS 2
      29.  0F:C097                      BITMAP:
      30.  0F:C097  00 (2)                  DS 2
     408   0F:C099  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000041   DISSCR
00:00000044   ENASCR
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000004   MAX_CHAR_STEPS
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:00004010   check_spr_collision
00:0000401D   check_spr_collision.no_collision
00:00004020   get_bloque_en_X_Y
00:00004041   SetVdp_Write
00:0000405D   Set212Lines
00:00004069   ClearVram_MSX2
00:00004073   ClearVram_MSX2.loop_2
00:00004075   ClearVram_MSX2.loop_1
00:00004077   ClearVram_MSX2.loop
00:00004084 X opening_screen
00:000040A7   load_screen
00:000040C9   _vdpsetvramwr
00:000040DA X _vdpsetvramwr14
00:000040E3   GETSLOT
00:000040FA   EXIT
00:000040FC   SETPAGES32K
00:00004101   NOPRET
00:0000410F   SET_SCREEN5_MODE
00:00004131   DUMP_SPR_ALL
00:00004156   DUMP_SPR_ATTS
00:00004170 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004171   DUMP_SPR_P1
00:0000418E   move_up
00:000041C5   move_down
00:000041FD   move_right
00:0000424B   move_left
00:00004299   CHECK_DIRECTION_MAIN
00:000042BB   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000042D0   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:000042E5   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:000042FA   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000430F   CHECK_DIRECTION_MAIN.FINISH
00:00004326   UPDATE_MOVEMENT
00:00004374   UPDATE_MOVEMENT.SET_SPR_1P_2
00:0000438B   UPDATE_MOVEMENT.NO_CHAR_PATTERN_CHANGE
00:00004391   NO_MOVEMENT
00:00004392   MOVE_SHOOT
00:000043AA   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:000043B2   MOVE_SHOOT.MOVE_SHOOT_UP
00:000043BA   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000043C2   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000043C7   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:000043DC   MOVE_SHOOT.ADD_SHOOT_Y
00:000043E6   MOVE_SHOOT.ADD_DISTANCE
00:000043F1 X MOVE_SHOOT.HIDE_SHOOT
00:000043FD   START
00:0000441A   INIT_CHARS_VARS
00:00004488   STAGE1
00:000044A5   MAIN_LOOP
00:000044CF   MAIN_LOOP.CHANGE_DIR_RIGHT
00:000044DC   MAIN_LOOP.CHANGE_DIR_LEFT
00:000044E5   MAIN_LOOP.check_pattern
00:000044FC   MAIN_LOOP.change_pattern_L
00:00004503   MAIN_LOOP.check_pattern_RIGHT
00:00004512   MAIN_LOOP.change_pattern_R
00:00004516   MAIN_LOOP.continue
00:00004519 X MAIN_LOOP.CHECK_GHOST
00:00004535 X MAIN_LOOP.KILL_GHOST
00:0000453E   MAIN_LOOP.check_KB
00:00004559 X no_arrows
00:00004564   SHOOT_MAIN_CHAR
00:0000459E   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000045AD   SHOOT_MAIN_CHAR.SHOOT_UP
00:000045C0   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:000045D0   SHOOT_MAIN_CHAR.CONTINUE
00:000045D4   STAGE2
00:00004619   MAIN_LOOP2
00:0000463A   MAIN_LOOP2.GHOST_DEAD
00:00004645   MAIN_LOOP2.no_screen_change
00:00004665 X MAIN_LOOP2.no_arrows
00:00004670   SPRITE_P1_UP
00:00004730   SPRITE_P1_DOWN
00:000047F0   SPRITE_P1_LEFT
00:000048B0   SPRITE_P1_RIGHT
00:00004970   SPRITE_PATTERN
00:00004B10   SPRITE_COLOR_TABLE
00:00004B80   SPRITE_COLOR_P1_UP
00:00004BE0   SPRITE_COLOR_P1_DOWN
00:00004C40   SPRITE_COLOR_P1_RIGHT
00:00004CA0   mapa1
00:00004FE0   mapa2
00:00005320 X mapa0
00:00005680   SPRITE_COLOR_P1_LEFT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   JIFFY_TEMP
0F:0000C001   CHAR_SPEED_X
0F:0000C002   CHAR_SPEED_Y
0F:0000C003   CHAR_SPEED_X_GHOST
0F:0000C004   CHAR_GHOST_DEAD
0F:0000C005   CHAR_DIR_GHOST1
0F:0000C006   CHAR_DIR_MAIN
0F:0000C007   CHAR_NEW_DIR_MAIN
0F:0000C008   CHAR_MAIN_SHOOT
0F:0000C009   CHAR_MIN_STEP
0F:0000C00A   CHAR_DISTANCE_SHOOT
0F:0000C00B   CHAR_SPEED_SHOOT
0F:0000C00C   SPRITE_ATTRS
0F:0000C08C X SLOTBIOS
0F:0000C08D X SLOTGAME
0F:0000C08E X SLOTRAM
0F:0000C08F   SPRITE_PTR_REPLACE
0F:0000C091   SPRITE_COLOR_REPLACE
0F:0000C093   SPRITE_COLOR_REPLACE2
0F:0000C095   MAPA
0F:0000C097   BITMAP


 Output: .\bth.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 000016E6

   Address   Length Align   Label
   00004000    5856         check_spr_collision
   000056E0       6         
   000056E6   10522       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 00000099

   Address   Length Align   Label
   0000C000     153         JIFFY_TEMP
   0000C099   16231       <empty>
