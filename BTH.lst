Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.05.20 - 12:39:07]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:7FD5                      
       3   00:7FD5                      ;ROM ASCII16
       4   00:7FD5                      		defpage	0,0x4000, 0x4000
       5   00:7FD5                      		defpage	1,0x8000, 0x4000        
       6   00:7FD5                      		defpage	2..14 ;Here it is determined rom size        
       7   00:7FD5                              defpage	15,0xC000, 0x4000
       8   00:7FD5                      
       9   00:7FD5  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:7FD5  (00:6000)           _bank1	equ	6000h
      11   00:7FD5  (00:7000)           _bank2	equ	7000h
      12   00:7FD5  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:7FDB  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 8A 4F 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:0069)           CLRSPR                  equ #0069
       2.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       3.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       4.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       5.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       6.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       7.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       8.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       9.  00:4010  (00:0141)           SNSMAT					equ #0141
      10.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      11.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      12.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      13.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      14.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      15.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ; Sprite Collision
       2.  00:4010                      
       3.  00:4010  (00:000C)           PLAYER_COLLISION_OFFSET_X      equ 12
       4.  00:4010  (00:000C)           PLAYER_COLLISION_OFFSET_Y      equ 12
       5.  00:4010  (00:000C)           PLAYER_COLLISION_WIDTH         equ 12
       6.  00:4010  (00:0010)           PLAYER_WIDTH                   equ 16
       7.  00:4010  (00:0010)           PLAYER_HEIGHT                  equ 16
       8.  00:4010  (00:0001)           PlayerX                        equ 1
       9.  00:4010  (00:0001)           PlayerY                        equ 1
      10.  00:4010                      
      11.  00:4010  (00:000C)           ENEMY_COLLISION_OFFSET_X       equ 12
      12.  00:4010  (00:000C)           ENEMY_COLLISION_OFFSET_Y       equ 12
      13.  00:4010  (00:000C)           ENEMY_COLLISION_WIDTH          equ 12
      14.  00:4010  (00:000C)           ENEMY_COLLISION_HEIGHT         equ 12
      15.  00:4010  (00:0010)           ENEMY_WIDTH                    equ 16
      16.  00:4010  (00:0001)           ENEMY_X                        equ 1
      17.  00:4010  (00:0001)           ENEMY_Y                        equ 1
      18.  00:4010                      
      19.  00:4010                      ; Notes Black Sabbath
      20.  00:4010  (00:0071)           STG2_TILE1_X    equ 113
      21.  00:4010  (00:006E)           STG2_TILE1_Y    equ 110
      22.  00:4010                      
      23.  00:4010                      
      24.  00:4010                      ; VDP Const
      25.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
      26.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
      27.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
      28.  00:4010                      
      29.  00:4010                      ; Energy             lv1, lv2, lv3, lv4, lv5, lv6
      30.  00:4010  18 20 28 30 38 40   ANDY_MAX_ENERGY:  db  24, 32, 40, 48, 56, 64
      31.  00:4016                      
      32.  00:4016  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
      33.  00:4016  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
      34.  00:4016  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
      35.  00:4016                      
      36.  00:4016  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      37.  00:4016  (00:0007)           KB_RIGHT 				equ 7
      38.  00:4016  (00:0006)           KB_DOWN 				equ 6
      39.  00:4016  (00:0005)           KB_UP 					equ	5        
      40.  00:4016  (00:0004)           KB_LEFT 				equ	4
      41.  00:4016  (00:0003)           KB_DEL 					equ	3
      42.  00:4016  (00:0000)           KB_SPACE				equ	0
      43.  00:4016                      
      44.  00:4016  (00:0001)           MOV_SPEED				equ 1
      45.  00:4016  (00:0001)           MOV_SPEED_GHOST			equ 1
      46.  00:4016  (00:0003)           MOV_SPEED_SHOOT         equ 3
      47.  00:4016  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      48.  00:4016  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      49.  00:4016  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      50.  00:4016  (00:FFE8)           REG9SAV                 equ #FFE8
      51.  00:4016  (00:0098)           PORT_0                  equ 0x98
      52.  00:4016  (00:0099)           PORT_1                  equ 0x99
      53.  00:4016  (00:009A)           PORT_2                  equ 0x9a
      54.  00:4016  (00:009B)           PORT_3                  equ 0x9b
      55.  00:4016                      
      56.  00:4016  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      57.  00:4016  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      58.  00:4016                      
      59.  00:4016  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      60.  00:4016  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      61.  00:4016  (00:0049)           GUS_TOMB_STG1_X             equ 73
      62.  00:4016  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      63.  00:4016  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      64.  00:4016  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      65.  00:4016  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      66.  00:4016                      
      67.  00:4016  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
      68.  00:4016  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
      69.  00:4016  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
      70.  00:4016  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
      71.  00:4016  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
      72.  00:4016  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
      73.  00:4016  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
      74.  00:4016                      
      75.  00:4016  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
      76.  00:4016  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
      77.  00:4016  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
      78.  00:4016  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
      79.  00:4016  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
      80.  00:4016                      
      22   00:4016                          include "include\BTH_strings.asm"
       1.  00:4016  1C 40 25 40 41 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:401C                      ; Caben 23 caracteres en cada línea
       3.  00:401C                      string01M: db 'MIKE:   ',0
       3.  00:401C  4D 49 4B 45 3A 20 20 20 00 
       4.  00:4025                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:4025  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:4035  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4041  00                  string03M: db 0
       6.  00:4042                      
       7.  00:4042  48 40 51 40 6C 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:4048                      ; Caben 23 caracteres en cada línea
       9.  00:4048                      string01J: db 'JOHN:   ',0
       9.  00:4048  4A 4F 48 4E 3A 20 20 20 00 
      10.  00:4051                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4051  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4061  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:406C  00                  string03J: db 0
      12.  00:406D                      
      13.  00:406D  73 40 7C 40 99 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4073                      ; Caben 23 caracteres en cada línea
      15.  00:4073                      string01G: db 'GUS:    ',0
      15.  00:4073  47 55 53 3A 20 20 20 20 00 
      16.  00:407C                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:407C  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:408C  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:4099  00                  string03G: db  0
      18.  00:409A                      
      19.  00:409A  A0 40 A8 40 C3 40   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:40A0                      ; Caben 23 caracteres en cada línea
      21.  00:40A0                      string01Sk: db 'MURRAY:',0
      21.  00:40A0  4D 55 52 52 41 59 3A 00 
      22.  00:40A8                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:40A8  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:40B8  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:40C3  00                  string03Sk: db 0
      24.  00:40C4                      
      25.  00:40C4  CA 40 D1 40 EA 40   stg1_puzzle_solved_strings: dw string01P, string02P, string03P
      26.  00:40CA                      ; Caben 23 caracteres en cada línea
      27.  00:40CA                      string01P: db 'PETER:',0
      27.  00:40CA  50 45 54 45 52 3A 00 
      28.  00:40D1                      string02P: db 'LA PUERTA SE HA ABIERTO!',0
      28.  00:40D1  4C 41 20 50 55 45 52 54 41 20 53 45 20 48 41 20 
      28.  00:40E1  41 42 49 45 52 54 4F 21 00 
      29.  00:40EA  00                  string03P: db 0
      30.  00:40EB                      
      23   00:40EB                      ; Funciones auxiliares
      24   00:40EB                      	include "include\BTH_func.asm"
       1.  00:40EB                      ;
       2.  00:40EB                      ; EnemyCollisionCheck
       3.  00:40EB                      ;
       4.  00:40EB                      ;   Calculates whether a collision occurs between the player
       5.  00:40EB                      ;   and an enemy
       6.  00:40EB                      ;
       7.  00:40EB                      ; IN: ix - pointer to enemy data record
       8.  00:40EB                      ; OUT: Carry set if collision
       9.  00:40EB                      ; CHANGES: AF
      10.  00:40EB                      ;
      11.  00:40EB                      EnemyCollisionCheck:
      12.  00:40EB  3A 01 00                    ld      a,(PlayerX)                     ; read player x-coordinate          [14]
      13.  00:40EE  C6 0C                       add     PLAYER_COLLISION_OFFSET_X       ; add offset for smaller rectangle  [8]
      14.  00:40F0  47                          ld      b,a                             ;                                   [5]
      15.  00:40F1  0E 10                       ld      c,PLAYER_WIDTH                  ; set the width of the player       [8]
      16.  00:40F3                              
      17.  00:40F3  DD 7E 01                    ld      a,(ix+ENEMY_X)                  ; read enemy x-coordinate           [21]
      18.  00:40F6  DD 86 0C                    add     (ix+ENEMY_COLLISION_OFFSET_X)   ; add offset for smaller rectangle  [21]
      19.  00:40F9  DD 5E 0C                    ld      e,(ix+ENEMY_COLLISION_WIDTH)    ; set the width of the enemy        [21]
      20.  00:40FC                      
      21.  00:40FC  CD 11 41                    call    .check                          ;                                   [18]
      22.  00:40FF  D0                          ret     nc                              ;                                   [12/6]
      23.  00:4100                      
      24.  00:4100  3A 01 00                    ld      a,(PlayerY)                     ; read player y-coordinate          [14]
      25.  00:4103  C6 0C                       add     PLAYER_COLLISION_OFFSET_Y       ; add offset for smaller rectangle  [8]
      26.  00:4105  47                          ld      b,a                             ;                                   [5]
      27.  00:4106  0E 10                       ld      c,PLAYER_HEIGHT                 ; set the height of the player      [8]
      28.  00:4108                              
      29.  00:4108  DD 7E 01                    ld      a,(ix+ENEMY_Y)                  ; read enemy y-coordinate           [21]
      30.  00:410B  DD 86 0C                    add     (ix+ENEMY_COLLISION_OFFSET_Y)   ; add offset for smaller rectangle  [21]
      31.  00:410E  DD 5E 0C                    ld      e,(ix+ENEMY_COLLISION_HEIGHT)    ; set the height of the enemy      [21]
      32.  00:4111                      
      33.  00:4111                      .check:
      34.  00:4111  90                          sub     b               ; calculate x2-x1              [5]
      35.  00:4112  30 04                       jr      nc,.other       ; don't jump if x2<x1          [13/8]
      36.  00:4114  ED 44                       neg                     ; use negative value           [10]
      37.  00:4116  93                          sub     e               ; compare with size 1          [5]
      38.  00:4117  C9                          ret                     ; return result                [11]
      39.  00:4118                      .other:
      40.  00:4118  91                          sub     c               ; compare with size 1          [5]
      41.  00:4119  C9                          ret                     ; return result                [11]
      42.  00:411A                      
      43.  00:411A                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
      44.  00:411A                      ;Entrada:
      45.  00:411A                      ;   b - Y SPR1
      46.  00:411A                      ;   C - X SPR1
      47.  00:411A                      
      48.  00:411A                      ;   d - Y SPR2
      49.  00:411A                      ;   e - X SPR2
      50.  00:411A                      ;Salida:
      51.  00:411A                      ;   a - bloque
      52.  00:411A                      ;Modifica:
      53.  00:411A                      ;   a, hl, de
      54.  00:411A                      check_spr_collision:        
      55.  00:411A  78                          LD A,B          ; a = Y SPR1
      56.  00:411B  BA                          CP D
      57.  00:411C  C2 27 41                    JP NZ,.no_collision
      58.  00:411F                      
      59.  00:411F  79                          LD A,C          ; a = X SPR1
      60.  00:4120  BB                          CP E
      61.  00:4121  C2 27 41                    JP NZ,.no_collision
      62.  00:4124                      
      63.  00:4124  3E 01                       LD A,1
      64.  00:4126  C9                          RET
      65.  00:4127                      .no_collision
      66.  00:4127  3E 00                   LD A,0
      67.  00:4129  C9                      RET
      68.  00:412A                      
      69.  00:412A                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      70.  00:412A                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      71.  00:412A                      ;Entrada:
      72.  00:412A                      ;   d - X
      73.  00:412A                      ;   e - y
      74.  00:412A                      ;Salida:
      75.  00:412A                      ;   a - bloque
      76.  00:412A                      ;Modifica:
      77.  00:412A                      ;   a, hl, de
      78.  00:412A                      get_bloque_en_X_Y:
      79.  00:412A                              ;(y/8)*32+(x/8)
      80.  00:412A  7B                          ld a,e      ;a=y
      81.  00:412B  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      82.  00:4131  26 00                       ld h,0
      83.  00:4133  6F                          ld l,a      ;hl=y/8
      84.  00:4134  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      85.  00:4139                      
      86.  00:4139  7A                          ld a,d      ;a=x
      87.  00:413A  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      88.  00:4140  16 00                       ld d,0
      89.  00:4142  5F                          ld e,a      ;de=x/8
      90.  00:4143  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      91.  00:4144                      
      92.  00:4144  ED 5B D2 C0                 ld de,(MAPA)
      93.  00:4148  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      94.  00:4149                      
      95.  00:4149  7E                          ld a,[hl]
      96.  00:414A  C9                          ret
      97.  00:414B                      
      98.  00:414B                      ; SCREEN 8
      99.  00:414B                      SetVdp_Write:
     100.  00:414B                      
     101.  00:414B                      	; transform address from 
     102.  00:414B                      	;
     103.  00:414B                      	; |           Register A            |           Register H            |           Register L            |
     104.  00:414B                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     105.  00:414B                      	;
     106.  00:414B                      	; to
     107.  00:414B                      	;
     108.  00:414B                      	; |           Register A            |           Register H            |           Register L            |
     109.  00:414B                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     110.  00:414B  CB 04                   rlc     h
     111.  00:414D  17                      rla
     112.  00:414E  CB 04                   rlc     h
     113.  00:4150  17                      rla
     114.  00:4151  CB 3C                   srl     h
     115.  00:4153  CB 3C                   srl     h
     116.  00:4155                      
     117.  00:4155  F3                      di
     118.  00:4156                      	    ; write bits a14-16 of address to R#14
     119.  00:4156  D3 99               	    out     (PORT_1), a
     120.  00:4158  3E 8E               	    ld      a, 14 + 128
     121.  00:415A  D3 99               	    out     (PORT_1), a
     122.  00:415C                      
     123.  00:415C                      	    ; write the other address bits to VDP PORT_1
     124.  00:415C  7D                  	    ld      a, l
     125.  00:415D  00                  	    nop
     126.  00:415E  D3 99               	    out     (PORT_1), a
     127.  00:4160  7C                  	    ld      a, h
     128.  00:4161  F6 40               	    or      64
     129.  00:4163  FB                      ei
     130.  00:4164  D3 99                   out     (PORT_1),a
     131.  00:4166  C9                      ret
     132.  00:4167                      
     133.  00:4167                      Set212Lines:
     134.  00:4167                              ; set LN (bit 7) of R#9 to 1
     135.  00:4167  3A E8 FF                    ld      a, (REG9SAV)
     136.  00:416A  F6 80                       or      10000000b
     137.  00:416C  47                          ld      b, a
     138.  00:416D  0E 09                       ld      c, 9            ; register #
     139.  00:416F  CD 47 00                    call    WRTVDP
     140.  00:4172  C9                          ret
     141.  00:4173                      
     142.  00:4173                      ClearVram_MSX2:
     143.  00:4173  AF                          xor     a           ; set vram write base address
     144.  00:4174  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     145.  00:4177  CD 4B 41                    call    SetVdp_Write
     146.  00:417A  AF                          xor		a
     147.  00:417B                      
     148.  00:417B                          ; TODO: 
     149.  00:417B                          ;   use VDP command (currently is taking almost 1 second)
     150.  00:417B                          ;   disable screen/sprites (should I ??)
     151.  00:417B                      
     152.  00:417B                          ; clear all 128kb of VRAM
     153.  00:417B  16 02               	ld		d, 2		; 2 repetitions
     154.  00:417D                      .loop_2:
     155.  00:417D  0E 00               	ld		c, 0		; 256 repetitions
     156.  00:417F                      .loop_1:
     157.  00:417F  06 00               	ld		b, 0		; 256 repetitions
     158.  00:4181                      .loop:
     159.  00:4181  D3 98               	out		(PORT_0), a
     160.  00:4183  10 FC               	djnz	.loop
     161.  00:4185  0D                  	dec		c
     162.  00:4186  C2 7F 41            	jp		nz, .loop_1
     163.  00:4189  15                  	dec		d
     164.  00:418A  C2 7D 41            	jp		nz, .loop_2
     165.  00:418D                      
     166.  00:418D  C9                  	ret
     167.  00:418E                      
     168.  00:418E                      ; MEGAROM
     169.  00:418E                      
     170.  00:418E                      opening_screen		
     171.  00:418E  0E 00               		ld		c,0
     172.  00:4190  11 00 00            		ld		de,0
     173.  00:4193  CD D3 41            		call	_vdpsetvramwr
     174.  00:4196  1E 04               		ld	e,4
     175.  00:4198  3E 09               		ld	a, :GRAPHIC
     176.  00:419A  57                  		ld	d,a
     177.  00:419B  32 00 70            2:		ld	(_bank2),a
     178.  00:419E  21 00 80            		ld	hl,GRAPHIC
     179.  00:41A1  01 98 00            		ld	bc,0x98
     180.  00:41A4  3E 40               		ld	a,32*2
     181.  00:41A6  ED B3               1:		otir
     182.  00:41A8  3D                  		dec	a
     183.  00:41A9  20 FB               		jr	nz,1b
     184.  00:41AB  14                  		inc	d
     185.  00:41AC  7A                  		ld	a,d
     186.  00:41AD  1D                  		dec	e
     187.  00:41AE  20 EB               		jr	nz,2b
     188.  00:41B0  C9                  		ret 
     189.  00:41B1                      
     190.  00:41B1                      load_screen
     191.  00:41B1  0E 00               		ld		c,0
     192.  00:41B3  11 00 00            		ld		de,0
     193.  00:41B6  CD D3 41            		call	_vdpsetvramwr
     194.  00:41B9  1E 02               		ld	e,2					; #pages
     195.  00:41BB  78                  		ld	a, b			; 1st page bitmap
     196.  00:41BC  57                  		ld	d,a
     197.  00:41BD  32 00 70            2:		ld	(_bank2),a
     198.  00:41C0  2A D4 C0            		ld	hl,(BITMAP)		; Bitmap address
     199.  00:41C3  01 98 00            		ld	bc,0x98
     200.  00:41C6  3E 40               		ld	a,64
     201.  00:41C8  ED B3               1:		otir
     202.  00:41CA  3D                  		dec	a
     203.  00:41CB  20 FB               		jr	nz,1b
     204.  00:41CD  14                  		inc	d
     205.  00:41CE  7A                  		ld	a,d
     206.  00:41CF  1D                  		dec	e
     207.  00:41D0  20 EB               		jr	nz,2b
     208.  00:41D2  C9                  		ret 
     209.  00:41D3                      
     210.  00:41D3                      ;Set VDP for writing at address CDE (17-bit) 
     211.  00:41D3                      
     212.  00:41D3                      _vdpsetvramwr:
     213.  00:41D3  79                  	ld a,c
     214.  00:41D4  CB 02               	rlc d
     215.  00:41D6  17                  	rla
     216.  00:41D7  CB 02               	rlc d
     217.  00:41D9  17                  	rla
     218.  00:41DA  CB 3A               	srl d ; primo shift, il secondo dopo la out
     219.  00:41DC                      
     220.  00:41DC  D3 99               	out (0x99),a ;set bits 14-16
     221.  00:41DE  3E 8E               	ld a,14+128
     222.  00:41E0  D3 99               	out (0x99),a
     223.  00:41E2  CB 3A               	srl d ; secondo shift.     
     224.  00:41E4                      _vdpsetvramwr14
     225.  00:41E4  7B                  	ld a,e ;set bits 0-7
     226.  00:41E5  D3 99               	out (0x99),a
     227.  00:41E7  7A                  	ld a,d ;set bits 8-13
     228.  00:41E8  F6 40               	or 0x40 ; + write access
     229.  00:41EA  D3 99               	out (0x99),a
     230.  00:41EC  C9                  	ret
     231.  00:41ED                      
     232.  00:41ED                      
     233.  00:41ED                      
     234.  00:41ED                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     235.  00:41ED                      		; -----------------------------------------------------
     236.  00:41ED                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     237.  00:41ED                      		; -----------------------------------------------------
     238.  00:41ED                      
     239.  00:41ED                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     240.  00:41ED                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     241.  00:41ED                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     242.  00:41ED                      
     243.  00:41ED                      		; --- VARIABLES EN RAM NECESARIAS ---
     244.  00:41ED                      		; NINGUNA
     245.  00:41ED                      
     246.  00:41ED                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     247.  00:41ED                      		; --- Entrada: a = SLOT                                           ---
     248.  00:41ED                      		; --- Salida: a = valor para ENASLT                               ---
     249.  00:41ED                      		; --- AUTOR: Konamiman                                            ---
     250.  00:41ED  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     251.  00:41EF  4F                  		ld	c,a				; c = slot de la pagina
     252.  00:41F0  06 00               		ld	b,0				; bc = slot de la pagina
     253.  00:41F2  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     254.  00:41F5  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     255.  00:41F6  7E                  		ld	a,(hl)				; Tomamos el valor
     256.  00:41F7  E6 80               		and	$80				; Si el bit mas alto es cero...
     257.  00:41F9  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     258.  00:41FB                      		; --- El slot esta expandido ---
     259.  00:41FB  B1                  		or	c				; Slot basico en el lugar adecuado
     260.  00:41FC  4F                  		ld	c,a				; Guardamos el valor en c
     261.  00:41FD  23                  		inc	hl				; Incrementamos hl una...
     262.  00:41FE  23                  		inc	hl				; ...dos...
     263.  00:41FF  23                  		inc	hl				; ...tres...
     264.  00:4200  23                  		inc	hl				; ...cuatro veces
     265.  00:4201  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     266.  00:4202  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     267.  00:4204  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     268.  00:4205  C9                  		ret					; Volvemos
     269.  00:4206                      
     270.  00:4206                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     271.  00:4206  3E C9               		ld	a,$C9				; Codigo de RET
     272.  00:4208  32 0B 42            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     273.  00:420B  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     274.  00:420C                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     275.  00:420C  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     276.  00:420F  0F                  		rrca					; Rotamos a la derecha...
     277.  00:4210  0F                  		rrca					; ...dos veces
     278.  00:4211  CD ED 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     279.  00:4214  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     280.  00:4216  C3 24 00            		jp	ENASLT ;ENASLT
     281.  00:4219                      
     282.  00:4219                      SET_SCREEN5_MODE:
     283.  00:4219                           ;Cambiamos el modo de pantalla
     284.  00:4219                          ; BASIC: COLOR 15,1,1
     285.  00:4219                          ; Establecer los colores
     286.  00:4219  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     287.  00:421C  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     288.  00:421E  23                  	inc hl ; FORCLR+1
     289.  00:421F  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     290.  00:4221  23                  	inc hl ; FORCLR+2
     291.  00:4222  36 0F               	ld [hl],15 ; Color del borde 1=negro
     292.  00:4224                      
     293.  00:4224  3E 05                   ld  a,5     
     294.  00:4226  CD 5F 00                call CHGMOD 
     295.  00:4229  CD 69 00            	call CLRSPR
     296.  00:422C                      
     297.  00:422C  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     298.  00:422F                          ;En or 0+0=0, 0+1=1, 1+1=1
     299.  00:422F                          ;En and 0+0=0, 0+1=0, 1+1=1
     300.  00:422F                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     301.  00:422F                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     302.  00:422F                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     303.  00:422F  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     304.  00:4231                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     305.  00:4231  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     306.  00:4233                      
     307.  00:4233  47                      ld b,a ;carga en b el valor de a
     308.  00:4234  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     309.  00:4236  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     310.  00:4239  AF                      xor a ; ld a,0
     311.  00:423A  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     312.  00:423D  C9                      ret
     313.  00:423E                      
     314.  00:423E                      DUMP_SPR_ALL:
     315.  00:423E                      
     316.  00:423E                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     317.  00:423E                      
     318.  00:423E  21 70 68                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     319.  00:4241  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     320.  00:4244  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     321.  00:4247  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     322.  00:424A                      
     323.  00:424A                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     324.  00:424A                      
     325.  00:424A  21 49 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     326.  00:424D  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     327.  00:4250  01 80 00                ld bc,128; 4 x #Sprites
     328.  00:4253  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     329.  00:4256                      
     330.  00:4256                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     331.  00:4256                      
     332.  00:4256  21 50 6B                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     333.  00:4259  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     334.  00:425C  01 70 01                ld bc,16*23; 16 x #Sprites
     335.  00:425F  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     336.  00:4262  C9                      ret
     337.  00:4263                      	
     338.  00:4263                      load_tiles_vdp
     339.  00:4263                          
     340.  00:4263                      	;ld hl, TILES1
     341.  00:4263  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     342.  00:4266  01 00 08                ld bc,128*16; 16 lineas
     343.  00:4269  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     344.  00:426C  C9                  	ret 
     345.  00:426D                      
     346.  00:426D                      DUMP_SPR_ATTS:
     347.  00:426D                      
     348.  00:426D                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     349.  00:426D                      
     350.  00:426D  21 49 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     351.  00:4270  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     352.  00:4273  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     353.  00:4276  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     354.  00:4279                      
     355.  00:4279                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     356.  00:4279                      ;	JP Z,.DUMP_SPR_ATTS_END
     357.  00:4279  2A D0 C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     358.  00:427C  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     359.  00:427F  C5                      PUSH BC
     360.  00:4280  01 30 00            	ld bc,16*3; 16 x #Sprites
     361.  00:4283  CD 5C 00                call  LDIRVM 
     362.  00:4286  C1                  	POP BC
     363.  00:4287                      
     364.  00:4287                      .DUMP_SPR_ATTS_END:
     365.  00:4287  C9                      ret
     366.  00:4288                      
     367.  00:4288                      DUMP_SPR_P1:    
     368.  00:4288                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     369.  00:4288                      
     370.  00:4288  2A CC C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     371.  00:428B  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     372.  00:428E  C5                      PUSH BC
     373.  00:428F  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     374.  00:4292  CD 5C 00                call  LDIRVM 
     375.  00:4295  C1                  	POP BC
     376.  00:4296                      
     377.  00:4296                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     378.  00:4296                      
     379.  00:4296  2A CE C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     380.  00:4299  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     381.  00:429C  C5                      PUSH BC
     382.  00:429D  01 30 00            	ld bc,16*3; 16 x #Sprites
     383.  00:42A0  CD 5C 00                call  LDIRVM 
     384.  00:42A3  C1                  	POP BC
     385.  00:42A4                      	
     386.  00:42A4                      
     387.  00:42A4                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     388.  00:42A4                      ;    xor a
     389.  00:42A4                      ;	di			; set VRAM address to 1800h
     390.  00:42A4                      ;	out (99h),a		; lower byte 00
     391.  00:42A4                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     392.  00:42A4                      ;	ei
     393.  00:42A4                      ;	out (99h),a		; note that this is protected by the ei instruction
     394.  00:42A4                      ;   push BC
     395.  00:42A4                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     396.  00:42A4                      ;	ld hl,(SPRITE_PTR_REPLACE)
     397.  00:42A4                      
     398.  00:42A4                      ;.loop1:
     399.  00:42A4                      ;	outi			; send the data (HL) to port 98h 
     400.  00:42A4                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     401.  00:42A4                      ;   POP BC
     402.  00:42A4                      
     403.  00:42A4                          ; Replace 2 entries in sprite color table
     404.  00:42A4                      ;    xor a
     405.  00:42A4                      ;	di			; set VRAM address to 1800h
     406.  00:42A4                      ;	out (99h),a		; lower byte 00
     407.  00:42A4                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     408.  00:42A4                      ;	ei
     409.  00:42A4                      ;	out (99h),a		; note that this is protected by the ei instruction
     410.  00:42A4                       ;   push BC
     411.  00:42A4                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     412.  00:42A4                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     413.  00:42A4                      	
     414.  00:42A4                      ;.loop2:
     415.  00:42A4                      ;	outi			; send the data (HL) to port 98h 
     416.  00:42A4                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     417.  00:42A4                       ;   POP BC
     418.  00:42A4                      
     419.  00:42A4  C9                      ret
     420.  00:42A5                      
     421.  00:42A5                      SetPalette:
     422.  00:42A5  AF                  	xor a
     423.  00:42A6  F3                  	di
     424.  00:42A7  D3 99               	out ($99),a
     425.  00:42A9  3E 90               	ld a,16+128
     426.  00:42AB  D3 99               	out ($99),a
     427.  00:42AD  01 9A 20            	ld bc,$209A
     428.  00:42B0  ED B3               	otir
     429.  00:42B2  FB                  	ei
     430.  00:42B3  C9                  	ret
     431.  00:42B4                      
     432.  00:42B4                      
     433.  00:42B4                      DUMMY_SPR_ATTS:
     434.  00:42B4                      
     435.  00:42B4                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     436.  00:42B4                      
     437.  00:42B4  21 5C 77                ld hl, dummy_SPR_ATT__TBL ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     438.  00:42B7  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     439.  00:42BA  01 80 00                ld bc,128		; 4 x #Sprites mostrados
     440.  00:42BD  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     441.  00:42C0  C9                  	RET
      25   00:42C1                          include "include\BTH_animate.asm"
       1.  00:42C1                      ; Movimiento P1
       2.  00:42C1                      move_up:
       3.  00:42C1  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:42C2                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:42C2  AF                      XOR A
       6.  00:42C3  32 44 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:42C6  CD F4 43                CALL CHECK_DIRECTION_MAIN
       8.  00:42C9                      
       9.  00:42C9  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:42CC  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:42CE  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:42CF  DD 7E 01                ld a,(ix+1)
      13.  00:42D2  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:42D3  CD 2A 41                call get_bloque_en_X_Y
      15.  00:42D6  FE 01                   cp 1
      16.  00:42D8  CA ED 44                jp z,NO_MOVEMENT
      17.  00:42DB                      
      18.  00:42DB  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:42DE  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:42E0  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:42E1  DD 7E 01                ld a,(ix+1)
      22.  00:42E4  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:42E6  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:42E7  CD 2A 41                call get_bloque_en_X_Y
      25.  00:42EA  FE 01                   cp 1
      26.  00:42EC  CA ED 44                jp z,NO_MOVEMENT
      27.  00:42EF                            
      28.  00:42EF  3E FF               	LD A, -MOV_SPEED
      29.  00:42F1  32 3B C0            	LD (CHAR_SPEED_Y), A
      30.  00:42F4  CD 81 44                call UPDATE_MOVEMENT   
      31.  00:42F7  CD A9 44                call ANIMATE_P1
      32.  00:42FA                          ;JP no_arrows
      33.  00:42FA  C9                      ret
      34.  00:42FB                      
      35.  00:42FB                      move_down:
      36.  00:42FB  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:42FC                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:42FC  3E 01                   LD A,$01
      39.  00:42FE  32 44 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:4301  CD F4 43                CALL CHECK_DIRECTION_MAIN
      41.  00:4304                      
      42.  00:4304  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      43.  00:4307  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:4309  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:430A  DD 7E 01                ld a,(ix+1)
      46.  00:430D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:430E  CD 2A 41                call get_bloque_en_X_Y
      48.  00:4311  FE 01                   cp 1
      49.  00:4313  CA ED 44                jp z,NO_MOVEMENT
      50.  00:4316                      
      51.  00:4316  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      52.  00:4319  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:431B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:431C  DD 7E 01                ld a,(ix+1)
      55.  00:431F  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:4321  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:4322  CD 2A 41                call get_bloque_en_X_Y
      58.  00:4325  FE 01                   cp 1
      59.  00:4327  CA ED 44                jp z,NO_MOVEMENT
      60.  00:432A                          
      61.  00:432A  3E 01                   LD A, MOV_SPEED
      62.  00:432C  32 3B C0            	LD (CHAR_SPEED_Y), A
      63.  00:432F  CD 81 44                call UPDATE_MOVEMENT    
      64.  00:4332  CD A9 44                call ANIMATE_P1
      65.  00:4335                          ;JP no_arrows
      66.  00:4335  C9                      ret
      67.  00:4336                      
      68.  00:4336                      move_right:
      69.  00:4336  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:4337                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:4337  CB 69                   BIT KB_UP, C
      72.  00:4339  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:433B  CB 71                   BIT KB_DOWN, C
      74.  00:433D  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:433F  3E 03                   LD A,$03
      76.  00:4341  32 44 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:4344  CD F4 43                CALL CHECK_DIRECTION_MAIN
      78.  00:4347                      
      79.  00:4347                      .KB_UPDOWN_PRESSED:
      80.  00:4347  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:434A  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:434C  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:434D  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      84.  00:4350  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:4352  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:4353  CD 2A 41                call get_bloque_en_X_Y
      87.  00:4356  FE 01                   cp 1
      88.  00:4358  CA ED 44                jp z,NO_MOVEMENT
      89.  00:435B                      
      90.  00:435B                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:435B  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:435E  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:4360  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:4361  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      95.  00:4364  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:4366  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:4367  CD 2A 41                call get_bloque_en_X_Y
      98.  00:436A  FE 01                   cp 1
      99.  00:436C  CA ED 44                jp z,NO_MOVEMENT
     100.  00:436F                      
     101.  00:436F                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:436F  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:4372  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:4374  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:4375  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     106.  00:4378  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:437A  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:437B  CD 2A 41                call get_bloque_en_X_Y
     109.  00:437E  FE 01                   cp 1
     110.  00:4380  CA ED 44                jp z,NO_MOVEMENT    
     111.  00:4383                          
     112.  00:4383  3E 01                   LD A, MOV_SPEED
     113.  00:4385  32 3A C0            	LD (CHAR_SPEED_X), A
     114.  00:4388  CD 81 44                call UPDATE_MOVEMENT
     115.  00:438B  CB 69                   BIT KB_UP, C
     116.  00:438D  C8                      ret z
     117.  00:438E  CB 71                   BIT KB_DOWN, C
     118.  00:4390  C8                      ret z
     119.  00:4391  CD A9 44                call ANIMATE_P1    
     120.  00:4394  C9                      ret
     121.  00:4395                      
     122.  00:4395                      move_left:
     123.  00:4395  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:4396                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:4396  CB 69                   BIT KB_UP, C
     126.  00:4398  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:439A  CB 71                   BIT KB_DOWN, C
     128.  00:439C  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:439E  3E 02                   LD A,$02
     130.  00:43A0  32 44 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:43A3  CD F4 43                CALL CHECK_DIRECTION_MAIN
     132.  00:43A6                      .KB_UPDOWN_PRESSED:
     133.  00:43A6  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:43A9  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:43AB  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:43AC  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     137.  00:43AF  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:43B1  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:43B2  CD 2A 41                call get_bloque_en_X_Y
     140.  00:43B5  FE 01                   cp 1
     141.  00:43B7  CA ED 44                jp z,NO_MOVEMENT
     142.  00:43BA                      
     143.  00:43BA                          ;Miramos el tile inferior parte central del personaje
     144.  00:43BA  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:43BD  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:43BF  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:43C0  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     148.  00:43C3  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:43C5  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:43C6  CD 2A 41                call get_bloque_en_X_Y
     151.  00:43C9  FE 01                   cp 1
     152.  00:43CB  CA ED 44                jp z,NO_MOVEMENT
     153.  00:43CE                      
     154.  00:43CE                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:43CE  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:43D1  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:43D3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:43D4  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     159.  00:43D7  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:43D9  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:43DA  CD 2A 41                call get_bloque_en_X_Y
     162.  00:43DD  FE 01                   cp 1
     163.  00:43DF  CA ED 44                jp z,NO_MOVEMENT
     164.  00:43E2                      
     165.  00:43E2  3E FF                   LD A, -MOV_SPEED
     166.  00:43E4  32 3A C0            	LD (CHAR_SPEED_X), A
     167.  00:43E7  CD 81 44                call UPDATE_MOVEMENT     
     168.  00:43EA  CB 69                   BIT KB_UP, C
     169.  00:43EC  C8                      ret z
     170.  00:43ED  CB 71                   BIT KB_DOWN, C
     171.  00:43EF  C8                      ret z
     172.  00:43F0  CD A9 44                call ANIMATE_P1    
     173.  00:43F3  C9                      ret
     174.  00:43F4                      
     175.  00:43F4                      CHECK_DIRECTION_MAIN:
     176.  00:43F4  3A 43 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:43F7  2A 44 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:43FA  BD                  	CP L		            	                ;Son iguales?
     179.  00:43FB  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:43FC  3A 44 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:43FF  FE 01                   CP $01
     182.  00:4401  CA 16 44                JP Z,.SET_DIR_DOWN
     183.  00:4404  FE 00                   CP $00
     184.  00:4406  CA 2B 44                JP Z,.SET_DIR_UP
     185.  00:4409  FE 03                   CP $03
     186.  00:440B  CA 55 44                JP Z,.SET_DIR_RIGHT
     187.  00:440E  FE 02                   CP $02
     188.  00:4410  CA 40 44                JP Z,.SET_DIR_LEFT
     189.  00:4413  C3 6A 44                JP .FINISH
     190.  00:4416                          
     191.  00:4416                      .SET_DIR_DOWN:    
     192.  00:4416  21 30 66                ld hl, SPRITE_P1_DOWN
     193.  00:4419  22 CC C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:441C                          
     195.  00:441C  21 30 6C                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:441F  22 CE C0                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:4422  22 D0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:4425  CD 88 42                CALL DUMP_SPR_P1    
     199.  00:4428                      
     200.  00:4428  C3 6A 44                JP .FINISH
     201.  00:442B                      
     202.  00:442B                      .SET_DIR_UP:
     203.  00:442B  21 70 65                ld hl, SPRITE_P1_UP
     204.  00:442E  22 CC C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:4431                          
     206.  00:4431  21 D0 6B                ld hl, SPRITE_COLOR_P1_UP
     207.  00:4434  22 CE C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:4437  22 D0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:443A  CD 88 42                CALL DUMP_SPR_P1
     210.  00:443D  C3 6A 44                JP .FINISH
     211.  00:4440                      
     212.  00:4440                      .SET_DIR_LEFT:    
     213.  00:4440  21 F0 66                ld hl, SPRITE_P1_LEFT
     214.  00:4443  22 CC C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:4446                          
     216.  00:4446  21 5C 76                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:4449  22 CE C0                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:444C  22 D0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:444F  CD 88 42                CALL DUMP_SPR_P1   
     220.  00:4452  C3 6A 44                JP .FINISH
     221.  00:4455                      
     222.  00:4455                      .SET_DIR_RIGHT:
     223.  00:4455  21 B0 67                ld hl, SPRITE_P1_RIGHT
     224.  00:4458  22 CC C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:445B                          
     226.  00:445B  21 90 6C                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:445E  22 CE C0                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:4461  22 D0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:4464                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:4464  CD 88 42                CALL DUMP_SPR_P1
     231.  00:4467  C3 6A 44                JP .FINISH
     232.  00:446A                      
     233.  00:446A                      .FINISH:
     234.  00:446A  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:446B  32 46 C0                LD (CHAR_MIN_STEP), A   
     236.  00:446E  3A 44 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:4471  32 43 C0                LD (CHAR_DIR_MAIN),A    
     238.  00:4474                      
     239.  00:4474                          ; ponemos el primer frame del sprite
     240.  00:4474  DD 36 02 00             LD (ix+2), $00
     241.  00:4478  DD 36 06 04             LD (ix+6), $04
     242.  00:447C  DD 36 0A 08             LD (ix+10), $08
     243.  00:4480                          ;CALL DUMP_SPR_ATTS
     244.  00:4480  C9                      RET
     245.  00:4481                      
     246.  00:4481                      UPDATE_MOVEMENT:
     247.  00:4481  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     248.  00:4484  2A 3B C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:4487  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:4488                          
     251.  00:4488  DD 77 00            	LD (ix), A
     252.  00:448B  DD 77 04                LD (ix+4), A
     253.  00:448E  DD 77 08                LD (ix+8), A
     254.  00:4491                      	
     255.  00:4491  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     256.  00:4494  2A 3A C0            	LD HL, (CHAR_SPEED_X)
     257.  00:4497  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     258.  00:4498                          
     259.  00:4498  DD 77 01            	LD (ix+1), A
     260.  00:449B  DD 77 05                LD (ix+5), A
     261.  00:449E  DD 77 09                LD (ix+9), A	
     262.  00:44A1                      
     263.  00:44A1  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     264.  00:44A2  32 3A C0                LD (CHAR_SPEED_X),A
     265.  00:44A5  32 3B C0                LD (CHAR_SPEED_Y),A	
     266.  00:44A8  C9                      RET
     267.  00:44A9                      
     268.  00:44A9                      ANIMATE_P1:
     269.  00:44A9                          ; Animación/pasos de personaje	
     270.  00:44A9  3A 46 C0                LD A, (CHAR_MIN_STEP)
     271.  00:44AC  FE 05                   CP MAX_CHAR_STEPS
     272.  00:44AE  C2 E7 44                JP NZ,.NO_CHAR_PATTERN_CHANGE
     273.  00:44B1                          
     274.  00:44B1  AF                      XOR A
     275.  00:44B2  32 46 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     276.  00:44B5  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     277.  00:44B8  FE 00                   CP $00
     278.  00:44BA  CA D0 44                JP Z,.SET_SPR_1P_2
     279.  00:44BD  DD 36 02 00             LD (ix+2), $00
     280.  00:44C1  DD 36 06 04             LD (ix+6), $04
     281.  00:44C5  DD 36 0A 08             LD (ix+10), $08
     282.  00:44C9  2A CE C0                ld hl, (SPRITE_COLOR_REPLACE)
     283.  00:44CC  22 D0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     284.  00:44CF  C9                      ret
     285.  00:44D0                      
     286.  00:44D0                      .SET_SPR_1P_2:
     287.  00:44D0  DD 36 02 0C             LD (ix+2), $0C
     288.  00:44D4  DD 36 06 10             LD (ix+6), $10
     289.  00:44D8  DD 36 0A 14             LD (ix+10), $14
     290.  00:44DC                              
     291.  00:44DC  2A CE C0                ld HL, (SPRITE_COLOR_REPLACE)
     292.  00:44DF  11 30 00                ld DE,48
     293.  00:44E2  19                      ADD HL, DE
     294.  00:44E3  22 D0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     295.  00:44E6                          ;ld a, 0
     296.  00:44E6  C9                  	ret
     297.  00:44E7                      
     298.  00:44E7                      .NO_CHAR_PATTERN_CHANGE    
     299.  00:44E7  C6 01                   ADD 1
     300.  00:44E9  32 46 C0                LD (CHAR_MIN_STEP), A    
     301.  00:44EC  C9                      ret
     302.  00:44ED                      
     303.  00:44ED                      NO_MOVEMENT:    
     304.  00:44ED  C9                      ret
     305.  00:44EE                      
     306.  00:44EE                      MOVE_SHOOT:
     307.  00:44EE  3A 45 C0                LD A,(CHAR_MAIN_SHOOT)    
     308.  00:44F1  FE 01                   CP $01
     309.  00:44F3  CA 1E 45                JP Z,.MOVE_SHOOT_LEFT
     310.  00:44F6  FE 02                   CP $02
     311.  00:44F8  CA 06 45                JP Z,.MOVE_SHOOT_RIGHT
     312.  00:44FB  FE 03                   CP $03
     313.  00:44FD  CA 0E 45                JP Z,.MOVE_SHOOT_UP    
     314.  00:4500  FE 04                   CP $04
     315.  00:4502  CA 16 45                JP Z,.MOVE_SHOOT_DOWN
     316.  00:4505  C9                      RET
     317.  00:4506                      
     318.  00:4506                      .MOVE_SHOOT_RIGHT:        
     319.  00:4506  3E 03                   LD A, MOV_SPEED_SHOOT
     320.  00:4508  32 48 C0            	LD (CHAR_SPEED_SHOOT), A    
     321.  00:450B  C3 23 45                JP .CHECK_SHOOT_DISTANCE
     322.  00:450E                      
     323.  00:450E                      .MOVE_SHOOT_UP:        
     324.  00:450E  3E FD                   LD A, -MOV_SPEED_SHOOT
     325.  00:4510  32 48 C0            	LD (CHAR_SPEED_SHOOT), A    
     326.  00:4513  C3 23 45                JP .CHECK_SHOOT_DISTANCE
     327.  00:4516                      
     328.  00:4516                      .MOVE_SHOOT_DOWN:
     329.  00:4516  3E 03                   LD A, MOV_SPEED_SHOOT
     330.  00:4518  32 48 C0            	LD (CHAR_SPEED_SHOOT), A    
     331.  00:451B  C3 23 45                JP .CHECK_SHOOT_DISTANCE
     332.  00:451E                      
     333.  00:451E                      .MOVE_SHOOT_LEFT:    
     334.  00:451E  3E FD                   LD A, -MOV_SPEED_SHOOT
     335.  00:4520  32 48 C0            	LD (CHAR_SPEED_SHOOT), A    
     336.  00:4523                      
     337.  00:4523                      .CHECK_SHOOT_DISTANCE:
     338.  00:4523                          ; Miramos si va a izq o der
     339.  00:4523  3A 45 C0                LD A,(CHAR_MAIN_SHOOT)    
     340.  00:4526  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     341.  00:4528  D2 38 45                JP NC,.ADD_SHOOT_Y
     342.  00:452B                          ; Movemos el disparo
     343.  00:452B  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     344.  00:452E  2A 48 C0            	LD HL, (CHAR_SPEED_SHOOT)
     345.  00:4531  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     346.  00:4532  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     347.  00:4535  C3 42 45                JP .ADD_DISTANCE
     348.  00:4538                      .ADD_SHOOT_Y
     349.  00:4538                          ; Movemos el disparo
     350.  00:4538  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     351.  00:453B  2A 48 C0            	LD HL, (CHAR_SPEED_SHOOT)
     352.  00:453E  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     353.  00:453F  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     354.  00:4542                      
     355.  00:4542                      .ADD_DISTANCE:
     356.  00:4542  3A 47 C0                LD A,(CHAR_DISTANCE_SHOOT)
     357.  00:4545  C6 03                   ADD MOV_SPEED_SHOOT
     358.  00:4547  32 47 C0                LD (CHAR_DISTANCE_SHOOT),A    
     359.  00:454A  FE 30                   CP MAX_DISTANCE_SHOOT
     360.  00:454C  C0                      RET NZ
     361.  00:454D                      
     362.  00:454D                      .HIDE_SHOOT:
     363.  00:454D  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     364.  00:4551  AF                      XOR A
     365.  00:4552  32 45 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     366.  00:4555  32 47 C0                LD (CHAR_DISTANCE_SHOOT),A
     367.  00:4558  C9                      RET
     368.  00:4559                      
     369.  00:4559                      SHOOT_MAIN_CHAR:    
     370.  00:4559  3A 45 C0                LD A, (CHAR_MAIN_SHOOT)
     371.  00:455C  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     372.  00:455E  C8                      RET Z;,MAIN_LOOP
     373.  00:455F  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     374.  00:4561  C8                      RET Z;,MAIN_LOOP
     375.  00:4562  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     376.  00:4564  C8                      RET Z;,MAIN_LOOP
     377.  00:4565  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     378.  00:4567  C8                      RET Z;,MAIN_LOOP
     379.  00:4568                      
     380.  00:4568  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     381.  00:456C                      
     382.  00:456C  DD 7E 00                LD A, (ix)          
     383.  00:456F  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     384.  00:4572                      
     385.  00:4572  3A 43 C0                LD A, (CHAR_DIR_MAIN)
     386.  00:4575  FE 03                   CP $03
     387.  00:4577  CA 93 45                JP Z,.SHOOT_RIGHT
     388.  00:457A  FE 00                   CP $00
     389.  00:457C  CA A2 45                JP Z,.SHOOT_UP
     390.  00:457F  FE 01                   CP $01
     391.  00:4581  CA B5 45                JP Z,.SHOOT_DOWN
     392.  00:4584                          ; SHOOT LEFT
     393.  00:4584  3E 01                   LD A,$01                ; SHOOT LEFT
     394.  00:4586  32 45 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     395.  00:4589  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     396.  00:458C  21 F4 FF            	LD HL, -12
     397.  00:458F  85                  	ADD L
     398.  00:4590                          
     399.  00:4590  C3 C5 45                JP .CONTINUE
     400.  00:4593                      
     401.  00:4593                      .SHOOT_RIGHT:    
     402.  00:4593  3E 02                   LD A,$02
     403.  00:4595  32 45 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     404.  00:4598                          
     405.  00:4598  DD 7E 01                LD A, (ix+1)			;cargamos la X
     406.  00:459B  21 0C 00            	LD HL, 12
     407.  00:459E  85                  	ADD L
     408.  00:459F  C3 C5 45                JP .CONTINUE
     409.  00:45A2                      
     410.  00:45A2                      .SHOOT_UP:
     411.  00:45A2  3E 03                   LD A,$03
     412.  00:45A4  32 45 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     413.  00:45A7                          
     414.  00:45A7                          ; Sumamos el desplazamiento a la Y
     415.  00:45A7  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     416.  00:45AA  D6 10                   SUB 16
     417.  00:45AC  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     418.  00:45AF                          ;LD (ix+17), D
     419.  00:45AF  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     420.  00:45B2  C3 C5 45                JP .CONTINUE
     421.  00:45B5                      
     422.  00:45B5                      .SHOOT_DOWN
     423.  00:45B5  3E 04               	LD A,$04
     424.  00:45B7  32 45 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     425.  00:45BA                          
     426.  00:45BA                          ; Sumamos el desplazamiento a la Y
     427.  00:45BA  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     428.  00:45BD  C6 10                   ADD 16
     429.  00:45BF  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     430.  00:45C2                          ;LD (ix+17), D
     431.  00:45C2  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     432.  00:45C5                      
     433.  00:45C5                      .CONTINUE:
     434.  00:45C5                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     435.  00:45C5  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     436.  00:45C8                          ;jp MAIN_LOOP
     437.  00:45C8  C9                      ret
      26   00:45C9                      	include "include\VDP.asm"
       1.  00:45C9                      ; Offset commands registers
       2.  00:45C9  (00:0000)           VDP_SX		 EQU 0
       3.  00:45C9  (00:0002)           VDP_SY		 EQU 2
       4.  00:45C9  (00:0004)           VDP_DX		 EQU 4
       5.  00:45C9  (00:0006)           VDP_DY		 EQU 6
       6.  00:45C9  (00:0008)           VDP_NX		 EQU 8
       7.  00:45C9  (00:000A)           VDP_NY		 EQU 10
       8.  00:45C9  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:45C9  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:45C9  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:45C9                      
      12.  00:45C9                      ; Offset for sprite commands from memory
      13.  00:45C9                      
      14.  00:45C9                      ; VDP Commands
      15.  00:45C9  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:45C9  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:45C9  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:45C9  (00:0098)           CMD_LMMM	equ	$98
      19.  00:45C9  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:45C9  (00:0080)           CMD_LMMV    equ $80
      21.  00:45C9                      
      22.  00:45C9                      ; Logical operations
      23.  00:45C9  (00:0000)           VDP_IMP		equ	%0000
      24.  00:45C9  (00:0001)           VDP_AND		equ	%0001
      25.  00:45C9  (00:0002)           VDP_OR		equ	%0010
      26.  00:45C9  (00:0003)           VDP_XOR		equ	%0011
      27.  00:45C9  (00:0004)           VDP_NOT		equ	%0100
      28.  00:45C9  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:45C9  (00:0009)           VDP_TAND	equ	%1001
      30.  00:45C9  (00:000A)           VDP_TOR		equ	%1010
      31.  00:45C9  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:45C9  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:45C9                      
      34.  00:45C9                      ; Tile
      35.  00:45C9  (00:0010)           ENERGY_WIDTH		equ	16		; Blood drops
      36.  00:45C9  (00:0020)           TILE_WIDTH			equ	32
      37.  00:45C9  (00:0010)           TILE_HEIGHT			equ	16
      38.  00:45C9  (00:0001)           TILES_PAGE			equ	1		; Page where tiles are stored
      39.  00:45C9  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      40.  00:45C9  (00:0002)           BACK_BUFFER			equ 2		; we will draw to page 1
      41.  00:45C9  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      42.  00:45C9                      
      43.  00:45C9                      ; Dialog Box
      44.  00:45C9  (00:0014)           DIAGBOX_HEIGHT	equ 20
      45.  00:45C9  (00:00FF)           DIAGBOX_WIDTH	equ 255
      46.  00:45C9                      
      47.  00:45C9                      ;---------------------------------------------------------------------------
      48.  00:45C9                      ; Init the RAM buffer used to draw a tile
      49.  00:45C9                      ;---------------------------------------------------------------------------
      50.  00:45C9                      initVDPBuffers:
      51.  00:45C9  21 25 48            		ld	hl,tileDatROM
      52.  00:45CC  11 10 C0            		ld	de,tileDat
      53.  00:45CF  01 0F 00            		ld	bc,15
      54.  00:45D2  ED B0               		ldir	
      55.  00:45D4                      
      56.  00:45D4  21 34 48            		ld	hl,energyDatROM
      57.  00:45D7  11 1F C0            		ld	de,energyDat
      58.  00:45DA  01 0F 00            		ld	bc,15
      59.  00:45DD  ED B0               		ldir	
      60.  00:45DF                      
      61.  00:45DF  21 00 C0            		ld 	hl, ENTITY_DATA
      62.  00:45E2  11 85 4F            		ld de, init_player
      63.  00:45E5  01 05 00            		ld bc,5
      64.  00:45E8  ED B0               		ldir
      65.  00:45EA                      
      66.  00:45EA  C9                  		ret
      67.  00:45EB                      
      68.  00:45EB                      print_strings_dialog_box:		
      69.  00:45EB                      
      70.  00:45EB  FD 66 01            	LD H, (IY+1)
      71.  00:45EE  FD 6E 00            	LD L, (IY)
      72.  00:45F1  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      73.  00:45F4  FD E5               	PUSH IY
      74.  00:45F6  CD 18 46                call print_string 
      75.  00:45F9  FD E1                   POP IY
      76.  00:45FB                      
      77.  00:45FB  FD 66 03            	LD H, (IY+3)
      78.  00:45FE  FD 6E 02            	LD L, (IY+2)
      79.  00:4601  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
      80.  00:4604  FD E5               	PUSH IY
      81.  00:4606  CD 18 46                call print_string 
      82.  00:4609  FD E1               	POP IY
      83.  00:460B                      
      84.  00:460B  FD 66 05                LD H, (IY+5)
      85.  00:460E  FD 6E 04            	LD L, (IY+4)
      86.  00:4611  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      87.  00:4614  CD 18 46                call print_string 
      88.  00:4617  C9                  	RET
      89.  00:4618                      
      90.  00:4618                      print_string:       
      91.  00:4618                      	
      92.  00:4618                      	;LD HL, string01
      93.  00:4618                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
      94.  00:4618                      .loop_str:
      95.  00:4618  7E                  	LD A, (HL)
      96.  00:4619  A7                  	AND A
      97.  00:461A  C8                  	RET Z
      98.  00:461B                      
      99.  00:461B  D6 20               	SUB 32
     100.  00:461D  CB 07               	RLC A
     101.  00:461F  CB 07               	RLC A	
     102.  00:4621                          
     103.  00:4621  06 00               	LD B, 0
     104.  00:4623  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
     105.  00:4624                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
     106.  00:4624                      				; Si #ASCII > 63 -> 2ª línea
     107.  00:4624                      				; segunda línea - ((#ASCII -32)*4)+1024
     108.  00:4624                      	
     109.  00:4624  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
     110.  00:4625  E5                  	PUSH HL
     111.  00:4626  21 00 80            	LD HL, FONT
     112.  00:4629  09                  	ADD HL, BC
     113.  00:462A  FE 40               	CP 64
     114.  00:462C  DA 33 46            	JP C, .first_line_font
     115.  00:462F  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     116.  00:4632  09                  	ADD HL, BC
     117.  00:4633                      
     118.  00:4633                      .first_line_font:
     119.  00:4633  22 D4 C0                LD (BITMAP), HL
     120.  00:4636                          
     121.  00:4636  06 06               	LD B, :FONT
     122.  00:4638  D5                  	PUSH DE
     123.  00:4639  CD 4C 46                call print_char
     124.  00:463C  D1                      POP DE
     125.  00:463D                      	
     126.  00:463D  FD 21 04 00         	LD IY, 4
     127.  00:4641  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     128.  00:4643  FD 54               	LD D, IYH
     129.  00:4645  FD 5D               	LD E, IYL
     130.  00:4647                      	
     131.  00:4647                      
     132.  00:4647  E1                  	POP HL
     133.  00:4648  23                  	INC HL
     134.  00:4649  18 CD               	JR .loop_str
     135.  00:464B                          
     136.  00:464B  C9                      RET
     137.  00:464C                      
     138.  00:464C                      print_char
     139.  00:464C  AF                  		XOR A		
     140.  00:464D  0E 00               		ld		c,0
     141.  00:464F                      		;ld		de,0
     142.  00:464F  ED 53 33 C0         		LD (CHR_ACR), DE
     143.  00:4653  CD D3 41                	call	_vdpsetvramwr		
     144.  00:4656  78                  		ld	a, b			; 1st page bitmap
     145.  00:4657                      		;ld	d,a
     146.  00:4657  32 00 70            		ld	(_bank2),a
     147.  00:465A  2A D4 C0            		ld	hl,(BITMAP)		; Bitmap address
     148.  00:465D  3E 08               		ld	a, 8			; #lineas del caracter
     149.  00:465F  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     150.  00:4662  ED B3                       otir
     151.  00:4664  01 7C 00                    LD BC, 124
     152.  00:4667  09                          ADD HL, BC
     153.  00:4668  F5                  		PUSH AF
     154.  00:4669                      
     155.  00:4669  FD 2A 33 C0         		LD IY, (CHR_ACR)
     156.  00:466D  01 80 00            		LD BC, 128
     157.  00:4670  FD 09               		ADD IY, BC
     158.  00:4672  FD 54               		LD D, IYH
     159.  00:4674  FD 5D               		LD E, IYL
     160.  00:4676  A9                  		XOR C
     161.  00:4677  ED 53 33 C0         		LD (CHR_ACR), DE
     162.  00:467B  CD D3 41            		call	_vdpsetvramwr		
     163.  00:467E  F1                  		POP AF		
     164.  00:467F                      
     165.  00:467F  3D                  		dec	a
     166.  00:4680  20 DD               		jr	nz,1b		
     167.  00:4682  C9                  		ret 
     168.  00:4683                      
     169.  00:4683                      CLEAR_DIALOG_BOX_v1:		
     170.  00:4683  0E 00               		LD C,0
     171.  00:4685  11 28 5C            		LD DE, 5C28H
     172.  00:4688  ED 53 33 C0         		LD (CHR_ACR), DE
     173.  00:468C  CD D3 41            		call _vdpsetvramwr
     174.  00:468F  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     175.  00:4691  21 BC 76            1:		LD HL, BLANK_DATA
     176.  00:4694  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     177.  00:4697  ED B3               		OTIR
     178.  00:4699                      
     179.  00:4699  F5                  		PUSH AF
     180.  00:469A  FD 2A 33 C0         		LD IY, (CHR_ACR)
     181.  00:469E  01 80 00            		LD BC, 128
     182.  00:46A1  FD 09               		ADD IY, BC
     183.  00:46A3  FD 54               		LD D, IYH
     184.  00:46A5  FD 5D               		LD E, IYL
     185.  00:46A7  0E 00               		LD C,0
     186.  00:46A9  ED 53 33 C0         		LD (CHR_ACR), DE
     187.  00:46AD  CD D3 41            		call	_vdpsetvramwr		
     188.  00:46B0  F1                  		POP AF		
     189.  00:46B1                      
     190.  00:46B1  3D                  		DEC a
     191.  00:46B2  20 DD               		JR NZ,1b
     192.  00:46B4  C9                  		RET
     193.  00:46B5                      
     194.  00:46B5                      CLEAR_DIALOG_BOX_v2:
     195.  00:46B5  0E 00               		LD C,0
     196.  00:46B7  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     197.  00:46BA  ED 53 33 C0         		LD (CHR_ACR), DE
     198.  00:46BE  CD D3 41            		call _vdpsetvramwr
     199.  00:46C1  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     200.  00:46C3  21 BC 76            1:		LD HL, BLANK_DATA
     201.  00:46C6  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     202.  00:46C9  ED B3               		OTIR
     203.  00:46CB                      
     204.  00:46CB  F5                  		PUSH AF
     205.  00:46CC  FD 2A 33 C0         		LD IY, (CHR_ACR)
     206.  00:46D0  01 80 00            		LD BC, 128
     207.  00:46D3  FD 09               		ADD IY, BC
     208.  00:46D5  FD 54               		LD D, IYH
     209.  00:46D7  FD 5D               		LD E, IYL
     210.  00:46D9  0E 00               		LD C,0
     211.  00:46DB  ED 53 33 C0         		LD (CHR_ACR), DE
     212.  00:46DF  CD D3 41            		call	_vdpsetvramwr		
     213.  00:46E2  F1                  		POP AF		
     214.  00:46E3                      
     215.  00:46E3  3D                  		DEC a
     216.  00:46E4  20 DD               		JR NZ,1b
     217.  00:46E6  C9                  		RET
     218.  00:46E7                      	
     219.  00:46E7                      CLEAR_DIALOG_BOX:
     220.  00:46E7  21 52 48            		LD HL, DiagBoxToFrontkBufROM
     221.  00:46EA  CD 30 47            		CALL VDPCMD
     222.  00:46ED  C9                  		RET
     223.  00:46EE                      
     224.  00:46EE                      
     225.  00:46EE                      ; -----------------------------------------------------------------------------------
     226.  00:46EE                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     227.  00:46EE                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     228.  00:46EE                      ; -----------------------------------------------------------------------------------
     229.  00:46EE  (00:F3E0)           VDP_01: EQU   $F3E0
     230.  00:46EE  (00:FFE7)           VDP_08: EQU   $FFE7
     231.  00:46EE  (00:FFE8)           VDP_09: EQU   $FFE8
     232.  00:46EE                      
     233.  00:46EE                      SETPAG:				; SETPAG [A]
     234.  00:46EE  0F                  	RRCA
     235.  00:46EF  0F                  	RRCA
     236.  00:46F0  0F                  	RRCA
     237.  00:46F1  F6 1F               	OR	%00011111
     238.  00:46F3  F3                  	DI
     239.  00:46F4  D3 99               	OUT	($99),A
     240.  00:46F6  3E 82               	LD	A,$80+2
     241.  00:46F8  FB                  	EI
     242.  00:46F9  D3 99               	OUT	($99),A
     243.  00:46FB  C9                  	RET
     244.  00:46FC                      
     245.  00:46FC                      SET_WR:				; SET_WR [AHL]
     246.  00:46FC  CB 04               	RLC	H
     247.  00:46FE  17                  	RLA
     248.  00:46FF  CB 04               	RLC	H
     249.  00:4701  17                  	RLA
     250.  00:4702  CB 3C               	SRL	H
     251.  00:4704  CB 3C               	SRL	H
     252.  00:4706  F3                  	DI
     253.  00:4707  D3 99               	OUT	($99),A
     254.  00:4709  3E 8E               	LD	A,$80+14
     255.  00:470B  D3 99               	OUT	($99),A
     256.  00:470D  7D                  	LD	A,L
     257.  00:470E                      ;	NOP				; MSX2+
     258.  00:470E  D3 99               	OUT	($99),A
     259.  00:4710  7C                  	LD	A,H
     260.  00:4711  F6 40               	OR	64
     261.  00:4713  D3 99               	OUT	($99),A
     262.  00:4715  FB                  	EI
     263.  00:4716  C9                  	RET
     264.  00:4717                      
     265.  00:4717                      SET_RD:				; SET_RD [AHL]
     266.  00:4717  CB 04               	RLC	H
     267.  00:4719  17                  	RLA
     268.  00:471A  CB 04               	RLC	H
     269.  00:471C  17                  	RLA
     270.  00:471D  CB 3C               	SRL	H
     271.  00:471F  CB 3C               	SRL	H
     272.  00:4721  F3                  	DI
     273.  00:4722  D3 99               	OUT	($99),A
     274.  00:4724  3E 8E               	LD	A,$80+14
     275.  00:4726  D3 99               	OUT	($99),A
     276.  00:4728  7D                  	LD	A,L
     277.  00:4729                      ;	NOP				; MSX2+
     278.  00:4729  D3 99               	OUT	($99),A
     279.  00:472B  7C                  	LD	A,H
     280.  00:472C                      ;	NOP				; MSX2+
     281.  00:472C  D3 99               	OUT	($99),A
     282.  00:472E  FB                  	EI
     283.  00:472F  C9                  	RET
     284.  00:4730                      
     285.  00:4730                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     286.  00:4730  CD 43 47            	CALL	WAITCE
     287.  00:4733  F3                  	DI
     288.  00:4734  3E 20               	LD	A,$20
     289.  00:4736  D3 99               	OUT	($99),A
     290.  00:4738  3E 91               	LD	A,$80+17
     291.  00:473A  D3 99               	OUT	($99),A
     292.  00:473C  FB                  	EI
     293.  00:473D  01 9B 0F            	LD	BC,$0F9B
     294.  00:4740  ED B3               	OTIR
     295.  00:4742  C9                  	RET
     296.  00:4743                      
     297.  00:4743                      WAITCE:				; WAITCE
     298.  00:4743  3E 02               	LD	A,$02
     299.  00:4745  F3                  	DI
     300.  00:4746  D3 99               	OUT	($99),A
     301.  00:4748  3E 8F               	LD	A,$80+15
     302.  00:474A  D3 99               	OUT	($99),A
     303.  00:474C  DB 99               	IN	A,($99)
     304.  00:474E  1F                  	RRA
     305.  00:474F  3E 00               	LD	A,$00
     306.  00:4751  D3 99               	OUT	($99),A
     307.  00:4753  3E 8F               	LD	A,$80+15
     308.  00:4755  FB                  	EI
     309.  00:4756  D3 99               	OUT	($99),A
     310.  00:4758  38 E9               	JR	C,WAITCE
     311.  00:475A  C9                  	RET
     312.  00:475B                      
     313.  00:475B                      ENASCR:				; Enable Screen
     314.  00:475B  3A E0 F3            	LD	A,(VDP_01)
     315.  00:475E  F6 40               	OR	%01000000
     316.  00:4760  18 05               	JR	DISSCR.OUT
     317.  00:4762                      
     318.  00:4762                      DISSCR:				; Disable Screen
     319.  00:4762  3A E0 F3            	LD	A,(VDP_01)
     320.  00:4765  E6 BF               	AND	%10111111
     321.  00:4767  32 E0 F3            .OUT:	LD	(VDP_01),A
     322.  00:476A  F3                  	DI
     323.  00:476B  D3 99               	OUT	($99),A
     324.  00:476D  3E 81               	LD	A,$80+1
     325.  00:476F  FB                  	EI
     326.  00:4770  D3 99               	OUT	($99),A
     327.  00:4772  C9                  	RET
     328.  00:4773                      
     329.  00:4773                      ENASPR:				; Enable Sprites
     330.  00:4773  3A E7 FF            	LD	A,(VDP_08)
     331.  00:4776  E6 FD               	AND	%11111101
     332.  00:4778  18 05               	JR	DISSPR.OUT
     333.  00:477A                      
     334.  00:477A                      DISSPR:				; Disable Sprites
     335.  00:477A  3A E7 FF            	LD	A,(VDP_08)
     336.  00:477D  F6 02               	OR	%00000010
     337.  00:477F  32 E7 FF            .OUT:	LD	(VDP_08),A
     338.  00:4782  F3                  	DI
     339.  00:4783  D3 99               	OUT	($99),A
     340.  00:4785  3E 88               	LD	A,$80+8
     341.  00:4787  FB                  	EI
     342.  00:4788  D3 99               	OUT	($99),A
     343.  00:478A  C9                  	RET
     344.  00:478B                      
     345.  00:478B                      LIN192:				; Set 192 lines
     346.  00:478B  3A E8 FF            	LD	A,(VDP_09)
     347.  00:478E  F6 80               	OR	%10000000
     348.  00:4790  18 05               	JR	LIN212.OUT
     349.  00:4792                      
     350.  00:4792                      LIN212:				; Set 212 lines
     351.  00:4792  3A E8 FF            	LD	A,(VDP_09)
     352.  00:4795  E6 7F               	AND	%01111111
     353.  00:4797  32 E8 FF            .OUT:	LD	(VDP_09),A
     354.  00:479A  F3                  	DI
     355.  00:479B  D3 99               	OUT	($99),A
     356.  00:479D  3E 89               	LD	A,$80+9
     357.  00:479F  FB                  	EI
     358.  00:47A0  D3 99               	OUT	($99),A
     359.  00:47A2  C9                  	RET
     360.  00:47A3                      ;
     361.  00:47A3                      ; This lil' routine waits until the VDP is done copying.
     362.  00:47A3                      ;
     363.  00:47A3                      VDP_Ready:
     364.  00:47A3  3E 02                   ld a,2
     365.  00:47A5  F3                      di
     366.  00:47A6  D3 99                   out (#99),a     ; select s#2
     367.  00:47A8  3E 8F                   ld a,15+128
     368.  00:47AA  D3 99                   out (#99),a
     369.  00:47AC  DB 99                   in a,(#99)
     370.  00:47AE  1F                      rra
     371.  00:47AF  3E 00                   ld a,0          ; back to s#0, enable ints
     372.  00:47B1  D3 99                   out (#99),a
     373.  00:47B3  3E 8F                   ld a,15+128
     374.  00:47B5  FB                      ei
     375.  00:47B6  D3 99                   out (#99),a     ; loop if vdp not ready (CE)
     376.  00:47B8  DA A3 47                jp c,VDP_Ready
     377.  00:47BB  C9                      ret
     378.  00:47BC                      
     379.  00:47BC                      ;INPUT: A - ANDY'S MAX ENERGY
     380.  00:47BC                      DRAW_ANDY_ENERGY:	
     381.  00:47BC  3A 03 C0            	LD A, (ENTITY_PLAYER_POINTER+3)		; cargamos la energia de Andy
     382.  00:47BF                      	;LD A, 8  ; TESTS
     383.  00:47BF  11 00 00            	LD DE, 0	
     384.  00:47C2  FD 21 1F C0         	LD IY, energyDat
     385.  00:47C6                          ;LD (IY + VDP_SX), 128      ; SXL - Tile 4
     386.  00:47C6                          ;LD (IY+VDP_SY), 0      ; SYL	
     387.  00:47C6                          ;LD (IY + VDP_DX), A     ; DXL    
     388.  00:47C6  FD 36 06 C2             LD (IY + VDP_DY), 194      ; DYL    
     389.  00:47CA                      
     390.  00:47CA                      .check_next_drop
     391.  00:47CA  FE 04               	CP 4
     392.  00:47CC  CA EA 47            	JP Z, .draw_half_drop	
     393.  00:47CF  FD 36 00 80         	LD (IY + VDP_SX), 128      ; SXL - Tile 4
     394.  00:47D3  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     395.  00:47D6  F5                  	PUSH AF
     396.  00:47D7  7A                  	LD A, D
     397.  00:47D8  C6 10               	ADD A, 16
     398.  00:47DA  57                  	LD D, A 	
     399.  00:47DB  21 1F C0            	LD HL, energyDat
     400.  00:47DE  CD 30 47                CALL VDPCMD
     401.  00:47E1  1C                  	INC E
     402.  00:47E2  F1                  	POP AF
     403.  00:47E3  D6 08               	SUB 8
     404.  00:47E5  C2 CA 47            	JP NZ, .check_next_drop
     405.  00:47E8                      	;ret
     406.  00:47E8  18 12               	JR .draw_empty_drops
     407.  00:47EA                      
     408.  00:47EA                      .draw_half_drop		
     409.  00:47EA  FD 36 00 90         	LD (IY + VDP_SX), 144      ; SXL - Tile 5
     410.  00:47EE  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     411.  00:47F1  7A                  	LD A, D
     412.  00:47F2  C6 10               	ADD A, 16
     413.  00:47F4  57                  	LD D, A 	
     414.  00:47F5  21 1F C0                LD HL, energyDat
     415.  00:47F8  CD 30 47                CALL VDPCMD
     416.  00:47FB  1C                  	INC E
     417.  00:47FC                      	;ret
     418.  00:47FC                      
     419.  00:47FC                      .draw_empty_drops
     420.  00:47FC  21 10 40            		LD HL, ANDY_MAX_ENERGY
     421.  00:47FF  ED 4B 0F C0         		LD BC, (current_level)
     422.  00:4803  09                  		ADD HL, BC
     423.  00:4804  7E                  		LD A, (HL)
     424.  00:4805  CB 3F CB 3F CB 3F   [3]     srl a       ;a/8
     425.  00:480B  93                  		sub e
     426.  00:480C  C8                  		ret Z		; si es cero volvemos, full energy
     427.  00:480D                      .loop
     428.  00:480D  FD 36 00 A0         		LD (IY + VDP_SX), 160      ; SXL - Tile 6
     429.  00:4811  FD 72 04            		LD (IY + VDP_DX), D     ; DXL    
     430.  00:4814  21 1F C0                	LD HL, energyDat
     431.  00:4817  F5                  		PUSH AF
     432.  00:4818  7A                  		LD A, D
     433.  00:4819  C6 10               		ADD A, 16
     434.  00:481B  57                  		LD D, A 			
     435.  00:481C  CD 30 47                	CALL VDPCMD
     436.  00:481F  F1                  		pop AF
     437.  00:4820  3D                  		dec a
     438.  00:4821  C2 0D 48            		jp nz, .loop
     439.  00:4824  C9                  		ret
     440.  00:4825                      		;ld a, (ENTITY_PLAYER_POINTER+3)	; Andy's energy
      27   00:4825                          include "include\VDP_Data.asm"
       1.  00:4825                      ; VDP COMMAND PARAMETER
       2.  00:4825                      ;                               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:4825                      tileDatROM:                 db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       3.  00:4825  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D0 
       4.  00:4834                      energyDatROM:               db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, ENERGY_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       4.  00:4834  00 00 00 01 00 00 00 00 10 00 10 00 00 00 D0 
       5.  00:4843                      DiagBoxToBackBufROM:        db	0, 0, 192, FRONT_BUFFER, 0, 0, 192, BACK_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       5.  00:4843  00 00 C0 00 00 00 C0 02 FF 00 14 00 00 00 D0 
       6.  00:4852                      DiagBoxToFrontkBufROM:      db	0, 0, 192, BACK_BUFFER, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       6.  00:4852  00 00 C0 02 00 00 C0 00 FF 00 14 00 00 00 D0 
       7.  00:4861                      DiagBoxClearROM:            db	0, 0, 192, TILES_PAGE, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       7.  00:4861  00 00 C0 01 00 00 C0 00 FF 00 14 00 00 00 D0 
      28   00:4870                      ; SFX
      29   00:4870                          include	"include\PT3_player.s"
       1.  00:4870                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:4870                      		; --- Can be assembled with asMSX ---
       3.  00:4870                      		; --- ROM version: MSX-KUN        ---
       4.  00:4870                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:4870                      
       6.  00:4870                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:4870                      ;
       8.  00:4870                      ; This version of the replayer can be used with any note table
       9.  00:4870                      ; This version also allows the use of PT3 commands
      10.  00:4870                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:4870                      ;
      12.  00:4870                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:4870                      ;
      14.  00:4870                      ; ROM LENGTH: 1549 bytes
      15.  00:4870                      ; RAM LENGTH:  576 bytes
      16.  00:4870                      
      17.  00:4870                      
      18.  00:4870                      
      19.  00:4870                      ;SJASM version by BTV 2016
      20.  00:4870                      
      21.  00:4870                      
      22.  00:4870                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:4870                      
      24.  00:4870                      ;ChannelsVars
      25.  00:4870                      ;struc	CHNPRM
      26.  00:4870                      ;reset group
      27.  00:4870  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:4870  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:4870  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:4870  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:4870  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:4870  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:4870  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:4870  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:4870  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:4870                      ;reset group
      37.  00:4870                      
      38.  00:4870  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:4870                      
      40.  00:4870                      ;IX for PTDECOD here [+12]
      41.  00:4870  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:4870  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:4870  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:4870  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:4870  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:4870  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:4870  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:4870  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:4870                       ;Enabled - 0,SimpleGliss - 2
      50.  00:4870  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:4870  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:4870  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:4870  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:4870  (00:0017)           CHNPRM_Volume	equ 23	;RESB 1
      55.  00:4870  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:4870                      ;endstruc
      57.  00:4870                      
      58.  00:4870                      ;struc	AR
      59.  00:4870  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:4870  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:4870  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:4870  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:4870  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:4870  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:4870  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:4870  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:4870  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:4870  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:4870                      ;endstruc
      70.  00:4870                      
      71.  00:4870                      		; --- CODE STARTS HERE ---
      72.  00:4870                      
      73.  00:4870  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:4873  CB FE               		SET	7,[HL]
      75.  00:4875  CB 46               		BIT	0,[HL]
      76.  00:4877  C8                  		RET	Z
      77.  00:4878  E1                  		POP	HL
      78.  00:4879  21 79 F0            		LD	HL,DelyCnt
      79.  00:487C  34                  		INC	[HL]
      80.  00:487D  21 3D F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:4880  34                  		INC	[HL]
      82.  00:4881  AF                  PT3_MUTE:	XOR	A
      83.  00:4882  67                  		LD	H,A
      84.  00:4883  6F                  		LD	L,A
      85.  00:4884  32 47 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:4887  22 48 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:488A  C3 D3 4D            		JP	ROUT_A0
      88.  00:488D                      
      89.  00:488D                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:488D  22 00 F0            		LD [PT3_MODADDR],HL
      91.  00:4890  E5                  		PUSH HL
      92.  00:4891  11 64 00            		LD DE,100
      93.  00:4894  19                  		ADD HL,DE
      94.  00:4895  7E                  		LD A,[HL]
      95.  00:4896  32 1B F0            		LD [PT3_Delay],A
      96.  00:4899  E5                  		PUSH HL
      97.  00:489A  DD E1               		POP IX
      98.  00:489C  19                  		ADD HL,DE
      99.  00:489D  22 02 F0            		LD [PT3_CrPsPtr],HL
     100.  00:48A0  DD 5E 02            		LD E,[IX+102-100]
     101.  00:48A3  19                  		ADD HL,DE
     102.  00:48A4  23                  		INC HL
     103.  00:48A5  22 17 F0            		LD [PT3_LPosPtr],HL
     104.  00:48A8  D1                  		POP DE
     105.  00:48A9  DD 6E 03            		LD L,[IX+103-100]
     106.  00:48AC  DD 66 04            		LD H,[IX+104-100]
     107.  00:48AF  19                  		ADD HL,DE
     108.  00:48B0  22 19 F0            		LD [PT3_PatsPtr],HL
     109.  00:48B3  21 A9 00            		LD HL,169
     110.  00:48B6  19                  		ADD HL,DE
     111.  00:48B7  22 06 F0            		LD [PT3_OrnPtrs],HL
     112.  00:48BA  21 69 00            		LD HL,105
     113.  00:48BD  19                  		ADD HL,DE
     114.  00:48BE  22 04 F0            		LD [PT3_SAMPTRS],HL
     115.  00:48C1  21 00 F0            		LD HL,PT3_SETUP
     116.  00:48C4  CB BE               		RES 7,[HL]
     117.  00:48C6                      
     118.  00:48C6                      		; --- note table data depacker ---
     119.  00:48C6                      		; Depacks first 12 tones of each tone table
     120.  00:48C6                      
     121.  00:48C6  11 47 4E            		LD DE,T_PACK
     122.  00:48C9  01 B0 F1            		LD BC,T1_+(2*49)-1
     123.  00:48CC  1A                  .TP_0:		LD A,[DE]
     124.  00:48CD  13                  		INC DE
     125.  00:48CE  FE 1E               		CP 15*2
     126.  00:48D0  30 06               		JR NC,.TP_1
     127.  00:48D2  67                  		LD H,A
     128.  00:48D3  1A                  		LD A,[DE]
     129.  00:48D4  6F                  		LD L,A
     130.  00:48D5  13                  		INC DE
     131.  00:48D6  18 07               		JR .TP_2
     132.  00:48D8  D5                  .TP_1:		PUSH DE
     133.  00:48D9  16 00               		LD D,0
     134.  00:48DB  5F                  		LD E,A
     135.  00:48DC  19                  		ADD HL,DE
     136.  00:48DD  19                  		ADD HL,DE
     137.  00:48DE  D1                  		POP DE
     138.  00:48DF  7C                  .TP_2:		LD A,H
     139.  00:48E0  02                  		LD [BC],A
     140.  00:48E1  0B                  		DEC BC
     141.  00:48E2  7D                  		LD A,L
     142.  00:48E3  02                  		LD [BC],A
     143.  00:48E4  0B                  		DEC BC
     144.  00:48E5  D6 F0               		SUB $F0
     145.  00:48E7  20 E3               		JR NZ,.TP_0
     146.  00:48E9                      
     147.  00:48E9                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:48E9  21 22 F0            		LD HL,VARS
     149.  00:48EC  77                  		LD [HL],A
     150.  00:48ED  11 23 F0            		LD DE,VARS+1
     151.  00:48F0  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:48F3  ED B0               		LDIR
     153.  00:48F5                      
     154.  00:48F5  3C                  		INC A
     155.  00:48F6  32 79 F0            		LD [DelyCnt],A
     156.  00:48F9  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:48FC  22 3D F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:48FF  22 5A F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4902  22 77 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:4905                      
     161.  00:4905  21 43 4E            		LD HL,EMPTYSAMORN
     162.  00:4908  22 11 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:490B  22 2F F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:490E  22 4C F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:4911  22 69 F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:4914                      
     167.  00:4914  22 31 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:4917  22 4E F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:491A  22 6B F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:491D                      					    ;also EMPTYSAMORN comment
     171.  00:491D                      
     172.  00:491D                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:491D  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:4920  17                  		RLA
     175.  00:4921  E6 07               		AND 7
     176.  00:4923  21 F3 4D            		LD HL,NT_DATA
     177.  00:4926  D5                  		PUSH DE
     178.  00:4927  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:4928  87                  		ADD A,A
     180.  00:4929  5F                  		LD E,A
     181.  00:492A  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:492B  5E                  		LD E,[HL]
     183.  00:492C  23                  		INC HL
     184.  00:492D  CB 3B               		SRL E
     185.  00:492F  9F                  		SBC A,A
     186.  00:4930  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:4932  32 20 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:4935  3E C9               		LD A,$C9		; RET CODE
     189.  00:4937  32 21 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:493A  EB                  		EX DE,HL
     191.  00:493B  C1                  		POP BC ;BC=T1_
     192.  00:493C  09                  		ADD HL,BC
     193.  00:493D                      
     194.  00:493D  1A                  		LD A,[DE]                           
     195.  00:493E                      
     196.  00:493E  01 03 4E            		LD BC,T_
     197.  00:4941  81                  		ADD A,C
     198.  00:4942  4F                  		LD C,A
     199.  00:4943  88                  		ADC A,B
     200.  00:4944                      
     201.  00:4944  91                  		SUB C
     202.  00:4945  47                  		LD B,A
     203.  00:4946  C5                  		PUSH BC
     204.  00:4947  11 7F F0            		LD DE,NT_
     205.  00:494A  D5                  		PUSH DE
     206.  00:494B                      
     207.  00:494B  06 0C               		LD B,12
     208.  00:494D  C5                  .L1:		PUSH BC
     209.  00:494E  4E                  		LD C,[HL]
     210.  00:494F  23                  		INC HL
     211.  00:4950  E5                  		PUSH HL
     212.  00:4951  46                  		LD B,[HL]
     213.  00:4952                      
     214.  00:4952  D5                  		PUSH DE
     215.  00:4953  EB                  		EX DE,HL
     216.  00:4954  11 17 00            		LD DE,23
     217.  00:4957  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:495A                      
     219.  00:495A  CB 38               .L2:		SRL B
     220.  00:495C  CB 19               		RR C
     221.  00:495E  CD 20 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:4961  79                  		LD A,C
     223.  00:4962  8A                  		ADC A,D	;=ADC 0
     224.  00:4963  77                  		LD [HL],A
     225.  00:4964  23                  		INC HL
     226.  00:4965  78                  		LD A,B
     227.  00:4966  8A                  		ADC A,D
     228.  00:4967  77                  		LD [HL],A
     229.  00:4968  19                  		ADD HL,DE
     230.  00:4969  DD 25               		db $DD,$25	;DEC XH
     231.  00:496B  20 ED               		JR NZ,.L2
     232.  00:496D                      
     233.  00:496D  D1                  		POP DE
     234.  00:496E  13                  		INC DE
     235.  00:496F  13                  		INC DE
     236.  00:4970  E1                  		POP HL
     237.  00:4971  23                  		INC HL
     238.  00:4972  C1                  		POP BC
     239.  00:4973  10 D8               		DJNZ .L1
     240.  00:4975                      
     241.  00:4975  E1                  		POP HL
     242.  00:4976  D1                  		POP DE
     243.  00:4977                      
     244.  00:4977  7B                  		LD A,E
     245.  00:4978  D5                  		PUSH DE
     246.  00:4979  11 0F 4E            		LD DE,TCOLD_1
     247.  00:497C  BB                  		CP E
     248.  00:497D  D1                  		POP DE
     249.  00:497E  20 05               		JR NZ,.CORR_1
     250.  00:4980  3E FD               		LD A,$FD
     251.  00:4982  32 AD F0            		LD [NT_+$2E],A
     252.  00:4985                      
     253.  00:4985  1A                  .CORR_1:	LD A,[DE]
     254.  00:4986  A7                  		AND A
     255.  00:4987  28 11               		JR Z,.TC_EXIT
     256.  00:4989  1F                  		RRA
     257.  00:498A  F5                  		PUSH AF
     258.  00:498B  87                  		ADD A,A
     259.  00:498C  4F                  		LD C,A
     260.  00:498D  09                  		ADD HL,BC
     261.  00:498E  F1                  		POP AF
     262.  00:498F  30 02               		JR NC,.CORR_2
     263.  00:4991  35                  		DEC [HL]
     264.  00:4992  35                  		DEC [HL]
     265.  00:4993  34                  .CORR_2:	INC [HL]
     266.  00:4994  A7                  		AND A
     267.  00:4995  ED 42               		SBC HL,BC
     268.  00:4997  13                  		INC DE
     269.  00:4998  18 EB               		JR .CORR_1
     270.  00:499A                      
     271.  00:499A                      .TC_EXIT:	;POP AF
     272.  00:499A                      
     273.  00:499A                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:499A  21 11 00            		ld	hl,$11
     275.  00:499D  54                  		ld	d,h
     276.  00:499E  5C                  		ld	e,h
     277.  00:499F  DD 21 4F F1         		ld	IX,VT_+16
     278.  00:49A3  06 0F               		ld	b,15
     279.  00:49A5  E5                  .INITV1:	push	hl
     280.  00:49A6  19                  		add	hl,de
     281.  00:49A7  EB                  		ex	de,hl
     282.  00:49A8  ED 62               		sbc	hl,hl
     283.  00:49AA  48                  		ld	c,b
     284.  00:49AB  06 10               		ld	b,16
     285.  00:49AD  7D                  .INITV2:	ld	a,l
     286.  00:49AE  17                  		rla
     287.  00:49AF  7C                  		ld	a,h
     288.  00:49B0  CE 00               		adc	a,0
     289.  00:49B2  DD 77 00            		ld	[ix],a
     290.  00:49B5  DD 23               		inc	ix
     291.  00:49B7  19                  		add	hl,de
     292.  00:49B8  10 F3               		djnz	.INITV2
     293.  00:49BA  E1                  		pop	hl
     294.  00:49BB  7B                  		ld	a,e
     295.  00:49BC  FE 77               		cp	$77
     296.  00:49BE  20 01               		jr	nz,.INITV3
     297.  00:49C0  1C                  		inc	e
     298.  00:49C1  41                  .INITV3:	ld	b,c
     299.  00:49C2  10 E1               		djnz	.INITV1
     300.  00:49C4                      
     301.  00:49C4  C9                  		RET
     302.  00:49C5                      
     303.  00:49C5                      		;pattern decoder
     304.  00:49C5  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:49C9  CD 4F 4B            		CALL SETORN
     306.  00:49CC  0A                  		LD A,[BC]
     307.  00:49CD  03                  		INC BC
     308.  00:49CE  0F                  		RRCA
     309.  00:49CF                      
     310.  00:49CF  87                  PD_SAM:		ADD A,A
     311.  00:49D0  5F                  PD_SAM_:	LD E,A
     312.  00:49D1  16 00               		LD D,0
     313.  00:49D3  2A 04 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:49D6  19                  		ADD HL,DE
     315.  00:49D7  5E                  		LD E,[HL]
     316.  00:49D8  23                  		INC HL
     317.  00:49D9  56                  		LD D,[HL]
     318.  00:49DA  2A 00 F0            		LD HL,[PT3_MODADDR]
     319.  00:49DD  19                  		ADD HL,DE
     320.  00:49DE  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:49E1  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:49E4  18 41               		JR PD_LOOP
     323.  00:49E6                      
     324.  00:49E6  07                  PD_VOL:		RLCA
     325.  00:49E7  07                  		RLCA
     326.  00:49E8  07                  		RLCA
     327.  00:49E9  07                  		RLCA
     328.  00:49EA  DD 77 0B            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:49ED  18 3B               		JR PD_LP2
     330.  00:49EF                      	
     331.  00:49EF  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:49F2  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:49F5  18 33               		JR PD_LP2
     334.  00:49F7                      
     335.  00:49F7  3D                  PD_SorE:	DEC A
     336.  00:49F8  20 07               		JR NZ,PD_ENV
     337.  00:49FA  0A                  		LD A,[BC]
     338.  00:49FB  03                  		INC BC
     339.  00:49FC  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:49FF  18 29               		JR PD_LP2
     341.  00:4A01                      
     342.  00:4A01  CD 33 4B            PD_ENV:		CALL SETENV
     343.  00:4A04  18 24               		JR PD_LP2
     344.  00:4A06                      
     345.  00:4A06  CD 4F 4B            PD_ORN:		CALL SETORN
     346.  00:4A09  18 1C               		JR PD_LOOP
     347.  00:4A0B                             
     348.  00:4A0B  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:4A0E  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4A11  C4 33 4B            		CALL NZ,SETENV
     351.  00:4A14  0A                  		LD A,[BC]
     352.  00:4A15  03                  		INC BC
     353.  00:4A16  18 B8               		JR PD_SAM_
     354.  00:4A18                      
     355.  00:4A18  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:4A1B  32 0E F0            		LD [PT3_PrNote],A
     357.  00:4A1E  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4A21  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4A24  22 0F F0            		LD [PT3_PrSlide],HL
     360.  00:4A27                      
     361.  00:4A27  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:4A2A  0A                  PD_LP2:		LD A,[BC]
     363.  00:4A2B  03                  		INC BC
     364.  00:4A2C  83                  		ADD A,E
     365.  00:4A2D  38 96               		JR C,PD_OrSm
     366.  00:4A2F  82                  		ADD A,D
     367.  00:4A30  28 4A               		JR Z,PD_FIN
     368.  00:4A32  38 9B               		JR C,PD_SAM
     369.  00:4A34  83                  		ADD A,E
     370.  00:4A35  28 25               		JR Z,PD_REL
     371.  00:4A37  38 AD               		JR C,PD_VOL
     372.  00:4A39  83                  		ADD A,E
     373.  00:4A3A  28 B3               		JR Z,PD_EOff
     374.  00:4A3C  38 B9               		JR C,PD_SorE
     375.  00:4A3E  C6 60               		ADD A,96
     376.  00:4A40  38 20               		JR C,PD_NOTE
     377.  00:4A42  83                  		ADD A,E
     378.  00:4A43  38 C1               		JR C,PD_ORN
     379.  00:4A45  82                  		ADD A,D
     380.  00:4A46  38 0F               		JR C,PD_NOIS
     381.  00:4A48  83                  		ADD A,E
     382.  00:4A49  38 C0               		JR C,PD_ESAM
     383.  00:4A4B  87                  		ADD A,A
     384.  00:4A4C  5F                  		LD E,A
     385.  00:4A4D  21 88 2A            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:4A50  19                  		ADD HL,DE
     387.  00:4A51  5E                  		LD E,[HL]
     388.  00:4A52  23                  		INC HL
     389.  00:4A53  56                  		LD D,[HL]
     390.  00:4A54  D5                  		PUSH DE
     391.  00:4A55  18 D0               		JR PD_LOOP
     392.  00:4A57                      
     393.  00:4A57  32 7D F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:4A5A  18 CE               		JR PD_LP2
     395.  00:4A5C                      
     396.  00:4A5C  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:4A60  18 08               		JR PD_RES
     398.  00:4A62                      	
     399.  00:4A62  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:4A65  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:4A69  AF                  		XOR A
     402.  00:4A6A                      
     403.  00:4A6A  ED 73 08 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:4A6E  DD F9               		LD SP,IX
     405.  00:4A70  67                  		LD H,A
     406.  00:4A71  6F                  		LD L,A
     407.  00:4A72  E5                  		PUSH HL
     408.  00:4A73  E5                  		PUSH HL
     409.  00:4A74  E5                  		PUSH HL
     410.  00:4A75  E5                  		PUSH HL
     411.  00:4A76  E5                  		PUSH HL
     412.  00:4A77  E5                  		PUSH HL
     413.  00:4A78  ED 7B 08 F0         		LD SP,[PT3_PDSP]
     414.  00:4A7C                      
     415.  00:4A7C  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:4A7F  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:4A82  C9                  		RET
     418.  00:4A83                      
     419.  00:4A83  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:4A87  0A                  		LD A,[BC]
     421.  00:4A88  03                  		INC BC
     422.  00:4A89                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:4A89                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:4A89  03                  		INC BC
     425.  00:4A8A  03                  		INC BC
     426.  00:4A8B  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:4A8E  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:4A91  11 7F F0            		LD DE,NT_
     429.  00:4A94  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:4A97  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:4A9A  87                  		ADD A,A
     432.  00:4A9B  6F                  		LD L,A
     433.  00:4A9C  26 00               		LD H,0
     434.  00:4A9E  19                  		ADD HL,DE
     435.  00:4A9F  7E                  		LD A,[HL]
     436.  00:4AA0  23                  		INC HL
     437.  00:4AA1  66                  		LD H,[HL]
     438.  00:4AA2  6F                  		LD L,A
     439.  00:4AA3  E5                  		PUSH HL
     440.  00:4AA4  3A 0E F0            		LD A,[PT3_PrNote]
     441.  00:4AA7  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:4AAA  87                  		ADD A,A
     443.  00:4AAB  6F                  		LD L,A
     444.  00:4AAC  26 00               		LD H,0
     445.  00:4AAE  19                  		ADD HL,DE
     446.  00:4AAF  5E                  		LD E,[HL]
     447.  00:4AB0  23                  		INC HL
     448.  00:4AB1  56                  		LD D,[HL]
     449.  00:4AB2  E1                  		POP HL
     450.  00:4AB3  ED 52               		SBC HL,DE
     451.  00:4AB5  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:4AB8  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:4ABB  ED 5B 0F F0         		LD DE,[PT3_PrSlide]
     454.  00:4ABF  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4AC2  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4AC5  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4AC6  03                  		INC BC
     458.  00:4AC7  08                  		EX AF,AF'
     459.  00:4AC8  0A                  		LD A,[BC]
     460.  00:4AC9  03                  		INC BC
     461.  00:4ACA  A7                  		AND A
     462.  00:4ACB  28 01               		JR Z,.NOSIG
     463.  00:4ACD  EB                  		EX DE,HL
     464.  00:4ACE  ED 52               .NOSIG:	SBC HL,DE
     465.  00:4AD0  F2 D8 4A            		JP P,SET_STP
     466.  00:4AD3  2F                  		CPL
     467.  00:4AD4  08                  		EX AF,AF'
     468.  00:4AD5  ED 44               		NEG
     469.  00:4AD7  08                  		EX AF,AF'
     470.  00:4AD8  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:4ADB  08                  		EX AF,AF'
     472.  00:4ADC  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:4ADF  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4AE3  C9                  		RET
     475.  00:4AE4                      
     476.  00:4AE4  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4AE8  0A                  		LD A,[BC]
     478.  00:4AE9  03                  		INC BC
     479.  00:4AEA  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:4AED  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:4AF0  0A                  		LD A,[BC]
     482.  00:4AF1  03                  		INC BC
     483.  00:4AF2  08                  		EX AF,AF'
     484.  00:4AF3  0A                  		LD A,[BC]
     485.  00:4AF4  03                  		INC BC
     486.  00:4AF5  18 E1               		JR SET_STP
     487.  00:4AF7                      
     488.  00:4AF7  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4AF8  03                  		INC BC
     490.  00:4AF9  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:4AFC  C9                  		RET
     492.  00:4AFD                      
     493.  00:4AFD  0A                  C_ORPOS:	LD A,[BC]
     494.  00:4AFE  03                  		INC BC
     495.  00:4AFF  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4B02  C9                  		RET
     497.  00:4B03                      
     498.  00:4B03  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4B04  03                  		INC BC
     500.  00:4B05  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4B08  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:4B0B  0A                  		LD A,[BC]
     503.  00:4B0C  03                  		INC BC
     504.  00:4B0D  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:4B10  AF                  		XOR A
     506.  00:4B11  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4B14  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4B17  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4B1A  C9                  		RET
     510.  00:4B1B                      
     511.  00:4B1B  0A                  C_ENGLS:	LD A,[BC]
     512.  00:4B1C  03                  		INC BC
     513.  00:4B1D  32 1D F0            		LD [PT3_Env_Del],A
     514.  00:4B20  32 7C F0            		LD [CurEDel],A
     515.  00:4B23  0A                  		LD A,[BC]
     516.  00:4B24  03                  		INC BC
     517.  00:4B25  6F                  		LD L,A
     518.  00:4B26  0A                  		LD A,[BC]
     519.  00:4B27  03                  		INC BC
     520.  00:4B28  67                  		LD H,A
     521.  00:4B29  22 1E F0            		LD [PT3_ESldAdd],HL
     522.  00:4B2C  C9                  		RET
     523.  00:4B2D                      
     524.  00:4B2D  0A                  C_DELAY:	LD A,[BC]
     525.  00:4B2E  03                  		INC BC
     526.  00:4B2F  32 1B F0            		LD [PT3_Delay],A
     527.  00:4B32  C9                  		RET
     528.  00:4B33                      	
     529.  00:4B33  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4B36  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:4B39  0A                  		LD A,[BC]
     532.  00:4B3A  03                  		INC BC
     533.  00:4B3B  67                  		LD H,A
     534.  00:4B3C  0A                  		LD A,[BC]
     535.  00:4B3D  03                  		INC BC
     536.  00:4B3E  6F                  		LD L,A
     537.  00:4B3F  22 4D F1            		LD [EnvBase],HL
     538.  00:4B42  AF                  		XOR A
     539.  00:4B43  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4B46  32 7C F0            		LD [CurEDel],A
     541.  00:4B49  67                  		LD H,A
     542.  00:4B4A  6F                  		LD L,A
     543.  00:4B4B  22 7A F0            		LD [CurESld],HL
     544.  00:4B4E  C9                  C_NOP:		RET
     545.  00:4B4F                      
     546.  00:4B4F  87                  SETORN:		ADD A,A
     547.  00:4B50  5F                  		LD E,A
     548.  00:4B51  16 00               		LD D,0
     549.  00:4B53  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4B56  2A 06 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:4B59  19                  		ADD HL,DE
     552.  00:4B5A  5E                  		LD E,[HL]
     553.  00:4B5B  23                  		INC HL
     554.  00:4B5C  56                  		LD D,[HL]
     555.  00:4B5D  2A 00 F0            		LD HL,[PT3_MODADDR]
     556.  00:4B60  19                  		ADD HL,DE
     557.  00:4B61  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:4B64  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:4B67  C9                  		RET
     560.  00:4B68                      
     561.  00:4B68                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:4B68  4E 4B               SPCCOMS:	dw C_NOP
     563.  00:4B6A  E4 4A               		dw C_GLISS
     564.  00:4B6C  83 4A               		dw C_PORTM
     565.  00:4B6E  F7 4A               		dw C_SMPOS
     566.  00:4B70  FD 4A               		dw C_ORPOS
     567.  00:4B72  03 4B               		dw C_VIBRT
     568.  00:4B74  4E 4B               		dw C_NOP
     569.  00:4B76  4E 4B               		dw C_NOP
     570.  00:4B78  1B 4B               		dw C_ENGLS
     571.  00:4B7A  2D 4B               		dw C_DELAY
     572.  00:4B7C  4E 4B               		dw C_NOP
     573.  00:4B7E  4E 4B               		dw C_NOP
     574.  00:4B80  4E 4B               		dw C_NOP
     575.  00:4B82  4E 4B               		dw C_NOP
     576.  00:4B84  4E 4B               		dw C_NOP
     577.  00:4B86  4E 4B               		dw C_NOP
     578.  00:4B88                      
     579.  00:4B88  AF                  CHREGS:		XOR A
     580.  00:4B89  32 49 F1            		LD [AYREGS+AR_AmplC],A
     581.  00:4B8C  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:4B90  E5                  		PUSH HL
     583.  00:4B91  CA B7 4C            		JP Z,.CH_EXIT
     584.  00:4B94  ED 73 0A F0         		LD [PT3_CSP],SP
     585.  00:4B98  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:4B9B  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:4B9E  F9                  		LD SP,HL
     588.  00:4B9F  D1                  		POP DE
     589.  00:4BA0  67                  		LD H,A
     590.  00:4BA1  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:4BA4  6F                  		LD L,A
     592.  00:4BA5  39                  		ADD HL,SP
     593.  00:4BA6  3C                  		INC A
     594.  00:4BA7  BA                  		CP D
     595.  00:4BA8  38 01               		JR C,.CH_ORPS
     596.  00:4BAA  7B                  		LD A,E
     597.  00:4BAB  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:4BAE  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:4BB1  86                  		ADD A,[HL]
     600.  00:4BB2  F2 B6 4B            		JP P,.CH_NTP
     601.  00:4BB5  AF                  		XOR A
     602.  00:4BB6  FE 60               .CH_NTP:	CP 96
     603.  00:4BB8  38 02               		JR C,.CH_NOK
     604.  00:4BBA  3E 5F               		LD A,95
     605.  00:4BBC  87                  .CH_NOK:	ADD A,A
     606.  00:4BBD  08                  		EX AF,AF'
     607.  00:4BBE  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4BC1  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4BC4  F9                  		LD SP,HL
     610.  00:4BC5  D1                  		POP DE
     611.  00:4BC6  26 00               		LD H,0
     612.  00:4BC8  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4BCB  47                  		LD B,A
     614.  00:4BCC  87                  		ADD A,A
     615.  00:4BCD  87                  		ADD A,A
     616.  00:4BCE  6F                  		LD L,A
     617.  00:4BCF  39                  		ADD HL,SP
     618.  00:4BD0  F9                  		LD SP,HL
     619.  00:4BD1  78                  		LD A,B
     620.  00:4BD2  3C                  		INC A
     621.  00:4BD3  BA                  		CP D
     622.  00:4BD4  38 01               		JR C,.CH_SMPS
     623.  00:4BD6  7B                  		LD A,E
     624.  00:4BD7  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4BDA  C1                  		POP BC
     626.  00:4BDB  E1                  		POP HL
     627.  00:4BDC  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4BDF  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4BE2  19                  		ADD HL,DE
     630.  00:4BE3  CB 70               		BIT 6,B
     631.  00:4BE5  28 06               		JR Z,.CH_NOAC
     632.  00:4BE7  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4BEA  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4BED  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4BEE  08                  		EX AF,AF'
     636.  00:4BEF  6F                  		LD L,A
     637.  00:4BF0  26 00               		LD H,0
     638.  00:4BF2  31 7F F0            		LD SP,NT_
     639.  00:4BF5  39                  		ADD HL,SP
     640.  00:4BF6  F9                  		LD SP,HL
     641.  00:4BF7  E1                  		POP HL
     642.  00:4BF8  19                  		ADD HL,DE
     643.  00:4BF9  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4BFC  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4BFF  19                  		ADD HL,DE
     646.  00:4C00  ED 7B 0A F0         		LD SP,[PT3_CSP]
     647.  00:4C04  E3                  		EX [SP],HL
     648.  00:4C05  AF                  		XOR A
     649.  00:4C06  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4C09  28 3E               		JR Z,.CH_AMP
     651.  00:4C0B  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4C0E  20 39               		JR NZ,.CH_AMP
     653.  00:4C10  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4C13  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4C16  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4C19  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4C1C  7C                  		LD A,H
     658.  00:4C1D  19                  		ADD HL,DE
     659.  00:4C1E  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4C21  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4C24  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4C28  20 1F               		JR NZ,.CH_AMP
     663.  00:4C2A  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4C2D  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4C30  A7                  		AND A
     666.  00:4C31  28 01               		JR Z,.CH_STPP
     667.  00:4C33  EB                  		EX DE,HL
     668.  00:4C34  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4C36  FA 49 4C            		JP M,.CH_AMP
     670.  00:4C39  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4C3C  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4C3F  AF                  		XOR A
     673.  00:4C40  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4C43  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4C46  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4C49  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4C4C  CB 79               		BIT 7,C
     678.  00:4C4E  28 13               		JR Z,.CH_NOAM
     679.  00:4C50  CB 71               		BIT 6,C
     680.  00:4C52  28 07               		JR Z,.CH_AMIN
     681.  00:4C54  FE 0F               		CP 15
     682.  00:4C56  28 0B               		JR Z,.CH_NOAM
     683.  00:4C58  3C                  		INC A
     684.  00:4C59  18 05               		JR .CH_SVAM
     685.  00:4C5B  FE F1               .CH_AMIN:	CP -15
     686.  00:4C5D  28 04               		JR Z,.CH_NOAM
     687.  00:4C5F  3D                  		DEC A
     688.  00:4C60  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4C63  6F                  .CH_NOAM:	LD L,A
     690.  00:4C64  78                  		LD A,B
     691.  00:4C65  E6 0F               		AND 15
     692.  00:4C67  85                  		ADD A,L
     693.  00:4C68  F2 6C 4C            		JP P,.CH_APOS
     694.  00:4C6B  AF                  		XOR A
     695.  00:4C6C  FE 10               .CH_APOS:	CP 16
     696.  00:4C6E  38 02               		JR C,.CH_VOL
     697.  00:4C70  3E 0F               		LD A,15
     698.  00:4C72  DD B6 17            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4C75  6F                  		LD L,A
     700.  00:4C76  26 00               		LD H,0
     701.  00:4C78  11 3F F1            		LD DE,VT_
     702.  00:4C7B  19                  		ADD HL,DE
     703.  00:4C7C  7E                  		LD A,[HL]
     704.  00:4C7D  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4C7F  20 03               		JR NZ,.CH_NOEN
     706.  00:4C81  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4C84  32 49 F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4C87  CB 78               		BIT 7,B
     709.  00:4C89  79                  		LD A,C
     710.  00:4C8A  28 19               		JR Z,.NO_ENSL
     711.  00:4C8C  17                  		RLA
     712.  00:4C8D  17                  		RLA
     713.  00:4C8E  CB 2F               		SRA A
     714.  00:4C90  CB 2F               		SRA A
     715.  00:4C92  CB 2F               		SRA A
     716.  00:4C94  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4C97  CB 68               		BIT 5,B
     718.  00:4C99  28 03               		JR Z,.NO_ENAC
     719.  00:4C9B  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4C9E  21 1C F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4CA1  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4CA2                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4CA2  77                  		LD [HL],A
     724.  00:4CA3  18 0E               		JR .CH_MIX
     725.  00:4CA5  1F                  .NO_ENSL:	RRA
     726.  00:4CA6  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4CA9  32 7E F0            		LD [AddToNs],A
     728.  00:4CAC  CB 68               		BIT 5,B
     729.  00:4CAE  28 03               		JR Z,.CH_MIX
     730.  00:4CB0  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4CB3  78                  .CH_MIX:	LD A,B
     732.  00:4CB4  1F                  		RRA
     733.  00:4CB5  E6 48               		AND $48
     734.  00:4CB7  21 46 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4CBA  B6                  		OR [HL]
     736.  00:4CBB  0F                  		RRCA
     737.  00:4CBC  77                  		LD [HL],A
     738.  00:4CBD  E1                  		POP HL
     739.  00:4CBE  AF                  		XOR A
     740.  00:4CBF  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4CC2  C8                  		RET Z
     742.  00:4CC3  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4CC6  C0                  		RET NZ
     744.  00:4CC7  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4CCA  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4CCD  1F                  		RRA
     747.  00:4CCE  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4CD1  38 03               		JR C,.CH_ONDL
     749.  00:4CD3  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4CD6  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4CD9  C9                  		RET
     752.  00:4CDA                      
     753.  00:4CDA  AF                  PT3_PLAY:	XOR A
     754.  00:4CDB  32 1C F0            		LD [PT3_AddToEn],A
     755.  00:4CDE  32 46 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:4CE1  3D                  		DEC A
     757.  00:4CE2  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:4CE5  21 79 F0            		LD HL,DelyCnt
     759.  00:4CE8  35                  		DEC [HL]
     760.  00:4CE9  C2 70 4D            		JP NZ,.PL2
     761.  00:4CEC  21 3D F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4CEF  35                  		DEC [HL]
     763.  00:4CF0  20 4E               		JR NZ,.PL1B
     764.  00:4CF2  ED 4B 11 F0         		LD BC,[PT3_AdInPtA]
     765.  00:4CF6  0A                  		LD A,[BC]
     766.  00:4CF7  A7                  		AND A
     767.  00:4CF8  20 3B               		JR NZ,.PL1A
     768.  00:4CFA  57                  		LD D,A
     769.  00:4CFB  32 7D F0            		LD [Ns_Base],A
     770.  00:4CFE  2A 02 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:4D01  23                  		INC HL
     772.  00:4D02  7E                  		LD A,[HL]
     773.  00:4D03  3C                  		INC A
     774.  00:4D04  20 08               		JR NZ,.PLNLP
     775.  00:4D06  CD 70 48            		CALL CHECKLP
     776.  00:4D09  2A 17 F0            		LD HL,[PT3_LPosPtr]
     777.  00:4D0C  7E                  		LD A,[HL]
     778.  00:4D0D  3C                  		INC A
     779.  00:4D0E  22 02 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4D11  3D                  		DEC A
     781.  00:4D12  87                  		ADD A,A
     782.  00:4D13  5F                  		LD E,A
     783.  00:4D14  CB 12               		RL D
     784.  00:4D16  2A 19 F0            		LD HL,[PT3_PatsPtr]
     785.  00:4D19  19                  		ADD HL,DE
     786.  00:4D1A  ED 5B 00 F0         		LD DE,[PT3_MODADDR]
     787.  00:4D1E  ED 73 0C F0         		LD [PT3_PSP],SP
     788.  00:4D22  F9                  		LD SP,HL
     789.  00:4D23  E1                  		POP HL
     790.  00:4D24  19                  		ADD HL,DE
     791.  00:4D25  44                  		LD B,H
     792.  00:4D26  4D                  		LD C,L
     793.  00:4D27  E1                  		POP HL
     794.  00:4D28  19                  		ADD HL,DE
     795.  00:4D29  22 13 F0            		LD [PT3_AdInPtB],HL
     796.  00:4D2C  E1                  		POP HL
     797.  00:4D2D  19                  		ADD HL,DE
     798.  00:4D2E  22 15 F0            		LD [PT3_AdInPtC],HL
     799.  00:4D31  ED 7B 0C F0         		LD SP,[PT3_PSP]
     800.  00:4D35                      
     801.  00:4D35  DD 21 2E F0         .PL1A:		LD IX,ChanA+12
     802.  00:4D39  CD 18 4A            		CALL PTDECOD
     803.  00:4D3C  ED 43 11 F0         		LD [PT3_AdInPtA],BC
     804.  00:4D40                      
     805.  00:4D40  21 5A F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4D43  35                  		DEC [HL]
     807.  00:4D44  20 0F               		JR NZ,.PL1C
     808.  00:4D46  DD 21 4B F0         		LD IX,ChanB+12
     809.  00:4D4A  ED 4B 13 F0         		LD BC,[PT3_AdInPtB]
     810.  00:4D4E  CD 18 4A            		CALL PTDECOD
     811.  00:4D51  ED 43 13 F0         		LD [PT3_AdInPtB],BC
     812.  00:4D55                      
     813.  00:4D55  21 77 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4D58  35                  		DEC [HL]
     815.  00:4D59  20 0F               		JR NZ,.PL1D
     816.  00:4D5B  DD 21 68 F0         		LD IX,ChanC+12
     817.  00:4D5F  ED 4B 15 F0         		LD BC,[PT3_AdInPtC]
     818.  00:4D63  CD 18 4A            		CALL PTDECOD
     819.  00:4D66  ED 43 15 F0         		LD [PT3_AdInPtC],BC
     820.  00:4D6A                      
     821.  00:4D6A  3A 1B F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:4D6D  32 79 F0            		LD [DelyCnt],A
     823.  00:4D70                      
     824.  00:4D70  DD 21 22 F0         .PL2:		LD IX,ChanA
     825.  00:4D74  2A 3F F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:4D77  CD 88 4B            		CALL CHREGS
     827.  00:4D7A  22 3F F1            		LD [AYREGS+AR_TonA],HL
     828.  00:4D7D  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:4D80  32 47 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:4D83  DD 21 3F F0         		LD IX,ChanB
     831.  00:4D87  2A 41 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:4D8A  CD 88 4B            		CALL CHREGS
     833.  00:4D8D  22 41 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:4D90  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:4D93  32 48 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:4D96  DD 21 5C F0         		LD IX,ChanC
     837.  00:4D9A  2A 43 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:4D9D  CD 88 4B            		CALL CHREGS
     839.  00:4DA0  22 43 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:4DA3                      
     841.  00:4DA3  2A 7D F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:4DA6  7C                  		LD A,H
     843.  00:4DA7  85                  		ADD A,L
     844.  00:4DA8  32 45 F1            		LD [AYREGS+AR_Noise],A
     845.  00:4DAB                      
     846.  00:4DAB  3A 1C F0            		LD A,[PT3_AddToEn]
     847.  00:4DAE  5F                  		LD E,A
     848.  00:4DAF  87                  		ADD A,A
     849.  00:4DB0  9F                  		SBC A,A
     850.  00:4DB1  57                  		LD D,A
     851.  00:4DB2  2A 4D F1            		LD HL,[EnvBase]
     852.  00:4DB5  19                  		ADD HL,DE
     853.  00:4DB6  ED 5B 7A F0         		LD DE,[CurESld]
     854.  00:4DBA  19                  		ADD HL,DE
     855.  00:4DBB  22 4A F1            		LD [AYREGS+AR_Env],HL
     856.  00:4DBE                      
     857.  00:4DBE  AF                  		XOR A
     858.  00:4DBF  21 7C F0            		LD HL,CurEDel
     859.  00:4DC2  B6                  		OR [HL]
     860.  00:4DC3  C8                  		RET Z
     861.  00:4DC4  35                  		DEC [HL]
     862.  00:4DC5  C0                  		RET NZ
     863.  00:4DC6  3A 1D F0            		LD A,[PT3_Env_Del]
     864.  00:4DC9  77                  		LD [HL],A
     865.  00:4DCA  2A 1E F0            		LD HL,[PT3_ESldAdd]
     866.  00:4DCD  19                  		ADD HL,DE
     867.  00:4DCE  22 7A F0            		LD [CurESld],HL
     868.  00:4DD1  C9                  		RET
     869.  00:4DD2                      
     870.  00:4DD2  AF                  PT3_ROUT:	XOR A
     871.  00:4DD3                      	
     872.  00:4DD3                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:4DD3  21 46 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:4DD6  CB FE               		set	7,[hl]
     875.  00:4DD8  CB B6               		res	6,[hl]
     876.  00:4DDA                      
     877.  00:4DDA  0E A0               		LD C,$A0
     878.  00:4DDC  21 3F F1            		LD HL,AYREGS
     879.  00:4DDF  ED 79               .LOUT:		OUT [C],A
     880.  00:4DE1  0C                  		INC C
     881.  00:4DE2  ED A3               		OUTI 
     882.  00:4DE4  0D                  		DEC C
     883.  00:4DE5  3C                  		INC A
     884.  00:4DE6  FE 0D               		CP 13
     885.  00:4DE8  20 F5               		JR NZ,.LOUT
     886.  00:4DEA  ED 79               		OUT [C],A
     887.  00:4DEC  7E                  		LD A,[HL]
     888.  00:4DED  A7                  		AND A
     889.  00:4DEE  F8                  		RET M
     890.  00:4DEF  0C                  		INC C
     891.  00:4DF0  ED 79               		OUT [C],A
     892.  00:4DF2  C9                  		RET
     893.  00:4DF3                      
     894.  00:4DF3  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:4DF4  2A                  		db TCNEW_0-T_
     896.  00:4DF5  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:4DF6  00                  		db TCOLD_0-T_
     898.  00:4DF7  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:4DF8  0C                  		db TCNEW_1-T_
     900.  00:4DF9  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:4DFA  0C                  		db TCOLD_1-T_
     902.  00:4DFB  94                  		db (T_NEW_2-T1_)*2
     903.  00:4DFC  35                  		db TCNEW_2-T_
     904.  00:4DFD  30                  		db (T_OLD_2-T1_)*2
     905.  00:4DFE  0E                  		db TCOLD_2-T_
     906.  00:4DFF  60                  		db (T_NEW_3-T1_)*2
     907.  00:4E00  20                  		db TCNEW_3-T_
     908.  00:4E01  60                  		db (T_OLD_3-T1_)*2
     909.  00:4E02  21                  		db TCOLD_3-T_
     910.  00:4E03                      
     911.  00:4E03                      T_:
     912.  00:4E03                      
     913.  00:4E03                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:4E03  01 05 09 0B 0D 0F 13 15 
     914.  00:4E0B  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:4E0F                      TCNEW_1:	
     916.  00:4E0F  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:4E11                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:4E11  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:4E1A                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:4E1A  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:4E23  57                  TCNEW_3:	db $56+1
     920.  00:4E24                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:4E24  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:4E2D                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:4E2D  1D 21 23 27 2B 2D 31 55 
     922.  00:4E35  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:4E38                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:4E38  1B 21 25 29 2B 3B 4D 5F 
     924.  00:4E40  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:4E43                      
     926.  00:4E43  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:4E47                      
     928.  00:4E47                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:4E47  0D                  		db ($06EC*2)/256
     930.  00:4E48  D8                  		db #d8
     931.  00:4E49  69                  		db $0755-$06EC
     932.  00:4E4A  70                  		db $07C5-$0755
     933.  00:4E4B  76                  		db $083B-$07C5
     934.  00:4E4C  7D                  		db $08B8-$083B
     935.  00:4E4D  85                  		db $093D-$08B8
     936.  00:4E4E  8D                  		db $09CA-$093D
     937.  00:4E4F  95                  		db $0A5F-$09CA
     938.  00:4E50  9D                  		db $0AFC-$0A5F
     939.  00:4E51  A8                  		db $0BA4-$0AFC
     940.  00:4E52  B1                  		db $0C55-$0BA4
     941.  00:4E53  BB                  		db $0D10-$0C55
     942.  00:4E54  0C                  		db ($066D*2)/256
     943.  00:4E55  DA                  		db #da
     944.  00:4E56  62                  		db $06CF-$066D
     945.  00:4E57  68                  		db $0737-$06CF
     946.  00:4E58  6D                  		db $07A4-$0737
     947.  00:4E59  75                  		db $0819-$07A4
     948.  00:4E5A  7B                  		db $0894-$0819
     949.  00:4E5B  83                  		db $0917-$0894
     950.  00:4E5C  8A                  		db $09A1-$0917
     951.  00:4E5D  92                  		db $0A33-$09A1
     952.  00:4E5E  9C                  		db $0ACF-$0A33
     953.  00:4E5F  A4                  		db $0B73-$0ACF
     954.  00:4E60  AF                  		db $0C22-$0B73
     955.  00:4E61  B8                  		db $0CDA-$0C22
     956.  00:4E62  0E                  		db ($0704*2)/256
     957.  00:4E63  08                  		db #08
     958.  00:4E64  6A                  		db $076E-$0704
     959.  00:4E65  72                  		db $07E0-$076E
     960.  00:4E66  78                  		db $0858-$07E0
     961.  00:4E67  7E                  		db $08D6-$0858
     962.  00:4E68  86                  		db $095C-$08D6
     963.  00:4E69  90                  		db $09EC-$095C
     964.  00:4E6A  96                  		db $0A82-$09EC
     965.  00:4E6B  A0                  		db $0B22-$0A82
     966.  00:4E6C  AA                  		db $0BCC-$0B22
     967.  00:4E6D  B4                  		db $0C80-$0BCC
     968.  00:4E6E  BE                  		db $0D3E-$0C80
     969.  00:4E6F  0F                  		db ($07E0*2)/256
     970.  00:4E70  C0                  		db #c0
     971.  00:4E71  78                  		db $0858-$07E0
     972.  00:4E72  88                  		db $08E0-$0858
     973.  00:4E73  80                  		db $0960-$08E0
     974.  00:4E74  90                  		db $09F0-$0960
     975.  00:4E75  98                  		db $0A88-$09F0
     976.  00:4E76  A0                  		db $0B28-$0A88
     977.  00:4E77  B0                  		db $0BD8-$0B28
     978.  00:4E78  A8                  		db $0C80-$0BD8
     979.  00:4E79  E0                  		db $0D60-$0C80
     980.  00:4E7A  B0                  		db $0E10-$0D60
     981.  00:4E7B  E8                  		db $0EF8-$0E10
     982.  00:4E7C                      
     983.  00:4E7C                      
     984.  00:4E7C                      	;Variables del replayer... las coloco desde aqui.
     985.  00:4E7C                      	;mirar que hace la directiva MAP del SJASM
     986.  00:4E7C  (F000)              	map		#F000
     987.  00:4E7C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     988.  00:4E7C  (00:F000)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
     989.  00:4E7C                                          ;bit7 is set each time, when loop point is passed
     990.  00:4E7C  (00:F000)           PT3_MODADDR:	#2
     991.  00:4E7C  (00:F002)           PT3_CrPsPtr:		#2
     992.  00:4E7C  (00:F004)           PT3_SAMPTRS:		#2
     993.  00:4E7C  (00:F006)           PT3_OrnPtrs:		#2
     994.  00:4E7C  (00:F008)           PT3_PDSP:		#2
     995.  00:4E7C  (00:F00A)           PT3_CSP:		#2 
     996.  00:4E7C  (00:F00C)           PT3_PSP:		#2
     997.  00:4E7C  (00:F00E)           PT3_PrNote:		#1
     998.  00:4E7C  (00:F00F)           PT3_PrSlide:		#2
     999.  00:4E7C  (00:F011)           PT3_AdInPtA:		#2
    1000.  00:4E7C  (00:F013)           PT3_AdInPtB:		#2
    1001.  00:4E7C  (00:F015)           PT3_AdInPtC:		#2
    1002.  00:4E7C  (00:F017)           PT3_LPosPtr:		#2
    1003.  00:4E7C  (00:F019)           PT3_PatsPtr:		#2
    1004.  00:4E7C  (00:F01B)           PT3_Delay:		#1
    1005.  00:4E7C  (00:F01C)           PT3_AddToEn:		#1
    1006.  00:4E7C  (00:F01D)           PT3_Env_Del:		#1
    1007.  00:4E7C  (00:F01E)           PT3_ESldAdd:		#2
    1008.  00:4E7C  (00:F020)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1009.  00:4E7C                      
    1010.  00:4E7C  (00:F022)           VARS:			#0
    1011.  00:4E7C                      
    1012.  00:4E7C  (00:F022)           ChanA:			#29			;CHNPRM_Size
    1013.  00:4E7C  (00:F03F)           ChanB:			#29			;CHNPRM_Size
    1014.  00:4E7C  (00:F05C)           ChanC:			#29			;CHNPRM_Size
    1015.  00:4E7C                      
    1016.  00:4E7C                      ;GlobalVars
    1017.  00:4E7C  (00:F079)           DelyCnt:		#1
    1018.  00:4E7C  (00:F07A)           CurESld:		#2
    1019.  00:4E7C  (00:F07C)           CurEDel:		#1
    1020.  00:4E7C  (00:F07D)           Ns_Base_AddToNs:	#0
    1021.  00:4E7C  (00:F07D)           Ns_Base:		#1
    1022.  00:4E7C  (00:F07E)           AddToNs:		#1
    1023.  00:4E7C                      
    1024.  00:4E7C  (00:F07F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1025.  00:4E7C                      
    1026.  00:4E7C  (00:F13F)           AYREGS:			#0
    1027.  00:4E7C  (00:F13F)           VT_:			#14
    1028.  00:4E7C  (00:F14D)           EnvBase:		#2
    1029.  00:4E7C  (00:F14F)           VAR0END:		#0
    1030.  00:4E7C                      
    1031.  00:4E7C  (00:F14F)           T1_:			#0		
    1032.  00:4E7C  (00:F14F)           T_NEW_1:		#0
    1033.  00:4E7C  (00:F14F)           T_OLD_1:		#24
    1034.  00:4E7C  (00:F167)           T_OLD_2:		#24
    1035.  00:4E7C  (00:F17F)           T_NEW_3:		#0
    1036.  00:4E7C  (00:F17F)           T_OLD_3:		#2
    1037.  00:4E7C  (00:F181)           T_OLD_0:		#0
    1038.  00:4E7C  (00:F181)           T_NEW_0:		#24
    1039.  00:4E7C  (00:F199)           T_NEW_2:		#166
    1040.  00:4E7C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
    1041.  00:4E7C  (0000)                  ENDMAP
      30   00:4E7C                      ; AFX
      31   00:4E7C                          include "include\ayFX-ROM.ASM"
       1.  00:4E7C                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:4E7C                      
       3.  00:4E7C                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:4E7C                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:4E7C                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:4E7C                      		; --- v1.2f/r	ayFX bank support
       7.  00:4E7C                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:4E7C                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:4E7C                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:4E7C                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:4E7C                      		; --- v1.0	Initial release
      12.  00:4E7C                      
      13.  00:4E7C                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:4E7C                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:4E7C  (00:0000)           AYFXRELATIVE: 	equ 0
      16.  00:4E7C                      
      17.  00:4E7C                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:4E7C                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:4E7C  22 B7 C3            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:4E7F  AF                  		xor	a				; a:=0
      21.  00:4E80  32 B6 C3            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:4E83  3C                  		inc	a				; Starting channel (=1)
      23.  00:4E84  32 C0 C3            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:4E87                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:4E87  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:4E89  32 B9 C3            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:4E8C  C9                  		ret					; Return
      28.  00:4E8D                      
      29.  00:4E8D                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:4E8D                      		; --- INPUT: A -> sound to be played ---
      31.  00:4E8D                      		; ---        C -> sound priority     ---
      32.  00:4E8D  C5                  		push	bc				; Store bc in stack
      33.  00:4E8E  D5                  		push	de				; Store de in stack
      34.  00:4E8F  E5                  		push	hl				; Store hl in stack
      35.  00:4E90                      		; --- Check if the index is in the bank ---
      36.  00:4E90  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:4E91  2A B7 C3            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:4E94  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:4E95  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:4E96  28 06               		jr	z,.CHECK_PRI			; ...goto @@CHECK_PRI
      41.  00:4E98                      		; The bank has less than 256 samples
      42.  00:4E98  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:4E99  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:4E9A  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:4E9C  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:4E9E                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:4E9E                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:4E9E  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:4E9F  3A B9 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:4EA2  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:4EA3  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:4EA5  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:4EA7                      		; --- Set new priority ---
      54.  00:4EA7  79                  		ld	a,c				; a:=New priority
      55.  00:4EA8  E6 0F               		and	$0F				; We mask the priority
      56.  00:4EAA  32 B9 C3            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:4EAD                      
      58.  00:4EAD                      		IF ( AYFXRELATIVE == 1 )
      59.  00:4EAD                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:4EAD                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:4EAD                    ~ 			ld	a,15				; a:=15
      62.  00:4EAD                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:4EAD                    ~ 			jr	z,@@INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:4EAD                    ~ 			add	a,a				; a:=a*2
      65.  00:4EAD                    ~ 			add	a,a				; a:=a*4
      66.  00:4EAD                    ~ 			add	a,a				; a:=a*8
      67.  00:4EAD                    ~ 			add	a,a				; a:=a*16
      68.  00:4EAD                    ~ 			ld	e,a				; e:=a
      69.  00:4EAD                    ~ 			ld	d,0				; de:=a
      70.  00:4EAD                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:4EAD                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:4EAD                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:4EAD                    ~ 		ENDIF
      74.  00:4EAD                      
      75.  00:4EAD                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:4EAD  ED 5B B7 C3         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:4EB1  13                  		inc	de				; de points to the increments table of the bank
      78.  00:4EB2  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:4EB3  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:4EB5  29                  		add	hl,hl				; hl:=hl*2
      81.  00:4EB6  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:4EB7  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:4EB8  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:4EB9  56                  		ld	d,[hl]				; de:=increment
      85.  00:4EBA  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:4EBB  22 BA C3            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:4EBE  AF                  		xor	a				; a:=0 (no errors)
      88.  00:4EBF  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:4EC0  D1                  		pop	de				; Retrieve de from stack
      90.  00:4EC1  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:4EC2  C9                  		ret					; Return
      92.  00:4EC3                      
      93.  00:4EC3                      		IF ( AYFXRELATIVE == 1 )
      94.  00:4EC3                    ~ 	.INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:4EC3                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:4EC3                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:4EC3                    ~ 			jr	.INIT_END			; Jumps to @@INIT_END
      98.  00:4EC3                    ~ 		ENDIF
      99.  00:4EC3                      
     100.  00:4EC3                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:4EC3  3A B9 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:4EC6  B7                  		or	a				; If priority has bit 7 on...
     103.  00:4EC7  F8                  		ret	m				; ...return
     104.  00:4EC8                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:4EC8  3A B6 C3            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:4ECB  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:4ECD  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:4ECF  21 C0 C3            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:4ED2  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:4ED3  20 02               		jr	nz,.TAKECB			; If not zero jump to @@TAKECB
     111.  00:4ED5  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:4ED7                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:4ED7  2A BA C3            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:4EDA  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:4EDB  23                  		inc	hl				; Increment pointer
     116.  00:4EDC                      		; --- Check if there's new tone on stream ---
     117.  00:4EDC  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:4EDE  28 08               		jr	z,.CHECK_NN			; ...jump to @@CHECK_NN (no new tone)
     119.  00:4EE0                      		; --- Extract new tone from stream ---
     120.  00:4EE0  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:4EE1  23                  		inc	hl				; Increment pointer
     122.  00:4EE2  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:4EE3  23                  		inc	hl				; Increment pointer
     124.  00:4EE4  ED 53 BC C3         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:4EE8                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:4EE8  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:4EEA  28 09               		jr	z,.SETPOINTER			; ...jump to @@SETPOINTER (no new noise)
     128.  00:4EEC                      		; --- Extract new noise from stream ---
     129.  00:4EEC  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:4EED  23                  		inc	hl				; Increment pointer
     131.  00:4EEE  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:4EF0  28 95               		jr	z,ayFX_END			; ...jump to ayFX_END
     133.  00:4EF2  32 BE C3            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:4EF5                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:4EF5  22 BA C3            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:4EF8                      		; --- Extract volume ---
     137.  00:4EF8  79                  		ld	a,c				; a:=Control byte
     138.  00:4EF9  E6 0F               		and	$0F				; lower nibble
     139.  00:4EFB                      
     140.  00:4EFB                      		IF ( AYFXRELATIVE == 1 )
     141.  00:4EFB                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:4EFB                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:4EFB                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:4EFB                    ~ 			ld	d,0				; d:=0
     145.  00:4EFB                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:4EFB                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:4EFB                    ~ 			or	a				; If relative volume is zero...
     148.  00:4EFB                    ~ 		ENDIF
     149.  00:4EFB                      
     150.  00:4EFB  32 BF C3            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:4EFE  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:4EFF                      		; -------------------------------------
     153.  00:4EFF                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:4EFF                      		; -------------------------------------
     155.  00:4EFF                      		; --- Set noise channel ---
     156.  00:4EFF  CB 79               		bit	7,c				; If noise is off...
     157.  00:4F01  20 06               		jr	nz,.SETMASKS			; ...jump to @@SETMASKS
     158.  00:4F03  3A BE C3            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:4F06  32 45 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:4F09                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:4F09  79                  		ld	a,c				; a:=Control byte
     162.  00:4F0A  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:4F0C  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:4F0E  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:4F0F                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:4F0F  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:4F10  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:4F11  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:4F13                      		; --- Dump to correct channel ---
     170.  00:4F13  21 C0 C3            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:4F16  46                  		ld	b,[hl]				; Channel counter
     172.  00:4F17                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:4F17  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:4F19                      .LAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:4F19  CD 48 4F            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:4F1C  32 49 F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:4F1F  CB 51               		bit	2,c				; If tone is off...
     178.  00:4F21  C0                  		ret	nz				; ...return
     179.  00:4F22  22 43 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:4F25  C9                  		ret					; Return
     181.  00:4F26                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:4F26  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:4F28  0F                  		rrca					; Rotate right OR mask
     184.  00:4F29  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:4F2B                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:4F2B  CD 48 4F            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:4F2E  32 48 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:4F31  CB 49               		bit	1,c				; If tone is off...
     189.  00:4F33  C0                  		ret	nz				; ...return
     190.  00:4F34  22 41 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:4F37  C9                  		ret					; Return
     192.  00:4F38                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:4F38  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:4F3A  0F                  		rrca					; Rotate right OR mask
     195.  00:4F3B                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:4F3B  CD 48 4F            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:4F3E  32 47 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:4F41  CB 41               		bit	0,c				; If tone is off...
     199.  00:4F43  C0                  		ret	nz				; ...return
     200.  00:4F44  22 3F F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:4F47  C9                  		ret					; Return
     202.  00:4F48                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:4F48  4F                  		ld	c,a				; c:=OR mask
     204.  00:4F49  3A 46 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:4F4C  A2                  		and	d				; AND mask
     206.  00:4F4D  B1                  		or	c				; OR mask
     207.  00:4F4E  32 46 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:4F51  3A BF C3            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:4F54  2A BC C3            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:4F57  C9                  		ret					; Return
     211.  00:4F58                      
     212.  00:4F58                      		IF ( AYFXRELATIVE == 1 )
     213.  00:4F58                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:4F58                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:4F58                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:4F58                    ~ 		ENDIF
      32   00:4F58                      ; GFX
      33   00:4F58                          include "include\metatiles.asm"
       1.  00:4F58                      metatiles_data:
       2.  00:4F58                          ; SX, SY, NX, NY, Free
       3.  00:4F58  00 00 20 10 00          db 0, 0, 32, 16, 0  ; gate lockpad
       4.  00:4F5D  20 00 20 10 00          db 32, 0, 32, 16, 0  ; gate closed
       5.  00:4F62  40 00 20 10 00          db 64, 0, 32, 16, 0  ; gate half opened
       6.  00:4F67  60 00 20 10 00          db 96, 0, 32, 16, 0  ; gate opened
       7.  00:4F6C                      
       8.  00:4F6C  80 00 10 10 00          db 128, 0, 16, 16, 0  ; blood drop full
       9.  00:4F71  90 00 10 10 00          db 144, 0, 16, 16, 0  ; blood drop half
      10.  00:4F76  A0 00 10 10 00          db 160, 0, 16, 16, 0  ; blood drop empty
      11.  00:4F7B                      
      12.  00:4F7B  B0 00 10 10 00          db 176, 0, 16, 16, 0  ; Tile
      13.  00:4F80  C0 00 10 10 00          db 192, 0, 16, 16, 0  ; Pressed tile
      34   00:4F85                      ; entities
      35   00:4F85                          include "include\entities.asm"
       1.  00:4F85                      ; Entities struct
       2.  00:4F85                      ; on/off
       3.  00:4F85                      ; x
       4.  00:4F85                      ; y
       5.  00:4F85                      ; energy
       6.  00:4F85                      ; spritenumber in spat
       7.  00:4F85                      
       8.  00:4F85  01 7F 69 00 00      init_player: db 1,$7F,$69,0,0
      36   00:4F8A                      START
      37   00:4F8A                      	; CODE
      38   00:4F8A  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      39   00:4F8D  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      40   00:4F8F  23                  	inc hl ; FORCLR+1
      41   00:4F90  36 00               	ld [hl],0 ; Color de fondo 1=negro
      42   00:4F92  23                  	inc hl ; FORCLR+2
      43   00:4F93  36 00               	ld [hl],0 ; Color del borde 1=negro
      44   00:4F95  3E 08               	LD A,8
      45   00:4F97                      	;CALL CHGMOD    	
      46   00:4F97  CD 06 42                CALL SETPAGES32K
      47   00:4F9A                      	;CALL opening_screen
      48   00:4F9A  3E 01               	LD A,1
      49   00:4F9C  32 00 70            	LD (_bank2),A
      50   00:4F9F                      	;CALL CHGET
      51   00:4F9F                      	; Empieza el juego    
      52   00:4F9F  CD 73 41            	call ClearVram_MSX2		
      53   00:4FA2  CD 19 42            	call SET_SCREEN5_MODE    
      54   00:4FA5  CD 67 41                call Set212Lines
      55   00:4FA8                              
      56   00:4FA8  CD CF 4F                call INIT_CHARS_VARS
      57   00:4FAB  CD C9 45                call initVDPBuffers    
      58   00:4FAE                      
      59   00:4FAE  3E FF                   LD A, -MOV_SPEED_GHOST
      60   00:4FB0  32 3C C0            	LD (CHAR_SPEED_X_GHOST), A
      61   00:4FB3  21 3C 77                LD HL, PaletteData
      62   00:4FB6  CD A5 42                CALL SetPalette
      63   00:4FB9                          ; init sfx
      64   00:4FB9  F3                      di	
      65   00:4FBA  21 7B 55            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
      66   00:4FBD  DD E5                   PUSH IX
      67   00:4FBF  CD 8D 48                call	PT3_INIT			; Inicia el reproductor de PT3
      68   00:4FC2  21 E8 53            	ld hl, AFX
      69   00:4FC5  CD 7C 4E                call ayFX_SETUP
      70   00:4FC8  DD E1                   POP IX
      71   00:4FCA  FB                      ei
      72   00:4FCB                              
      73   00:4FCB                          ; Start STG1    
      74   00:4FCB  CD 5E 50                CALL STAGE1
      75   00:4FCE                      
      76   00:4FCE                          ;call MAIN_LOOP
      77   00:4FCE                          ;CALL CHGET
      78   00:4FCE  C9                  	ret
      79   00:4FCF                      
      80   00:4FCF                      
      81   00:4FCF                      INIT_CHARS_VARS:    
      82   00:4FCF  DD 21 49 C0             ld ix, SPRITE_ATTRS           
      83   00:4FD3                          
      84   00:4FD3  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      85   00:4FD7  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      86   00:4FDB  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      87   00:4FDF                      
      88   00:4FDF  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      89   00:4FE3  DD 36 05 7F             ld (ix+5), 7Fh
      90   00:4FE7  DD 36 06 04             ld (ix+6), 04h        
      91   00:4FEB                      
      92   00:4FEB  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      93   00:4FEF  DD 36 09 7F             ld (ix+9), 7Fh
      94   00:4FF3  DD 36 0A 08             ld (ix+10), 08h        
      95   00:4FF7                      
      96   00:4FF7  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
      97   00:4FFB  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
      98   00:4FFF  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
      99   00:5003                          
     100   00:5003  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
     101   00:5007  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
     102   00:500B  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
     103   00:500F                          
     104   00:500F  AF                      XOR A
     105   00:5010  32 0F C0                LD (current_level), A
     106   00:5013  32 39 C0                LD (JIFFY_TEMP),A
     107   00:5016  32 3A C0                LD (CHAR_SPEED_X),A
     108   00:5019  32 3B C0                LD (CHAR_SPEED_Y),A
     109   00:501C  32 3C C0                LD (CHAR_SPEED_X_GHOST),A
     110   00:501F  32 41 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
     111   00:5022  32 44 C0                LD (CHAR_NEW_DIR_MAIN),A    
     112   00:5025  32 45 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
     113   00:5028  32 47 C0                LD (CHAR_DISTANCE_SHOOT),A
     114   00:502B  32 48 C0                LD (CHAR_SPEED_SHOOT),A
     115   00:502E  32 3E C0                LD (CHAR_GHOST_DEAD),A
     116   00:5031  32 46 C0                LD (CHAR_MIN_STEP), A
     117   00:5034  32 D0 C0                LD (SPRITE_COLOR_REPLACE2), A
     118   00:5037  32 32 C0                LD (SHOWING_GUS_DIALOG), A
     119   00:503A  32 31 C0                LD (SHOWING_JOHN_DIALOG), A
     120   00:503D  32 30 C0                LD (SHOWING_MIKE_DIALOG), A
     121   00:5040  32 2F C0                LD (SHOWING_SKULL_STG1_DIALOG), A    
     122   00:5043  32 2E C0                LD (stg1_puzzle_solved), A
     123   00:5046                         ; LD A,$FF
     124   00:5046  32 38 C0                LD (OLD_KEY_PRESSED), A
     125   00:5049  3E 01                   LD A,$01
     126   00:504B  32 43 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     127   00:504E                      
     128   00:504E  21 30 66                ld hl, SPRITE_P1_DOWN
     129   00:5051  22 CC C0                ld (SPRITE_PTR_REPLACE), HL    
     130   00:5054  21 30 6C                ld hl, SPRITE_COLOR_P1_DOWN
     131   00:5057  22 CE C0                ld (SPRITE_COLOR_REPLACE), HL
     132   00:505A  22 D0 C0                LD (SPRITE_COLOR_REPLACE2), HL
     133   00:505D                      
     134   00:505D                          
     135   00:505D  C9                      ret
     136   00:505E                      
     137   00:505E                      STAGE1:
     138   00:505E  CD 62 47                CALL DISSCR
     139   00:5061  21 00 80                LD HL, CEMENTER1
     140   00:5064  22 D4 C0                LD (BITMAP), HL
     141   00:5067  06 07                   LD B, :CEMENTER1
     142   00:5069  CD B1 41                call load_screen
     143   00:506C                          
     144   00:506C  CD 3E 42                call DUMP_SPR_ALL
     145   00:506F  CD 88 42                CALL DUMP_SPR_P1
     146   00:5072                          
     147   00:5072  21 FC 6C                LD HL, mapa1
     148   00:5075  11 D6 C0                LD DE, MAP_RAM
     149   00:5078  01 E0 02                LD BC, 736
     150   00:507B  ED B0                   LDIR
     151   00:507D                          
     152   00:507D  21 D6 C0                LD HL, MAP_RAM
     153   00:5080  22 D2 C0                LD (MAPA), HL
     154   00:5083                          
     155   00:5083                          ;We load the tiles on page 1 of VDP
     156   00:5083  21 DC 77                LD HL, TILES1    
     157   00:5086  CD 63 42                call load_tiles_vdp
     158   00:5089                          
     159   00:5089                          ; set energy
     160   00:5089  21 10 40                LD HL, ANDY_MAX_ENERGY
     161   00:508C                          ;ADD HL, current_level
     162   00:508C  7E                      LD A, (HL)  ; no offset for level 1
     163   00:508D  32 03 C0                LD (ENTITY_PLAYER_POINTER+3), A
     164   00:5090  CD BC 47                CALL DRAW_ANDY_ENERGY
     165   00:5093                      
     166   00:5093  3A 2E C0                LD A, (stg1_puzzle_solved)
     167   00:5096  FE 03                   CP 3
     168   00:5098  20 30                   JR NZ, .nobackfromstg2
     169   00:509A                              ; Open the gate!
     170   00:509A  FD 21 10 C0             LD IY, tileDat
     171   00:509E  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     172   00:50A2  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     173   00:50A6  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     174   00:50AA  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     175   00:50AE  21 10 C0                LD HL, tileDat
     176   00:50B1  CD 30 47                CALL VDPCMD
     177   00:50B4                      
     178   00:50B4                          ; Modify MAP
     179   00:50B4  21 F0 6C                LD HL,stg1_gate
     180   00:50B7  11 E4 C0                LD DE, MAP_RAM+14
     181   00:50BA  01 04 00                LD BC, 4
     182   00:50BD  ED B0                   LDIR
     183   00:50BF                      
     184   00:50BF  21 F0 6C                LD HL,stg1_gate
     185   00:50C2  11 04 C1                LD DE, MAP_RAM+46
     186   00:50C5  01 04 00                LD BC, 4
     187   00:50C8  ED B0                   LDIR
     188   00:50CA                          
     189   00:50CA                      .nobackfromstg2
     190   00:50CA                              ; Copy the energy bar to back buffer
     191   00:50CA  21 43 48                LD HL, DiagBoxToBackBufROM
     192   00:50CD  CD 30 47            	call VDPCMD
     193   00:50D0                      ;	call VDP_Ready
     194   00:50D0  CD 5B 47                CALL ENASCR    
     195   00:50D3                      
     196   00:50D3                      MAIN_LOOP:
     197   00:50D3                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     198   00:50D3                          
     199   00:50D3  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     200   00:50D6  FE 00                   CP $00
     201   00:50D8  CA 34 53                JP Z, STAGE2
     202   00:50DB  CD 6D 42                call DUMP_SPR_ATTS    
     203   00:50DE                      
     204   00:50DE                      .check_tombs:
     205   00:50DE                      
     206   00:50DE  3A 2E C0                LD A, (stg1_puzzle_solved)
     207   00:50E1  FE 03                   CP 3
     208   00:50E3  CA 5D 52                JP Z, .animate_ghost
     209   00:50E6                      
     210   00:50E6  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     211   00:50E9  FE C8                   CP MIKE_TOMB_STG1_X
     212   00:50EB  C2 61 51                JP NZ, .check_john_tomb    
     213   00:50EE                          
     214   00:50EE  3A 2E C0                LD A, (stg1_puzzle_solved)
     215   00:50F1  FE 02                   CP 2
     216   00:50F3  C2 3B 51                JP NZ, .puzzle_wrong_order
     217   00:50F6  3C                      INC A
     218   00:50F7  32 2E C0                LD (stg1_puzzle_solved), A
     219   00:50FA                          ; Open the gate!
     220   00:50FA  FD 21 10 C0             LD IY, tileDat
     221   00:50FE  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     222   00:5102  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     223   00:5106  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     224   00:510A  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     225   00:510E  21 10 C0                LD HL, tileDat
     226   00:5111  CD 30 47                CALL VDPCMD
     227   00:5114                      
     228   00:5114  FD 21 C4 40             LD IY, stg1_puzzle_solved_strings
     229   00:5118  CD EB 45                CALL print_strings_dialog_box
     230   00:511B                      
     231   00:511B                          ; Modify MAP
     232   00:511B  21 F0 6C                LD HL,stg1_gate
     233   00:511E  11 E4 C0                LD DE, MAP_RAM+14
     234   00:5121  01 04 00                LD BC, 4
     235   00:5124  ED B0                   LDIR
     236   00:5126                      
     237   00:5126  21 F0 6C                LD HL,stg1_gate
     238   00:5129  11 04 C1                LD DE, MAP_RAM+46
     239   00:512C  01 04 00                LD BC, 4
     240   00:512F  ED B0                   LDIR
     241   00:5131                          ; afx
     242   00:5131  3E 02                   LD A,2
     243   00:5133  0E 00                   LD C, 0
     244   00:5135  CD 8D 4E                CALL ayFX_INIT
     245   00:5138                      
     246   00:5138  C3 5D 52                JP .animate_ghost
     247   00:513B                      
     248   00:513B                      .puzzle_wrong_order
     249   00:513B  3A 30 C0                LD A, (SHOWING_MIKE_DIALOG)
     250   00:513E  FE 01                   CP 1
     251   00:5140  CA 5D 52                JP Z, .animate_ghost    
     252   00:5143  FD 21 16 40             LD IY, mike_tomb_strings
     253   00:5147  CD EB 45                CALL print_strings_dialog_box
     254   00:514A  3E 01                   LD A,1
     255   00:514C  32 30 C0                LD (SHOWING_MIKE_DIALOG), A
     256   00:514F  AF                      XOR A
     257   00:5150  32 2E C0                LD (stg1_puzzle_solved), A
     258   00:5153                                  ; Close the gate!
     259   00:5153                          ;LD IY, tileDat
     260   00:5153                          ;LD (IY + VDP_SX), 0      ; SXL - Tile 2
     261   00:5153                          ;LD (IY+VDP_SY), 0      ; SYL
     262   00:5153                          ;LD (IY + VDP_DX), 112     ; DXL    
     263   00:5153                          ;LD (IY + VDP_DY), 0      ; DYL    
     264   00:5153                          ;LD HL, tileDat
     265   00:5153                          ;CALL VDPCMD
     266   00:5153                      
     267   00:5153  21 F6 6C                LD HL,stg1_gate_blocked
     268   00:5156  11 03 C1                LD DE, MAP_RAM+45
     269   00:5159  01 06 00                LD BC, 6
     270   00:515C  ED B0                   LDIR
     271   00:515E                      
     272   00:515E  C3 5D 52                JP .animate_ghost
     273   00:5161                      
     274   00:5161                      .check_john_tomb:
     275   00:5161  FE 29                   CP JOHN_TOMB_STG1_X
     276   00:5163  20 44                   jr nz, .check_gus_tomb
     277   00:5165  3A 31 C0                LD A, (SHOWING_JOHN_DIALOG)
     278   00:5168  FE 01                   CP 1
     279   00:516A  CA 5D 52                JP Z, .animate_ghost
     280   00:516D  FD 21 42 40             LD IY, john_tomb_strings
     281   00:5171  CD EB 45                CALL print_strings_dialog_box
     282   00:5174  3E 01                   LD A,1
     283   00:5176  32 31 C0                LD (SHOWING_JOHN_DIALOG), A
     284   00:5179  3A 2E C0                LD A, (stg1_puzzle_solved)
     285   00:517C  FE 01                   CP 1
     286   00:517E  C2 5D 52                JP NZ, .animate_ghost
     287   00:5181  3C                      INC A
     288   00:5182  32 2E C0                LD (stg1_puzzle_solved), A
     289   00:5185                          ; Half open gate
     290   00:5185  FD 21 10 C0             LD IY, tileDat
     291   00:5189  FD 36 00 40             LD (IY + VDP_SX), 64      ; SXL - Tile 2
     292   00:518D  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     293   00:5191  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     294   00:5195  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     295   00:5199  21 10 C0                LD HL, tileDat
     296   00:519C  CD 30 47                CALL VDPCMD
     297   00:519F                          ; afx
     298   00:519F  3E 00                   LD A,0
     299   00:51A1  0E 00                   LD C, 0
     300   00:51A3  CD 8D 4E                CALL ayFX_INIT
     301   00:51A6                      
     302   00:51A6  C3 5D 52                JP .animate_ghost
     303   00:51A9                      
     304   00:51A9                      .check_gus_tomb:
     305   00:51A9  FE 49                   CP GUS_TOMB_STG1_X
     306   00:51AB  C2 FB 51                JP nz, .check_skull_hint
     307   00:51AE  3A 32 C0                LD A, (SHOWING_GUS_DIALOG)
     308   00:51B1  FE 01                   CP 1
     309   00:51B3  CA 5D 52                JP Z, .animate_ghost
     310   00:51B6  DD 7E 00                LD A, (ix)
     311   00:51B9  FE 78                   CP GUS_TOMB_STG1_Y
     312   00:51BB  DA 5D 52                jp c, .animate_ghost
     313   00:51BE  FD 21 6D 40             LD IY, gus_tomb_strings
     314   00:51C2  CD EB 45                CALL print_strings_dialog_box
     315   00:51C5  3E 01                   LD A,1
     316   00:51C7  32 32 C0                LD (SHOWING_GUS_DIALOG), A
     317   00:51CA  32 2E C0                LD (stg1_puzzle_solved), A
     318   00:51CD                          ; Remove the lockpad
     319   00:51CD  FD 21 10 C0             LD IY, tileDat
     320   00:51D1  FD 36 00 20             LD (IY + VDP_SX), 32      ; SXL - Tile 1
     321   00:51D5  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     322   00:51D9  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     323   00:51DD  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     324   00:51E1  21 10 C0                LD HL, tileDat
     325   00:51E4  CD 30 47                CALL VDPCMD
     326   00:51E7                      
     327   00:51E7  21 F0 6C                LD HL,stg1_gate
     328   00:51EA  11 05 C1                LD DE, MAP_RAM+47
     329   00:51ED  01 02 00                LD BC, 2
     330   00:51F0  ED B0                   LDIR
     331   00:51F2                      
     332   00:51F2                          ; afx
     333   00:51F2  3E 01                   LD A,1
     334   00:51F4  0E 00                   LD C, 0
     335   00:51F6  CD 8D 4E                CALL ayFX_INIT
     336   00:51F9                      
     337   00:51F9  18 62                   JR .animate_ghost
     338   00:51FB                      
     339   00:51FB                      .check_skull_hint:
     340   00:51FB  FE 69                   CP SKULL_TOMB_STG1_X
     341   00:51FD  20 20                   jr nz, .check_mike_dialog_box
     342   00:51FF                              
     343   00:51FF  DD 7E 00                LD A, (ix)
     344   00:5202  FE 5A                   CP SKULL_TOMB_STG1_Y1
     345   00:5204  38 19                   jr c, .check_mike_dialog_box
     346   00:5206  FE 64                   CP SKULL_TOMB_STG1_Y2
     347   00:5208  30 15                   jr nc, .check_mike_dialog_box
     348   00:520A                      
     349   00:520A  3A 2F C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     350   00:520D  FE 01                   CP 1
     351   00:520F  28 4C                   JR Z, .animate_ghost
     352   00:5211  FD 21 9A 40             LD IY, stg1_skull_strings
     353   00:5215  CD EB 45                CALL print_strings_dialog_box
     354   00:5218  3E 01                   LD A,1
     355   00:521A  32 2F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     356   00:521D  18 3E                   JR .animate_ghost
     357   00:521F                      
     358   00:521F                      .check_mike_dialog_box
     359   00:521F  3A 30 C0                LD A, (SHOWING_MIKE_DIALOG)
     360   00:5222  FE 01                   CP 1
     361   00:5224  20 09                   JR nz, .check_gus_dialog
     362   00:5226  CD E7 46                CALL CLEAR_DIALOG_BOX
     363   00:5229  AF                      XOR A
     364   00:522A  32 30 C0                LD (SHOWING_MIKE_DIALOG), A
     365   00:522D  18 2E                   JR .animate_ghost
     366   00:522F                      
     367   00:522F                      .check_gus_dialog
     368   00:522F  3A 32 C0                LD A, (SHOWING_GUS_DIALOG)
     369   00:5232  FE 01                   CP 1
     370   00:5234  20 09                   JR nz, .check_john_dialog
     371   00:5236  CD E7 46                CALL CLEAR_DIALOG_BOX
     372   00:5239  AF                      XOR A
     373   00:523A  32 32 C0                LD (SHOWING_GUS_DIALOG), A
     374   00:523D  18 1E                   JR .animate_ghost
     375   00:523F                      
     376   00:523F                      .check_john_dialog
     377   00:523F  3A 31 C0                LD A, (SHOWING_JOHN_DIALOG)
     378   00:5242  FE 01                   CP 1
     379   00:5244  20 09                   JR nz, .check_skull_dialog
     380   00:5246  CD E7 46                CALL CLEAR_DIALOG_BOX
     381   00:5249  AF                      XOR A
     382   00:524A  32 31 C0                LD (SHOWING_JOHN_DIALOG), A
     383   00:524D  18 0E                   JR .animate_ghost
     384   00:524F                      
     385   00:524F                      .check_skull_dialog
     386   00:524F  3A 2F C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     387   00:5252  FE 01                   CP 1
     388   00:5254  20 07                   JR nz, .animate_ghost
     389   00:5256  CD E7 46                CALL CLEAR_DIALOG_BOX
     390   00:5259  AF                      XOR A
     391   00:525A  32 2F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     392   00:525D                      
     393   00:525D                      .animate_ghost    
     394   00:525D  3A 3E C0                LD A,(CHAR_GHOST_DEAD)
     395   00:5260  FE 01                   CP $01
     396   00:5262  CA D6 52                JP Z,.continue
     397   00:5265  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     398   00:5268  2A 3C C0            	LD HL, (CHAR_SPEED_X_GHOST)
     399   00:526B  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     400   00:526C                          
     401   00:526C  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     402   00:526F  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     403   00:5272  FE 50                   CP $50
     404   00:5274  CA 7F 52                JP Z,.CHANGE_DIR_RIGHT
     405   00:5277  FE AF                   CP $AF
     406   00:5279  CA 8C 52                JP Z,.CHANGE_DIR_LEFT
     407   00:527C                          		
     408   00:527C  C3 95 52                JP .check_pattern
     409   00:527F                      
     410   00:527F                      .CHANGE_DIR_RIGHT:
     411   00:527F  3E 01                   LD A, MOV_SPEED_GHOST
     412   00:5281  32 3C C0            	LD (CHAR_SPEED_X_GHOST), A
     413   00:5284  3E FF                   LD A,$FF
     414   00:5286  32 41 C0                LD (CHAR_DIR_GHOST1),A
     415   00:5289  C3 95 52                JP .check_pattern
     416   00:528C                      
     417   00:528C                      .CHANGE_DIR_LEFT:
     418   00:528C  3E FF                   LD A, -MOV_SPEED_GHOST
     419   00:528E  32 3C C0            	LD (CHAR_SPEED_X_GHOST), A
     420   00:5291  AF                      XOR A   ; Pone A a 0
     421   00:5292  32 41 C0                LD (CHAR_DIR_GHOST1),A
     422   00:5295                      
     423   00:5295                      .check_pattern:
     424   00:5295  3A 41 C0                LD A,(CHAR_DIR_GHOST1)
     425   00:5298  FE FF                   CP $FF
     426   00:529A  CA BB 52                JP Z,.check_pattern_RIGHT
     427   00:529D  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     428   00:52A0  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     429   00:52A2  CA B0 52                jp z,.change_pattern_L
     430   00:52A5  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     431   00:52A9  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     432   00:52AD  C3 D6 52                jp .continue
     433   00:52B0                      .change_pattern_L:
     434   00:52B0  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     435   00:52B4  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     436   00:52B8  C3 D6 52                jp .continue
     437   00:52BB                      
     438   00:52BB                      .check_pattern_RIGHT
     439   00:52BB  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     440   00:52BE  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     441   00:52C0  CA CE 52                jp z,.change_pattern_R
     442   00:52C3  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     443   00:52C7  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     444   00:52CB  C3 D6 52                jp .continue
     445   00:52CE                      .change_pattern_R:
     446   00:52CE  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     447   00:52D2  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     448   00:52D6                      
     449   00:52D6                      .continue:    
     450   00:52D6  CD EE 44                CALL MOVE_SHOOT
     451   00:52D9                      .CHECK_GHOST:
     452   00:52D9                          ; Comprobamos si hay colision con el fantasma
     453   00:52D9  3A 3E C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     454   00:52DC  FE 01                   CP $01
     455   00:52DE  CA 02 53                JP Z,.check_KB
     456   00:52E1                      
     457   00:52E1  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     458   00:52E4  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     459   00:52E7  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     460   00:52EA  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     461   00:52ED  CD 1A 41                call check_spr_collision
     462   00:52F0  FE 01                   CP 1
     463   00:52F2  C2 02 53                JP NZ,.check_KB
     464   00:52F5                      
     465   00:52F5                      .KILL_GHOST:
     466   00:52F5  3E 01                   LD A,1
     467   00:52F7  32 3E C0                LD (CHAR_GHOST_DEAD),A
     468   00:52FA  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     469   00:52FE  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     470   00:5302                      
     471   00:5302                      .check_KB:
     472   00:5302  76                      halt    
     473   00:5303                      	
     474   00:5303  F3                  	di       
     475   00:5304  DD E5                   PUSH IX
     476   00:5306  CD D2 4D            	call	PT3_ROUT			;envia datos a al PSG 	   
     477   00:5309  CD DA 4C            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     478   00:530C  CD C3 4E            	call ayFX_PLAY
     479   00:530F  DD E1                   POP IX
     480   00:5311  FB                      ei
     481   00:5312                      
     482   00:5312  3E 08                   ld a, 8
     483   00:5314  CD 41 01            	call SNSMAT   
     484   00:5317                          
     485   00:5317  4F                      LD C,A    
     486   00:5318                          
     487   00:5318  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     488   00:531A  CC 36 43                call z, move_right
     489   00:531D                          
     490   00:531D  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     491   00:531F  CC 95 43                call z, move_left
     492   00:5322                      
     493   00:5322  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     494   00:5324  CC C1 42                call z, move_up
     495   00:5327                      
     496   00:5327  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     497   00:5329  CC FB 42                call z, move_down
     498   00:532C                      
     499   00:532C                      no_arrows:
     500   00:532C  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     501   00:532E  CC 59 45                call z,SHOOT_MAIN_CHAR
     502   00:5331                      
     503   00:5331                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     504   00:5331                          ;ret z
     505   00:5331                          
     506   00:5331  C3 D3 50                jp MAIN_LOOP
     507   00:5334                      
     508   00:5334                      
     509   00:5334                      STAGE2:
     510   00:5334  CD 62 47                CALL DISSCR
     511   00:5337  76                      halt
     512   00:5338  F3                  	di       
     513   00:5339  DD E5                   PUSH IX
     514   00:533B  CD D2 4D            	call	PT3_ROUT			;envia datos a al PSG 	   
     515   00:533E  CD DA 4C            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     516   00:5341  DD E1               	POP IX
     517   00:5343  FB                      ei
     518   00:5344  21 00 80                LD HL, CEMENTER2
     519   00:5347  22 D4 C0                LD (BITMAP), HL
     520   00:534A  06 0D                   LD B, :CEMENTER2
     521   00:534C                      
     522   00:534C  CD B1 41                call load_screen
     523   00:534F  21 DC 6F                LD HL, mapa2
     524   00:5352  22 D2 C0                LD (MAPA), HL
     525   00:5355                          
     526   00:5355                          ; Ponemos el P1 por encima del marco
     527   00:5355  DD 36 00 AF             LD (ix), 175      ; mask 0
     528   00:5359  DD 36 04 AF             LD (ix+4), 175    ; mask 1
     529   00:535D  DD 36 08 AF             LD (ix+8), 175    ; mask 2
     530   00:5361                          
     531   00:5361  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     532   00:5365  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     533   00:5369                          
     534   00:5369  CD 3E 42                CALL DUMP_SPR_ALL
     535   00:536C  CD 88 42                CALL DUMP_SPR_P1        
     536   00:536F                          
     537   00:536F  CD 5B 47                CALL ENASCR
     538   00:5372                          
     539   00:5372                      MAIN_LOOP2:
     540   00:5372                          ;halt    
     541   00:5372  76                         halt
     542   00:5373  F3                  	di       
     543   00:5374  DD E5                   PUSH IX
     544   00:5376  CD D2 4D            	call	PT3_ROUT			;envia datos a al PSG 	   
     545   00:5379  CD DA 4C            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     546   00:537C  CD C3 4E            	call ayFX_PLAY
     547   00:537F  DD E1                   POP IX
     548   00:5381  FB                      ei
     549   00:5382  DD 7E 00                LD A, (ix)    
     550   00:5385  FE B0                   CP 176      ; Miramos si la Y es 160 para pasar a stg1
     551   00:5387  C2 A9 53                JP NZ, .no_screen_change
     552   00:538A                          ; Ponemos el P1 al principio de la pantalla 1
     553   00:538A  DD 36 00 01             LD (ix), 1          ; P1.Y = 1
     554   00:538E  DD 36 04 01             LD (ix+4), 1
     555   00:5392  DD 36 08 01             LD (ix+8), 1
     556   00:5396                      
     557   00:5396  3A 3E C0                LD A, (CHAR_GHOST_DEAD)
     558   00:5399  FE 01                   CP $01
     559   00:539B  CA A6 53                JP Z, .GHOST_DEAD
     560   00:539E  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     561   00:53A2  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     562   00:53A6                      .GHOST_DEAD:    
     563   00:53A6  CD 5E 50                CALL STAGE1
     564   00:53A9                      
     565   00:53A9                      .no_screen_change:
     566   00:53A9                          ; check X,Y to play Black Sabbath
     567   00:53A9                          ; Ya tenemos en A la Y
     568   00:53A9  FE 6E                   CP STG2_TILE1_Y
     569   00:53AB  C2 BD 53                JP NZ, .continue
     570   00:53AE  DD 7E 01                LD A, (ix+1)
     571   00:53B1  FE 71                   CP STG2_TILE1_X
     572   00:53B3  C2 BD 53                JP NZ, .continue
     573   00:53B6  3E 03                   LD A, 3
     574   00:53B8  0E 00                   LD C, 0
     575   00:53BA  CD 8D 4E                CALL ayFX_INIT    
     576   00:53BD                          
     577   00:53BD                      .continue:
     578   00:53BD  CD 6D 42                call DUMP_SPR_ATTS      
     579   00:53C0  CD EE 44                CALL MOVE_SHOOT    
     580   00:53C3                      
     581   00:53C3  3E 08                   ld a, 8
     582   00:53C5  CD 41 01            	call SNSMAT   
     583   00:53C8  4F                      LD C,A    
     584   00:53C9                              
     585   00:53C9  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     586   00:53CB  CC 36 43                call z, move_right
     587   00:53CE                          
     588   00:53CE  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     589   00:53D0  CC 95 43                call z, move_left
     590   00:53D3                      
     591   00:53D3  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     592   00:53D5  CC C1 42                call z, move_up
     593   00:53D8                      
     594   00:53D8  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     595   00:53DA  CC FB 42                call z, move_down
     596   00:53DD                      
     597   00:53DD  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     598   00:53DF  CC 59 45                call z,SHOOT_MAIN_CHAR
     599   00:53E2                      
     600   00:53E2  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     601   00:53E4  C8                      ret z
     602   00:53E5                      
     603   00:53E5                      
     604   00:53E5                      
     605   00:53E5  C3 72 53                jp MAIN_LOOP2
     606   00:53E8                      
     607   00:53E8                      AFX:
     608   00:53E8  (01F6)                  incbin "sfx\cementer_sounds.afb"
     609   00:55DE                      SONG:
     610   00:55DE  (0F92)              	incbin "sfx\Nostalgy_sincabecera.pt3"
     611   00:6570                          ;incbin "sfx\test.pt3"
     612   00:6570                          ;incbin "sfx\G-6sin_cabecera.pt3"
     613   00:6570                      include "include\BTH_data.asm"
       1.  00:6570                      SPRITE_P1_UP:
       2.  00:6570                          ; UP 1        
       3.  00:6570                          ; mask 0
       4.  00:6570                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  00:6570  07 0F 05 1F 1F 3F 3F 7F 
       5.  00:6578                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  00:6578  00 4F 70 38 0C 0E 07 04 
       6.  00:6580                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  00:6580  E0 F0 A0 F8 F8 F8 FC FE 
       7.  00:6588                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  00:6588  06 F2 1E 3C 30 70 C0 00 
       8.  00:6590                          ; mask 1
       9.  00:6590                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  00:6590  00 00 18 00 1F 00 00 00 
      10.  00:6598                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  00:6598  7F 50 4F 3F 0F 0F 07 02 
      11.  00:65A0                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  00:65A0  00 00 10 00 FC 00 00 00 
      12.  00:65A8                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  00:65A8  F2 0E FE FC F0 F0 A0 00 
      13.  00:65B0                          ; mask 2
      14.  00:65B0                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  00:65B0  00 00 1A 00 00 00 00 00 
      15.  00:65B8                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  00:65B8  7F 60 00 00 00 00 07 00 
      16.  00:65C0                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  00:65C0  00 00 50 00 00 00 00 00 
      17.  00:65C8                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  00:65C8  FA 0E 00 00 00 00 80 00 
      18.  00:65D0                          
      19.  00:65D0                          ; UP 2
      20.  00:65D0                          ; mask 0
      21.  00:65D0                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  00:65D0  07 0F 05 1F 1F 3F 3F 7F 
      22.  00:65D8                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  00:65D8  10 4F 70 38 0C 0E 05 00 
      23.  00:65E0                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  00:65E0  E0 F0 A0 F8 F8 F8 FC FE 
      24.  00:65E8                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  00:65E8  02 F2 1E 3C 30 70 E0 40 
      25.  00:65F0                          ; mask 1
      26.  00:65F0                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  00:65F0  00 00 18 00 1F 00 00 00 
      27.  00:65F8                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  00:65F8  4F 70 7F 3F 0F 0F 03 00 
      28.  00:6600                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  00:6600  00 00 10 00 FC 00 00 00 
      29.  00:6608                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  00:6608  FE 06 F2 FC F0 F0 E0 20 
      30.  00:6610                          ; mask 2
      31.  00:6610                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  00:6610  00 00 1A 00 00 00 00 00 
      32.  00:6618                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  00:6618  6F 70 00 00 00 00 01 00 
      33.  00:6620                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  00:6620  00 00 50 00 00 00 00 00 
      34.  00:6628                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  00:6628  FE 0A 00 00 00 00 E0 00 
      35.  00:6630                          
      36.  00:6630                      SPRITE_P1_DOWN:
      37.  00:6630                          ; DOWN 1 - 00h
      38.  00:6630                          ; mask 0
      39.  00:6630                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  00:6630  07 0F 04 06 0F 07 1F 3F 
      40.  00:6638                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  00:6638  4C 4E 4E 3C 0C 0E 0F 08 
      41.  00:6640                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  00:6640  E0 F0 20 20 70 E0 F8 FC 
      42.  00:6648                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  00:6648  32 72 7E 7C 70 F0 C0 00 
      43.  00:6650                          ; mask 1
      44.  00:6650                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  00:6650  00 00 19 19 10 3A 3A 78 
      45.  00:6658                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  00:6658  5F 5E 7E 3C 0C 0E 0F 04 
      46.  00:6660                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  00:6660  00 00 90 D8 88 58 5C 1E 
      47.  00:6668                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  00:6668  F6 FE FE 3C 30 70 A0 00 
      48.  00:6670                          ; mask 2
      49.  00:6670                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  00:6670  00 00 1B 00 10 00 00 00 
      50.  00:6678                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  00:6678  6F 6F 7F 3F 0F 0F 0F 00 
      51.  00:6680                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  00:6680  00 00 D0 00 8C 00 00 00 
      52.  00:6688                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  00:6688  FA 7E 7E BC B0 70 80 00 
      53.  00:6690                          
      54.  00:6690                          ; DOWN 2
      55.  00:6690                          ; mask 0 - 0Ch    
      56.  00:6690                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  00:6690  07 0F 04 06 0F 07 1F 3F 
      57.  00:6698                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  00:6698  4C 4E 7E 3C 0C 0E 05 00 
      58.  00:66A0                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  00:66A0  E0 F0 20 20 70 E0 F8 FC 
      59.  00:66A8                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  00:66A8  32 72 72 7C 70 F0 E0 40 
      60.  00:66B0                          ; mask 1
      61.  00:66B0                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  00:66B0  00 00 19 19 10 3A 3A 78 
      62.  00:66B8                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  00:66B8  5F 7E 7E 3C 0C 0E 03 00 
      63.  00:66C0                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  00:66C0  00 00 90 D8 88 58 5C 1E 
      64.  00:66C8                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  00:66C8  F6 F6 FE 3C 30 70 E0 20 
      65.  00:66D0                          ; mask 2
      66.  00:66D0                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  00:66D0  00 00 1B 00 10 00 00 00 
      67.  00:66D8                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  00:66D8  6F 7F 7F 3F 0F 0F 01 00 
      68.  00:66E0                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  00:66E0  00 00 D0 00 8C 00 00 00 
      69.  00:66E8                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  00:66E8  FA 7A 7E BC B0 70 E0 00 
      70.  00:66F0                      
      71.  00:66F0                      SPRITE_P1_LEFT:         
      72.  00:66F0                          ; --- Slot 3
      73.  00:66F0                          ; mask 0
      74.  00:66F0                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  00:66F0  07 0F 02 05 07 07 0F 0F 
      75.  00:66F8                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  00:66F8  07 03 03 03 01 03 03 04 
      76.  00:6700                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  00:6700  E0 F0 80 00 A0 E0 C0 C0 
      77.  00:6708                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  00:6708  E0 B0 70 F0 F0 F0 C0 00 
      78.  00:6710                          ; mask 1
      79.  00:6710                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  00:6710  00 00 18 1A 08 0A 12 10 
      80.  00:6718                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  00:6718  08 03 02 02 01 03 03 03 
      81.  00:6720                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  00:6720  00 00 78 F8 5C 1C 7E 7E 
      82.  00:6728                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  00:6728  FE 3E 7E 7C F8 F8 B0 00 
      83.  00:6730                          ; mask 2
      84.  00:6730                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  00:6730  00 00 1D 00 28 00 00 00 
      85.  00:6738                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  00:6738  00 07 06 06 07 07 03 00 
      86.  00:6740                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  00:6740  00 00 78 00 5C 00 00 00 
      87.  00:6748                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  00:6748  00 7E FE 7C F8 F8 80 00 
      88.  00:6750                          ; --- Slot 4
      89.  00:6750                          ; mask 0
      90.  00:6750                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  00:6750  07 0F 02 05 07 07 0F 0F 
      91.  00:6758                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  00:6758  07 03 03 03 01 03 04 00 
      92.  00:6760                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  00:6760  E0 F0 80 00 A0 E0 C0 C0 
      93.  00:6768                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  00:6768  E0 B0 D0 D0 F0 F0 E0 40 
      94.  00:6770                          ; mask 1
      95.  00:6770                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  00:6770  00 00 18 1A 08 0A 12 10 
      96.  00:6778                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  00:6778  08 03 03 03 01 03 03 00 
      97.  00:6780                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  00:6780  00 00 78 F8 5C 1C 7E 7E 
      98.  00:6788                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  00:6788  FE 3E 9E 9C 98 F8 E0 30 
      99.  00:6790                          ; mask 2
     100.  00:6790                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  00:6790  00 00 1D 00 28 00 00 00 
     101.  00:6798                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  00:6798  00 07 07 07 07 07 00 00 
     102.  00:67A0                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  00:67A0  00 00 78 00 5C 00 00 00 
     103.  00:67A8                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  00:67A8  00 7E BE BC 98 F8 E0 00 
     104.  00:67B0                      
     105.  00:67B0                      SPRITE_P1_RIGHT:
     106.  00:67B0                          ; --- Slot 0
     107.  00:67B0                          ; mask 0
     108.  00:67B0                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  00:67B0  07 0F 01 00 05 07 03 03 
     109.  00:67B8                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  00:67B8  07 0D 0E 0F 0F 0F 03 00 
     110.  00:67C0                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  00:67C0  E0 F0 40 A0 E0 E0 F0 F0 
     111.  00:67C8                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  00:67C8  E0 C0 C0 C0 80 C0 C0 20 
     112.  00:67D0                          ; mask 1
     113.  00:67D0                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  00:67D0  00 00 1E 1F 3A 38 7E 7E 
     114.  00:67D8                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  00:67D8  7F 7C 7E 3E 1F 1F 0D 00 
     115.  00:67E0                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  00:67E0  00 00 18 58 10 50 48 08 
     116.  00:67E8                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  00:67E8  10 C0 40 40 80 C0 C0 C0 
     117.  00:67F0                          ; mask 2
     118.  00:67F0                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  00:67F0  00 00 1E 00 3A 00 00 00 
     119.  00:67F8                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  00:67F8  00 7E 7F 3E 1F 1F 01 00 
     120.  00:6800                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  00:6800  00 00 B8 00 14 00 00 00 
     121.  00:6808                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  00:6808  00 E0 60 60 E0 E0 C0 00 
     122.  00:6810                          
     123.  00:6810                          ; --- Slot 2
     124.  00:6810                         ; mask 0
     125.  00:6810                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  00:6810  07 0F 01 00 05 07 03 03 
     126.  00:6818                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  00:6818  07 0D 0B 0B 0F 0F 07 02 
     127.  00:6820                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  00:6820  E0 F0 40 A0 E0 E0 F0 F0 
     128.  00:6828                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  00:6828  E0 C0 C0 C0 80 C0 20 00 
     129.  00:6830                          ; mask 1
     130.  00:6830                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  00:6830  00 00 1E 1F 3A 38 7E 7E 
     131.  00:6838                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  00:6838  7F 7C 79 39 19 1F 07 0C 
     132.  00:6840                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  00:6840  00 00 18 58 10 50 48 08 
     133.  00:6848                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  00:6848  10 C0 C0 C0 80 C0 C0 00 
     134.  00:6850                              ; mask 2
     135.  00:6850                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  00:6850  00 00 1E 00 3A 00 00 00 
     136.  00:6858                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  00:6858  00 7E 7D 3D 19 1F 07 00 
     137.  00:6860                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  00:6860  00 00 B8 00 14 00 00 00 
     138.  00:6868                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  00:6868  00 E0 E0 E0 E0 E0 00 00 
     139.  00:6870                          
     140.  00:6870                      SPRITE_PATTERN:    
     141.  00:6870                          ; P1 - DOWN 1 
     142.  00:6870                          ; DOWN 1 - 00h
     143.  00:6870                          ; mask 0
     144.  00:6870                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  00:6870  07 0F 04 06 0F 07 1F 3F 
     145.  00:6878                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  00:6878  4C 4E 4E 3C 0C 0E 0F 08 
     146.  00:6880                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  00:6880  E0 F0 20 20 70 E0 F8 FC 
     147.  00:6888                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  00:6888  32 72 7E 7C 70 F0 C0 00 
     148.  00:6890                          ; mask 1
     149.  00:6890                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  00:6890  00 00 19 19 10 3A 3A 78 
     150.  00:6898                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  00:6898  5F 5E 7E 3C 0C 0E 0F 04 
     151.  00:68A0                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  00:68A0  00 00 90 D8 88 58 5C 1E 
     152.  00:68A8                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  00:68A8  F6 FE FE 3C 30 70 A0 00 
     153.  00:68B0                          ; mask 2
     154.  00:68B0                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  00:68B0  00 00 1B 00 10 00 00 00 
     155.  00:68B8                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  00:68B8  6F 6F 7F 3F 0F 0F 0F 00 
     156.  00:68C0                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  00:68C0  00 00 D0 00 8C 00 00 00 
     157.  00:68C8                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  00:68C8  FA 7E 7E BC B0 70 80 00 
     158.  00:68D0                          
     159.  00:68D0                          ; DOWN 2
     160.  00:68D0                          ; mask 0 - 0Ch    
     161.  00:68D0                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  00:68D0  07 0F 04 06 0F 07 1F 3F 
     162.  00:68D8                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  00:68D8  4C 4E 7E 3C 0C 0E 05 00 
     163.  00:68E0                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  00:68E0  E0 F0 20 20 70 E0 F8 FC 
     164.  00:68E8                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  00:68E8  32 72 72 7C 70 F0 E0 40 
     165.  00:68F0                          ; mask 1
     166.  00:68F0                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  00:68F0  00 00 19 19 10 3A 3A 78 
     167.  00:68F8                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  00:68F8  5F 7E 7E 3C 0C 0E 03 00 
     168.  00:6900                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  00:6900  00 00 90 D8 88 58 5C 1E 
     169.  00:6908                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  00:6908  F6 F6 FE 3C 30 70 E0 20 
     170.  00:6910                          ; mask 2
     171.  00:6910                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  00:6910  00 00 1B 00 10 00 00 00 
     172.  00:6918                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  00:6918  6F 7F 7F 3F 0F 0F 01 00 
     173.  00:6920                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  00:6920  00 00 D0 00 8C 00 00 00 
     174.  00:6928                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  00:6928  FA 7A 7E BC B0 70 E0 00 
     175.  00:6930                          
     176.  00:6930                          ; Antichrist - RIGHT
     177.  00:6930                          ; mask 0 - 18h    
     178.  00:6930                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  00:6930  00 00 00 01 01 01 01 01 
     179.  00:6938                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  00:6938  01 01 07 07 01 01 00 00 
     180.  00:6940                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  00:6940  00 00 00 80 80 80 80 80 
     181.  00:6948                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  00:6948  80 80 E0 E0 80 80 00 00 
     182.  00:6950                      
     183.  00:6950                          ;Ghost 1 Left - 1CH
     184.  00:6950                          ; mask 0
     185.  00:6950                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  00:6950  03 04 08 68 B5 90 50 40 
     186.  00:6958                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  00:6958  22 20 10 10 08 06 03 00 
     187.  00:6960                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  00:6960  C0 E0 70 36 BB 33 26 06 
     188.  00:6968                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  00:6968  0C 18 3E 19 07 0C F8 E0 
     189.  00:6970                          ; mask 1    20h
     190.  00:6970                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  00:6970  00 07 0F 6F DF FF 6F 7F 
     191.  00:6978                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  00:6978  3F 3F 1F 1F 0F 05 03 00 
     192.  00:6980                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  00:6980  00 20 90 D6 DD DD DA FA 
     193.  00:6988                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  00:6988  F4 E8 CE EF FB F4 18 00 
     194.  00:6990                          
     195.  00:6990                          ; Ghost 2 Left - 24h
     196.  00:6990                          ; mask 0    24-h
     197.  00:6990                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  00:6990  03 04 08 08 65 B0 90 40 
     198.  00:6998                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  00:6998  22 20 10 10 08 06 01 00 
     199.  00:69A0                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  00:69A0  C0 E0 70 30 B6 3B 27 06 
     200.  00:69A8                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  00:69A8  0C 18 3C 1A 06 0C F0 C0 
     201.  00:69B0                          ; mask 1    28h
     202.  00:69B0                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  00:69B0  00 07 0F 0F 6F DF EF 7F 
     203.  00:69B8                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  00:69B8  3F 3F 1F 1F 0F 05 01 00 
     204.  00:69C0                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  00:69C0  00 20 90 D0 D6 DD D9 FA 
     205.  00:69C8                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  00:69C8  F4 E8 CC EE FA F4 30 00 
     206.  00:69D0                      
     207.  00:69D0                          ; Ghost 1 Right - 2Ch
     208.  00:69D0                          ; mask 0
     209.  00:69D0                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  00:69D0  03 07 0E 6C DD CC 64 60 
     210.  00:69D8                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  00:69D8  30 18 7C 98 E0 30 1F 07 
     211.  00:69E0                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  00:69E0  C0 20 10 16 AD 09 0A 02 
     212.  00:69E8                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  00:69E8  44 04 08 08 10 60 C0 00 
     213.  00:69F0                          ; mask 1    - 30h
     214.  00:69F0                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  00:69F0  00 04 09 6B BB BB 5B 5F 
     215.  00:69F8                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  00:69F8  2F 17 73 F7 DF 2F 18 00 
     216.  00:6A00                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  00:6A00  00 E0 F0 F6 FB FF F6 FE 
     217.  00:6A08                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  00:6A08  FC FC F8 F8 F0 A0 C0 00 
     218.  00:6A10                          
     219.  00:6A10                          ; Ghost 2 Right - 34h
     220.  00:6A10                          ; mask 0
     221.  00:6A10                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  00:6A10  03 07 0E 0C 6D DC E4 60 
     222.  00:6A18                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  00:6A18  30 18 3C 58 60 30 0F 03 
     223.  00:6A20                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  00:6A20  C0 20 10 10 A6 0D 09 02 
     224.  00:6A28                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  00:6A28  44 04 08 08 10 60 80 00 
     225.  00:6A30                          ; mask 1    38h
     226.  00:6A30                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  00:6A30  00 04 09 0B 6B BB 9B 5F 
     227.  00:6A38                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  00:6A38  2F 17 33 77 5F 2F 0C 00 
     228.  00:6A40                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  00:6A40  00 E0 F0 F0 F6 FB F7 FE 
     229.  00:6A48                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  00:6A48  FC FC F8 F8 F0 A0 80 00 
     230.  00:6A50                          
     231.  00:6A50                      
     232.  00:6A50                          ; Esqueleto Left - 1
     233.  00:6A50                          ; mask 0 - 3Ch
     234.  00:6A50                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  00:6A50  1F 1B 2E 24 3F 1F 1F 00 
     235.  00:6A58                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  00:6A58  03 05 09 04 01 02 02 04 
     236.  00:6A60                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  00:6A60  80 C0 C0 C0 80 00 00 80 
     237.  00:6A68                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  00:6A68  E0 D0 C8 C4 C0 20 20 40 
     238.  00:6A70                          ; mask 1 - 40h
     239.  00:6A70                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  00:6A70  1F 1F 3F 3F 3F 1E 0A 00 
     240.  00:6A78                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  00:6A78  03 05 09 04 01 00 00 00 
     241.  00:6A80                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  00:6A80  00 80 80 80 00 00 00 00 
     242.  00:6A88                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  00:6A88  80 10 88 84 80 00 00 00 
     243.  00:6A90                      
     244.  00:6A90                          ; Esqueleto Left - 2
     245.  00:6A90                          ; mask 0 - 44h
     246.  00:6A90                          ; mask 0
     247.  00:6A90                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  00:6A90  0F 0D 17 12 1F 0F 0F 00 
     248.  00:6A98                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  00:6A98  03 05 09 10 01 06 08 00 
     249.  00:6AA0                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  00:6AA0  C0 E0 60 60 C0 80 80 80 
     250.  00:6AA8                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  00:6AA8  E0 D0 C8 D0 C0 20 20 50 
     251.  00:6AB0                          ; mask 1 - 48h
     252.  00:6AB0                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  00:6AB0  0F 0F 1F 1F 1F 0F 05 00 
     253.  00:6AB8                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  00:6AB8  03 05 09 10 01 00 00 00 
     254.  00:6AC0                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  00:6AC0  80 C0 C0 C0 80 00 00 00 
     255.  00:6AC8                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  00:6AC8  80 10 88 90 80 00 20 40 
     256.  00:6AD0                          
     257.  00:6AD0                          ; Esqueleto Right - 1
     258.  00:6AD0                          ; mask 0 - 4Ch
     259.  00:6AD0                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  00:6AD0  01 03 03 03 01 00 00 01 
     260.  00:6AD8                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  00:6AD8  07 0B 13 23 03 04 04 02 
     261.  00:6AE0                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  00:6AE0  F8 D8 74 24 FC F8 F8 00 
     262.  00:6AE8                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  00:6AE8  C0 A0 90 20 80 40 40 20 
     263.  00:6AF0                          ; mask 1 - 50h
     264.  00:6AF0                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  00:6AF0  00 01 01 01 00 00 00 00 
     265.  00:6AF8                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  00:6AF8  01 08 11 21 01 00 00 00 
     266.  00:6B00                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  00:6B00  F8 F8 FC FC FC 78 50 00 
     267.  00:6B08                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  00:6B08  C0 A0 90 20 80 00 00 00 
     268.  00:6B10                          
     269.  00:6B10                          ; Esqueleto Right - 2
     270.  00:6B10                          ; mask 0 - 54h
     271.  00:6B10                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  00:6B10  03 07 06 06 03 01 01 01 
     272.  00:6B18                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  00:6B18  07 0B 13 0B 03 04 04 0A 
     273.  00:6B20                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  00:6B20  F0 B0 E8 48 F8 F0 F0 00 
     274.  00:6B28                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  00:6B28  C0 A0 90 08 80 60 10 00 
     275.  00:6B30                          ; mask 1 - 58h
     276.  00:6B30                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  00:6B30  01 03 03 03 01 00 00 00 
     277.  00:6B38                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  00:6B38  01 08 11 09 01 00 04 02 
     278.  00:6B40                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  00:6B40  F0 F0 F8 F8 F8 F0 A0 00 
     279.  00:6B48                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  00:6B48  C0 A0 90 08 80 00 00 00 
     280.  00:6B50                      
     281.  00:6B50                      SPRITE_COLOR_TABLE:       
     282.  00:6B50                           ;P1 - DOWN 1
     283.  00:6B50                          ;DOWN 1
     284.  00:6B50                          ; attr 0
     285.  00:6B50                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  00:6B50  05 05 0A 0B 0B 0B 0B 0B 
     286.  00:6B58                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  00:6B58  04 04 04 0A 0A 0A 08 08 
     287.  00:6B60                          ; attr 1
     288.  00:6B60                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  00:6B60  00 00 44 45 45 45 45 45 
     289.  00:6B68                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  00:6B68  4A 4A 4A 44 44 44 45 45 
     290.  00:6B70                          ; attr 2
     291.  00:6B70                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  00:6B70  00 00 41 00 40 00 00 00 
     292.  00:6B78                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  00:6B78  41 41 41 41 41 41 42 00 
     293.  00:6B80                               
     294.  00:6B80                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  00:6B80                          ; Disparo - antichrist    
     296.  00:6B80                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  00:6B80  00 00 00 0A 0A 0A 0A 0A 
     297.  00:6B88                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  00:6B88  0A 0A 0A 0A 0A 0A 00 00 
     298.  00:6B90                          ; Fantasma
     299.  00:6B90                          ; attr 0
     300.  00:6B90                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  00:6B90  0F 08 08 08 08 08 08 08 
     301.  00:6B98                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  00:6B98  08 08 08 08 08 08 08 0F 
     302.  00:6BA0                          ; attr 1
     303.  00:6BA0                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  00:6BA0  00 47 47 47 47 47 47 47 
     304.  00:6BA8                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  00:6BA8  47 47 47 47 47 47 47 00 
     305.  00:6BB0                          
     306.  00:6BB0                          
     307.  00:6BB0                          ; Esqueleto Left 1
     308.  00:6BB0                          ; attr 0
     309.  00:6BB0                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  00:6BB0  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  00:6BB8                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  00:6BB8  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  00:6BC0                          ; attr 1
     312.  00:6BC0                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  00:6BC0  41 49 49 49 41 41 41 00 
     313.  00:6BC8                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  00:6BC8  41 41 41 41 41 00 00 00 
     314.  00:6BD0                      
     315.  00:6BD0                      SPRITE_COLOR_P1_UP:
     316.  00:6BD0                          ;UP 1
     317.  00:6BD0                          ; attr 0
     318.  00:6BD0                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  00:6BD0  05 05 0A 05 05 05 05 05 
     319.  00:6BD8                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  00:6BD8  0A 05 0B 0A 0A 0A 08 08 
     320.  00:6BE0                          ; attr 1
     321.  00:6BE0                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  00:6BE0  00 00 44 00 40 00 00 00 
     322.  00:6BE8                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  00:6BE8  44 4A 45 45 45 45 45 45 
     323.  00:6BF0                          ; attr 2
     324.  00:6BF0                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  00:6BF0  00 00 41 00 00 00 00 00 
     325.  00:6BF8                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  00:6BF8  41 41 00 00 00 00 42 00 
     326.  00:6C00                          
     327.  00:6C00                          ;SPRITE_COLOR_P1_UP2:
     328.  00:6C00                          ;UP 1
     329.  00:6C00                          ; attr 0
     330.  00:6C00                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  00:6C00  05 05 0A 05 05 05 05 05 
     331.  00:6C08                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  00:6C08  0A 05 0B 0A 0A 0A 08 08 
     332.  00:6C10                          ; attr 1
     333.  00:6C10                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  00:6C10  00 00 44 00 40 00 00 00 
     334.  00:6C18                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  00:6C18  44 4A 45 45 45 45 45 45 
     335.  00:6C20                          ; attr 2
     336.  00:6C20                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  00:6C20  00 00 41 00 00 00 00 00 
     337.  00:6C28                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  00:6C28  41 41 00 00 00 00 42 00 
     338.  00:6C30                      
     339.  00:6C30                      
     340.  00:6C30                      SPRITE_COLOR_P1_DOWN:
     341.  00:6C30                          ;DOWN 1
     342.  00:6C30                          ; attr 0
     343.  00:6C30                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  00:6C30  05 05 0A 0B 0B 0B 0B 0B 
     344.  00:6C38                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  00:6C38  04 04 04 0A 0A 0A 08 08 
     345.  00:6C40                          ; attr 1
     346.  00:6C40                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  00:6C40  00 00 44 45 45 45 45 45 
     347.  00:6C48                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  00:6C48  4A 4A 4A 44 44 44 45 45 
     348.  00:6C50                          ; attr 2
     349.  00:6C50                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  00:6C50  00 00 41 00 40 00 00 00 
     350.  00:6C58                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  00:6C58  41 41 41 41 41 41 42 00 
     351.  00:6C60                          ;SPRITE_COLOR_P1_DOWN2:
     352.  00:6C60                          ;DOWN 1
     353.  00:6C60                          ; attr 0
     354.  00:6C60                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  00:6C60  05 05 0A 0B 0B 0B 0B 0B 
     355.  00:6C68                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  00:6C68  04 04 04 0A 0A 0A 08 08 
     356.  00:6C70                          ; attr 1
     357.  00:6C70                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  00:6C70  00 00 44 45 45 45 45 45 
     358.  00:6C78                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  00:6C78  4A 4A 4A 44 44 44 45 45 
     359.  00:6C80                          ; attr 2
     360.  00:6C80                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  00:6C80  00 00 41 00 40 00 00 00 
     361.  00:6C88                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  00:6C88  41 41 41 41 41 41 42 00 
     362.  00:6C90                      
     363.  00:6C90                      SPRITE_COLOR_P1_RIGHT:
     364.  00:6C90                          ; attr 0
     365.  00:6C90                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  00:6C90  05 05 0A 0B 0B 0B 0B 0B 
     366.  00:6C98                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  00:6C98  0B 0A 0A 0B 0A 0A 08 08 
     367.  00:6CA0                          ; attr 1
     368.  00:6CA0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  00:6CA0  00 00 44 45 45 45 45 45 
     369.  00:6CA8                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  00:6CA8  45 44 44 44 44 44 45 45 
     370.  00:6CB0                          ; attr 2
     371.  00:6CB0                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  00:6CB0  00 00 41 00 40 00 00 00 
     372.  00:6CB8                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  00:6CB8  00 41 41 41 41 41 42 00 
     373.  00:6CC0                             
     374.  00:6CC0                          ; attr 0
     375.  00:6CC0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  00:6CC0  05 05 0A 0B 0B 0B 0B 0B 
     376.  00:6CC8                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  00:6CC8  0B 0A 0A 0A 0B 0A 08 08 
     377.  00:6CD0                          ; attr 1
     378.  00:6CD0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  00:6CD0  00 00 44 45 45 45 45 45 
     379.  00:6CD8                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  00:6CD8  45 44 44 44 44 44 45 45 
     380.  00:6CE0                          ; attr 2
     381.  00:6CE0                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  00:6CE0  00 00 41 00 40 00 00 00 
     382.  00:6CE8                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  00:6CE8  00 41 41 41 41 41 42 00 
     383.  00:6CF0                      
     384.  00:6CF0                      stg1_gate:
     385.  00:6CF0  00 00 00 00 00 00       DB #00,#00,#00,#00,#00,#00
     386.  00:6CF6                      stg1_gate_blocked:
     387.  00:6CF6  01 01 01 01 01 01       DB #01,#01,#01,#01,#01,#01
     388.  00:6CFC                      mapa1:
     389.  00:6CFC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     389.  00:6CFC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     389.  00:6D0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  00:6D1C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     390.  00:6D1C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  00:6D2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     391.  00:6D3C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  00:6D3C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  00:6D4C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  00:6D5C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  00:6D5C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  00:6D6C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  00:6D7C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  00:6D7C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     393.  00:6D8C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  00:6D9C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:6D9C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:6DAC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:6DBC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:6DBC  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     395.  00:6DCC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:6DDC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  00:6DDC  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  00:6DEC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  00:6DFC                          
     398.  00:6DFC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  00:6DFC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  00:6E0C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  00:6E1C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  00:6E1C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  00:6E2C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  00:6E3C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  00:6E3C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  00:6E4C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  00:6E5C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     401.  00:6E5C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  00:6E6C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     402.  00:6E7C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     402.  00:6E7C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  00:6E8C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     403.  00:6E9C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  00:6E9C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  00:6EAC  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  00:6EBC                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     404.  00:6EBC  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     404.  00:6ECC  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     405.  00:6EDC                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  00:6EDC  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     405.  00:6EEC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  00:6EFC                      
     407.  00:6EFC                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  00:6EFC  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     407.  00:6F0C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  00:6F1C                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  00:6F1C  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     408.  00:6F2C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  00:6F3C                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  00:6F3C  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     409.  00:6F4C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  00:6F5C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  00:6F5C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     410.  00:6F6C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  00:6F7C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     411.  00:6F7C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  00:6F8C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  00:6F9C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  00:6F9C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     412.  00:6FAC  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:6FBC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     413.  00:6FBC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:6FCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:6FDC                      
     415.  00:6FDC                      mapa2:
     416.  00:6FDC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:6FDC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:6FEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:6FFC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  00:6FFC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:700C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:701C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  00:701C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:702C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:703C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:703C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:704C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:705C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  00:705C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:706C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:707C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  00:707C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:708C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:709C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  00:709C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:70AC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:70BC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:70BC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:70CC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:70DC                            
     425.  00:70DC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  00:70DC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:70EC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:70FC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  00:70FC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:710C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:711C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  00:711C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:712C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:713C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  00:713C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:714C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  00:715C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  00:715C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     429.  00:716C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  00:717C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  00:717C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  00:718C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  00:719C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  00:719C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  00:71AC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  00:71BC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  00:71BC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  00:71CC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  00:71DC                            
     434.  00:71DC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  00:71DC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  00:71EC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  00:71FC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  00:71FC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  00:720C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  00:721C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  00:721C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  00:722C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  00:723C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  00:723C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     437.  00:724C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  00:725C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  00:725C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     438.  00:726C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  00:727C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  00:727C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     439.  00:728C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  00:729C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  00:729C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     440.  00:72AC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  00:72BC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  00:72BC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     441.  00:72CC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  00:72DC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  00:72DC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     442.  00:72EC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  00:72FC                            
     444.  00:72FC                      mapa0:      
     445.  00:72FC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     445.  00:72FC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     445.  00:730C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     446.  00:731C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     446.  00:731C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     446.  00:732C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     447.  00:733C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     447.  00:733C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     447.  00:734C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     448.  00:735C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     448.  00:735C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     448.  00:736C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     449.  00:737C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     449.  00:737C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     449.  00:738C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     450.  00:739C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     450.  00:739C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     450.  00:73AC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     451.  00:73BC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     451.  00:73BC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     451.  00:73CC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     452.  00:73DC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     452.  00:73DC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     452.  00:73EC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     453.  00:73FC                            
     454.  00:73FC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     454.  00:73FC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     454.  00:740C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     455.  00:741C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     455.  00:741C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     455.  00:742C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     456.  00:743C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     456.  00:743C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     456.  00:744C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     457.  00:745C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:745C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:746C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:747C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:747C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:748C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:749C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:749C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     459.  00:74AC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:74BC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     460.  00:74BC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     460.  00:74CC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:74DC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     461.  00:74DC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:74EC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:74FC                      
     463.  00:74FC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     463.  00:74FC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     463.  00:750C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     464.  00:751C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     464.  00:751C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:752C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:753C                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     465.  00:753C  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     465.  00:754C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     466.  00:755C                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     466.  00:755C  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     466.  00:756C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     467.  00:757C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     467.  00:757C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  00:758C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     468.  00:759C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     468.  00:759C  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  00:75AC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     469.  00:75BC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     469.  00:75BC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  00:75CC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     470.  00:75DC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01   
     470.  00:75DC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  00:75EC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     471.  00:75FC                            
     472.  00:75FC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     472.  00:75FC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     472.  00:760C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     473.  00:761C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     473.  00:761C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     473.  00:762C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     474.  00:763C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     474.  00:763C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     474.  00:764C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     475.  00:765C                          
     476.  00:765C                      
     477.  00:765C                      SPRITE_COLOR_P1_LEFT:
     478.  00:765C                          ; attr 0
     479.  00:765C                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     479.  00:765C  05 05 0A 0B 0B 0B 0B 0B 
     480.  00:7664                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     480.  00:7664  0B 0A 0A 0B 0A 0A 08 08 
     481.  00:766C                          ; attr 1
     482.  00:766C                          DB $00,$00,$44,$45,$45,$45,$45,$45
     482.  00:766C  00 00 44 45 45 45 45 45 
     483.  00:7674                          DB $45,$44,$44,$44,$44,$44,$45,$45
     483.  00:7674  45 44 44 44 44 44 45 45 
     484.  00:767C                          ; attr 2
     485.  00:767C                          DB $00,$00,$41,$00,$40,$00,$00,$00
     485.  00:767C  00 00 41 00 40 00 00 00 
     486.  00:7684                          DB $00,$41,$41,$41,$41,$41,$42,$00
     486.  00:7684  00 41 41 41 41 41 42 00 
     487.  00:768C                          ;SPRITE_COLOR_P1_LEFT2:    
     488.  00:768C                          ; attr 0
     489.  00:768C                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     489.  00:768C  05 05 0A 0B 0B 0B 0B 0B 
     490.  00:7694                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     490.  00:7694  0B 0A 0A 0A 0B 0A 08 08 
     491.  00:769C                          ; attr 1
     492.  00:769C                          DB $00,$00,$44,$45,$45,$45,$45,$45
     492.  00:769C  00 00 44 45 45 45 45 45 
     493.  00:76A4                          DB $45,$44,$44,$44,$44,$44,$45,$45
     493.  00:76A4  45 44 44 44 44 44 45 45 
     494.  00:76AC                          ; attr 2
     495.  00:76AC                          DB $00,$00,$41,$00,$40,$00,$00,$00
     495.  00:76AC  00 00 41 00 40 00 00 00 
     496.  00:76B4                          DB $00,$41,$41,$41,$41,$41,$42,$00
     496.  00:76B4  00 41 41 41 41 41 42 00 
     497.  00:76BC                      
     498.  00:76BC                      BLANK_DATA:
     499.  00:76BC                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     499.  00:76BC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     499.  00:76CC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     500.  00:76DC                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     500.  00:76DC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     500.  00:76EC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     501.  00:76FC                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     501.  00:76FC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     501.  00:770C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     502.  00:771C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     502.  00:771C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     502.  00:772C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     503.  00:773C                      
     504.  00:773C                          
     505.  00:773C                      PaletteData:
     506.  00:773C                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     507.  00:773C  00 00                   db 0x00, 0x00 ; Color index 0
     508.  00:773E  30 00                   db 0x30, 0x00 ; Color index 1
     509.  00:7740  70 06                   db 0x70, 0x06 ; Color index 2
     510.  00:7742  50 00                   db 0x50, 0x00 ; Color index 3
     511.  00:7744  11 01                   db 0x11, 0x01 ; Color index 4
     512.  00:7746  22 02                   db 0x22, 0x02 ; Color index 5
     513.  00:7748  06 02                   db 0x06, 0x02 ; Color index 6
     514.  00:774A  77 07                   db 0x77, 0x07 ; Color index 7
     515.  00:774C  33 03                   db 0x33, 0x03 ; Color index 8
     516.  00:774E  66 06                   db 0x66, 0x06 ; Color index 9
     517.  00:7750  70 00                   db 0x70, 0x00 ; Color index 10
     518.  00:7752  64 05                   db 0x64, 0x05 ; Color index 11
     519.  00:7754  50 03                   db 0x50, 0x03 ; Color index 12
     520.  00:7756  02 04                   db 0x02, 0x04 ; Color index 13
     521.  00:7758  01 02                   db 0x01, 0x02 ; Color index 14
     522.  00:775A  00 00                   db 0x00, 0x00 ; Color index 15
     523.  00:775C                      
     524.  00:775C                      dummy_SPR_ATT__TBL:
     525.  00:775C  D9 00 00 00             db $D9, $00, $00, $00
     526.  00:7760  D9 00 00 00             db $D9, $00, $00, $00
     527.  00:7764  D9 00 00 00             db $D9, $00, $00, $00
     528.  00:7768  D9 00 00 00             db $D9, $00, $00, $00
     529.  00:776C  D9 00 00 00             db $D9, $00, $00, $00
     530.  00:7770  D9 00 00 00             db $D9, $00, $00, $00
     531.  00:7774  D9 00 00 00             db $D9, $00, $00, $00
     532.  00:7778  D9 00 00 00             db $D9, $00, $00, $00
     533.  00:777C                      
     534.  00:777C  D9 00 00 00             db $D9, $00, $00, $00
     535.  00:7780  D9 00 00 00             db $D9, $00, $00, $00
     536.  00:7784  D9 00 00 00             db $D9, $00, $00, $00
     537.  00:7788  D9 00 00 00             db $D9, $00, $00, $00
     538.  00:778C  D9 00 00 00             db $D9, $00, $00, $00
     539.  00:7790  D9 00 00 00             db $D9, $00, $00, $00
     540.  00:7794  D9 00 00 00             db $D9, $00, $00, $00
     541.  00:7798  D9 00 00 00             db $D9, $00, $00, $00
     542.  00:779C                      
     543.  00:779C  D9 00 00 00             db $D9, $00, $00, $00
     544.  00:77A0  D9 00 00 00             db $D9, $00, $00, $00
     545.  00:77A4  D9 00 00 00             db $D9, $00, $00, $00
     546.  00:77A8  D9 00 00 00             db $D9, $00, $00, $00
     547.  00:77AC  D9 00 00 00             db $D9, $00, $00, $00
     548.  00:77B0  D9 00 00 00             db $D9, $00, $00, $00
     549.  00:77B4  D9 00 00 00             db $D9, $00, $00, $00
     550.  00:77B8  D9 00 00 00             db $D9, $00, $00, $00
     551.  00:77BC                      
     552.  00:77BC  D9 00 00 00             db $D9, $00, $00, $00
     553.  00:77C0  D9 00 00 00             db $D9, $00, $00, $00
     554.  00:77C4  D9 00 00 00             db $D9, $00, $00, $00
     555.  00:77C8  D9 00 00 00             db $D9, $00, $00, $00
     556.  00:77CC  D9 00 00 00             db $D9, $00, $00, $00
     557.  00:77D0  D9 00 00 00             db $D9, $00, $00, $00
     558.  00:77D4  D9 00 00 00             db $D9, $00, $00, $00
     559.  00:77D8  D9 00 00 00             db $D9, $00, $00, $00
     614   00:77DC                      TILES1:
     615   00:77DC  (07F9)               INCBIN "gfx\tiles1.sc5",#7
     616   00:7FD5                      
     617   00:7FD5  (01)                 PAGE 1
     618   01:8000                      ; CODE O NO
     619   01:8000                      
     620   01:8000  (02)                 PAGE 2
     621   02:8000                      
     622   02:8000  (03)                 PAGE 3
     623   03:8000                      
     624   03:8000  (04)                 PAGE 4
     625   04:8000  (05)                 PAGE 5
     626   05:8000  (06)                 PAGE 6
     627   06:8000                      FONT:
     628   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     629   06:87F7  (07)                 PAGE 7
     630   07:8000                      CEMENTER1
     631   07:8000                       ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     632   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     633   07:C000  (08)                 PAGE 8
     634   08:8000  (200D)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     635   08:A00D  (09)                 PAGE 9
     636   09:8000                      GRAPHIC
     637   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     638   09:C000  (0A)                 PAGE 10
     639   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     640   0A:C000                      
     641   0A:C000  (0B)                 PAGE 11
     642   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     643   0B:C000                      
     644   0B:C000  (0C)                 PAGE 12
     645   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     646   0C:9400                      
     647   0C:9400  (0D)                 PAGE 13
     648   0D:8000                      CEMENTER2
     649   0D:8000                      ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     650   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     651   0D:C000  (0E)                 PAGE 14
     652   0E:8000  (200E)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     653   0E:A00E  (0F)                 PAGE 15
     654   0F:C000                      ;---------------------------------------------------------
     655   0F:C000                      ; Variables
     656   0F:C000                      ;---------------------------------------------------------
     657   0F:C000                      	
     658   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     659   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     660   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     661   0F:C000                      ;ETC
     662   0F:C000                      ;
     663   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ;entities data
       2.  0F:C000  00 (15)             ENTITY_DATA: ds 15 ;  5 bytes, 3 entities
       3.  0F:C00F                      
       4.  0F:C00F  (0F:0005)           ENTITY_SIZE: EQU 5
       5.  0F:C00F  (0F:C000)           ENTITY_PLAYER_POINTER:  EQU ENTITY_DATA
       6.  0F:C00F  (0F:C005)           ENTITY_ENEMY1_POINTER:  EQU ENTITY_DATA+5
       7.  0F:C00F  (0F:C005)           ENTITY_ENEMY2_POINTER:  EQU ENTITY_DATA+5
       8.  0F:C00F                      
       9.  0F:C00F  00 (1)              current_level: 	ds 1
      10.  0F:C010                      ; VDP variables
      11.  0F:C010  00 (15)             tileDat: ds 15
      12.  0F:C01F  00 (15)             energyDat: ds 15
      13.  0F:C02E                      
      14.  0F:C02E                      ; puzzle 1st stage
      15.  0F:C02E  00 (1)              stg1_puzzle_solved DS 1
      16.  0F:C02F                      
      17.  0F:C02F  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
      18.  0F:C030  00 (1)              SHOWING_MIKE_DIALOG  DS 1
      19.  0F:C031  00 (1)              SHOWING_JOHN_DIALOG  DS 1
      20.  0F:C032  00 (1)              SHOWING_GUS_DIALOG  DS 1
      21.  0F:C033  (0F:0008)           FONT_HEIGHT EQU 8
      22.  0F:C033  (0F:0008)           FONT_WIDTH  EQU 8
      23.  0F:C033  00 (2)              CHR_ACR DS 2
      24.  0F:C035  00 (1)              PTR_STR_DX DS 1
      25.  0F:C036  00 (1)              PTR_STR_DY DS 1
      26.  0F:C037                      
      27.  0F:C037  00 (1)              LAST_KEY_PRESSED DS 1
      28.  0F:C038  00 (1)              OLD_KEY_PRESSED DS 1
      29.  0F:C039  00                  JIFFY_TEMP DB $00
      30.  0F:C03A  00                  CHAR_SPEED_X DB $00
      31.  0F:C03B  00                  CHAR_SPEED_Y DB $00
      32.  0F:C03C  00                  CHAR_SPEED_X_GHOST DB $00
      33.  0F:C03D  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      34.  0F:C03E  00 (1)              CHAR_GHOST_DEAD DS 1
      35.  0F:C03F  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      36.  0F:C040  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      37.  0F:C041  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      38.  0F:C042  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      39.  0F:C043  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      40.  0F:C044  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      41.  0F:C045  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      42.  0F:C046  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      43.  0F:C047  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      44.  0F:C048  00 (1)              CHAR_SPEED_SHOOT DS 1
      45.  0F:C049                      SPRITE_ATTRS:
      46.  0F:C049  00 (128)                DS 128
      47.  0F:C0C9                      SLOTBIOS:
      48.  0F:C0C9  00 (1)                  DS 1
      49.  0F:C0CA                      SLOTGAME:
      50.  0F:C0CA  00 (1)                  DS 1
      51.  0F:C0CB                      SLOTRAM:
      52.  0F:C0CB  00 (1)                  DS 1
      53.  0F:C0CC                      SPRITE_PTR_REPLACE:
      54.  0F:C0CC  00 (2)                  DS 2
      55.  0F:C0CE                      SPRITE_COLOR_REPLACE:
      56.  0F:C0CE  00 (2)                  DS 2
      57.  0F:C0D0                      SPRITE_COLOR_REPLACE2:
      58.  0F:C0D0  00 (2)                  DS 2
      59.  0F:C0D2                      MAPA:
      60.  0F:C0D2  00 (2)                  DS 2
      61.  0F:C0D4                      BITMAP:
      62.  0F:C0D4  00 (2)                  DS 2
      63.  0F:C0D6                      MAP_RAM:
      64.  0F:C0D6  00 (736)                DS 736
      65.  0F:C3B6                      
      66.  0F:C3B6                      
     664   0F:C3B6                          include "include\ayFX-RAM.ASM"
       1.  0F:C3B6                      		; --- ayFX REPLAYER v1.31 ---
       2.  0F:C3B6                      
       3.  0F:C3B6                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  0F:C3B6                      
       5.  0F:C3B6  00 (1)              ayFX_MODE:	ds	1			; ayFX mode
       6.  0F:C3B7  00 (2)              ayFX_BANK:	ds	2			; Current ayFX Bank
       7.  0F:C3B9  00 (1)              ayFX_PRIORITY:	ds	1			; Current ayFX stream priotity
       8.  0F:C3BA  00 (2)              ayFX_POINTER:	ds	2			; Pointer to the current ayFX stream
       9.  0F:C3BC  00 (2)              ayFX_TONE:	ds	2			; Current tone of the ayFX stream
      10.  0F:C3BE  00 (1)              ayFX_NOISE:	ds	1			; Current noise of the ayFX stream
      11.  0F:C3BF  00 (1)              ayFX_VOLUME:	ds	1			; Current volume of the ayFX stream
      12.  0F:C3C0  00 (1)              ayFX_CHANNEL:	ds	1			; PSG channel to play the ayFX stream
      13.  0F:C3C1                      IF ( AYFXRELATIVE == 1 )
      14.  0F:C3C1                    ~ 	ayFX_VT:	sds	2			; ayFX relative volume table pointer
      15.  0F:C3C1                    ~ ENDIF
      16.  0F:C3C1                      
      17.  0F:C3C1                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      18.  0F:C3C1                      ;AYREGS:		.ds	14			; Ram copy of PSG registers
      19.  0F:C3C1                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     665   0F:C3C1  (0000)              	ENDMAP
     666   0F:C3C1                        

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:00000069   CLRSPR
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:0000000C   PLAYER_COLLISION_OFFSET_X
00:0000000C   PLAYER_COLLISION_OFFSET_Y
00:0000000C X PLAYER_COLLISION_WIDTH
00:00000010   PLAYER_WIDTH
00:00000010   PLAYER_HEIGHT
00:00000001   PlayerX
00:00000001   PlayerY
00:0000000C   ENEMY_COLLISION_OFFSET_X
00:0000000C   ENEMY_COLLISION_OFFSET_Y
00:0000000C   ENEMY_COLLISION_WIDTH
00:0000000C   ENEMY_COLLISION_HEIGHT
00:00000010 X ENEMY_WIDTH
00:00000001   ENEMY_X
00:00000001   ENEMY_Y
00:00000071   STG2_TILE1_X
00:0000006E   STG2_TILE1_Y
00:00004010   ANDY_MAX_ENERGY
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006 X MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018 X SPR_GHOST_STG2
00:0000003C X SPR_GHOST_STG2_PTRN_L1
00:00000044 X SPR_GHOST_STG2_PTRN_L2
00:0000004C X SPR_GHOST_STG2_PTRN_R1
00:00000054 X SPR_GHOST_STG2_PTRN_R2
00:00004016   mike_tomb_strings
00:0000401C   string01M
00:00004025   string02M
00:00004041   string03M
00:00004042   john_tomb_strings
00:00004048   string01J
00:00004051   string02J
00:0000406C   string03J
00:0000406D   gus_tomb_strings
00:00004073   string01G
00:0000407C   string02G
00:00004099   string03G
00:0000409A   stg1_skull_strings
00:000040A0   string01Sk
00:000040A8   string02Sk
00:000040C3   string03Sk
00:000040C4   stg1_puzzle_solved_strings
00:000040CA   string01P
00:000040D1   string02P
00:000040EA   string03P
00:000040EB X EnemyCollisionCheck
00:00004111   EnemyCollisionCheck.check
00:00004118   EnemyCollisionCheck.other
00:0000411A   check_spr_collision
00:00004127   check_spr_collision.no_collision
00:0000412A   get_bloque_en_X_Y
00:0000414B   SetVdp_Write
00:00004167   Set212Lines
00:00004173   ClearVram_MSX2
00:0000417D   ClearVram_MSX2.loop_2
00:0000417F   ClearVram_MSX2.loop_1
00:00004181   ClearVram_MSX2.loop
00:0000418E X opening_screen
00:000041B1   load_screen
00:000041D3   _vdpsetvramwr
00:000041E4 X _vdpsetvramwr14
00:000041ED   GETSLOT
00:00004204   EXIT
00:00004206   SETPAGES32K
00:0000420B   NOPRET
00:00004219   SET_SCREEN5_MODE
00:0000423E   DUMP_SPR_ALL
00:00004263   load_tiles_vdp
00:0000426D   DUMP_SPR_ATTS
00:00004287 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004288   DUMP_SPR_P1
00:000042A5   SetPalette
00:000042B4 X DUMMY_SPR_ATTS
00:000042C1   move_up
00:000042FB   move_down
00:00004336   move_right
00:00004347   move_right.KB_UPDOWN_PRESSED
00:00004395   move_left
00:000043A6   move_left.KB_UPDOWN_PRESSED
00:000043F4   CHECK_DIRECTION_MAIN
00:00004416   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:0000442B   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:00004440   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:00004455   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000446A   CHECK_DIRECTION_MAIN.FINISH
00:00004481   UPDATE_MOVEMENT
00:000044A9   ANIMATE_P1
00:000044D0   ANIMATE_P1.SET_SPR_1P_2
00:000044E7   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:000044ED   NO_MOVEMENT
00:000044EE   MOVE_SHOOT
00:00004506   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:0000450E   MOVE_SHOOT.MOVE_SHOOT_UP
00:00004516   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:0000451E   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:00004523   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:00004538   MOVE_SHOOT.ADD_SHOOT_Y
00:00004542   MOVE_SHOOT.ADD_DISTANCE
00:0000454D X MOVE_SHOOT.HIDE_SHOOT
00:00004559   SHOOT_MAIN_CHAR
00:00004593   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000045A2   SHOOT_MAIN_CHAR.SHOOT_UP
00:000045B5   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:000045C5   SHOOT_MAIN_CHAR.CONTINUE
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008 X VDP_NX
00:0000000A X VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098 X CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008 X VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000010   ENERGY_WIDTH
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_PAGE
00:00008000 X TILES_START_ADDR
00:00000002   BACK_BUFFER
00:00000000   FRONT_BUFFER
00:00000014   DIAGBOX_HEIGHT
00:000000FF   DIAGBOX_WIDTH
00:000045C9   initVDPBuffers
00:000045EB   print_strings_dialog_box
00:00004618   print_string
00:00004618   print_string.loop_str
00:00004633   print_string.first_line_font
00:0000464C   print_char
00:00004683 X CLEAR_DIALOG_BOX_v1
00:000046B5 X CLEAR_DIALOG_BOX_v2
00:000046E7   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:000046EE X SETPAG
00:000046FC X SET_WR
00:00004717 X SET_RD
00:00004730   VDPCMD
00:00004743   WAITCE
00:0000475B   ENASCR
00:00004762   DISSCR
00:00004767   DISSCR.OUT
00:00004773 X ENASPR
00:0000477A X DISSPR
00:0000477F   DISSPR.OUT
00:0000478B X LIN192
00:00004792 X LIN212
00:00004797   LIN212.OUT
00:000047A3   VDP_Ready
00:000047BC   DRAW_ANDY_ENERGY
00:000047CA   DRAW_ANDY_ENERGY.check_next_drop
00:000047EA   DRAW_ANDY_ENERGY.draw_half_drop
00:000047FC   DRAW_ANDY_ENERGY.draw_empty_drops
00:0000480D   DRAW_ANDY_ENERGY.loop
00:00004825   tileDatROM
00:00004834   energyDatROM
00:00004843   DiagBoxToBackBufROM
00:00004852   DiagBoxToFrontkBufROM
00:00004861 X DiagBoxClearROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:00000017   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:00004870   CHECKLP
00:00004881 X PT3_MUTE
00:0000488D   PT3_INIT
00:000048CC   PT3_INIT.TP_0
00:000048D8   PT3_INIT.TP_1
00:000048DF   PT3_INIT.TP_2
00:0000494D   PT3_INIT.L1
00:0000495A   PT3_INIT.L2
00:0000495E X PT3_INIT.L3
00:00004985   PT3_INIT.CORR_1
00:00004993   PT3_INIT.CORR_2
00:0000499A   PT3_INIT.TC_EXIT
00:000049A5   PT3_INIT.INITV1
00:000049AD   PT3_INIT.INITV2
00:000049C1   PT3_INIT.INITV3
00:000049C5   PD_OrSm
00:000049CF   PD_SAM
00:000049D0   PD_SAM_
00:000049E6   PD_VOL
00:000049EF   PD_EOff
00:000049F7   PD_SorE
00:00004A01   PD_ENV
00:00004A06   PD_ORN
00:00004A0B   PD_ESAM
00:00004A18   PTDECOD
00:00004A27   PD_LOOP
00:00004A2A   PD_LP2
00:00004A57   PD_NOIS
00:00004A5C   PD_REL
00:00004A62   PD_NOTE
00:00004A6A   PD_RES
00:00004A7C   PD_FIN
00:00004A83   C_PORTM
00:00004ACE   C_PORTM.NOSIG
00:00004AD8   SET_STP
00:00004AE4   C_GLISS
00:00004AF7   C_SMPOS
00:00004AFD   C_ORPOS
00:00004B03   C_VIBRT
00:00004B1B   C_ENGLS
00:00004B2D   C_DELAY
00:00004B33   SETENV
00:00004B4E   C_NOP
00:00004B4F   SETORN
00:00004B68   SPCCOMS
00:00004B88   CHREGS
00:00004BAB   CHREGS.CH_ORPS
00:00004BB6   CHREGS.CH_NTP
00:00004BBC   CHREGS.CH_NOK
00:00004BD7   CHREGS.CH_SMPS
00:00004BED   CHREGS.CH_NOAC
00:00004C34   CHREGS.CH_STPP
00:00004C49   CHREGS.CH_AMP
00:00004C5B   CHREGS.CH_AMIN
00:00004C60   CHREGS.CH_SVAM
00:00004C63   CHREGS.CH_NOAM
00:00004C6C   CHREGS.CH_APOS
00:00004C72   CHREGS.CH_VOL
00:00004C7D X CHREGS.CH_ENV
00:00004C84   CHREGS.CH_NOEN
00:00004C9E   CHREGS.NO_ENAC
00:00004CA5   CHREGS.NO_ENSL
00:00004CB3   CHREGS.CH_MIX
00:00004CB7   CHREGS.CH_EXIT
00:00004CD6   CHREGS.CH_ONDL
00:00004CDA   PT3_PLAY
00:00004D0E   PT3_PLAY.PLNLP
00:00004D35   PT3_PLAY.PL1A
00:00004D40   PT3_PLAY.PL1B
00:00004D55   PT3_PLAY.PL1C
00:00004D6A   PT3_PLAY.PL1D
00:00004D70   PT3_PLAY.PL2
00:00004DD2   PT3_ROUT
00:00004DD3   ROUT_A0
00:00004DDF   ROUT_A0.LOUT
00:00004DF3   NT_DATA
00:00004E03   T_
00:00004E03   TCOLD_0
00:00004E0F   TCNEW_1
00:00004E0F   TCOLD_1
00:00004E11   TCOLD_2
00:00004E23   TCNEW_3
00:00004E24   TCOLD_3
00:00004E2D   TCNEW_0
00:00004E38   TCNEW_2
00:00004E43   EMPTYSAMORN
00:00004E47   T_PACK
00:0000F000   PT3_SETUP
00:0000F000   PT3_MODADDR
00:0000F002   PT3_CrPsPtr
00:0000F004   PT3_SAMPTRS
00:0000F006   PT3_OrnPtrs
00:0000F008   PT3_PDSP
00:0000F00A   PT3_CSP
00:0000F00C   PT3_PSP
00:0000F00E   PT3_PrNote
00:0000F00F   PT3_PrSlide
00:0000F011   PT3_AdInPtA
00:0000F013   PT3_AdInPtB
00:0000F015   PT3_AdInPtC
00:0000F017   PT3_LPosPtr
00:0000F019   PT3_PatsPtr
00:0000F01B   PT3_Delay
00:0000F01C   PT3_AddToEn
00:0000F01D   PT3_Env_Del
00:0000F01E   PT3_ESldAdd
00:0000F020   PT3_NTL3
00:0000F022   VARS
00:0000F022   ChanA
00:0000F03F   ChanB
00:0000F05C   ChanC
00:0000F079   DelyCnt
00:0000F07A   CurESld
00:0000F07C   CurEDel
00:0000F07D   Ns_Base_AddToNs
00:0000F07D   Ns_Base
00:0000F07E   AddToNs
00:0000F07F   NT_
00:0000F13F   AYREGS
00:0000F13F   VT_
00:0000F14D   EnvBase
00:0000F14F   VAR0END
00:0000F14F   T1_
00:0000F14F   T_NEW_1
00:0000F14F   T_OLD_1
00:0000F167   T_OLD_2
00:0000F17F   T_NEW_3
00:0000F17F   T_OLD_3
00:0000F181   T_OLD_0
00:0000F181   T_NEW_0
00:0000F199   T_NEW_2
00:00000000 X AYFXRELATIVE
00:00004E7C   ayFX_SETUP
00:00004E87   ayFX_END
00:00004E8D   ayFX_INIT
00:00004E9E   ayFX_INIT.CHECK_PRI
00:00004EBF   ayFX_INIT.INIT_END
00:00004EC3   ayFX_PLAY
00:00004ED7   ayFX_PLAY.TAKECB
00:00004EE8   ayFX_PLAY.CHECK_NN
00:00004EF5   ayFX_PLAY.SETPOINTER
00:00004F09   ayFX_PLAY.SETMASKS
00:00004F17 X ayFX_PLAY.CHK1
00:00004F19 X ayFX_PLAY.LAY_C
00:00004F26   ayFX_PLAY.CHK2
00:00004F2B X ayFX_PLAY.PLAY_B
00:00004F38   ayFX_PLAY.CHK3
00:00004F3B X ayFX_PLAY.PLAY_A
00:00004F48   ayFX_PLAY.SETMIXER
00:00004F58 X metatiles_data
00:00004F85   init_player
00:00004F8A   START
00:00004FCF   INIT_CHARS_VARS
00:0000505E   STAGE1
00:000050CA   STAGE1.nobackfromstg2
00:000050D3   MAIN_LOOP
00:000050DE X MAIN_LOOP.check_tombs
00:0000513B   MAIN_LOOP.puzzle_wrong_order
00:00005161   MAIN_LOOP.check_john_tomb
00:000051A9   MAIN_LOOP.check_gus_tomb
00:000051FB   MAIN_LOOP.check_skull_hint
00:0000521F   MAIN_LOOP.check_mike_dialog_box
00:0000522F   MAIN_LOOP.check_gus_dialog
00:0000523F   MAIN_LOOP.check_john_dialog
00:0000524F   MAIN_LOOP.check_skull_dialog
00:0000525D   MAIN_LOOP.animate_ghost
00:0000527F   MAIN_LOOP.CHANGE_DIR_RIGHT
00:0000528C   MAIN_LOOP.CHANGE_DIR_LEFT
00:00005295   MAIN_LOOP.check_pattern
00:000052B0   MAIN_LOOP.change_pattern_L
00:000052BB   MAIN_LOOP.check_pattern_RIGHT
00:000052CE   MAIN_LOOP.change_pattern_R
00:000052D6   MAIN_LOOP.continue
00:000052D9 X MAIN_LOOP.CHECK_GHOST
00:000052F5 X MAIN_LOOP.KILL_GHOST
00:00005302   MAIN_LOOP.check_KB
00:0000532C X no_arrows
00:00005334   STAGE2
00:00005372   MAIN_LOOP2
00:000053A6   MAIN_LOOP2.GHOST_DEAD
00:000053A9   MAIN_LOOP2.no_screen_change
00:000053BD   MAIN_LOOP2.continue
00:000053E8   AFX
00:000055DE   SONG
00:00006570   SPRITE_P1_UP
00:00006630   SPRITE_P1_DOWN
00:000066F0   SPRITE_P1_LEFT
00:000067B0   SPRITE_P1_RIGHT
00:00006870   SPRITE_PATTERN
00:00006B50   SPRITE_COLOR_TABLE
00:00006BD0   SPRITE_COLOR_P1_UP
00:00006C30   SPRITE_COLOR_P1_DOWN
00:00006C90   SPRITE_COLOR_P1_RIGHT
00:00006CF0   stg1_gate
00:00006CF6   stg1_gate_blocked
00:00006CFC   mapa1
00:00006FDC   mapa2
00:000072FC X mapa0
00:0000765C   SPRITE_COLOR_P1_LEFT
00:000076BC   BLANK_DATA
00:0000773C   PaletteData
00:0000775C   dummy_SPR_ATT__TBL
00:000077DC   TILES1
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   ENTITY_DATA
0F:00000005 X ENTITY_SIZE
0F:0000C000   ENTITY_PLAYER_POINTER
0F:0000C005 X ENTITY_ENEMY1_POINTER
0F:0000C005 X ENTITY_ENEMY2_POINTER
0F:0000C00F   current_level
0F:0000C010   tileDat
0F:0000C01F   energyDat
0F:0000C02E   stg1_puzzle_solved
0F:0000C02F   SHOWING_SKULL_STG1_DIALOG
0F:0000C030   SHOWING_MIKE_DIALOG
0F:0000C031   SHOWING_JOHN_DIALOG
0F:0000C032   SHOWING_GUS_DIALOG
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C033   CHR_ACR
0F:0000C035 X PTR_STR_DX
0F:0000C036 X PTR_STR_DY
0F:0000C037 X LAST_KEY_PRESSED
0F:0000C038   OLD_KEY_PRESSED
0F:0000C039   JIFFY_TEMP
0F:0000C03A   CHAR_SPEED_X
0F:0000C03B   CHAR_SPEED_Y
0F:0000C03C   CHAR_SPEED_X_GHOST
0F:0000C03D X CHAR_SPEED_X_GHOST_STG2
0F:0000C03E   CHAR_GHOST_DEAD
0F:0000C03F X CHAR_GHOST_DEAD_STG2
0F:0000C040 X CHAR_MIN_STEP_STG2
0F:0000C041   CHAR_DIR_GHOST1
0F:0000C042 X CHAR_DIR_GHOST_STG2
0F:0000C043   CHAR_DIR_MAIN
0F:0000C044   CHAR_NEW_DIR_MAIN
0F:0000C045   CHAR_MAIN_SHOOT
0F:0000C046   CHAR_MIN_STEP
0F:0000C047   CHAR_DISTANCE_SHOOT
0F:0000C048   CHAR_SPEED_SHOOT
0F:0000C049   SPRITE_ATTRS
0F:0000C0C9 X SLOTBIOS
0F:0000C0CA X SLOTGAME
0F:0000C0CB X SLOTRAM
0F:0000C0CC   SPRITE_PTR_REPLACE
0F:0000C0CE   SPRITE_COLOR_REPLACE
0F:0000C0D0   SPRITE_COLOR_REPLACE2
0F:0000C0D2   MAPA
0F:0000C0D4   BITMAP
0F:0000C0D6   MAP_RAM
0F:0000C3B6   ayFX_MODE
0F:0000C3B7   ayFX_BANK
0F:0000C3B9   ayFX_PRIORITY
0F:0000C3BA   ayFX_POINTER
0F:0000C3BC   ayFX_TONE
0F:0000C3BE   ayFX_NOISE
0F:0000C3BF   ayFX_VOLUME
0F:0000C3C0   ayFX_CHANNEL


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00003FDB

   Address   Length Align   Label
   00004000   16341         ANDY_MAX_ENERGY
   00007FD5       6         
   00007FDB      37       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 0000200D

   Address   Length Align   Label
   00008000    8205         
   0000A00D    8179       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 0000200E

   Address   Length Align   Label
   00008000    8206         
   0000A00E    8178       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000003C1

   Address   Length Align   Label
   0000C000     961         ENTITY_DATA
   0000C3C1   15423       <empty>
