Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.05.01 - 14:44:19]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:798E                      
       3   00:798E                      ;ROM ASCII16
       4   00:798E                      		defpage	0,0x4000, 0x4000
       5   00:798E                      		defpage	1,0x8000, 0x4000        
       6   00:798E                      		defpage	2..14 ;Here it is determined rom size        
       7   00:798E                              defpage	15,0xC000, 0x4000
       8   00:798E                      
       9   00:798E  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:798E  (00:6000)           _bank1	equ	6000h
      11   00:798E  (00:7000)           _bank2	equ	7000h
      12   00:798E  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:7994  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 BB 4C 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      11.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ; VDP Const
       2.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
       3.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
       4.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
       5.  00:4010                      
       6.  00:4010  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
       7.  00:4010  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
       8.  00:4010  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
       9.  00:4010                      
      10.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      11.  00:4010  (00:0007)           KB_RIGHT 				equ 7
      12.  00:4010  (00:0006)           KB_DOWN 				equ 6
      13.  00:4010  (00:0005)           KB_UP 					equ	5        
      14.  00:4010  (00:0004)           KB_LEFT 				equ	4
      15.  00:4010  (00:0003)           KB_DEL 					equ	3
      16.  00:4010  (00:0000)           KB_SPACE				equ	0
      17.  00:4010                      
      18.  00:4010  (00:0001)           MOV_SPEED				equ 1
      19.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      20.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      21.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      22.  00:4010  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      23.  00:4010  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      24.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      25.  00:4010  (00:0098)           PORT_0                  equ 0x98
      26.  00:4010  (00:0099)           PORT_1                  equ 0x99
      27.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      28.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      29.  00:4010                      
      30.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      31.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      32.  00:4010                      
      33.  00:4010  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      34.  00:4010  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      35.  00:4010  (00:0049)           GUS_TOMB_STG1_X             equ 73
      36.  00:4010  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      37.  00:4010  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      38.  00:4010  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      39.  00:4010  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      40.  00:4010                      
      41.  00:4010  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
      42.  00:4010  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
      43.  00:4010  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
      44.  00:4010  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
      45.  00:4010  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
      46.  00:4010  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
      47.  00:4010  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
      48.  00:4010                      
      49.  00:4010  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
      50.  00:4010  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
      51.  00:4010  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
      52.  00:4010  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
      53.  00:4010  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
      54.  00:4010                      
      22   00:4010                          include "include\BTH_strings.asm"
       1.  00:4010  16 40 1C 40 38 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:4016                      ; Caben 23 caracteres en cada línea
       3.  00:4016  4D 49 4B 45 3A 00   string01M: db 'MIKE:',0
       4.  00:401C                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:401C  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:402C  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4038  00                  string03M: db 0
       6.  00:4039                      
       7.  00:4039  3F 40 45 40 60 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:403F                      ; Caben 23 caracteres en cada línea
       9.  00:403F  4A 4F 48 4E 3A 00   string01J: db 'JOHN:',0
      10.  00:4045                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4045  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4055  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:4060  00                  string03J: db 0
      12.  00:4061                      
      13.  00:4061  67 40 6C 40 89 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4067                      ; Caben 23 caracteres en cada línea
      15.  00:4067  47 55 53 3A 00      string01G: db 'GUS:',0
      16.  00:406C                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:406C  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:407C  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:4089  00                  string03G: db  0
      18.  00:408A                      
      19.  00:408A  90 40 98 40 B3 40   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:4090                      ; Caben 23 caracteres en cada línea
      21.  00:4090                      string01Sk: db 'MURRAY:',0
      21.  00:4090  4D 55 52 52 41 59 3A 00 
      22.  00:4098                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:4098  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:40A8  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:40B3  00                  string03Sk: db 0
      24.  00:40B4                      
      23   00:40B4                      
      24   00:40B4                      ; Funciones auxiliares
      25   00:40B4                      	include "include\BTH_func.asm"
       1.  00:40B4                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:40B4                      ;Entrada:
       3.  00:40B4                      ;   b - Y SPR1
       4.  00:40B4                      ;   C - X SPR1
       5.  00:40B4                      
       6.  00:40B4                      ;   d - Y SPR2
       7.  00:40B4                      ;   e - X SPR2
       8.  00:40B4                      ;Salida:
       9.  00:40B4                      ;   a - bloque
      10.  00:40B4                      ;Modifica:
      11.  00:40B4                      ;   a, hl, de
      12.  00:40B4                      check_spr_collision:        
      13.  00:40B4  78                          LD A,B          ; a = Y SPR1
      14.  00:40B5  BA                          CP D
      15.  00:40B6  C2 C1 40                    JP NZ,.no_collision
      16.  00:40B9                      
      17.  00:40B9  79                          LD A,C          ; a = X SPR1
      18.  00:40BA  BB                          CP E
      19.  00:40BB  C2 C1 40                    JP NZ,.no_collision
      20.  00:40BE                      
      21.  00:40BE  3E 01                       LD A,1
      22.  00:40C0  C9                          RET
      23.  00:40C1                      .no_collision
      24.  00:40C1  3E 00                   LD A,0
      25.  00:40C3  C9                      RET
      26.  00:40C4                      
      27.  00:40C4                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:40C4                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:40C4                      ;Entrada:
      30.  00:40C4                      ;   d - X
      31.  00:40C4                      ;   e - y
      32.  00:40C4                      ;Salida:
      33.  00:40C4                      ;   a - bloque
      34.  00:40C4                      ;Modifica:
      35.  00:40C4                      ;   a, hl, de
      36.  00:40C4                      get_bloque_en_X_Y:
      37.  00:40C4                              ;(y/8)*32+(x/8)
      38.  00:40C4  7B                          ld a,e      ;a=y
      39.  00:40C5  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:40CB  26 00                       ld h,0
      41.  00:40CD  6F                          ld l,a      ;hl=y/8
      42.  00:40CE  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:40D3                      
      44.  00:40D3  7A                          ld a,d      ;a=x
      45.  00:40D4  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:40DA  16 00                       ld d,0
      47.  00:40DC  5F                          ld e,a      ;de=x/8
      48.  00:40DD  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:40DE                      
      50.  00:40DE  ED 5B B2 C0                 ld de,(MAPA)
      51.  00:40E2  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:40E3                      
      53.  00:40E3  7E                          ld a,[hl]
      54.  00:40E4  C9                          ret
      55.  00:40E5                      
      56.  00:40E5                      ; SCREEN 8
      57.  00:40E5                      SetVdp_Write:
      58.  00:40E5                      
      59.  00:40E5                      	; transform address from 
      60.  00:40E5                      	;
      61.  00:40E5                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:40E5                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:40E5                      	;
      64.  00:40E5                      	; to
      65.  00:40E5                      	;
      66.  00:40E5                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:40E5                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:40E5  CB 04                   rlc     h
      69.  00:40E7  17                      rla
      70.  00:40E8  CB 04                   rlc     h
      71.  00:40EA  17                      rla
      72.  00:40EB  CB 3C                   srl     h
      73.  00:40ED  CB 3C                   srl     h
      74.  00:40EF                      
      75.  00:40EF  F3                      di
      76.  00:40F0                      	    ; write bits a14-16 of address to R#14
      77.  00:40F0  D3 99               	    out     (PORT_1), a
      78.  00:40F2  3E 8E               	    ld      a, 14 + 128
      79.  00:40F4  D3 99               	    out     (PORT_1), a
      80.  00:40F6                      
      81.  00:40F6                      	    ; write the other address bits to VDP PORT_1
      82.  00:40F6  7D                  	    ld      a, l
      83.  00:40F7  00                  	    nop
      84.  00:40F8  D3 99               	    out     (PORT_1), a
      85.  00:40FA  7C                  	    ld      a, h
      86.  00:40FB  F6 40               	    or      64
      87.  00:40FD  FB                      ei
      88.  00:40FE  D3 99                   out     (PORT_1),a
      89.  00:4100  C9                      ret
      90.  00:4101                      
      91.  00:4101                      Set212Lines:
      92.  00:4101                              ; set LN (bit 7) of R#9 to 1
      93.  00:4101  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:4104  F6 80                       or      10000000b
      95.  00:4106  47                          ld      b, a
      96.  00:4107  0E 09                       ld      c, 9            ; register #
      97.  00:4109  CD 47 00                    call    WRTVDP
      98.  00:410C  C9                          ret
      99.  00:410D                      
     100.  00:410D                      ClearVram_MSX2:
     101.  00:410D  AF                          xor     a           ; set vram write base address
     102.  00:410E  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:4111  CD E5 40                    call    SetVdp_Write
     104.  00:4114  AF                          xor		a
     105.  00:4115                      
     106.  00:4115                          ; TODO: 
     107.  00:4115                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:4115                          ;   disable screen/sprites (should I ??)
     109.  00:4115                      
     110.  00:4115                          ; clear all 128kb of VRAM
     111.  00:4115  16 02               	ld		d, 2		; 2 repetitions
     112.  00:4117                      .loop_2:
     113.  00:4117  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:4119                      .loop_1:
     115.  00:4119  06 00               	ld		b, 0		; 256 repetitions
     116.  00:411B                      .loop:
     117.  00:411B  D3 98               	out		(PORT_0), a
     118.  00:411D  10 FC               	djnz	.loop
     119.  00:411F  0D                  	dec		c
     120.  00:4120  C2 19 41            	jp		nz, .loop_1
     121.  00:4123  15                  	dec		d
     122.  00:4124  C2 17 41            	jp		nz, .loop_2
     123.  00:4127                      
     124.  00:4127  C9                  	ret
     125.  00:4128                      
     126.  00:4128                      ; MEGAROM
     127.  00:4128                      
     128.  00:4128                      opening_screen		
     129.  00:4128  0E 00               		ld		c,0
     130.  00:412A  11 00 00            		ld		de,0
     131.  00:412D  CD 6D 41            		call	_vdpsetvramwr
     132.  00:4130  1E 04               		ld	e,4
     133.  00:4132  3E 09               		ld	a, :GRAPHIC
     134.  00:4134  57                  		ld	d,a
     135.  00:4135  32 00 70            2:		ld	(_bank2),a
     136.  00:4138  21 00 80            		ld	hl,GRAPHIC
     137.  00:413B  01 98 00            		ld	bc,0x98
     138.  00:413E  3E 40               		ld	a,32*2
     139.  00:4140  ED B3               1:		otir
     140.  00:4142  3D                  		dec	a
     141.  00:4143  20 FB               		jr	nz,1b
     142.  00:4145  14                  		inc	d
     143.  00:4146  7A                  		ld	a,d
     144.  00:4147  1D                  		dec	e
     145.  00:4148  20 EB               		jr	nz,2b
     146.  00:414A  C9                  		ret 
     147.  00:414B                      
     148.  00:414B                      load_screen
     149.  00:414B  0E 00               		ld		c,0
     150.  00:414D  11 00 00            		ld		de,0
     151.  00:4150  CD 6D 41            		call	_vdpsetvramwr
     152.  00:4153  1E 02               		ld	e,2					; #pages
     153.  00:4155  78                  		ld	a, b			; 1st page bitmap
     154.  00:4156  57                  		ld	d,a
     155.  00:4157  32 00 70            2:		ld	(_bank2),a
     156.  00:415A  2A B4 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:415D  01 98 00            		ld	bc,0x98
     158.  00:4160  3E 40               		ld	a,64
     159.  00:4162  ED B3               1:		otir
     160.  00:4164  3D                  		dec	a
     161.  00:4165  20 FB               		jr	nz,1b
     162.  00:4167  14                  		inc	d
     163.  00:4168  7A                  		ld	a,d
     164.  00:4169  1D                  		dec	e
     165.  00:416A  20 EB               		jr	nz,2b
     166.  00:416C  C9                  		ret 
     167.  00:416D                      
     168.  00:416D                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:416D                      
     170.  00:416D                      _vdpsetvramwr:
     171.  00:416D  79                  	ld a,c
     172.  00:416E  CB 02               	rlc d
     173.  00:4170  17                  	rla
     174.  00:4171  CB 02               	rlc d
     175.  00:4173  17                  	rla
     176.  00:4174  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:4176                      
     178.  00:4176  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:4178  3E 8E               	ld a,14+128
     180.  00:417A  D3 99               	out (0x99),a
     181.  00:417C  CB 3A               	srl d ; secondo shift.     
     182.  00:417E                      _vdpsetvramwr14
     183.  00:417E  7B                  	ld a,e ;set bits 0-7
     184.  00:417F  D3 99               	out (0x99),a
     185.  00:4181  7A                  	ld a,d ;set bits 8-13
     186.  00:4182  F6 40               	or 0x40 ; + write access
     187.  00:4184  D3 99               	out (0x99),a
     188.  00:4186  C9                  	ret
     189.  00:4187                      
     190.  00:4187                      
     191.  00:4187                      
     192.  00:4187                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:4187                      		; -----------------------------------------------------
     194.  00:4187                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:4187                      		; -----------------------------------------------------
     196.  00:4187                      
     197.  00:4187                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:4187                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:4187                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:4187                      
     201.  00:4187                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:4187                      		; NINGUNA
     203.  00:4187                      
     204.  00:4187                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:4187                      		; --- Entrada: a = SLOT                                           ---
     206.  00:4187                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:4187                      		; --- AUTOR: Konamiman                                            ---
     208.  00:4187  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:4189  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:418A  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:418C  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:418F  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:4190  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:4191  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:4193  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:4195                      		; --- El slot esta expandido ---
     217.  00:4195  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:4196  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:4197  23                  		inc	hl				; Incrementamos hl una...
     220.  00:4198  23                  		inc	hl				; ...dos...
     221.  00:4199  23                  		inc	hl				; ...tres...
     222.  00:419A  23                  		inc	hl				; ...cuatro veces
     223.  00:419B  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:419C  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:419E  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:419F  C9                  		ret					; Volvemos
     227.  00:41A0                      
     228.  00:41A0                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:41A0  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:41A2  32 A5 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:41A5  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:41A6                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:41A6  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:41A9  0F                  		rrca					; Rotamos a la derecha...
     235.  00:41AA  0F                  		rrca					; ...dos veces
     236.  00:41AB  CD 87 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:41AE  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:41B0  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:41B3                      
     240.  00:41B3                      SET_SCREEN5_MODE:
     241.  00:41B3                           ;Cambiamos el modo de pantalla
     242.  00:41B3                          ; BASIC: COLOR 15,1,1
     243.  00:41B3                          ; Establecer los colores
     244.  00:41B3  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:41B6  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:41B8  23                  	inc hl ; FORCLR+1
     247.  00:41B9  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     248.  00:41BB  23                  	inc hl ; FORCLR+2
     249.  00:41BC  36 0F               	ld [hl],15 ; Color del borde 1=negro
     250.  00:41BE                      
     251.  00:41BE  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     252.  00:41C0  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     253.  00:41C3                      ;
     254.  00:41C3  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     255.  00:41C6                          ;En or 0+0=0, 0+1=1, 1+1=1
     256.  00:41C6                          ;En and 0+0=0, 0+1=0, 1+1=1
     257.  00:41C6                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     258.  00:41C6                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     259.  00:41C6                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     260.  00:41C6  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     261.  00:41C8                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     262.  00:41C8  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:41CA                      
     264.  00:41CA  47                      ld b,a ;carga en b el valor de a
     265.  00:41CB  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     266.  00:41CD  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     267.  00:41D0  AF                      xor a ; ld a,0
     268.  00:41D1  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     269.  00:41D4  C9                      ret
     270.  00:41D5                      
     271.  00:41D5                      DUMP_SPR_ALL:
     272.  00:41D5                      
     273.  00:41D5                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     274.  00:41D5                      
     275.  00:41D5  21 F5 62                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     276.  00:41D8  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     277.  00:41DB  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     278.  00:41DE  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     279.  00:41E1                      
     280.  00:41E1                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     281.  00:41E1                      
     282.  00:41E1  21 29 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     283.  00:41E4  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     284.  00:41E7  01 80 00                ld bc,128; 4 x #Sprites
     285.  00:41EA  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     286.  00:41ED                      
     287.  00:41ED                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     288.  00:41ED                      
     289.  00:41ED  21 D5 65                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     290.  00:41F0  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     291.  00:41F3  01 70 01                ld bc,16*23; 16 x #Sprites
     292.  00:41F6  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     293.  00:41F9  C9                      ret
     294.  00:41FA                      	
     295.  00:41FA                      load_tiles_vdp
     296.  00:41FA                          
     297.  00:41FA                      	;ld hl, TILES1
     298.  00:41FA  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     299.  00:41FD  01 00 08                ld bc,128*16; 16 lineas
     300.  00:4200  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     301.  00:4203  C9                  	ret 
     302.  00:4204                      
     303.  00:4204                      DUMP_SPR_ATTS:
     304.  00:4204                      
     305.  00:4204                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     306.  00:4204                      
     307.  00:4204  21 29 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     308.  00:4207  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     309.  00:420A  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     310.  00:420D  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     311.  00:4210                      
     312.  00:4210                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     313.  00:4210                      ;	JP Z,.DUMP_SPR_ATTS_END
     314.  00:4210  2A B0 C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     315.  00:4213  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     316.  00:4216  C5                      PUSH BC
     317.  00:4217  01 30 00            	ld bc,16*3; 16 x #Sprites
     318.  00:421A  CD 5C 00                call  LDIRVM 
     319.  00:421D  C1                  	POP BC
     320.  00:421E                      
     321.  00:421E                      .DUMP_SPR_ATTS_END:
     322.  00:421E  C9                      ret
     323.  00:421F                      
     324.  00:421F                      DUMP_SPR_P1:    
     325.  00:421F                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     326.  00:421F                      
     327.  00:421F  2A AC C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     328.  00:4222  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     329.  00:4225  C5                      PUSH BC
     330.  00:4226  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     331.  00:4229  CD 5C 00                call  LDIRVM 
     332.  00:422C  C1                  	POP BC
     333.  00:422D                      
     334.  00:422D                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     335.  00:422D                      
     336.  00:422D  2A AE C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     337.  00:4230  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     338.  00:4233  C5                      PUSH BC
     339.  00:4234  01 30 00            	ld bc,16*3; 16 x #Sprites
     340.  00:4237  CD 5C 00                call  LDIRVM 
     341.  00:423A  C1                  	POP BC
     342.  00:423B                      	
     343.  00:423B                      
     344.  00:423B                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     345.  00:423B                      ;    xor a
     346.  00:423B                      ;	di			; set VRAM address to 1800h
     347.  00:423B                      ;	out (99h),a		; lower byte 00
     348.  00:423B                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     349.  00:423B                      ;	ei
     350.  00:423B                      ;	out (99h),a		; note that this is protected by the ei instruction
     351.  00:423B                      ;   push BC
     352.  00:423B                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     353.  00:423B                      ;	ld hl,(SPRITE_PTR_REPLACE)
     354.  00:423B                      
     355.  00:423B                      ;.loop1:
     356.  00:423B                      ;	outi			; send the data (HL) to port 98h 
     357.  00:423B                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     358.  00:423B                      ;   POP BC
     359.  00:423B                      
     360.  00:423B                          ; Replace 2 entries in sprite color table
     361.  00:423B                      ;    xor a
     362.  00:423B                      ;	di			; set VRAM address to 1800h
     363.  00:423B                      ;	out (99h),a		; lower byte 00
     364.  00:423B                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     365.  00:423B                      ;	ei
     366.  00:423B                      ;	out (99h),a		; note that this is protected by the ei instruction
     367.  00:423B                       ;   push BC
     368.  00:423B                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     369.  00:423B                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     370.  00:423B                      	
     371.  00:423B                      ;.loop2:
     372.  00:423B                      ;	outi			; send the data (HL) to port 98h 
     373.  00:423B                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     374.  00:423B                       ;   POP BC
     375.  00:423B                      
     376.  00:423B  C9                      ret
     377.  00:423C                      
     378.  00:423C                      SetPalette:
     379.  00:423C  AF                  	xor a
     380.  00:423D  F3                  	di
     381.  00:423E  D3 99               	out ($99),a
     382.  00:4240  3E 90               	ld a,16+128
     383.  00:4242  D3 99               	out ($99),a
     384.  00:4244  01 9A 20            	ld bc,$209A
     385.  00:4247  ED B3               	otir
     386.  00:4249  FB                  	ei
     387.  00:424A  C9                  	ret
      26   00:424B                          include "include\BTH_animate.asm"
       1.  00:424B                      ; Movimiento P1
       2.  00:424B                      move_up:
       3.  00:424B  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:424C                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:424C  AF                      XOR A
       6.  00:424D  32 24 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:4250  CD 7E 43                CALL CHECK_DIRECTION_MAIN
       8.  00:4253                      
       9.  00:4253  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:4256  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:4258  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:4259  DD 7E 01                ld a,(ix+1)
      13.  00:425C  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:425D  CD C4 40                call get_bloque_en_X_Y
      15.  00:4260  FE 01                   cp 1
      16.  00:4262  CA 77 44                jp z,NO_MOVEMENT
      17.  00:4265                      
      18.  00:4265  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:4268  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:426A  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:426B  DD 7E 01                ld a,(ix+1)
      22.  00:426E  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:4270  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:4271  CD C4 40                call get_bloque_en_X_Y
      25.  00:4274  FE 01                   cp 1
      26.  00:4276  CA 77 44                jp z,NO_MOVEMENT
      27.  00:4279                            
      28.  00:4279  3E FF               	LD A, -MOV_SPEED
      29.  00:427B  32 1B C0            	LD (CHAR_SPEED_Y), A
      30.  00:427E  CD 0B 44                call UPDATE_MOVEMENT   
      31.  00:4281  CD 33 44                call ANIMATE_P1
      32.  00:4284                          ;JP no_arrows
      33.  00:4284  C9                      ret
      34.  00:4285                      
      35.  00:4285                      move_down:
      36.  00:4285  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:4286                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:4286  3E 01                   LD A,$01
      39.  00:4288  32 24 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:428B  CD 7E 43                CALL CHECK_DIRECTION_MAIN
      41.  00:428E                      
      42.  00:428E  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      43.  00:4291  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:4293  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:4294  DD 7E 01                ld a,(ix+1)
      46.  00:4297  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:4298  CD C4 40                call get_bloque_en_X_Y
      48.  00:429B  FE 01                   cp 1
      49.  00:429D  CA 77 44                jp z,NO_MOVEMENT
      50.  00:42A0                      
      51.  00:42A0  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      52.  00:42A3  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:42A5  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:42A6  DD 7E 01                ld a,(ix+1)
      55.  00:42A9  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:42AB  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:42AC  CD C4 40                call get_bloque_en_X_Y
      58.  00:42AF  FE 01                   cp 1
      59.  00:42B1  CA 77 44                jp z,NO_MOVEMENT
      60.  00:42B4                          
      61.  00:42B4  3E 01                   LD A, MOV_SPEED
      62.  00:42B6  32 1B C0            	LD (CHAR_SPEED_Y), A
      63.  00:42B9  CD 0B 44                call UPDATE_MOVEMENT    
      64.  00:42BC  CD 33 44                call ANIMATE_P1
      65.  00:42BF                          ;JP no_arrows
      66.  00:42BF  C9                      ret
      67.  00:42C0                      
      68.  00:42C0                      move_right:
      69.  00:42C0  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:42C1                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:42C1  CB 69                   BIT KB_UP, C
      72.  00:42C3  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:42C5  CB 71                   BIT KB_DOWN, C
      74.  00:42C7  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:42C9  3E 03                   LD A,$03
      76.  00:42CB  32 24 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:42CE  CD 7E 43                CALL CHECK_DIRECTION_MAIN
      78.  00:42D1                      
      79.  00:42D1                      .KB_UPDOWN_PRESSED:
      80.  00:42D1  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:42D4  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:42D6  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:42D7  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      84.  00:42DA  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:42DC  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:42DD  CD C4 40                call get_bloque_en_X_Y
      87.  00:42E0  FE 01                   cp 1
      88.  00:42E2  CA 77 44                jp z,NO_MOVEMENT
      89.  00:42E5                      
      90.  00:42E5                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:42E5  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:42E8  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:42EA  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:42EB  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      95.  00:42EE  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:42F0  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:42F1  CD C4 40                call get_bloque_en_X_Y
      98.  00:42F4  FE 01                   cp 1
      99.  00:42F6  CA 77 44                jp z,NO_MOVEMENT
     100.  00:42F9                      
     101.  00:42F9                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:42F9  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:42FC  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:42FE  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:42FF  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     106.  00:4302  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:4304  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:4305  CD C4 40                call get_bloque_en_X_Y
     109.  00:4308  FE 01                   cp 1
     110.  00:430A  CA 77 44                jp z,NO_MOVEMENT    
     111.  00:430D                          
     112.  00:430D  3E 01                   LD A, MOV_SPEED
     113.  00:430F  32 1A C0            	LD (CHAR_SPEED_X), A
     114.  00:4312  CD 0B 44                call UPDATE_MOVEMENT
     115.  00:4315  CB 69                   BIT KB_UP, C
     116.  00:4317  C8                      ret z
     117.  00:4318  CB 71                   BIT KB_DOWN, C
     118.  00:431A  C8                      ret z
     119.  00:431B  CD 33 44                call ANIMATE_P1    
     120.  00:431E  C9                      ret
     121.  00:431F                      
     122.  00:431F                      move_left:
     123.  00:431F  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:4320                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:4320  CB 69                   BIT KB_UP, C
     126.  00:4322  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:4324  CB 71                   BIT KB_DOWN, C
     128.  00:4326  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:4328  3E 02                   LD A,$02
     130.  00:432A  32 24 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:432D  CD 7E 43                CALL CHECK_DIRECTION_MAIN
     132.  00:4330                      .KB_UPDOWN_PRESSED:
     133.  00:4330  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:4333  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:4335  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:4336  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     137.  00:4339  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:433B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:433C  CD C4 40                call get_bloque_en_X_Y
     140.  00:433F  FE 01                   cp 1
     141.  00:4341  CA 77 44                jp z,NO_MOVEMENT
     142.  00:4344                      
     143.  00:4344                          ;Miramos el tile inferior parte central del personaje
     144.  00:4344  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:4347  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:4349  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:434A  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     148.  00:434D  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:434F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:4350  CD C4 40                call get_bloque_en_X_Y
     151.  00:4353  FE 01                   cp 1
     152.  00:4355  CA 77 44                jp z,NO_MOVEMENT
     153.  00:4358                      
     154.  00:4358                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:4358  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:435B  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:435D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:435E  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     159.  00:4361  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:4363  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:4364  CD C4 40                call get_bloque_en_X_Y
     162.  00:4367  FE 01                   cp 1
     163.  00:4369  CA 77 44                jp z,NO_MOVEMENT
     164.  00:436C                      
     165.  00:436C  3E FF                   LD A, -MOV_SPEED
     166.  00:436E  32 1A C0            	LD (CHAR_SPEED_X), A
     167.  00:4371  CD 0B 44                call UPDATE_MOVEMENT     
     168.  00:4374  CB 69                   BIT KB_UP, C
     169.  00:4376  C8                      ret z
     170.  00:4377  CB 71                   BIT KB_DOWN, C
     171.  00:4379  C8                      ret z
     172.  00:437A  CD 33 44                call ANIMATE_P1    
     173.  00:437D  C9                      ret
     174.  00:437E                      
     175.  00:437E                      CHECK_DIRECTION_MAIN:
     176.  00:437E  3A 23 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:4381  2A 24 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:4384  BD                  	CP L		            	                ;Son iguales?
     179.  00:4385  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:4386  3A 24 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:4389  FE 01                   CP $01
     182.  00:438B  CA A0 43                JP Z,.SET_DIR_DOWN
     183.  00:438E  FE 00                   CP $00
     184.  00:4390  CA B5 43                JP Z,.SET_DIR_UP
     185.  00:4393  FE 03                   CP $03
     186.  00:4395  CA DF 43                JP Z,.SET_DIR_RIGHT
     187.  00:4398  FE 02                   CP $02
     188.  00:439A  CA CA 43                JP Z,.SET_DIR_LEFT
     189.  00:439D  C3 F4 43                JP .FINISH
     190.  00:43A0                          
     191.  00:43A0                      .SET_DIR_DOWN:    
     192.  00:43A0  21 B5 60                ld hl, SPRITE_P1_DOWN
     193.  00:43A3  22 AC C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:43A6                          
     195.  00:43A6  21 B5 66                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:43A9  22 AE C0                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:43AC  22 B0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:43AF  CD 1F 42                CALL DUMP_SPR_P1    
     199.  00:43B2                      
     200.  00:43B2  C3 F4 43                JP .FINISH
     201.  00:43B5                      
     202.  00:43B5                      .SET_DIR_UP:
     203.  00:43B5  21 F5 5F                ld hl, SPRITE_P1_UP
     204.  00:43B8  22 AC C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:43BB                          
     206.  00:43BB  21 55 66                ld hl, SPRITE_COLOR_P1_UP
     207.  00:43BE  22 AE C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:43C1  22 B0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:43C4  CD 1F 42                CALL DUMP_SPR_P1
     210.  00:43C7  C3 F4 43                JP .FINISH
     211.  00:43CA                      
     212.  00:43CA                      .SET_DIR_LEFT:    
     213.  00:43CA  21 75 61                ld hl, SPRITE_P1_LEFT
     214.  00:43CD  22 AC C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:43D0                          
     216.  00:43D0  21 95 70                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:43D3  22 AE C0                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:43D6  22 B0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:43D9  CD 1F 42                CALL DUMP_SPR_P1   
     220.  00:43DC  C3 F4 43                JP .FINISH
     221.  00:43DF                      
     222.  00:43DF                      .SET_DIR_RIGHT:
     223.  00:43DF  21 35 62                ld hl, SPRITE_P1_RIGHT
     224.  00:43E2  22 AC C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:43E5                          
     226.  00:43E5  21 15 67                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:43E8  22 AE C0                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:43EB  22 B0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:43EE                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:43EE  CD 1F 42                CALL DUMP_SPR_P1
     231.  00:43F1  C3 F4 43                JP .FINISH
     232.  00:43F4                      
     233.  00:43F4                      .FINISH:
     234.  00:43F4  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:43F5  32 26 C0                LD (CHAR_MIN_STEP), A   
     236.  00:43F8  3A 24 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:43FB  32 23 C0                LD (CHAR_DIR_MAIN),A    
     238.  00:43FE                      
     239.  00:43FE                          ; ponemos el primer frame del sprite
     240.  00:43FE  DD 36 02 00             LD (ix+2), $00
     241.  00:4402  DD 36 06 04             LD (ix+6), $04
     242.  00:4406  DD 36 0A 08             LD (ix+10), $08
     243.  00:440A                          ;CALL DUMP_SPR_ATTS
     244.  00:440A  C9                      RET
     245.  00:440B                      
     246.  00:440B                      UPDATE_MOVEMENT:
     247.  00:440B  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     248.  00:440E  2A 1B C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:4411  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:4412                          
     251.  00:4412  DD 77 00            	LD (ix), A
     252.  00:4415  DD 77 04                LD (ix+4), A
     253.  00:4418  DD 77 08                LD (ix+8), A
     254.  00:441B                      	
     255.  00:441B  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     256.  00:441E  2A 1A C0            	LD HL, (CHAR_SPEED_X)
     257.  00:4421  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     258.  00:4422                          
     259.  00:4422  DD 77 01            	LD (ix+1), A
     260.  00:4425  DD 77 05                LD (ix+5), A
     261.  00:4428  DD 77 09                LD (ix+9), A	
     262.  00:442B                      
     263.  00:442B  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     264.  00:442C  32 1A C0                LD (CHAR_SPEED_X),A
     265.  00:442F  32 1B C0                LD (CHAR_SPEED_Y),A	
     266.  00:4432  C9                      RET
     267.  00:4433                      
     268.  00:4433                      ANIMATE_P1:
     269.  00:4433                          ; Animación/pasos de personaje	
     270.  00:4433  3A 26 C0                LD A, (CHAR_MIN_STEP)
     271.  00:4436  FE 05                   CP MAX_CHAR_STEPS
     272.  00:4438  C2 71 44                JP NZ,.NO_CHAR_PATTERN_CHANGE
     273.  00:443B                          
     274.  00:443B  AF                      XOR A
     275.  00:443C  32 26 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     276.  00:443F  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     277.  00:4442  FE 00                   CP $00
     278.  00:4444  CA 5A 44                JP Z,.SET_SPR_1P_2
     279.  00:4447  DD 36 02 00             LD (ix+2), $00
     280.  00:444B  DD 36 06 04             LD (ix+6), $04
     281.  00:444F  DD 36 0A 08             LD (ix+10), $08
     282.  00:4453  2A AE C0                ld hl, (SPRITE_COLOR_REPLACE)
     283.  00:4456  22 B0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     284.  00:4459  C9                      ret
     285.  00:445A                      
     286.  00:445A                      .SET_SPR_1P_2:
     287.  00:445A  DD 36 02 0C             LD (ix+2), $0C
     288.  00:445E  DD 36 06 10             LD (ix+6), $10
     289.  00:4462  DD 36 0A 14             LD (ix+10), $14
     290.  00:4466                              
     291.  00:4466  2A AE C0                ld HL, (SPRITE_COLOR_REPLACE)
     292.  00:4469  11 30 00                ld DE,48
     293.  00:446C  19                      ADD HL, DE
     294.  00:446D  22 B0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     295.  00:4470                          ;ld a, 0
     296.  00:4470  C9                  	ret
     297.  00:4471                      
     298.  00:4471                      .NO_CHAR_PATTERN_CHANGE    
     299.  00:4471  C6 01                   ADD 1
     300.  00:4473  32 26 C0                LD (CHAR_MIN_STEP), A    
     301.  00:4476  C9                      ret
     302.  00:4477                      
     303.  00:4477                      NO_MOVEMENT:    
     304.  00:4477  C9                      ret
     305.  00:4478                      
     306.  00:4478                      MOVE_SHOOT:
     307.  00:4478  3A 25 C0                LD A,(CHAR_MAIN_SHOOT)    
     308.  00:447B  FE 01                   CP $01
     309.  00:447D  CA A8 44                JP Z,.MOVE_SHOOT_LEFT
     310.  00:4480  FE 02                   CP $02
     311.  00:4482  CA 90 44                JP Z,.MOVE_SHOOT_RIGHT
     312.  00:4485  FE 03                   CP $03
     313.  00:4487  CA 98 44                JP Z,.MOVE_SHOOT_UP    
     314.  00:448A  FE 04                   CP $04
     315.  00:448C  CA A0 44                JP Z,.MOVE_SHOOT_DOWN
     316.  00:448F  C9                      RET
     317.  00:4490                      
     318.  00:4490                      .MOVE_SHOOT_RIGHT:        
     319.  00:4490  3E 03                   LD A, MOV_SPEED_SHOOT
     320.  00:4492  32 28 C0            	LD (CHAR_SPEED_SHOOT), A    
     321.  00:4495  C3 AD 44                JP .CHECK_SHOOT_DISTANCE
     322.  00:4498                      
     323.  00:4498                      .MOVE_SHOOT_UP:        
     324.  00:4498  3E FD                   LD A, -MOV_SPEED_SHOOT
     325.  00:449A  32 28 C0            	LD (CHAR_SPEED_SHOOT), A    
     326.  00:449D  C3 AD 44                JP .CHECK_SHOOT_DISTANCE
     327.  00:44A0                      
     328.  00:44A0                      .MOVE_SHOOT_DOWN:
     329.  00:44A0  3E 03                   LD A, MOV_SPEED_SHOOT
     330.  00:44A2  32 28 C0            	LD (CHAR_SPEED_SHOOT), A    
     331.  00:44A5  C3 AD 44                JP .CHECK_SHOOT_DISTANCE
     332.  00:44A8                      
     333.  00:44A8                      .MOVE_SHOOT_LEFT:    
     334.  00:44A8  3E FD                   LD A, -MOV_SPEED_SHOOT
     335.  00:44AA  32 28 C0            	LD (CHAR_SPEED_SHOOT), A    
     336.  00:44AD                      
     337.  00:44AD                      .CHECK_SHOOT_DISTANCE:
     338.  00:44AD                          ; Miramos si va a izq o der
     339.  00:44AD  3A 25 C0                LD A,(CHAR_MAIN_SHOOT)    
     340.  00:44B0  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     341.  00:44B2  D2 C2 44                JP NC,.ADD_SHOOT_Y
     342.  00:44B5                          ; Movemos el disparo
     343.  00:44B5  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     344.  00:44B8  2A 28 C0            	LD HL, (CHAR_SPEED_SHOOT)
     345.  00:44BB  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     346.  00:44BC  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     347.  00:44BF  C3 CC 44                JP .ADD_DISTANCE
     348.  00:44C2                      .ADD_SHOOT_Y
     349.  00:44C2                          ; Movemos el disparo
     350.  00:44C2  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     351.  00:44C5  2A 28 C0            	LD HL, (CHAR_SPEED_SHOOT)
     352.  00:44C8  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     353.  00:44C9  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     354.  00:44CC                      
     355.  00:44CC                      .ADD_DISTANCE:
     356.  00:44CC  3A 27 C0                LD A,(CHAR_DISTANCE_SHOOT)
     357.  00:44CF  C6 03                   ADD MOV_SPEED_SHOOT
     358.  00:44D1  32 27 C0                LD (CHAR_DISTANCE_SHOOT),A    
     359.  00:44D4  FE 30                   CP MAX_DISTANCE_SHOOT
     360.  00:44D6  C0                      RET NZ
     361.  00:44D7                      
     362.  00:44D7                      .HIDE_SHOOT:
     363.  00:44D7  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     364.  00:44DB  AF                      XOR A
     365.  00:44DC  32 25 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     366.  00:44DF  32 27 C0                LD (CHAR_DISTANCE_SHOOT),A
     367.  00:44E2  C9                      RET
     368.  00:44E3                      
      27   00:44E3                      	include "include\VDP.asm"
       1.  00:44E3                      ; Offset commands registers
       2.  00:44E3  (00:0000)           VDP_SX		 EQU 0
       3.  00:44E3  (00:0002)           VDP_SY		 EQU 2
       4.  00:44E3  (00:0004)           VDP_DX		 EQU 4
       5.  00:44E3  (00:0006)           VDP_DY		 EQU 6
       6.  00:44E3  (00:0008)           VDP_NX		 EQU 8
       7.  00:44E3  (00:000A)           VDP_NY		 EQU 10
       8.  00:44E3  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:44E3  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:44E3  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:44E3                      
      12.  00:44E3                      ; Offset for sprite commands from memory
      13.  00:44E3                      
      14.  00:44E3                      ; VDP Commands
      15.  00:44E3  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:44E3  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:44E3  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:44E3  (00:0098)           CMD_LMMM	equ	$98
      19.  00:44E3  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:44E3  (00:0080)           CMD_LMMV    equ $80
      21.  00:44E3                      
      22.  00:44E3                      ; Logical operations
      23.  00:44E3  (00:0000)           VDP_IMP		equ	%0000
      24.  00:44E3  (00:0001)           VDP_AND		equ	%0001
      25.  00:44E3  (00:0002)           VDP_OR		equ	%0010
      26.  00:44E3  (00:0003)           VDP_XOR		equ	%0011
      27.  00:44E3  (00:0004)           VDP_NOT		equ	%0100
      28.  00:44E3  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:44E3  (00:0009)           VDP_TAND	equ	%1001
      30.  00:44E3  (00:000A)           VDP_TOR		equ	%1010
      31.  00:44E3  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:44E3  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:44E3                      
      34.  00:44E3                      ; Tile
      35.  00:44E3  (00:0020)           TILE_WIDTH			equ	32
      36.  00:44E3  (00:0010)           TILE_HEIGHT			equ	16
      37.  00:44E3  (00:0001)           TILES_PAGE			equ	1		; Page where tiles are stored
      38.  00:44E3  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      39.  00:44E3  (00:0001)           BACK_BUFFER			equ 1		; we will draw to page 1
      40.  00:44E3  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      41.  00:44E3                      
      42.  00:44E3                      ;---------------------------------------------------------------------------
      43.  00:44E3                      ; Init the RAM buffer used to draw a tile
      44.  00:44E3                      ;---------------------------------------------------------------------------
      45.  00:44E3                      initVDPBuffers:
      46.  00:44E3  21 A0 46            		ld	hl,tileDatROM
      47.  00:44E6  11 00 C0            		ld	de,tileDat
      48.  00:44E9  01 0F 00            		ld	bc,15
      49.  00:44EC  ED B0               		ldir
      50.  00:44EE  C9                  		ret
      51.  00:44EF                      
      52.  00:44EF                      print_strings_dialog_box:
      53.  00:44EF                      
      54.  00:44EF  FD 66 01            	LD H, (IY+1)
      55.  00:44F2  FD 6E 00            	LD L, (IY)
      56.  00:44F5  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      57.  00:44F8  FD E5               	PUSH IY
      58.  00:44FA  CD 1C 45                call print_string 
      59.  00:44FD  FD E1                   POP IY
      60.  00:44FF                      
      61.  00:44FF  FD 66 03            	LD H, (IY+3)
      62.  00:4502  FD 6E 02            	LD L, (IY+2)
      63.  00:4505  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
      64.  00:4508  FD E5               	PUSH IY
      65.  00:450A  CD 1C 45                call print_string 
      66.  00:450D  FD E1               	POP IY
      67.  00:450F                      
      68.  00:450F  FD 66 05                LD H, (IY+5)
      69.  00:4512  FD 6E 04            	LD L, (IY+4)
      70.  00:4515  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      71.  00:4518  CD 1C 45                call print_string 
      72.  00:451B  C9                  	RET
      73.  00:451C                      
      74.  00:451C                      print_string:       
      75.  00:451C                      	
      76.  00:451C                      	;LD HL, string01
      77.  00:451C                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
      78.  00:451C                      .loop_str:
      79.  00:451C  7E                  	LD A, (HL)
      80.  00:451D  A7                  	AND A
      81.  00:451E  C8                  	RET Z
      82.  00:451F                      
      83.  00:451F  D6 20               	SUB 32
      84.  00:4521  CB 07               	RLC A
      85.  00:4523  CB 07               	RLC A	
      86.  00:4525                          
      87.  00:4525  06 00               	LD B, 0
      88.  00:4527  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
      89.  00:4528                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
      90.  00:4528                      				; Si #ASCII > 63 -> 2ª línea
      91.  00:4528                      				; segunda línea - ((#ASCII -32)*4)+1024
      92.  00:4528                      	
      93.  00:4528  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
      94.  00:4529  E5                  	PUSH HL
      95.  00:452A  21 00 80            	LD HL, FONT
      96.  00:452D  09                  	ADD HL, BC
      97.  00:452E  FE 40               	CP 64
      98.  00:4530  DA 37 45            	JP C, .first_line_font
      99.  00:4533  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     100.  00:4536  09                  	ADD HL, BC
     101.  00:4537                      
     102.  00:4537                      .first_line_font:
     103.  00:4537  22 B4 C0                LD (BITMAP), HL
     104.  00:453A                          
     105.  00:453A  06 06               	LD B, :FONT
     106.  00:453C  D5                  	PUSH DE
     107.  00:453D  CD 50 45                call print_char
     108.  00:4540  D1                      POP DE
     109.  00:4541                      	
     110.  00:4541  FD 21 04 00         	LD IY, 4
     111.  00:4545  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     112.  00:4547  FD 54               	LD D, IYH
     113.  00:4549  FD 5D               	LD E, IYL
     114.  00:454B                      	
     115.  00:454B                      
     116.  00:454B  E1                  	POP HL
     117.  00:454C  23                  	INC HL
     118.  00:454D  18 CD               	JR .loop_str
     119.  00:454F                          
     120.  00:454F  C9                      RET
     121.  00:4550                      
     122.  00:4550                      print_char
     123.  00:4550  AF                  		XOR A		
     124.  00:4551  0E 00               		ld		c,0
     125.  00:4553                      		;ld		de,0
     126.  00:4553  ED 53 13 C0         		LD (CHR_ACR), DE
     127.  00:4557  CD 6D 41                	call	_vdpsetvramwr		
     128.  00:455A  78                  		ld	a, b			; 1st page bitmap
     129.  00:455B                      		;ld	d,a
     130.  00:455B  32 00 70            		ld	(_bank2),a
     131.  00:455E  2A B4 C0            		ld	hl,(BITMAP)		; Bitmap address
     132.  00:4561  3E 08               		ld	a, 8			; #lineas del caracter
     133.  00:4563  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     134.  00:4566  ED B3                       otir
     135.  00:4568  01 7C 00                    LD BC, 124
     136.  00:456B  09                          ADD HL, BC
     137.  00:456C  F5                  		PUSH AF
     138.  00:456D                      
     139.  00:456D  FD 2A 13 C0         		LD IY, (CHR_ACR)
     140.  00:4571  01 80 00            		LD BC, 128
     141.  00:4574  FD 09               		ADD IY, BC
     142.  00:4576  FD 54               		LD D, IYH
     143.  00:4578  FD 5D               		LD E, IYL
     144.  00:457A  A9                  		XOR C
     145.  00:457B  ED 53 13 C0         		LD (CHR_ACR), DE
     146.  00:457F  CD 6D 41            		call	_vdpsetvramwr		
     147.  00:4582  F1                  		POP AF		
     148.  00:4583                      
     149.  00:4583  3D                  		dec	a
     150.  00:4584  20 DD               		jr	nz,1b		
     151.  00:4586  C9                  		ret 
     152.  00:4587                      
     153.  00:4587                      CLEAR_DIALOG_BOX_OLD:		
     154.  00:4587  0E 00               		LD C,0
     155.  00:4589  11 28 5C            		LD DE, 5C28H
     156.  00:458C  ED 53 13 C0         		LD (CHR_ACR), DE
     157.  00:4590  CD 6D 41            		call _vdpsetvramwr
     158.  00:4593  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     159.  00:4595  21 F5 70            1:		LD HL, BLANK_DATA
     160.  00:4598  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     161.  00:459B  ED B3               		OTIR
     162.  00:459D                      
     163.  00:459D  F5                  		PUSH AF
     164.  00:459E  FD 2A 13 C0         		LD IY, (CHR_ACR)
     165.  00:45A2  01 80 00            		LD BC, 128
     166.  00:45A5  FD 09               		ADD IY, BC
     167.  00:45A7  FD 54               		LD D, IYH
     168.  00:45A9  FD 5D               		LD E, IYL
     169.  00:45AB  0E 00               		LD C,0
     170.  00:45AD  ED 53 13 C0         		LD (CHR_ACR), DE
     171.  00:45B1  CD 6D 41            		call	_vdpsetvramwr		
     172.  00:45B4  F1                  		POP AF		
     173.  00:45B5                      
     174.  00:45B5  3D                  		DEC a
     175.  00:45B6  20 DD               		JR NZ,1b
     176.  00:45B8  C9                  		RET
     177.  00:45B9                      
     178.  00:45B9                      CLEAR_DIALOG_BOX:
     179.  00:45B9  0E 00               		LD C,0
     180.  00:45BB  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     181.  00:45BE  ED 53 13 C0         		LD (CHR_ACR), DE
     182.  00:45C2  CD 6D 41            		call _vdpsetvramwr
     183.  00:45C5  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     184.  00:45C7  21 F5 70            1:		LD HL, BLANK_DATA
     185.  00:45CA  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     186.  00:45CD  ED B3               		OTIR
     187.  00:45CF                      
     188.  00:45CF  F5                  		PUSH AF
     189.  00:45D0  FD 2A 13 C0         		LD IY, (CHR_ACR)
     190.  00:45D4  01 80 00            		LD BC, 128
     191.  00:45D7  FD 09               		ADD IY, BC
     192.  00:45D9  FD 54               		LD D, IYH
     193.  00:45DB  FD 5D               		LD E, IYL
     194.  00:45DD  0E 00               		LD C,0
     195.  00:45DF  ED 53 13 C0         		LD (CHR_ACR), DE
     196.  00:45E3  CD 6D 41            		call	_vdpsetvramwr		
     197.  00:45E6  F1                  		POP AF		
     198.  00:45E7                      
     199.  00:45E7  3D                  		DEC a
     200.  00:45E8  20 DD               		JR NZ,1b
     201.  00:45EA  C9                  		RET
     202.  00:45EB                      
     203.  00:45EB                      ; -----------------------------------------------------------------------------------
     204.  00:45EB                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     205.  00:45EB                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     206.  00:45EB                      ; -----------------------------------------------------------------------------------
     207.  00:45EB  (00:F3E0)           VDP_01: EQU   $F3E0
     208.  00:45EB  (00:FFE7)           VDP_08: EQU   $FFE7
     209.  00:45EB  (00:FFE8)           VDP_09: EQU   $FFE8
     210.  00:45EB                      
     211.  00:45EB                      SETPAG:				; SETPAG [A]
     212.  00:45EB  0F                  	RRCA
     213.  00:45EC  0F                  	RRCA
     214.  00:45ED  0F                  	RRCA
     215.  00:45EE  F6 1F               	OR	%00011111
     216.  00:45F0  F3                  	DI
     217.  00:45F1  D3 99               	OUT	($99),A
     218.  00:45F3  3E 82               	LD	A,$80+2
     219.  00:45F5  FB                  	EI
     220.  00:45F6  D3 99               	OUT	($99),A
     221.  00:45F8  C9                  	RET
     222.  00:45F9                      
     223.  00:45F9                      SET_WR:				; SET_WR [AHL]
     224.  00:45F9  CB 04               	RLC	H
     225.  00:45FB  17                  	RLA
     226.  00:45FC  CB 04               	RLC	H
     227.  00:45FE  17                  	RLA
     228.  00:45FF  CB 3C               	SRL	H
     229.  00:4601  CB 3C               	SRL	H
     230.  00:4603  F3                  	DI
     231.  00:4604  D3 99               	OUT	($99),A
     232.  00:4606  3E 8E               	LD	A,$80+14
     233.  00:4608  D3 99               	OUT	($99),A
     234.  00:460A  7D                  	LD	A,L
     235.  00:460B                      ;	NOP				; MSX2+
     236.  00:460B  D3 99               	OUT	($99),A
     237.  00:460D  7C                  	LD	A,H
     238.  00:460E  F6 40               	OR	64
     239.  00:4610  D3 99               	OUT	($99),A
     240.  00:4612  FB                  	EI
     241.  00:4613  C9                  	RET
     242.  00:4614                      
     243.  00:4614                      SET_RD:				; SET_RD [AHL]
     244.  00:4614  CB 04               	RLC	H
     245.  00:4616  17                  	RLA
     246.  00:4617  CB 04               	RLC	H
     247.  00:4619  17                  	RLA
     248.  00:461A  CB 3C               	SRL	H
     249.  00:461C  CB 3C               	SRL	H
     250.  00:461E  F3                  	DI
     251.  00:461F  D3 99               	OUT	($99),A
     252.  00:4621  3E 8E               	LD	A,$80+14
     253.  00:4623  D3 99               	OUT	($99),A
     254.  00:4625  7D                  	LD	A,L
     255.  00:4626                      ;	NOP				; MSX2+
     256.  00:4626  D3 99               	OUT	($99),A
     257.  00:4628  7C                  	LD	A,H
     258.  00:4629                      ;	NOP				; MSX2+
     259.  00:4629  D3 99               	OUT	($99),A
     260.  00:462B  FB                  	EI
     261.  00:462C  C9                  	RET
     262.  00:462D                      
     263.  00:462D                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     264.  00:462D  CD 40 46            	CALL	WAITCE
     265.  00:4630  F3                  	DI
     266.  00:4631  3E 20               	LD	A,$20
     267.  00:4633  D3 99               	OUT	($99),A
     268.  00:4635  3E 91               	LD	A,$80+17
     269.  00:4637  D3 99               	OUT	($99),A
     270.  00:4639  FB                  	EI
     271.  00:463A  01 9B 0F            	LD	BC,$0F9B
     272.  00:463D  ED B3               	OTIR
     273.  00:463F  C9                  	RET
     274.  00:4640                      
     275.  00:4640                      WAITCE:				; WAITCE
     276.  00:4640  3E 02               	LD	A,$02
     277.  00:4642  F3                  	DI
     278.  00:4643  D3 99               	OUT	($99),A
     279.  00:4645  3E 8F               	LD	A,$80+15
     280.  00:4647  D3 99               	OUT	($99),A
     281.  00:4649  DB 99               	IN	A,($99)
     282.  00:464B  1F                  	RRA
     283.  00:464C  3E 00               	LD	A,$00
     284.  00:464E  D3 99               	OUT	($99),A
     285.  00:4650  3E 8F               	LD	A,$80+15
     286.  00:4652  FB                  	EI
     287.  00:4653  D3 99               	OUT	($99),A
     288.  00:4655  38 E9               	JR	C,WAITCE
     289.  00:4657  C9                  	RET
     290.  00:4658                      
     291.  00:4658                      ENASCR:				; Enable Screen
     292.  00:4658  3A E0 F3            	LD	A,(VDP_01)
     293.  00:465B  F6 40               	OR	%01000000
     294.  00:465D  18 05               	JR	DISSCR.OUT
     295.  00:465F                      
     296.  00:465F                      DISSCR:				; Disable Screen
     297.  00:465F  3A E0 F3            	LD	A,(VDP_01)
     298.  00:4662  E6 BF               	AND	%10111111
     299.  00:4664  32 E0 F3            .OUT:	LD	(VDP_01),A
     300.  00:4667  F3                  	DI
     301.  00:4668  D3 99               	OUT	($99),A
     302.  00:466A  3E 81               	LD	A,$80+1
     303.  00:466C  FB                  	EI
     304.  00:466D  D3 99               	OUT	($99),A
     305.  00:466F  C9                  	RET
     306.  00:4670                      
     307.  00:4670                      ENASPR:				; Enable Sprites
     308.  00:4670  3A E7 FF            	LD	A,(VDP_08)
     309.  00:4673  E6 FD               	AND	%11111101
     310.  00:4675  18 05               	JR	DISSPR.OUT
     311.  00:4677                      
     312.  00:4677                      DISSPR:				; Disable Sprites
     313.  00:4677  3A E7 FF            	LD	A,(VDP_08)
     314.  00:467A  F6 02               	OR	%00000010
     315.  00:467C  32 E7 FF            .OUT:	LD	(VDP_08),A
     316.  00:467F  F3                  	DI
     317.  00:4680  D3 99               	OUT	($99),A
     318.  00:4682  3E 88               	LD	A,$80+8
     319.  00:4684  FB                  	EI
     320.  00:4685  D3 99               	OUT	($99),A
     321.  00:4687  C9                  	RET
     322.  00:4688                      
     323.  00:4688                      LIN192:				; Set 192 lines
     324.  00:4688  3A E8 FF            	LD	A,(VDP_09)
     325.  00:468B  F6 80               	OR	%10000000
     326.  00:468D  18 05               	JR	LIN212.OUT
     327.  00:468F                      
     328.  00:468F                      LIN212:				; Set 212 lines
     329.  00:468F  3A E8 FF            	LD	A,(VDP_09)
     330.  00:4692  E6 7F               	AND	%01111111
     331.  00:4694  32 E8 FF            .OUT:	LD	(VDP_09),A
     332.  00:4697  F3                  	DI
     333.  00:4698  D3 99               	OUT	($99),A
     334.  00:469A  3E 89               	LD	A,$80+9
     335.  00:469C  FB                  	EI
     336.  00:469D  D3 99               	OUT	($99),A
     337.  00:469F  C9                  	RET
      28   00:46A0                          include "include\VDP_Data.asm"
       1.  00:46A0                      ; VDP COMMAND PARAMETER
       2.  00:46A0                      ;               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:46A0                      tileDatROM: db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM | VDP_TIMP	;CMD_LMMM;CMD_HMMM
       3.  00:46A0  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D8 
      29   00:46AF                      ; SFX
      30   00:46AF                          include	"include\PT3_player.s"    
       1.  00:46AF                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:46AF                      		; --- Can be assembled with asMSX ---
       3.  00:46AF                      		; --- ROM version: MSX-KUN        ---
       4.  00:46AF                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:46AF                      
       6.  00:46AF                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:46AF                      ;
       8.  00:46AF                      ; This version of the replayer can be used with any note table
       9.  00:46AF                      ; This version also allows the use of PT3 commands
      10.  00:46AF                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:46AF                      ;
      12.  00:46AF                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:46AF                      ;
      14.  00:46AF                      ; ROM LENGTH: 1549 bytes
      15.  00:46AF                      ; RAM LENGTH:  576 bytes
      16.  00:46AF                      
      17.  00:46AF                      
      18.  00:46AF                      
      19.  00:46AF                      ;SJASM version by BTV 2016
      20.  00:46AF                      
      21.  00:46AF                      
      22.  00:46AF                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:46AF                      
      24.  00:46AF                      ;ChannelsVars
      25.  00:46AF                      ;struc	CHNPRM
      26.  00:46AF                      ;reset group
      27.  00:46AF  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:46AF  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:46AF  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:46AF  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:46AF  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:46AF  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:46AF  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:46AF  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:46AF  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:46AF                      ;reset group
      37.  00:46AF                      
      38.  00:46AF  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:46AF                      
      40.  00:46AF                      ;IX for PTDECOD here [+12]
      41.  00:46AF  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:46AF  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:46AF  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:46AF  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:46AF  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:46AF  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:46AF  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:46AF  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:46AF                       ;Enabled - 0,SimpleGliss - 2
      50.  00:46AF  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:46AF  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:46AF  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:46AF  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:46AF  (00:001C)           CHNPRM_Volume	equ 28	;RESB 1
      55.  00:46AF  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:46AF                      ;endstruc
      57.  00:46AF                      
      58.  00:46AF                      ;struc	AR
      59.  00:46AF  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:46AF  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:46AF  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:46AF  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:46AF  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:46AF  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:46AF  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:46AF  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:46AF  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:46AF  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:46AF                      ;endstruc
      70.  00:46AF                      
      71.  00:46AF                      		; --- CODE STARTS HERE ---
      72.  00:46AF                      
      73.  00:46AF  21 00 F2            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:46B2  CB FE               		SET	7,[HL]
      75.  00:46B4  CB 46               		BIT	0,[HL]
      76.  00:46B6  C8                  		RET	Z
      77.  00:46B7  E1                  		POP	HL
      78.  00:46B8  21 79 F2            		LD	HL,DelyCnt
      79.  00:46BB  34                  		INC	[HL]
      80.  00:46BC  21 3D F2            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:46BF  34                  		INC	[HL]
      82.  00:46C0  AF                  PT3_MUTE:	XOR	A
      83.  00:46C1  67                  		LD	H,A
      84.  00:46C2  6F                  		LD	L,A
      85.  00:46C3  32 47 F3            		LD	[AYREGS+AR_AmplA],A
      86.  00:46C6  22 48 F3            		LD	[AYREGS+AR_AmplB],HL
      87.  00:46C9  C3 12 4C            		JP	ROUT_A0
      88.  00:46CC                      
      89.  00:46CC                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:46CC  22 00 F2            		LD [PT3_MODADDR],HL
      91.  00:46CF  E5                  		PUSH HL
      92.  00:46D0  11 64 00            		LD DE,100
      93.  00:46D3  19                  		ADD HL,DE
      94.  00:46D4  7E                  		LD A,[HL]
      95.  00:46D5  32 1B F2            		LD [PT3_Delay],A
      96.  00:46D8  E5                  		PUSH HL
      97.  00:46D9  DD E1               		POP IX
      98.  00:46DB  19                  		ADD HL,DE
      99.  00:46DC  22 02 F2            		LD [PT3_CrPsPtr],HL
     100.  00:46DF  DD 5E 02            		LD E,[IX+102-100]
     101.  00:46E2  19                  		ADD HL,DE
     102.  00:46E3  23                  		INC HL
     103.  00:46E4  22 17 F2            		LD [PT3_LPosPtr],HL
     104.  00:46E7  D1                  		POP DE
     105.  00:46E8  DD 6E 03            		LD L,[IX+103-100]
     106.  00:46EB  DD 66 04            		LD H,[IX+104-100]
     107.  00:46EE  19                  		ADD HL,DE
     108.  00:46EF  22 19 F2            		LD [PT3_PatsPtr],HL
     109.  00:46F2  21 A9 00            		LD HL,169
     110.  00:46F5  19                  		ADD HL,DE
     111.  00:46F6  22 06 F2            		LD [PT3_OrnPtrs],HL
     112.  00:46F9  21 69 00            		LD HL,105
     113.  00:46FC  19                  		ADD HL,DE
     114.  00:46FD  22 04 F2            		LD [PT3_SAMPTRS],HL
     115.  00:4700  21 00 F2            		LD HL,PT3_SETUP
     116.  00:4703  CB BE               		RES 7,[HL]
     117.  00:4705                      
     118.  00:4705                      		; --- note table data depacker ---
     119.  00:4705                      		; Depacks first 12 tones of each tone table
     120.  00:4705                      
     121.  00:4705  11 86 4C            		LD DE,T_PACK
     122.  00:4708  01 B0 F3            		LD BC,T1_+(2*49)-1
     123.  00:470B  1A                  .TP_0:		LD A,[DE]
     124.  00:470C  13                  		INC DE
     125.  00:470D  FE 1E               		CP 15*2
     126.  00:470F  30 06               		JR NC,.TP_1
     127.  00:4711  67                  		LD H,A
     128.  00:4712  1A                  		LD A,[DE]
     129.  00:4713  6F                  		LD L,A
     130.  00:4714  13                  		INC DE
     131.  00:4715  18 07               		JR .TP_2
     132.  00:4717  D5                  .TP_1:		PUSH DE
     133.  00:4718  16 00               		LD D,0
     134.  00:471A  5F                  		LD E,A
     135.  00:471B  19                  		ADD HL,DE
     136.  00:471C  19                  		ADD HL,DE
     137.  00:471D  D1                  		POP DE
     138.  00:471E  7C                  .TP_2:		LD A,H
     139.  00:471F  02                  		LD [BC],A
     140.  00:4720  0B                  		DEC BC
     141.  00:4721  7D                  		LD A,L
     142.  00:4722  02                  		LD [BC],A
     143.  00:4723  0B                  		DEC BC
     144.  00:4724  D6 F0               		SUB $F0
     145.  00:4726  20 E3               		JR NZ,.TP_0
     146.  00:4728                      
     147.  00:4728                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:4728  21 22 F2            		LD HL,VARS
     149.  00:472B  77                  		LD [HL],A
     150.  00:472C  11 23 F2            		LD DE,VARS+1
     151.  00:472F  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:4732  ED B0               		LDIR
     153.  00:4734                      
     154.  00:4734  3C                  		INC A
     155.  00:4735  32 79 F2            		LD [DelyCnt],A
     156.  00:4738  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:473B  22 3D F2            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:473E  22 5A F2            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4741  22 77 F2            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:4744                      
     161.  00:4744  21 82 4C            		LD HL,EMPTYSAMORN
     162.  00:4747  22 11 F2            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:474A  22 2F F2            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:474D  22 4C F2            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:4750  22 69 F2            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:4753                      
     167.  00:4753  22 31 F2            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:4756  22 4E F2            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:4759  22 6B F2            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:475C                      					    ;also EMPTYSAMORN comment
     171.  00:475C                      
     172.  00:475C                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:475C  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:475F  17                  		RLA
     175.  00:4760  E6 07               		AND 7
     176.  00:4762  21 32 4C            		LD HL,NT_DATA
     177.  00:4765  D5                  		PUSH DE
     178.  00:4766  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:4767  87                  		ADD A,A
     180.  00:4768  5F                  		LD E,A
     181.  00:4769  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:476A  5E                  		LD E,[HL]
     183.  00:476B  23                  		INC HL
     184.  00:476C  CB 3B               		SRL E
     185.  00:476E  9F                  		SBC A,A
     186.  00:476F  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:4771  32 20 F2            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:4774  3E C9               		LD A,$C9		; RET CODE
     189.  00:4776  32 21 F2            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:4779  EB                  		EX DE,HL
     191.  00:477A  C1                  		POP BC ;BC=T1_
     192.  00:477B  09                  		ADD HL,BC
     193.  00:477C                      
     194.  00:477C  1A                  		LD A,[DE]                           
     195.  00:477D                      
     196.  00:477D  01 42 4C            		LD BC,T_
     197.  00:4780  81                  		ADD A,C
     198.  00:4781  4F                  		LD C,A
     199.  00:4782  88                  		ADC A,B
     200.  00:4783                      
     201.  00:4783  91                  		SUB C
     202.  00:4784  47                  		LD B,A
     203.  00:4785  C5                  		PUSH BC
     204.  00:4786  11 7F F2            		LD DE,NT_
     205.  00:4789  D5                  		PUSH DE
     206.  00:478A                      
     207.  00:478A  06 0C               		LD B,12
     208.  00:478C  C5                  .L1:		PUSH BC
     209.  00:478D  4E                  		LD C,[HL]
     210.  00:478E  23                  		INC HL
     211.  00:478F  E5                  		PUSH HL
     212.  00:4790  46                  		LD B,[HL]
     213.  00:4791                      
     214.  00:4791  D5                  		PUSH DE
     215.  00:4792  EB                  		EX DE,HL
     216.  00:4793  11 17 00            		LD DE,23
     217.  00:4796  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:4799                      
     219.  00:4799  CB 38               .L2:		SRL B
     220.  00:479B  CB 19               		RR C
     221.  00:479D  CD 20 F2            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:47A0  79                  		LD A,C
     223.  00:47A1  8A                  		ADC A,D	;=ADC 0
     224.  00:47A2  77                  		LD [HL],A
     225.  00:47A3  23                  		INC HL
     226.  00:47A4  78                  		LD A,B
     227.  00:47A5  8A                  		ADC A,D
     228.  00:47A6  77                  		LD [HL],A
     229.  00:47A7  19                  		ADD HL,DE
     230.  00:47A8  DD 25               		db $DD,$25	;DEC XH
     231.  00:47AA  20 ED               		JR NZ,.L2
     232.  00:47AC                      
     233.  00:47AC  D1                  		POP DE
     234.  00:47AD  13                  		INC DE
     235.  00:47AE  13                  		INC DE
     236.  00:47AF  E1                  		POP HL
     237.  00:47B0  23                  		INC HL
     238.  00:47B1  C1                  		POP BC
     239.  00:47B2  10 D8               		DJNZ .L1
     240.  00:47B4                      
     241.  00:47B4  E1                  		POP HL
     242.  00:47B5  D1                  		POP DE
     243.  00:47B6                      
     244.  00:47B6  7B                  		LD A,E
     245.  00:47B7  D5                  		PUSH DE
     246.  00:47B8  11 4E 4C            		LD DE,TCOLD_1
     247.  00:47BB  BB                  		CP E
     248.  00:47BC  D1                  		POP DE
     249.  00:47BD  20 05               		JR NZ,.CORR_1
     250.  00:47BF  3E FD               		LD A,$FD
     251.  00:47C1  32 AD F2            		LD [NT_+$2E],A
     252.  00:47C4                      
     253.  00:47C4  1A                  .CORR_1:	LD A,[DE]
     254.  00:47C5  A7                  		AND A
     255.  00:47C6  28 11               		JR Z,.TC_EXIT
     256.  00:47C8  1F                  		RRA
     257.  00:47C9  F5                  		PUSH AF
     258.  00:47CA  87                  		ADD A,A
     259.  00:47CB  4F                  		LD C,A
     260.  00:47CC  09                  		ADD HL,BC
     261.  00:47CD  F1                  		POP AF
     262.  00:47CE  30 02               		JR NC,.CORR_2
     263.  00:47D0  35                  		DEC [HL]
     264.  00:47D1  35                  		DEC [HL]
     265.  00:47D2  34                  .CORR_2:	INC [HL]
     266.  00:47D3  A7                  		AND A
     267.  00:47D4  ED 42               		SBC HL,BC
     268.  00:47D6  13                  		INC DE
     269.  00:47D7  18 EB               		JR .CORR_1
     270.  00:47D9                      
     271.  00:47D9                      .TC_EXIT:	;POP AF
     272.  00:47D9                      
     273.  00:47D9                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:47D9  21 11 00            		ld	hl,$11
     275.  00:47DC  54                  		ld	d,h
     276.  00:47DD  5C                  		ld	e,h
     277.  00:47DE  DD 21 4F F3         		ld	IX,VT_+16
     278.  00:47E2  06 0F               		ld	b,15
     279.  00:47E4  E5                  .INITV1:	push	hl
     280.  00:47E5  19                  		add	hl,de
     281.  00:47E6  EB                  		ex	de,hl
     282.  00:47E7  ED 62               		sbc	hl,hl
     283.  00:47E9  48                  		ld	c,b
     284.  00:47EA  06 10               		ld	b,16
     285.  00:47EC  7D                  .INITV2:	ld	a,l
     286.  00:47ED  17                  		rla
     287.  00:47EE  7C                  		ld	a,h
     288.  00:47EF  CE 00               		adc	a,0
     289.  00:47F1  DD 77 00            		ld	[ix],a
     290.  00:47F4  DD 23               		inc	ix
     291.  00:47F6  19                  		add	hl,de
     292.  00:47F7  10 F3               		djnz	.INITV2
     293.  00:47F9  E1                  		pop	hl
     294.  00:47FA  7B                  		ld	a,e
     295.  00:47FB  FE 77               		cp	$77
     296.  00:47FD  20 01               		jr	nz,.INITV3
     297.  00:47FF  1C                  		inc	e
     298.  00:4800  41                  .INITV3:	ld	b,c
     299.  00:4801  10 E1               		djnz	.INITV1
     300.  00:4803                      
     301.  00:4803  C9                  		RET
     302.  00:4804                      
     303.  00:4804                      		;pattern decoder
     304.  00:4804  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:4808  CD 8E 49            		CALL SETORN
     306.  00:480B  0A                  		LD A,[BC]
     307.  00:480C  03                  		INC BC
     308.  00:480D  0F                  		RRCA
     309.  00:480E                      
     310.  00:480E  87                  PD_SAM:		ADD A,A
     311.  00:480F  5F                  PD_SAM_:	LD E,A
     312.  00:4810  16 00               		LD D,0
     313.  00:4812  2A 04 F2            		LD HL,[PT3_SAMPTRS]
     314.  00:4815  19                  		ADD HL,DE
     315.  00:4816  5E                  		LD E,[HL]
     316.  00:4817  23                  		INC HL
     317.  00:4818  56                  		LD D,[HL]
     318.  00:4819  2A 00 F2            		LD HL,[PT3_MODADDR]
     319.  00:481C  19                  		ADD HL,DE
     320.  00:481D  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:4820  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:4823  18 41               		JR PD_LOOP
     323.  00:4825                      
     324.  00:4825  07                  PD_VOL:		RLCA
     325.  00:4826  07                  		RLCA
     326.  00:4827  07                  		RLCA
     327.  00:4828  07                  		RLCA
     328.  00:4829  DD 77 10            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:482C  18 3B               		JR PD_LP2
     330.  00:482E                      	
     331.  00:482E  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:4831  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:4834  18 33               		JR PD_LP2
     334.  00:4836                      
     335.  00:4836  3D                  PD_SorE:	DEC A
     336.  00:4837  20 07               		JR NZ,PD_ENV
     337.  00:4839  0A                  		LD A,[BC]
     338.  00:483A  03                  		INC BC
     339.  00:483B  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:483E  18 29               		JR PD_LP2
     341.  00:4840                      
     342.  00:4840  CD 72 49            PD_ENV:		CALL SETENV
     343.  00:4843  18 24               		JR PD_LP2
     344.  00:4845                      
     345.  00:4845  CD 8E 49            PD_ORN:		CALL SETORN
     346.  00:4848  18 1C               		JR PD_LOOP
     347.  00:484A                             
     348.  00:484A  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:484D  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4850  C4 72 49            		CALL NZ,SETENV
     351.  00:4853  0A                  		LD A,[BC]
     352.  00:4854  03                  		INC BC
     353.  00:4855  18 B8               		JR PD_SAM_
     354.  00:4857                      
     355.  00:4857  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:485A  32 0E F2            		LD [PT3_PrNote],A
     357.  00:485D  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4860  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4863  22 0F F2            		LD [PT3_PrSlide],HL
     360.  00:4866                      
     361.  00:4866  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:4869  0A                  PD_LP2:		LD A,[BC]
     363.  00:486A  03                  		INC BC
     364.  00:486B  83                  		ADD A,E
     365.  00:486C  38 96               		JR C,PD_OrSm
     366.  00:486E  82                  		ADD A,D
     367.  00:486F  28 4A               		JR Z,PD_FIN
     368.  00:4871  38 9B               		JR C,PD_SAM
     369.  00:4873  83                  		ADD A,E
     370.  00:4874  28 25               		JR Z,PD_REL
     371.  00:4876  38 AD               		JR C,PD_VOL
     372.  00:4878  83                  		ADD A,E
     373.  00:4879  28 B3               		JR Z,PD_EOff
     374.  00:487B  38 B9               		JR C,PD_SorE
     375.  00:487D  C6 60               		ADD A,96
     376.  00:487F  38 20               		JR C,PD_NOTE
     377.  00:4881  83                  		ADD A,E
     378.  00:4882  38 C1               		JR C,PD_ORN
     379.  00:4884  82                  		ADD A,D
     380.  00:4885  38 0F               		JR C,PD_NOIS
     381.  00:4887  83                  		ADD A,E
     382.  00:4888  38 C0               		JR C,PD_ESAM
     383.  00:488A  87                  		ADD A,A
     384.  00:488B  5F                  		LD E,A
     385.  00:488C  21 C7 28            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:488F  19                  		ADD HL,DE
     387.  00:4890  5E                  		LD E,[HL]
     388.  00:4891  23                  		INC HL
     389.  00:4892  56                  		LD D,[HL]
     390.  00:4893  D5                  		PUSH DE
     391.  00:4894  18 D0               		JR PD_LOOP
     392.  00:4896                      
     393.  00:4896  32 7D F2            PD_NOIS:	LD [Ns_Base],A
     394.  00:4899  18 CE               		JR PD_LP2
     395.  00:489B                      
     396.  00:489B  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:489F  18 08               		JR PD_RES
     398.  00:48A1                      	
     399.  00:48A1  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:48A4  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:48A8  AF                  		XOR A
     402.  00:48A9                      
     403.  00:48A9  ED 73 08 F2         PD_RES:		LD [PT3_PDSP],SP
     404.  00:48AD  DD F9               		LD SP,IX
     405.  00:48AF  67                  		LD H,A
     406.  00:48B0  6F                  		LD L,A
     407.  00:48B1  E5                  		PUSH HL
     408.  00:48B2  E5                  		PUSH HL
     409.  00:48B3  E5                  		PUSH HL
     410.  00:48B4  E5                  		PUSH HL
     411.  00:48B5  E5                  		PUSH HL
     412.  00:48B6  E5                  		PUSH HL
     413.  00:48B7  ED 7B 08 F2         		LD SP,[PT3_PDSP]
     414.  00:48BB                      
     415.  00:48BB  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:48BE  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:48C1  C9                  		RET
     418.  00:48C2                      
     419.  00:48C2  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:48C6  0A                  		LD A,[BC]
     421.  00:48C7  03                  		INC BC
     422.  00:48C8                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:48C8                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:48C8  03                  		INC BC
     425.  00:48C9  03                  		INC BC
     426.  00:48CA  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:48CD  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:48D0  11 7F F2            		LD DE,NT_
     429.  00:48D3  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:48D6  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:48D9  87                  		ADD A,A
     432.  00:48DA  6F                  		LD L,A
     433.  00:48DB  26 00               		LD H,0
     434.  00:48DD  19                  		ADD HL,DE
     435.  00:48DE  7E                  		LD A,[HL]
     436.  00:48DF  23                  		INC HL
     437.  00:48E0  66                  		LD H,[HL]
     438.  00:48E1  6F                  		LD L,A
     439.  00:48E2  E5                  		PUSH HL
     440.  00:48E3  3A 0E F2            		LD A,[PT3_PrNote]
     441.  00:48E6  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:48E9  87                  		ADD A,A
     443.  00:48EA  6F                  		LD L,A
     444.  00:48EB  26 00               		LD H,0
     445.  00:48ED  19                  		ADD HL,DE
     446.  00:48EE  5E                  		LD E,[HL]
     447.  00:48EF  23                  		INC HL
     448.  00:48F0  56                  		LD D,[HL]
     449.  00:48F1  E1                  		POP HL
     450.  00:48F2  ED 52               		SBC HL,DE
     451.  00:48F4  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:48F7  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:48FA  ED 5B 0F F2         		LD DE,[PT3_PrSlide]
     454.  00:48FE  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4901  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4904  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4905  03                  		INC BC
     458.  00:4906  08                  		EX AF,AF'
     459.  00:4907  0A                  		LD A,[BC]
     460.  00:4908  03                  		INC BC
     461.  00:4909  A7                  		AND A
     462.  00:490A  28 01               		JR Z,.NOSIG
     463.  00:490C  EB                  		EX DE,HL
     464.  00:490D  ED 52               .NOSIG:	SBC HL,DE
     465.  00:490F  F2 17 49            		JP P,SET_STP
     466.  00:4912  2F                  		CPL
     467.  00:4913  08                  		EX AF,AF'
     468.  00:4914  ED 44               		NEG
     469.  00:4916  08                  		EX AF,AF'
     470.  00:4917  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:491A  08                  		EX AF,AF'
     472.  00:491B  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:491E  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4922  C9                  		RET
     475.  00:4923                      
     476.  00:4923  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4927  0A                  		LD A,[BC]
     478.  00:4928  03                  		INC BC
     479.  00:4929  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:492C  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:492F  0A                  		LD A,[BC]
     482.  00:4930  03                  		INC BC
     483.  00:4931  08                  		EX AF,AF'
     484.  00:4932  0A                  		LD A,[BC]
     485.  00:4933  03                  		INC BC
     486.  00:4934  18 E1               		JR SET_STP
     487.  00:4936                      
     488.  00:4936  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4937  03                  		INC BC
     490.  00:4938  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:493B  C9                  		RET
     492.  00:493C                      
     493.  00:493C  0A                  C_ORPOS:	LD A,[BC]
     494.  00:493D  03                  		INC BC
     495.  00:493E  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4941  C9                  		RET
     497.  00:4942                      
     498.  00:4942  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4943  03                  		INC BC
     500.  00:4944  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4947  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:494A  0A                  		LD A,[BC]
     503.  00:494B  03                  		INC BC
     504.  00:494C  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:494F  AF                  		XOR A
     506.  00:4950  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4953  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4956  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4959  C9                  		RET
     510.  00:495A                      
     511.  00:495A  0A                  C_ENGLS:	LD A,[BC]
     512.  00:495B  03                  		INC BC
     513.  00:495C  32 1D F2            		LD [PT3_Env_Del],A
     514.  00:495F  32 7C F2            		LD [CurEDel],A
     515.  00:4962  0A                  		LD A,[BC]
     516.  00:4963  03                  		INC BC
     517.  00:4964  6F                  		LD L,A
     518.  00:4965  0A                  		LD A,[BC]
     519.  00:4966  03                  		INC BC
     520.  00:4967  67                  		LD H,A
     521.  00:4968  22 1E F2            		LD [PT3_ESldAdd],HL
     522.  00:496B  C9                  		RET
     523.  00:496C                      
     524.  00:496C  0A                  C_DELAY:	LD A,[BC]
     525.  00:496D  03                  		INC BC
     526.  00:496E  32 1B F2            		LD [PT3_Delay],A
     527.  00:4971  C9                  		RET
     528.  00:4972                      	
     529.  00:4972  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4975  32 4C F3            		LD [AYREGS+AR_EnvTp],A
     531.  00:4978  0A                  		LD A,[BC]
     532.  00:4979  03                  		INC BC
     533.  00:497A  67                  		LD H,A
     534.  00:497B  0A                  		LD A,[BC]
     535.  00:497C  03                  		INC BC
     536.  00:497D  6F                  		LD L,A
     537.  00:497E  22 4D F3            		LD [EnvBase],HL
     538.  00:4981  AF                  		XOR A
     539.  00:4982  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4985  32 7C F2            		LD [CurEDel],A
     541.  00:4988  67                  		LD H,A
     542.  00:4989  6F                  		LD L,A
     543.  00:498A  22 7A F2            		LD [CurESld],HL
     544.  00:498D  C9                  C_NOP:		RET
     545.  00:498E                      
     546.  00:498E  87                  SETORN:		ADD A,A
     547.  00:498F  5F                  		LD E,A
     548.  00:4990  16 00               		LD D,0
     549.  00:4992  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4995  2A 06 F2            		LD HL,[PT3_OrnPtrs]
     551.  00:4998  19                  		ADD HL,DE
     552.  00:4999  5E                  		LD E,[HL]
     553.  00:499A  23                  		INC HL
     554.  00:499B  56                  		LD D,[HL]
     555.  00:499C  2A 00 F2            		LD HL,[PT3_MODADDR]
     556.  00:499F  19                  		ADD HL,DE
     557.  00:49A0  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:49A3  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:49A6  C9                  		RET
     560.  00:49A7                      
     561.  00:49A7                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:49A7  8D 49               SPCCOMS:	dw C_NOP
     563.  00:49A9  23 49               		dw C_GLISS
     564.  00:49AB  C2 48               		dw C_PORTM
     565.  00:49AD  36 49               		dw C_SMPOS
     566.  00:49AF  3C 49               		dw C_ORPOS
     567.  00:49B1  42 49               		dw C_VIBRT
     568.  00:49B3  8D 49               		dw C_NOP
     569.  00:49B5  8D 49               		dw C_NOP
     570.  00:49B7  5A 49               		dw C_ENGLS
     571.  00:49B9  6C 49               		dw C_DELAY
     572.  00:49BB  8D 49               		dw C_NOP
     573.  00:49BD  8D 49               		dw C_NOP
     574.  00:49BF  8D 49               		dw C_NOP
     575.  00:49C1  8D 49               		dw C_NOP
     576.  00:49C3  8D 49               		dw C_NOP
     577.  00:49C5  8D 49               		dw C_NOP
     578.  00:49C7                      
     579.  00:49C7  AF                  CHREGS:		XOR A
     580.  00:49C8  32 49 F3            		LD [AYREGS+AR_AmplC],A
     581.  00:49CB  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:49CF  E5                  		PUSH HL
     583.  00:49D0  CA F6 4A            		JP Z,.CH_EXIT
     584.  00:49D3  ED 73 0A F2         		LD [PT3_CSP],SP
     585.  00:49D7  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:49DA  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:49DD  F9                  		LD SP,HL
     588.  00:49DE  D1                  		POP DE
     589.  00:49DF  67                  		LD H,A
     590.  00:49E0  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:49E3  6F                  		LD L,A
     592.  00:49E4  39                  		ADD HL,SP
     593.  00:49E5  3C                  		INC A
     594.  00:49E6  BA                  		CP D
     595.  00:49E7  38 01               		JR C,.CH_ORPS
     596.  00:49E9  7B                  		LD A,E
     597.  00:49EA  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:49ED  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:49F0  86                  		ADD A,[HL]
     600.  00:49F1  F2 F5 49            		JP P,.CH_NTP
     601.  00:49F4  AF                  		XOR A
     602.  00:49F5  FE 60               .CH_NTP:	CP 96
     603.  00:49F7  38 02               		JR C,.CH_NOK
     604.  00:49F9  3E 5F               		LD A,95
     605.  00:49FB  87                  .CH_NOK:	ADD A,A
     606.  00:49FC  08                  		EX AF,AF'
     607.  00:49FD  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4A00  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4A03  F9                  		LD SP,HL
     610.  00:4A04  D1                  		POP DE
     611.  00:4A05  26 00               		LD H,0
     612.  00:4A07  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4A0A  47                  		LD B,A
     614.  00:4A0B  87                  		ADD A,A
     615.  00:4A0C  87                  		ADD A,A
     616.  00:4A0D  6F                  		LD L,A
     617.  00:4A0E  39                  		ADD HL,SP
     618.  00:4A0F  F9                  		LD SP,HL
     619.  00:4A10  78                  		LD A,B
     620.  00:4A11  3C                  		INC A
     621.  00:4A12  BA                  		CP D
     622.  00:4A13  38 01               		JR C,.CH_SMPS
     623.  00:4A15  7B                  		LD A,E
     624.  00:4A16  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4A19  C1                  		POP BC
     626.  00:4A1A  E1                  		POP HL
     627.  00:4A1B  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4A1E  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4A21  19                  		ADD HL,DE
     630.  00:4A22  CB 70               		BIT 6,B
     631.  00:4A24  28 06               		JR Z,.CH_NOAC
     632.  00:4A26  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4A29  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4A2C  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4A2D  08                  		EX AF,AF'
     636.  00:4A2E  6F                  		LD L,A
     637.  00:4A2F  26 00               		LD H,0
     638.  00:4A31  31 7F F2            		LD SP,NT_
     639.  00:4A34  39                  		ADD HL,SP
     640.  00:4A35  F9                  		LD SP,HL
     641.  00:4A36  E1                  		POP HL
     642.  00:4A37  19                  		ADD HL,DE
     643.  00:4A38  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4A3B  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4A3E  19                  		ADD HL,DE
     646.  00:4A3F  ED 7B 0A F2         		LD SP,[PT3_CSP]
     647.  00:4A43  E3                  		EX [SP],HL
     648.  00:4A44  AF                  		XOR A
     649.  00:4A45  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4A48  28 3E               		JR Z,.CH_AMP
     651.  00:4A4A  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4A4D  20 39               		JR NZ,.CH_AMP
     653.  00:4A4F  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4A52  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4A55  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4A58  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4A5B  7C                  		LD A,H
     658.  00:4A5C  19                  		ADD HL,DE
     659.  00:4A5D  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4A60  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4A63  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4A67  20 1F               		JR NZ,.CH_AMP
     663.  00:4A69  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4A6C  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4A6F  A7                  		AND A
     666.  00:4A70  28 01               		JR Z,.CH_STPP
     667.  00:4A72  EB                  		EX DE,HL
     668.  00:4A73  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4A75  FA 88 4A            		JP M,.CH_AMP
     670.  00:4A78  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4A7B  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4A7E  AF                  		XOR A
     673.  00:4A7F  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4A82  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4A85  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4A88  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4A8B  CB 79               		BIT 7,C
     678.  00:4A8D  28 13               		JR Z,.CH_NOAM
     679.  00:4A8F  CB 71               		BIT 6,C
     680.  00:4A91  28 07               		JR Z,.CH_AMIN
     681.  00:4A93  FE 0F               		CP 15
     682.  00:4A95  28 0B               		JR Z,.CH_NOAM
     683.  00:4A97  3C                  		INC A
     684.  00:4A98  18 05               		JR .CH_SVAM
     685.  00:4A9A  FE F1               .CH_AMIN:	CP -15
     686.  00:4A9C  28 04               		JR Z,.CH_NOAM
     687.  00:4A9E  3D                  		DEC A
     688.  00:4A9F  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4AA2  6F                  .CH_NOAM:	LD L,A
     690.  00:4AA3  78                  		LD A,B
     691.  00:4AA4  E6 0F               		AND 15
     692.  00:4AA6  85                  		ADD A,L
     693.  00:4AA7  F2 AB 4A            		JP P,.CH_APOS
     694.  00:4AAA  AF                  		XOR A
     695.  00:4AAB  FE 10               .CH_APOS:	CP 16
     696.  00:4AAD  38 02               		JR C,.CH_VOL
     697.  00:4AAF  3E 0F               		LD A,15
     698.  00:4AB1  DD B6 1C            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4AB4  6F                  		LD L,A
     700.  00:4AB5  26 00               		LD H,0
     701.  00:4AB7  11 3F F3            		LD DE,VT_
     702.  00:4ABA  19                  		ADD HL,DE
     703.  00:4ABB  7E                  		LD A,[HL]
     704.  00:4ABC  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4ABE  20 03               		JR NZ,.CH_NOEN
     706.  00:4AC0  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4AC3  32 49 F3            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4AC6  CB 78               		BIT 7,B
     709.  00:4AC8  79                  		LD A,C
     710.  00:4AC9  28 19               		JR Z,.NO_ENSL
     711.  00:4ACB  17                  		RLA
     712.  00:4ACC  17                  		RLA
     713.  00:4ACD  CB 2F               		SRA A
     714.  00:4ACF  CB 2F               		SRA A
     715.  00:4AD1  CB 2F               		SRA A
     716.  00:4AD3  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4AD6  CB 68               		BIT 5,B
     718.  00:4AD8  28 03               		JR Z,.NO_ENAC
     719.  00:4ADA  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4ADD  21 1C F2            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4AE0  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4AE1                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4AE1  77                  		LD [HL],A
     724.  00:4AE2  18 0E               		JR .CH_MIX
     725.  00:4AE4  1F                  .NO_ENSL:	RRA
     726.  00:4AE5  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4AE8  32 7E F2            		LD [AddToNs],A
     728.  00:4AEB  CB 68               		BIT 5,B
     729.  00:4AED  28 03               		JR Z,.CH_MIX
     730.  00:4AEF  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4AF2  78                  .CH_MIX:	LD A,B
     732.  00:4AF3  1F                  		RRA
     733.  00:4AF4  E6 48               		AND $48
     734.  00:4AF6  21 46 F3            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4AF9  B6                  		OR [HL]
     736.  00:4AFA  0F                  		RRCA
     737.  00:4AFB  77                  		LD [HL],A
     738.  00:4AFC  E1                  		POP HL
     739.  00:4AFD  AF                  		XOR A
     740.  00:4AFE  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4B01  C8                  		RET Z
     742.  00:4B02  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4B05  C0                  		RET NZ
     744.  00:4B06  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4B09  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4B0C  1F                  		RRA
     747.  00:4B0D  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4B10  38 03               		JR C,.CH_ONDL
     749.  00:4B12  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4B15  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4B18  C9                  		RET
     752.  00:4B19                      
     753.  00:4B19  AF                  PT3_PLAY:	XOR A
     754.  00:4B1A  32 1C F2            		LD [PT3_AddToEn],A
     755.  00:4B1D  32 46 F3            		LD [AYREGS+AR_Mixer],A
     756.  00:4B20  3D                  		DEC A
     757.  00:4B21  32 4C F3            		LD [AYREGS+AR_EnvTp],A
     758.  00:4B24  21 79 F2            		LD HL,DelyCnt
     759.  00:4B27  35                  		DEC [HL]
     760.  00:4B28  C2 AF 4B            		JP NZ,.PL2
     761.  00:4B2B  21 3D F2            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4B2E  35                  		DEC [HL]
     763.  00:4B2F  20 4E               		JR NZ,.PL1B
     764.  00:4B31  ED 4B 11 F2         		LD BC,[PT3_AdInPtA]
     765.  00:4B35  0A                  		LD A,[BC]
     766.  00:4B36  A7                  		AND A
     767.  00:4B37  20 3B               		JR NZ,.PL1A
     768.  00:4B39  57                  		LD D,A
     769.  00:4B3A  32 7D F2            		LD [Ns_Base],A
     770.  00:4B3D  2A 02 F2            		LD HL,[PT3_CrPsPtr]
     771.  00:4B40  23                  		INC HL
     772.  00:4B41  7E                  		LD A,[HL]
     773.  00:4B42  3C                  		INC A
     774.  00:4B43  20 08               		JR NZ,.PLNLP
     775.  00:4B45  CD AF 46            		CALL CHECKLP
     776.  00:4B48  2A 17 F2            		LD HL,[PT3_LPosPtr]
     777.  00:4B4B  7E                  		LD A,[HL]
     778.  00:4B4C  3C                  		INC A
     779.  00:4B4D  22 02 F2            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4B50  3D                  		DEC A
     781.  00:4B51  87                  		ADD A,A
     782.  00:4B52  5F                  		LD E,A
     783.  00:4B53  CB 12               		RL D
     784.  00:4B55  2A 19 F2            		LD HL,[PT3_PatsPtr]
     785.  00:4B58  19                  		ADD HL,DE
     786.  00:4B59  ED 5B 00 F2         		LD DE,[PT3_MODADDR]
     787.  00:4B5D  ED 73 0C F2         		LD [PT3_PSP],SP
     788.  00:4B61  F9                  		LD SP,HL
     789.  00:4B62  E1                  		POP HL
     790.  00:4B63  19                  		ADD HL,DE
     791.  00:4B64  44                  		LD B,H
     792.  00:4B65  4D                  		LD C,L
     793.  00:4B66  E1                  		POP HL
     794.  00:4B67  19                  		ADD HL,DE
     795.  00:4B68  22 13 F2            		LD [PT3_AdInPtB],HL
     796.  00:4B6B  E1                  		POP HL
     797.  00:4B6C  19                  		ADD HL,DE
     798.  00:4B6D  22 15 F2            		LD [PT3_AdInPtC],HL
     799.  00:4B70  ED 7B 0C F2         		LD SP,[PT3_PSP]
     800.  00:4B74                      
     801.  00:4B74  DD 21 2E F2         .PL1A:		LD IX,ChanA+12
     802.  00:4B78  CD 57 48            		CALL PTDECOD
     803.  00:4B7B  ED 43 11 F2         		LD [PT3_AdInPtA],BC
     804.  00:4B7F                      
     805.  00:4B7F  21 5A F2            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4B82  35                  		DEC [HL]
     807.  00:4B83  20 0F               		JR NZ,.PL1C
     808.  00:4B85  DD 21 4B F2         		LD IX,ChanB+12
     809.  00:4B89  ED 4B 13 F2         		LD BC,[PT3_AdInPtB]
     810.  00:4B8D  CD 57 48            		CALL PTDECOD
     811.  00:4B90  ED 43 13 F2         		LD [PT3_AdInPtB],BC
     812.  00:4B94                      
     813.  00:4B94  21 77 F2            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4B97  35                  		DEC [HL]
     815.  00:4B98  20 0F               		JR NZ,.PL1D
     816.  00:4B9A  DD 21 68 F2         		LD IX,ChanC+12
     817.  00:4B9E  ED 4B 15 F2         		LD BC,[PT3_AdInPtC]
     818.  00:4BA2  CD 57 48            		CALL PTDECOD
     819.  00:4BA5  ED 43 15 F2         		LD [PT3_AdInPtC],BC
     820.  00:4BA9                      
     821.  00:4BA9  3A 1B F2            .PL1D:		LD A,[PT3_Delay]
     822.  00:4BAC  32 79 F2            		LD [DelyCnt],A
     823.  00:4BAF                      
     824.  00:4BAF  DD 21 22 F2         .PL2:		LD IX,ChanA
     825.  00:4BB3  2A 3F F3            		LD HL,[AYREGS+AR_TonA]
     826.  00:4BB6  CD C7 49            		CALL CHREGS
     827.  00:4BB9  22 3F F3            		LD [AYREGS+AR_TonA],HL
     828.  00:4BBC  3A 49 F3            		LD A,[AYREGS+AR_AmplC]
     829.  00:4BBF  32 47 F3            		LD [AYREGS+AR_AmplA],A
     830.  00:4BC2  DD 21 3F F2         		LD IX,ChanB
     831.  00:4BC6  2A 41 F3            		LD HL,[AYREGS+AR_TonB]
     832.  00:4BC9  CD C7 49            		CALL CHREGS
     833.  00:4BCC  22 41 F3            		LD [AYREGS+AR_TonB],HL
     834.  00:4BCF  3A 49 F3            		LD A,[AYREGS+AR_AmplC]
     835.  00:4BD2  32 48 F3            		LD [AYREGS+AR_AmplB],A
     836.  00:4BD5  DD 21 5C F2         		LD IX,ChanC
     837.  00:4BD9  2A 43 F3            		LD HL,[AYREGS+AR_TonC]
     838.  00:4BDC  CD C7 49            		CALL CHREGS
     839.  00:4BDF  22 43 F3            		LD [AYREGS+AR_TonC],HL
     840.  00:4BE2                      
     841.  00:4BE2  2A 7D F2            		LD HL,[Ns_Base_AddToNs]
     842.  00:4BE5  7C                  		LD A,H
     843.  00:4BE6  85                  		ADD A,L
     844.  00:4BE7  32 45 F3            		LD [AYREGS+AR_Noise],A
     845.  00:4BEA                      
     846.  00:4BEA  3A 1C F2            		LD A,[PT3_AddToEn]
     847.  00:4BED  5F                  		LD E,A
     848.  00:4BEE  87                  		ADD A,A
     849.  00:4BEF  9F                  		SBC A,A
     850.  00:4BF0  57                  		LD D,A
     851.  00:4BF1  2A 4D F3            		LD HL,[EnvBase]
     852.  00:4BF4  19                  		ADD HL,DE
     853.  00:4BF5  ED 5B 7A F2         		LD DE,[CurESld]
     854.  00:4BF9  19                  		ADD HL,DE
     855.  00:4BFA  22 4A F3            		LD [AYREGS+AR_Env],HL
     856.  00:4BFD                      
     857.  00:4BFD  AF                  		XOR A
     858.  00:4BFE  21 7C F2            		LD HL,CurEDel
     859.  00:4C01  B6                  		OR [HL]
     860.  00:4C02  C8                  		RET Z
     861.  00:4C03  35                  		DEC [HL]
     862.  00:4C04  C0                  		RET NZ
     863.  00:4C05  3A 1D F2            		LD A,[PT3_Env_Del]
     864.  00:4C08  77                  		LD [HL],A
     865.  00:4C09  2A 1E F2            		LD HL,[PT3_ESldAdd]
     866.  00:4C0C  19                  		ADD HL,DE
     867.  00:4C0D  22 7A F2            		LD [CurESld],HL
     868.  00:4C10  C9                  		RET
     869.  00:4C11                      
     870.  00:4C11  AF                  PT3_ROUT:	XOR A
     871.  00:4C12                      	
     872.  00:4C12                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:4C12  21 46 F3            		LD	HL,AYREGS+AR_Mixer
     874.  00:4C15  CB FE               		set	7,[hl]
     875.  00:4C17  CB B6               		res	6,[hl]
     876.  00:4C19                      
     877.  00:4C19  0E A0               		LD C,$A0
     878.  00:4C1B  21 3F F3            		LD HL,AYREGS
     879.  00:4C1E  ED 79               .LOUT:		OUT [C],A
     880.  00:4C20  0C                  		INC C
     881.  00:4C21  ED A3               		OUTI 
     882.  00:4C23  0D                  		DEC C
     883.  00:4C24  3C                  		INC A
     884.  00:4C25  FE 0D               		CP 13
     885.  00:4C27  20 F5               		JR NZ,.LOUT
     886.  00:4C29  ED 79               		OUT [C],A
     887.  00:4C2B  7E                  		LD A,[HL]
     888.  00:4C2C  A7                  		AND A
     889.  00:4C2D  F8                  		RET M
     890.  00:4C2E  0C                  		INC C
     891.  00:4C2F  ED 79               		OUT [C],A
     892.  00:4C31  C9                  		RET
     893.  00:4C32                      
     894.  00:4C32  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:4C33  2A                  		db TCNEW_0-T_
     896.  00:4C34  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:4C35  00                  		db TCOLD_0-T_
     898.  00:4C36  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:4C37  0C                  		db TCNEW_1-T_
     900.  00:4C38  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:4C39  0C                  		db TCOLD_1-T_
     902.  00:4C3A  94                  		db (T_NEW_2-T1_)*2
     903.  00:4C3B  35                  		db TCNEW_2-T_
     904.  00:4C3C  30                  		db (T_OLD_2-T1_)*2
     905.  00:4C3D  0E                  		db TCOLD_2-T_
     906.  00:4C3E  60                  		db (T_NEW_3-T1_)*2
     907.  00:4C3F  20                  		db TCNEW_3-T_
     908.  00:4C40  60                  		db (T_OLD_3-T1_)*2
     909.  00:4C41  21                  		db TCOLD_3-T_
     910.  00:4C42                      
     911.  00:4C42                      T_:
     912.  00:4C42                      
     913.  00:4C42                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:4C42  01 05 09 0B 0D 0F 13 15 
     914.  00:4C4A  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:4C4E                      TCNEW_1:	
     916.  00:4C4E  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:4C50                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:4C50  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:4C59                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:4C59  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:4C62  57                  TCNEW_3:	db $56+1
     920.  00:4C63                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:4C63  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:4C6C                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:4C6C  1D 21 23 27 2B 2D 31 55 
     922.  00:4C74  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:4C77                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:4C77  1B 21 25 29 2B 3B 4D 5F 
     924.  00:4C7F  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:4C82                      
     926.  00:4C82  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:4C86                      
     928.  00:4C86                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:4C86  0D                  		db ($06EC*2)/256
     930.  00:4C87  D8                  		db #d8
     931.  00:4C88  69                  		db $0755-$06EC
     932.  00:4C89  70                  		db $07C5-$0755
     933.  00:4C8A  76                  		db $083B-$07C5
     934.  00:4C8B  7D                  		db $08B8-$083B
     935.  00:4C8C  85                  		db $093D-$08B8
     936.  00:4C8D  8D                  		db $09CA-$093D
     937.  00:4C8E  95                  		db $0A5F-$09CA
     938.  00:4C8F  9D                  		db $0AFC-$0A5F
     939.  00:4C90  A8                  		db $0BA4-$0AFC
     940.  00:4C91  B1                  		db $0C55-$0BA4
     941.  00:4C92  BB                  		db $0D10-$0C55
     942.  00:4C93  0C                  		db ($066D*2)/256
     943.  00:4C94  DA                  		db #da
     944.  00:4C95  62                  		db $06CF-$066D
     945.  00:4C96  68                  		db $0737-$06CF
     946.  00:4C97  6D                  		db $07A4-$0737
     947.  00:4C98  75                  		db $0819-$07A4
     948.  00:4C99  7B                  		db $0894-$0819
     949.  00:4C9A  83                  		db $0917-$0894
     950.  00:4C9B  8A                  		db $09A1-$0917
     951.  00:4C9C  92                  		db $0A33-$09A1
     952.  00:4C9D  9C                  		db $0ACF-$0A33
     953.  00:4C9E  A4                  		db $0B73-$0ACF
     954.  00:4C9F  AF                  		db $0C22-$0B73
     955.  00:4CA0  B8                  		db $0CDA-$0C22
     956.  00:4CA1  0E                  		db ($0704*2)/256
     957.  00:4CA2  08                  		db #08
     958.  00:4CA3  6A                  		db $076E-$0704
     959.  00:4CA4  72                  		db $07E0-$076E
     960.  00:4CA5  78                  		db $0858-$07E0
     961.  00:4CA6  7E                  		db $08D6-$0858
     962.  00:4CA7  86                  		db $095C-$08D6
     963.  00:4CA8  90                  		db $09EC-$095C
     964.  00:4CA9  96                  		db $0A82-$09EC
     965.  00:4CAA  A0                  		db $0B22-$0A82
     966.  00:4CAB  AA                  		db $0BCC-$0B22
     967.  00:4CAC  B4                  		db $0C80-$0BCC
     968.  00:4CAD  BE                  		db $0D3E-$0C80
     969.  00:4CAE  0F                  		db ($07E0*2)/256
     970.  00:4CAF  C0                  		db #c0
     971.  00:4CB0  78                  		db $0858-$07E0
     972.  00:4CB1  88                  		db $08E0-$0858
     973.  00:4CB2  80                  		db $0960-$08E0
     974.  00:4CB3  90                  		db $09F0-$0960
     975.  00:4CB4  98                  		db $0A88-$09F0
     976.  00:4CB5  A0                  		db $0B28-$0A88
     977.  00:4CB6  B0                  		db $0BD8-$0B28
     978.  00:4CB7  A8                  		db $0C80-$0BD8
     979.  00:4CB8  E0                  		db $0D60-$0C80
     980.  00:4CB9  B0                  		db $0E10-$0D60
     981.  00:4CBA  E8                  		db $0EF8-$0E10
     982.  00:4CBB                      
     983.  00:4CBB                      
     984.  00:4CBB                      
     985.  00:4CBB                      
     986.  00:4CBB                      
     987.  00:4CBB                      
     988.  00:4CBB                      
     989.  00:4CBB                      
     990.  00:4CBB                      
     991.  00:4CBB                      
     992.  00:4CBB                      
     993.  00:4CBB                      
     994.  00:4CBB                      
     995.  00:4CBB                      	;Variables del replayer... las coloco desde aqui.
     996.  00:4CBB                      	;mirar que hace la directiva MAP del SJASM
     997.  00:4CBB  (F200)              	map		#f200
     998.  00:4CBB                      
     999.  00:4CBB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
    1000.  00:4CBB  (00:F200)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
    1001.  00:4CBB                      					;bit7 is set each time, when loop point is passed
    1002.  00:4CBB  (00:F200)           PT3_MODADDR:	#2
    1003.  00:4CBB  (00:F202)           PT3_CrPsPtr:		#2
    1004.  00:4CBB  (00:F204)           PT3_SAMPTRS:		#2
    1005.  00:4CBB  (00:F206)           PT3_OrnPtrs:		#2
    1006.  00:4CBB  (00:F208)           PT3_PDSP:		#2
    1007.  00:4CBB  (00:F20A)           PT3_CSP:		#2 
    1008.  00:4CBB  (00:F20C)           PT3_PSP:		#2
    1009.  00:4CBB  (00:F20E)           PT3_PrNote:		#1
    1010.  00:4CBB  (00:F20F)           PT3_PrSlide:		#2
    1011.  00:4CBB  (00:F211)           PT3_AdInPtA:		#2
    1012.  00:4CBB  (00:F213)           PT3_AdInPtB:		#2
    1013.  00:4CBB  (00:F215)           PT3_AdInPtC:		#2
    1014.  00:4CBB  (00:F217)           PT3_LPosPtr:		#2
    1015.  00:4CBB  (00:F219)           PT3_PatsPtr:		#2
    1016.  00:4CBB  (00:F21B)           PT3_Delay:		#1
    1017.  00:4CBB  (00:F21C)           PT3_AddToEn:		#1
    1018.  00:4CBB  (00:F21D)           PT3_Env_Del:		#1
    1019.  00:4CBB  (00:F21E)           PT3_ESldAdd:		#2
    1020.  00:4CBB  (00:F220)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1021.  00:4CBB                      
    1022.  00:4CBB  (00:F222)           VARS:			#0
    1023.  00:4CBB                      
    1024.  00:4CBB  (00:F222)           ChanA:			#29			;CHNPRM_Size
    1025.  00:4CBB  (00:F23F)           ChanB:			#29			;CHNPRM_Size
    1026.  00:4CBB  (00:F25C)           ChanC:			#29			;CHNPRM_Size
    1027.  00:4CBB                      
    1028.  00:4CBB                      ;GlobalVars
    1029.  00:4CBB  (00:F279)           DelyCnt:		#1
    1030.  00:4CBB  (00:F27A)           CurESld:		#2
    1031.  00:4CBB  (00:F27C)           CurEDel:		#1
    1032.  00:4CBB  (00:F27D)           Ns_Base_AddToNs:	#0
    1033.  00:4CBB  (00:F27D)           Ns_Base:		#1
    1034.  00:4CBB  (00:F27E)           AddToNs:		#1
    1035.  00:4CBB                      
    1036.  00:4CBB  (00:F27F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1037.  00:4CBB                      
    1038.  00:4CBB  (00:F33F)           AYREGS:			#0
    1039.  00:4CBB  (00:F33F)           VT_:			#14
    1040.  00:4CBB  (00:F34D)           EnvBase:		#2
    1041.  00:4CBB  (00:F34F)           VAR0END:		#0
    1042.  00:4CBB                      
    1043.  00:4CBB  (00:F34F)           T1_:			#0		
    1044.  00:4CBB  (00:F34F)           T_NEW_1:		#0
    1045.  00:4CBB  (00:F34F)           T_OLD_1:		#24
    1046.  00:4CBB  (00:F367)           T_OLD_2:		#24
    1047.  00:4CBB  (00:F37F)           T_NEW_3:		#0
    1048.  00:4CBB  (00:F37F)           T_OLD_3:		#2
    1049.  00:4CBB  (00:F381)           T_OLD_0:		#0
    1050.  00:4CBB  (00:F381)           T_NEW_0:		#24
    1051.  00:4CBB  (00:F399)           T_NEW_2:		#166
    1052.  00:4CBB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
      31   00:4CBB                      START
      32   00:4CBB                      	; CODE
      33   00:4CBB  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      34   00:4CBE  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      35   00:4CC0  23                  	inc hl ; FORCLR+1
      36   00:4CC1  36 00               	ld [hl],0 ; Color de fondo 1=negro
      37   00:4CC3  23                  	inc hl ; FORCLR+2
      38   00:4CC4  36 00               	ld [hl],0 ; Color del borde 1=negro
      39   00:4CC6  3E 08               	LD A,8
      40   00:4CC8                      	;CALL CHGMOD    	
      41   00:4CC8  CD A0 41                CALL SETPAGES32K
      42   00:4CCB                      	;CALL opening_screen
      43   00:4CCB  3E 01               	LD A,1
      44   00:4CCD  32 00 70            	LD (_bank2),A
      45   00:4CD0                      	;CALL CHGET
      46   00:4CD0                      	; Empieza el juego    
      47   00:4CD0  CD 0D 41            	call ClearVram_MSX2		
      48   00:4CD3  CD B3 41            	call SET_SCREEN5_MODE    
      49   00:4CD6  CD 01 41                call Set212Lines
      50   00:4CD9                              
      51   00:4CD9  CD EE 4C                call INIT_CHARS_VARS
      52   00:4CDC  CD E3 44                call initVDPBuffers
      53   00:4CDF                      
      54   00:4CDF  3E FF                   LD A, -MOV_SPEED_GHOST
      55   00:4CE1  32 1C C0            	LD (CHAR_SPEED_X_GHOST), A
      56   00:4CE4  21 75 71                LD HL, PaletteData
      57   00:4CE7  CD 3C 42                CALL SetPalette
      58   00:4CEA  CD 77 4D                CALL STAGE1
      59   00:4CED                          ;call MAIN_LOOP
      60   00:4CED                          ;CALL CHGET
      61   00:4CED  C9                  	ret
      62   00:4CEE                      
      63   00:4CEE                      
      64   00:4CEE                      INIT_CHARS_VARS:    
      65   00:4CEE  DD 21 29 C0             ld ix, SPRITE_ATTRS           
      66   00:4CF2                          
      67   00:4CF2  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      68   00:4CF6  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      69   00:4CFA  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      70   00:4CFE                      
      71   00:4CFE  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      72   00:4D02  DD 36 05 7F             ld (ix+5), 7Fh
      73   00:4D06  DD 36 06 04             ld (ix+6), 04h        
      74   00:4D0A                      
      75   00:4D0A  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      76   00:4D0E  DD 36 09 7F             ld (ix+9), 7Fh
      77   00:4D12  DD 36 0A 08             ld (ix+10), 08h        
      78   00:4D16                      
      79   00:4D16  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
      80   00:4D1A  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
      81   00:4D1E  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
      82   00:4D22                          
      83   00:4D22  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
      84   00:4D26  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
      85   00:4D2A  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
      86   00:4D2E                          
      87   00:4D2E  AF                      XOR A
      88   00:4D2F  32 19 C0                LD (JIFFY_TEMP),A
      89   00:4D32  32 1A C0                LD (CHAR_SPEED_X),A
      90   00:4D35  32 1B C0                LD (CHAR_SPEED_Y),A
      91   00:4D38  32 1C C0                LD (CHAR_SPEED_X_GHOST),A
      92   00:4D3B  32 21 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      93   00:4D3E  32 24 C0                LD (CHAR_NEW_DIR_MAIN),A    
      94   00:4D41  32 25 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      95   00:4D44  32 27 C0                LD (CHAR_DISTANCE_SHOOT),A
      96   00:4D47  32 28 C0                LD (CHAR_SPEED_SHOOT),A
      97   00:4D4A  32 1E C0                LD (CHAR_GHOST_DEAD),A
      98   00:4D4D  32 26 C0                LD (CHAR_MIN_STEP), A
      99   00:4D50  32 B0 C0                LD (SPRITE_COLOR_REPLACE2), A
     100   00:4D53  32 12 C0                LD (SHOWING_GUS_DIALOG), A
     101   00:4D56  32 11 C0                LD (SHOWING_JOHN_DIALOG), A
     102   00:4D59  32 10 C0                LD (SHOWING_MIKE_DIALOG), A
     103   00:4D5C  32 0F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     104   00:4D5F                      
     105   00:4D5F                         ; LD A,$FF
     106   00:4D5F  32 18 C0                LD (OLD_KEY_PRESSED), A
     107   00:4D62  3E 01                   LD A,$01
     108   00:4D64  32 23 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     109   00:4D67                      
     110   00:4D67  21 B5 60                ld hl, SPRITE_P1_DOWN
     111   00:4D6A  22 AC C0                ld (SPRITE_PTR_REPLACE), HL    
     112   00:4D6D  21 B5 66                ld hl, SPRITE_COLOR_P1_DOWN
     113   00:4D70  22 AE C0                ld (SPRITE_COLOR_REPLACE), HL
     114   00:4D73  22 B0 C0                LD (SPRITE_COLOR_REPLACE2), HL
     115   00:4D76                      
     116   00:4D76                          
     117   00:4D76  C9                      ret
     118   00:4D77                      
     119   00:4D77                      STAGE1:
     120   00:4D77  CD 5F 46                CALL DISSCR
     121   00:4D7A  21 00 80                LD HL, CEMENTER1
     122   00:4D7D  22 B4 C0                LD (BITMAP), HL
     123   00:4D80  06 07                   LD B, :CEMENTER1
     124   00:4D82  CD 4B 41                call load_screen
     125   00:4D85                          
     126   00:4D85  CD D5 41                call DUMP_SPR_ALL
     127   00:4D88  CD 1F 42                CALL DUMP_SPR_P1
     128   00:4D8B                          
     129   00:4D8B  21 75 67                LD HL, mapa1
     130   00:4D8E  11 B6 C0                LD DE, MAP_RAM
     131   00:4D91  01 E0 02                LD BC, 736
     132   00:4D94  ED B0                   LDIR
     133   00:4D96                          
     134   00:4D96  21 B6 C0                LD HL, MAP_RAM
     135   00:4D99  22 B2 C0                LD (MAPA), HL
     136   00:4D9C                          
     137   00:4D9C                          ;We load the tiles on page 1 of VDP
     138   00:4D9C  21 95 71                LD HL, TILES1    
     139   00:4D9F  CD FA 41                call load_tiles_vdp
     140   00:4DA2                      
     141   00:4DA2  CD 58 46                CALL ENASCR    
     142   00:4DA5                      
     143   00:4DA5  F3                     	di	
     144   00:4DA6  21 AB 50            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
     145   00:4DA9  DD E5                   PUSH IX
     146   00:4DAB                          ;call	PT3_INIT			; Inicia el reproductor de PT3
     147   00:4DAB  DD E1               	POP IX
     148   00:4DAD  FB                      ei
     149   00:4DAE                      
     150   00:4DAE                      
     151   00:4DAE                      MAIN_LOOP:
     152   00:4DAE                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     153   00:4DAE                      
     154   00:4DAE                          
     155   00:4DAE  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     156   00:4DB1  FE 00                   CP $00
     157   00:4DB3  CA CF 4F                JP Z, STAGE2
     158   00:4DB6  CD 04 42                call DUMP_SPR_ATTS    
     159   00:4DB9                      
     160   00:4DB9                      .check_tombs:
     161   00:4DB9  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     162   00:4DBC  FE C8                   CP MIKE_TOMB_STG1_X
     163   00:4DBE  20 17                   JR NZ, .check_john_tomb
     164   00:4DC0  3A 10 C0                LD A, (SHOWING_MIKE_DIALOG)
     165   00:4DC3  FE 01                   CP 1
     166   00:4DC5  CA 91 4E                JP Z, .animate_ghost
     167   00:4DC8  FD 21 10 40             LD IY, mike_tomb_strings
     168   00:4DCC  CD EF 44                CALL print_strings_dialog_box
     169   00:4DCF  3E 01                   LD A,1
     170   00:4DD1  32 10 C0                LD (SHOWING_MIKE_DIALOG), A
     171   00:4DD4  C3 91 4E                JP .animate_ghost
     172   00:4DD7                      
     173   00:4DD7                      .check_john_tomb:
     174   00:4DD7  FE 29                   CP JOHN_TOMB_STG1_X
     175   00:4DD9  20 17                   jr nz, .check_gus_tomb
     176   00:4DDB  3A 11 C0                LD A, (SHOWING_JOHN_DIALOG)
     177   00:4DDE  FE 01                   CP 1
     178   00:4DE0  CA 91 4E                JP Z, .animate_ghost
     179   00:4DE3  FD 21 39 40             LD IY, john_tomb_strings
     180   00:4DE7  CD EF 44                CALL print_strings_dialog_box
     181   00:4DEA  3E 01                   LD A,1
     182   00:4DEC  32 11 C0                LD (SHOWING_JOHN_DIALOG), A
     183   00:4DEF  C3 91 4E                JP .animate_ghost
     184   00:4DF2                      
     185   00:4DF2                      .check_gus_tomb:
     186   00:4DF2  FE 49                   CP GUS_TOMB_STG1_X
     187   00:4DF4  C2 2F 4E                JP nz, .check_skull_hint
     188   00:4DF7  3A 12 C0                LD A, (SHOWING_GUS_DIALOG)
     189   00:4DFA  FE 01                   CP 1
     190   00:4DFC  CA 91 4E                JP Z, .animate_ghost
     191   00:4DFF  DD 7E 00                LD A, (ix)
     192   00:4E02  FE 78                   CP GUS_TOMB_STG1_Y
     193   00:4E04  DA 91 4E                jp c, .animate_ghost
     194   00:4E07  FD 21 61 40             LD IY, gus_tomb_strings
     195   00:4E0B  CD EF 44                CALL print_strings_dialog_box
     196   00:4E0E  3E 01                   LD A,1
     197   00:4E10  32 12 C0                LD (SHOWING_GUS_DIALOG), A
     198   00:4E13                          ; Open the gate!
     199   00:4E13  FD 21 00 C0             LD IY, tileDat
     200   00:4E17  FD 36 00 20             LD (IY + VDP_SX), 32      ; SXL - Tile 1
     201   00:4E1B  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     202   00:4E1F  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     203   00:4E23  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     204   00:4E27  21 00 C0                LD HL, tileDat
     205   00:4E2A  CD 2D 46                CALL VDPCMD
     206   00:4E2D  18 62                   JR .animate_ghost
     207   00:4E2F                      
     208   00:4E2F                      .check_skull_hint:
     209   00:4E2F  FE 69                   CP SKULL_TOMB_STG1_X
     210   00:4E31  20 20                   jr nz, .check_mike_dialog_box
     211   00:4E33                              
     212   00:4E33  DD 7E 00                LD A, (ix)
     213   00:4E36  FE 5A                   CP SKULL_TOMB_STG1_Y1
     214   00:4E38  38 19                   jr c, .check_mike_dialog_box
     215   00:4E3A  FE 64                   CP SKULL_TOMB_STG1_Y2
     216   00:4E3C  30 15                   jr nc, .check_mike_dialog_box
     217   00:4E3E                      
     218   00:4E3E  3A 0F C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     219   00:4E41  FE 01                   CP 1
     220   00:4E43  28 4C                   JR Z, .animate_ghost
     221   00:4E45  FD 21 8A 40             LD IY, stg1_skull_strings
     222   00:4E49  CD EF 44                CALL print_strings_dialog_box
     223   00:4E4C  3E 01                   LD A,1
     224   00:4E4E  32 0F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     225   00:4E51  18 3E                   JR .animate_ghost
     226   00:4E53                      
     227   00:4E53                      .check_mike_dialog_box
     228   00:4E53  3A 10 C0                LD A, (SHOWING_MIKE_DIALOG)
     229   00:4E56  FE 01                   CP 1
     230   00:4E58  20 09                   JR nz, .check_gus_dialog
     231   00:4E5A  CD B9 45                CALL CLEAR_DIALOG_BOX
     232   00:4E5D  AF                      XOR A
     233   00:4E5E  32 10 C0                LD (SHOWING_MIKE_DIALOG), A
     234   00:4E61  18 2E                   JR .animate_ghost
     235   00:4E63                      
     236   00:4E63                      .check_gus_dialog
     237   00:4E63  3A 12 C0                LD A, (SHOWING_GUS_DIALOG)
     238   00:4E66  FE 01                   CP 1
     239   00:4E68  20 09                   JR nz, .check_john_dialog
     240   00:4E6A  CD B9 45                CALL CLEAR_DIALOG_BOX
     241   00:4E6D  AF                      XOR A
     242   00:4E6E  32 12 C0                LD (SHOWING_GUS_DIALOG), A
     243   00:4E71  18 1E                   JR .animate_ghost
     244   00:4E73                      
     245   00:4E73                      .check_john_dialog
     246   00:4E73  3A 11 C0                LD A, (SHOWING_JOHN_DIALOG)
     247   00:4E76  FE 01                   CP 1
     248   00:4E78  20 09                   JR nz, .check_skull_dialog
     249   00:4E7A  CD B9 45                CALL CLEAR_DIALOG_BOX
     250   00:4E7D  AF                      XOR A
     251   00:4E7E  32 11 C0                LD (SHOWING_JOHN_DIALOG), A
     252   00:4E81  18 0E                   JR .animate_ghost
     253   00:4E83                      
     254   00:4E83                      .check_skull_dialog
     255   00:4E83  3A 0F C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     256   00:4E86  FE 01                   CP 1
     257   00:4E88  20 07                   JR nz, .animate_ghost
     258   00:4E8A  CD B9 45                CALL CLEAR_DIALOG_BOX
     259   00:4E8D  AF                      XOR A
     260   00:4E8E  32 0F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     261   00:4E91                      
     262   00:4E91                      .animate_ghost    
     263   00:4E91  3A 1E C0                LD A,(CHAR_GHOST_DEAD)
     264   00:4E94  FE 01                   CP $01
     265   00:4E96  CA 0A 4F                JP Z,.continue
     266   00:4E99  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     267   00:4E9C  2A 1C C0            	LD HL, (CHAR_SPEED_X_GHOST)
     268   00:4E9F  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     269   00:4EA0                          
     270   00:4EA0  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     271   00:4EA3  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     272   00:4EA6  FE 50                   CP $50
     273   00:4EA8  CA B3 4E                JP Z,.CHANGE_DIR_RIGHT
     274   00:4EAB  FE AF                   CP $AF
     275   00:4EAD  CA C0 4E                JP Z,.CHANGE_DIR_LEFT
     276   00:4EB0                          		
     277   00:4EB0  C3 C9 4E                JP .check_pattern
     278   00:4EB3                      
     279   00:4EB3                      .CHANGE_DIR_RIGHT:
     280   00:4EB3  3E 01                   LD A, MOV_SPEED_GHOST
     281   00:4EB5  32 1C C0            	LD (CHAR_SPEED_X_GHOST), A
     282   00:4EB8  3E FF                   LD A,$FF
     283   00:4EBA  32 21 C0                LD (CHAR_DIR_GHOST1),A
     284   00:4EBD  C3 C9 4E                JP .check_pattern
     285   00:4EC0                      
     286   00:4EC0                      .CHANGE_DIR_LEFT:
     287   00:4EC0  3E FF                   LD A, -MOV_SPEED_GHOST
     288   00:4EC2  32 1C C0            	LD (CHAR_SPEED_X_GHOST), A
     289   00:4EC5  AF                      XOR A   ; Pone A a 0
     290   00:4EC6  32 21 C0                LD (CHAR_DIR_GHOST1),A
     291   00:4EC9                      
     292   00:4EC9                      .check_pattern:
     293   00:4EC9  3A 21 C0                LD A,(CHAR_DIR_GHOST1)
     294   00:4ECC  FE FF                   CP $FF
     295   00:4ECE  CA EF 4E                JP Z,.check_pattern_RIGHT
     296   00:4ED1  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     297   00:4ED4  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     298   00:4ED6  CA E4 4E                jp z,.change_pattern_L
     299   00:4ED9  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     300   00:4EDD  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     301   00:4EE1  C3 0A 4F                jp .continue
     302   00:4EE4                      .change_pattern_L:
     303   00:4EE4  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     304   00:4EE8  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     305   00:4EEC  C3 0A 4F                jp .continue
     306   00:4EEF                      
     307   00:4EEF                      .check_pattern_RIGHT
     308   00:4EEF  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     309   00:4EF2  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     310   00:4EF4  CA 02 4F                jp z,.change_pattern_R
     311   00:4EF7  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     312   00:4EFB  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     313   00:4EFF  C3 0A 4F                jp .continue
     314   00:4F02                      .change_pattern_R:
     315   00:4F02  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     316   00:4F06  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     317   00:4F0A                      
     318   00:4F0A                      .continue:    
     319   00:4F0A  CD 78 44                CALL MOVE_SHOOT
     320   00:4F0D                      .CHECK_GHOST:
     321   00:4F0D                          ; Comprobamos si hay colision con el fantasma
     322   00:4F0D  3A 1E C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     323   00:4F10  FE 01                   CP $01
     324   00:4F12  CA 36 4F                JP Z,.check_KB
     325   00:4F15                      
     326   00:4F15  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     327   00:4F18  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     328   00:4F1B  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     329   00:4F1E  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     330   00:4F21  CD B4 40                call check_spr_collision
     331   00:4F24  FE 01                   CP 1
     332   00:4F26  C2 36 4F                JP NZ,.check_KB
     333   00:4F29                      
     334   00:4F29                      .KILL_GHOST:
     335   00:4F29  3E 01                   LD A,1
     336   00:4F2B  32 1E C0                LD (CHAR_GHOST_DEAD),A
     337   00:4F2E  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     338   00:4F32  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     339   00:4F36                      
     340   00:4F36                      .check_KB:
     341   00:4F36  76                      halt    
     342   00:4F37                      	
     343   00:4F37  F3                  	di       
     344   00:4F38  DD E5                   PUSH IX
     345   00:4F3A                      	;call	PT3_ROUT			;envia datos a al PSG 	   
     346   00:4F3A                      	;call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     347   00:4F3A  DD E1               	POP IX
     348   00:4F3C  FB                      ei
     349   00:4F3D                      
     350   00:4F3D  3E 08                   ld a, 8
     351   00:4F3F  CD 41 01            	call SNSMAT   
     352   00:4F42                          
     353   00:4F42  4F                      LD C,A    
     354   00:4F43                          
     355   00:4F43  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     356   00:4F45  CC C0 42                call z, move_right
     357   00:4F48                          
     358   00:4F48  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     359   00:4F4A  CC 1F 43                call z, move_left
     360   00:4F4D                      
     361   00:4F4D  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     362   00:4F4F  CC 4B 42                call z, move_up
     363   00:4F52                      
     364   00:4F52  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     365   00:4F54  CC 85 42                call z, move_down
     366   00:4F57                      
     367   00:4F57                      no_arrows:
     368   00:4F57  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     369   00:4F59  CC 5F 4F                call z,SHOOT_MAIN_CHAR
     370   00:4F5C                      
     371   00:4F5C                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     372   00:4F5C                          ;ret z
     373   00:4F5C                          
     374   00:4F5C  C3 AE 4D                jp MAIN_LOOP
     375   00:4F5F                      
     376   00:4F5F                      SHOOT_MAIN_CHAR:    
     377   00:4F5F  3A 25 C0                LD A, (CHAR_MAIN_SHOOT)
     378   00:4F62  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     379   00:4F64  C8                      RET Z;,MAIN_LOOP
     380   00:4F65  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     381   00:4F67  C8                      RET Z;,MAIN_LOOP
     382   00:4F68  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     383   00:4F6A  C8                      RET Z;,MAIN_LOOP
     384   00:4F6B  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     385   00:4F6D  C8                      RET Z;,MAIN_LOOP
     386   00:4F6E                      
     387   00:4F6E  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     388   00:4F72                      
     389   00:4F72  DD 7E 00                LD A, (ix)          
     390   00:4F75  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     391   00:4F78                      
     392   00:4F78  3A 23 C0                LD A, (CHAR_DIR_MAIN)
     393   00:4F7B  FE 03                   CP $03
     394   00:4F7D  CA 99 4F                JP Z,.SHOOT_RIGHT
     395   00:4F80  FE 00                   CP $00
     396   00:4F82  CA A8 4F                JP Z,.SHOOT_UP
     397   00:4F85  FE 01                   CP $01
     398   00:4F87  CA BB 4F                JP Z,.SHOOT_DOWN
     399   00:4F8A                          ; SHOOT LEFT
     400   00:4F8A  3E 01                   LD A,$01                ; SHOOT LEFT
     401   00:4F8C  32 25 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     402   00:4F8F  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     403   00:4F92  21 F4 FF            	LD HL, -12
     404   00:4F95  85                  	ADD L
     405   00:4F96                          
     406   00:4F96  C3 CB 4F                JP .CONTINUE
     407   00:4F99                      
     408   00:4F99                      .SHOOT_RIGHT:    
     409   00:4F99  3E 02                   LD A,$02
     410   00:4F9B  32 25 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     411   00:4F9E                          
     412   00:4F9E  DD 7E 01                LD A, (ix+1)			;cargamos la X
     413   00:4FA1  21 0C 00            	LD HL, 12
     414   00:4FA4  85                  	ADD L
     415   00:4FA5  C3 CB 4F                JP .CONTINUE
     416   00:4FA8                      
     417   00:4FA8                      .SHOOT_UP:
     418   00:4FA8  3E 03                   LD A,$03
     419   00:4FAA  32 25 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     420   00:4FAD                          
     421   00:4FAD                          ; Sumamos el desplazamiento a la Y
     422   00:4FAD  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     423   00:4FB0  D6 10                   SUB 16
     424   00:4FB2  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     425   00:4FB5                          ;LD (ix+17), D
     426   00:4FB5  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     427   00:4FB8  C3 CB 4F                JP .CONTINUE
     428   00:4FBB                      
     429   00:4FBB                      .SHOOT_DOWN
     430   00:4FBB  3E 04               	LD A,$04
     431   00:4FBD  32 25 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     432   00:4FC0                          
     433   00:4FC0                          ; Sumamos el desplazamiento a la Y
     434   00:4FC0  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     435   00:4FC3  C6 10                   ADD 16
     436   00:4FC5  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     437   00:4FC8                          ;LD (ix+17), D
     438   00:4FC8  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     439   00:4FCB                      
     440   00:4FCB                      .CONTINUE:
     441   00:4FCB                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     442   00:4FCB  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     443   00:4FCE                          ;jp MAIN_LOOP
     444   00:4FCE  C9                      ret
     445   00:4FCF                      
     446   00:4FCF                      STAGE2:
     447   00:4FCF  CD 5F 46                CALL DISSCR
     448   00:4FD2  21 00 80                LD HL, CEMENTER2
     449   00:4FD5  22 B4 C0                LD (BITMAP), HL
     450   00:4FD8  06 0D                   LD B, :CEMENTER2
     451   00:4FDA                      
     452   00:4FDA  CD 4B 41                call load_screen
     453   00:4FDD  21 55 6A                LD HL, mapa2
     454   00:4FE0  22 B2 C0                LD (MAPA), HL
     455   00:4FE3                          
     456   00:4FE3                          ; Ponemos el P1 por encima del marco
     457   00:4FE3  DD 36 00 A1             LD (ix), 161      ; mask 0
     458   00:4FE7  DD 36 04 A1             LD (ix+4), 161    ; mask 1
     459   00:4FEB  DD 36 08 A1             LD (ix+8), 161    ; mask 2
     460   00:4FEF                          
     461   00:4FEF  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     462   00:4FF3  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     463   00:4FF7                          
     464   00:4FF7  CD D5 41                CALL DUMP_SPR_ALL
     465   00:4FFA  CD 1F 42                CALL DUMP_SPR_P1
     466   00:4FFD                          
     467   00:4FFD                          ; Esqueleto
     468   00:4FFD  DD 36 18 10             LD (ix+SPR_GHOST_STG2), 10h
     469   00:5001  DD 36 19 10             LD (ix+SPR_GHOST_STG2+1), 10h
     470   00:5005  DD 36 1A 3C             LD (ix+SPR_GHOST_STG2+2), SPR_GHOST_STG2_PTRN_L1
     471   00:5009                      
     472   00:5009  DD 36 1C 10             LD (ix+SPR_GHOST_STG2+4), 10h
     473   00:500D  DD 36 1D 10             LD (ix+SPR_GHOST_STG2+5), 10h
     474   00:5011  DD 36 1E 40             LD (ix+SPR_GHOST_STG2+6), SPR_GHOST_STG2_PTRN_L1+4
     475   00:5015                      
     476   00:5015  AF                      XOR A
     477   00:5016  32 1F C0                LD (CHAR_GHOST_DEAD_STG2), A
     478   00:5019  32 20 C0                LD (CHAR_MIN_STEP_STG2), A
     479   00:501C  3E FF                   LD A, $FF
     480   00:501E  32 22 C0                LD (CHAR_DIR_GHOST_STG2), A
     481   00:5021  3E 01                   LD A, MOV_SPEED_GHOST
     482   00:5023  32 1D C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     483   00:5026                      
     484   00:5026  CD 58 46                CALL ENASCR
     485   00:5029                          
     486   00:5029                      MAIN_LOOP2:
     487   00:5029                          ;halt    
     488   00:5029                         
     489   00:5029  DD 7E 00                LD A, (ix)    
     490   00:502C  FE A2                   CP 162      ; Miramos si la Y es 160 para pasar a stg1
     491   00:502E  C2 58 50                JP NZ, .no_screen_change
     492   00:5031                          ; Ponemos el SP1 al principio de la pantalla 1
     493   00:5031  DD 36 00 01             LD (ix), 1          ; SP1 - Y = 1
     494   00:5035  DD 36 04 01             LD (ix+4), 1
     495   00:5039  DD 36 08 01             LD (ix+8), 1
     496   00:503D                      
     497   00:503D  3A 1E C0                LD A, (CHAR_GHOST_DEAD)
     498   00:5040  FE 01                   CP $01
     499   00:5042  CA 4D 50                JP Z, .GHOST_DEAD
     500   00:5045  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     501   00:5049  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     502   00:504D                      .GHOST_DEAD:
     503   00:504D  DD 36 18 D9             LD (ix+SPR_GHOST_STG2),217  ; ocultamos el esqueleto
     504   00:5051  DD 36 1C D9             LD (ix+SPR_GHOST_STG2+4),217  ; ocultamos el esqueleto
     505   00:5055  CD 77 4D                CALL STAGE1
     506   00:5058                      
     507   00:5058                      .no_screen_change:
     508   00:5058                      
     509   00:5058  CD 04 42                call DUMP_SPR_ATTS    
     510   00:505B                          ; Movemos el esqueleto
     511   00:505B  3A 1F C0                LD A,(CHAR_GHOST_DEAD_STG2)
     512   00:505E  FE 01                   CP $01
     513   00:5060  CA E5 50                JP Z,.continue
     514   00:5063  DD 7E 19                LD A, (ix+SPR_GHOST_STG2+1)          ;cargamos la X del Esqueleto
     515   00:5066  2A 1D C0            	LD HL, (CHAR_SPEED_X_GHOST_STG2)
     516   00:5069  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     517   00:506A                          
     518   00:506A  DD 77 19            	LD (ix+SPR_GHOST_STG2+1), A	
     519   00:506D  DD 77 1D                LD (ix+SPR_GHOST_STG2+5), A
     520   00:5070  FE 16                   CP $16
     521   00:5072  CA 8A 50                JP Z,.CHANGE_DIR_RIGHT
     522   00:5075  FE B9                   CP $B9
     523   00:5077  CA 97 50                JP Z,.CHANGE_DIR_LEFT
     524   00:507A                      
     525   00:507A  3A 20 C0                LD A, (CHAR_MIN_STEP_STG2)		
     526   00:507D  FE 06                   CP MAX_CHAR_STEPS_STG2
     527   00:507F  CA A0 50                JP Z,.check_pattern
     528   00:5082  C6 01                   ADD 1
     529   00:5084  32 20 C0                LD (CHAR_MIN_STEP_STG2), A
     530   00:5087  C3 E5 50                JP .continue
     531   00:508A                      
     532   00:508A                      .CHANGE_DIR_RIGHT:
     533   00:508A  3E 01                   LD A, MOV_SPEED_GHOST
     534   00:508C  32 1D C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     535   00:508F  3E FF                   LD A,$FF
     536   00:5091  32 22 C0                LD (CHAR_DIR_GHOST_STG2),A
     537   00:5094  C3 A0 50                JP .check_pattern
     538   00:5097                      
     539   00:5097                      .CHANGE_DIR_LEFT:
     540   00:5097  3E FF                   LD A, -MOV_SPEED_GHOST
     541   00:5099  32 1D C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     542   00:509C  AF                      XOR A   ; Pone A a 0
     543   00:509D  32 22 C0                LD (CHAR_DIR_GHOST_STG2),A
     544   00:50A0                      
     545   00:50A0                      .check_pattern:
     546   00:50A0  AF                      XOR A
     547   00:50A1  32 20 C0                LD (CHAR_MIN_STEP_STG2), A
     548   00:50A4  3A 22 C0                LD A,(CHAR_DIR_GHOST_STG2)
     549   00:50A7  FE FF                   CP $FF
     550   00:50A9  CA CA 50                JP Z,.check_pattern_RIGHT
     551   00:50AC  DD 7E 1A                LD A, (ix+SPR_GHOST_STG2+2)       ; Cargamos el patrón y lo cambiamos
     552   00:50AF  FE 3C                   CP SPR_GHOST_STG2_PTRN_L1
     553   00:50B1  CA BF 50                jp z,.change_pattern_L
     554   00:50B4  DD 36 1A 3C             LD (ix+SPR_GHOST_STG2+2),SPR_GHOST_STG2_PTRN_L1
     555   00:50B8  DD 36 1E 40             LD (ix+SPR_GHOST_STG2+6),SPR_GHOST_STG2_PTRN_L1+4
     556   00:50BC  C3 E5 50                jp .continue
     557   00:50BF                      .change_pattern_L:
     558   00:50BF  DD 36 1A 44             LD (ix+SPR_GHOST_STG2+2),SPR_GHOST_STG2_PTRN_L2
     559   00:50C3  DD 36 1E 48             LD (ix+SPR_GHOST_STG2+6),SPR_GHOST_STG2_PTRN_L2+4
     560   00:50C7  C3 E5 50                jp .continue
     561   00:50CA                      
     562   00:50CA                      .check_pattern_RIGHT
     563   00:50CA  DD 7E 1A                LD A, (ix+SPR_GHOST_STG2+2)       ; Cargamos el patrón y lo cambiamos
     564   00:50CD  FE 4C                   CP SPR_GHOST_STG2_PTRN_R1
     565   00:50CF  CA DD 50                jp z,.change_pattern_R
     566   00:50D2  DD 36 1A 4C             LD (ix+SPR_GHOST_STG2+2),SPR_GHOST_STG2_PTRN_R1
     567   00:50D6  DD 36 1E 50             LD (ix+SPR_GHOST_STG2+6),SPR_GHOST_STG2_PTRN_R1+4
     568   00:50DA  C3 E5 50                jp .continue
     569   00:50DD                      .change_pattern_R:
     570   00:50DD  DD 36 1A 54             LD (ix+SPR_GHOST_STG2+2),SPR_GHOST_STG2_PTRN_R2
     571   00:50E1  DD 36 1E 58             LD (ix+SPR_GHOST_STG2+6),SPR_GHOST_STG2_PTRN_R2+4
     572   00:50E5                      
     573   00:50E5                      .continue:
     574   00:50E5  CD 78 44                CALL MOVE_SHOOT    
     575   00:50E8                      
     576   00:50E8  3E 08                   ld a, 8
     577   00:50EA  CD 41 01            	call SNSMAT   
     578   00:50ED  4F                      LD C,A    
     579   00:50EE                              
     580   00:50EE  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     581   00:50F0  CC C0 42                call z, move_right
     582   00:50F3                          
     583   00:50F3  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     584   00:50F5  CC 1F 43                call z, move_left
     585   00:50F8                      
     586   00:50F8  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     587   00:50FA  CC 4B 42                call z, move_up
     588   00:50FD                      
     589   00:50FD  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     590   00:50FF  CC 85 42                call z, move_down
     591   00:5102                      
     592   00:5102  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     593   00:5104  CC 5F 4F                call z,SHOOT_MAIN_CHAR
     594   00:5107                      
     595   00:5107  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     596   00:5109  C8                      ret z
     597   00:510A                      
     598   00:510A  76                      halt
     599   00:510B                      	;di       
     600   00:510B                          ;PUSH IX
     601   00:510B                      	;call	PT3_ROUT			;envia datos a al PSG 	   
     602   00:510B                      	;call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     603   00:510B                      	;POP IX
     604   00:510B                          ;ei
     605   00:510B                      
     606   00:510B  C3 29 50                jp MAIN_LOOP2
     607   00:510E                      
     608   00:510E                      
     609   00:510E                      SONG:
     610   00:510E                      	;incbin "musica_sin_cabacera.pt3"
     611   00:510E  (0EE7)                  incbin "sfx\test.pt3"
     612   00:5FF5                      include "include\BTH_data.asm"
       1.  00:5FF5                      SPRITE_P1_UP:
       2.  00:5FF5                          ; UP 1        
       3.  00:5FF5                          ; mask 0
       4.  00:5FF5                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  00:5FF5  07 0F 05 1F 1F 3F 3F 7F 
       5.  00:5FFD                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  00:5FFD  00 4F 70 38 0C 0E 07 04 
       6.  00:6005                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  00:6005  E0 F0 A0 F8 F8 F8 FC FE 
       7.  00:600D                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  00:600D  06 F2 1E 3C 30 70 C0 00 
       8.  00:6015                          ; mask 1
       9.  00:6015                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  00:6015  00 00 18 00 1F 00 00 00 
      10.  00:601D                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  00:601D  7F 50 4F 3F 0F 0F 07 02 
      11.  00:6025                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  00:6025  00 00 10 00 FC 00 00 00 
      12.  00:602D                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  00:602D  F2 0E FE FC F0 F0 A0 00 
      13.  00:6035                          ; mask 2
      14.  00:6035                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  00:6035  00 00 1A 00 00 00 00 00 
      15.  00:603D                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  00:603D  7F 60 00 00 00 00 07 00 
      16.  00:6045                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  00:6045  00 00 50 00 00 00 00 00 
      17.  00:604D                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  00:604D  FA 0E 00 00 00 00 80 00 
      18.  00:6055                          
      19.  00:6055                          ; UP 2
      20.  00:6055                          ; mask 0
      21.  00:6055                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  00:6055  07 0F 05 1F 1F 3F 3F 7F 
      22.  00:605D                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  00:605D  10 4F 70 38 0C 0E 05 00 
      23.  00:6065                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  00:6065  E0 F0 A0 F8 F8 F8 FC FE 
      24.  00:606D                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  00:606D  02 F2 1E 3C 30 70 E0 40 
      25.  00:6075                          ; mask 1
      26.  00:6075                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  00:6075  00 00 18 00 1F 00 00 00 
      27.  00:607D                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  00:607D  4F 70 7F 3F 0F 0F 03 00 
      28.  00:6085                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  00:6085  00 00 10 00 FC 00 00 00 
      29.  00:608D                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  00:608D  FE 06 F2 FC F0 F0 E0 20 
      30.  00:6095                          ; mask 2
      31.  00:6095                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  00:6095  00 00 1A 00 00 00 00 00 
      32.  00:609D                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  00:609D  6F 70 00 00 00 00 01 00 
      33.  00:60A5                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  00:60A5  00 00 50 00 00 00 00 00 
      34.  00:60AD                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  00:60AD  FE 0A 00 00 00 00 E0 00 
      35.  00:60B5                          
      36.  00:60B5                      SPRITE_P1_DOWN:
      37.  00:60B5                          ; DOWN 1 - 00h
      38.  00:60B5                          ; mask 0
      39.  00:60B5                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  00:60B5  07 0F 04 06 0F 07 1F 3F 
      40.  00:60BD                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  00:60BD  4C 4E 4E 3C 0C 0E 0F 08 
      41.  00:60C5                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  00:60C5  E0 F0 20 20 70 E0 F8 FC 
      42.  00:60CD                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  00:60CD  32 72 7E 7C 70 F0 C0 00 
      43.  00:60D5                          ; mask 1
      44.  00:60D5                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  00:60D5  00 00 19 19 10 3A 3A 78 
      45.  00:60DD                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  00:60DD  5F 5E 7E 3C 0C 0E 0F 04 
      46.  00:60E5                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  00:60E5  00 00 90 D8 88 58 5C 1E 
      47.  00:60ED                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  00:60ED  F6 FE FE 3C 30 70 A0 00 
      48.  00:60F5                          ; mask 2
      49.  00:60F5                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  00:60F5  00 00 1B 00 10 00 00 00 
      50.  00:60FD                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  00:60FD  6F 6F 7F 3F 0F 0F 0F 00 
      51.  00:6105                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  00:6105  00 00 D0 00 8C 00 00 00 
      52.  00:610D                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  00:610D  FA 7E 7E BC B0 70 80 00 
      53.  00:6115                          
      54.  00:6115                          ; DOWN 2
      55.  00:6115                          ; mask 0 - 0Ch    
      56.  00:6115                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  00:6115  07 0F 04 06 0F 07 1F 3F 
      57.  00:611D                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  00:611D  4C 4E 7E 3C 0C 0E 05 00 
      58.  00:6125                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  00:6125  E0 F0 20 20 70 E0 F8 FC 
      59.  00:612D                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  00:612D  32 72 72 7C 70 F0 E0 40 
      60.  00:6135                          ; mask 1
      61.  00:6135                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  00:6135  00 00 19 19 10 3A 3A 78 
      62.  00:613D                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  00:613D  5F 7E 7E 3C 0C 0E 03 00 
      63.  00:6145                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  00:6145  00 00 90 D8 88 58 5C 1E 
      64.  00:614D                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  00:614D  F6 F6 FE 3C 30 70 E0 20 
      65.  00:6155                          ; mask 2
      66.  00:6155                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  00:6155  00 00 1B 00 10 00 00 00 
      67.  00:615D                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  00:615D  6F 7F 7F 3F 0F 0F 01 00 
      68.  00:6165                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  00:6165  00 00 D0 00 8C 00 00 00 
      69.  00:616D                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  00:616D  FA 7A 7E BC B0 70 E0 00 
      70.  00:6175                      
      71.  00:6175                      SPRITE_P1_LEFT:         
      72.  00:6175                          ; --- Slot 3
      73.  00:6175                          ; mask 0
      74.  00:6175                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  00:6175  07 0F 02 05 07 07 0F 0F 
      75.  00:617D                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  00:617D  07 03 03 03 01 03 03 04 
      76.  00:6185                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  00:6185  E0 F0 80 00 A0 E0 C0 C0 
      77.  00:618D                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  00:618D  E0 B0 70 F0 F0 F0 C0 00 
      78.  00:6195                          ; mask 1
      79.  00:6195                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  00:6195  00 00 18 1A 08 0A 12 10 
      80.  00:619D                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  00:619D  08 03 02 02 01 03 03 03 
      81.  00:61A5                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  00:61A5  00 00 78 F8 5C 1C 7E 7E 
      82.  00:61AD                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  00:61AD  FE 3E 7E 7C F8 F8 B0 00 
      83.  00:61B5                          ; mask 2
      84.  00:61B5                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  00:61B5  00 00 1D 00 28 00 00 00 
      85.  00:61BD                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  00:61BD  00 07 06 06 07 07 03 00 
      86.  00:61C5                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  00:61C5  00 00 78 00 5C 00 00 00 
      87.  00:61CD                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  00:61CD  00 7E FE 7C F8 F8 80 00 
      88.  00:61D5                          ; --- Slot 4
      89.  00:61D5                          ; mask 0
      90.  00:61D5                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  00:61D5  07 0F 02 05 07 07 0F 0F 
      91.  00:61DD                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  00:61DD  07 03 03 03 01 03 04 00 
      92.  00:61E5                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  00:61E5  E0 F0 80 00 A0 E0 C0 C0 
      93.  00:61ED                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  00:61ED  E0 B0 D0 D0 F0 F0 E0 40 
      94.  00:61F5                          ; mask 1
      95.  00:61F5                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  00:61F5  00 00 18 1A 08 0A 12 10 
      96.  00:61FD                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  00:61FD  08 03 03 03 01 03 03 00 
      97.  00:6205                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  00:6205  00 00 78 F8 5C 1C 7E 7E 
      98.  00:620D                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  00:620D  FE 3E 9E 9C 98 F8 E0 30 
      99.  00:6215                          ; mask 2
     100.  00:6215                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  00:6215  00 00 1D 00 28 00 00 00 
     101.  00:621D                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  00:621D  00 07 07 07 07 07 00 00 
     102.  00:6225                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  00:6225  00 00 78 00 5C 00 00 00 
     103.  00:622D                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  00:622D  00 7E BE BC 98 F8 E0 00 
     104.  00:6235                      
     105.  00:6235                      SPRITE_P1_RIGHT:
     106.  00:6235                          ; --- Slot 0
     107.  00:6235                          ; mask 0
     108.  00:6235                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  00:6235  07 0F 01 00 05 07 03 03 
     109.  00:623D                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  00:623D  07 0D 0E 0F 0F 0F 03 00 
     110.  00:6245                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  00:6245  E0 F0 40 A0 E0 E0 F0 F0 
     111.  00:624D                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  00:624D  E0 C0 C0 C0 80 C0 C0 20 
     112.  00:6255                          ; mask 1
     113.  00:6255                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  00:6255  00 00 1E 1F 3A 38 7E 7E 
     114.  00:625D                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  00:625D  7F 7C 7E 3E 1F 1F 0D 00 
     115.  00:6265                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  00:6265  00 00 18 58 10 50 48 08 
     116.  00:626D                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  00:626D  10 C0 40 40 80 C0 C0 C0 
     117.  00:6275                          ; mask 2
     118.  00:6275                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  00:6275  00 00 1E 00 3A 00 00 00 
     119.  00:627D                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  00:627D  00 7E 7F 3E 1F 1F 01 00 
     120.  00:6285                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  00:6285  00 00 B8 00 14 00 00 00 
     121.  00:628D                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  00:628D  00 E0 60 60 E0 E0 C0 00 
     122.  00:6295                          
     123.  00:6295                          ; --- Slot 2
     124.  00:6295                         ; mask 0
     125.  00:6295                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  00:6295  07 0F 01 00 05 07 03 03 
     126.  00:629D                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  00:629D  07 0D 0B 0B 0F 0F 07 02 
     127.  00:62A5                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  00:62A5  E0 F0 40 A0 E0 E0 F0 F0 
     128.  00:62AD                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  00:62AD  E0 C0 C0 C0 80 C0 20 00 
     129.  00:62B5                          ; mask 1
     130.  00:62B5                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  00:62B5  00 00 1E 1F 3A 38 7E 7E 
     131.  00:62BD                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  00:62BD  7F 7C 79 39 19 1F 07 0C 
     132.  00:62C5                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  00:62C5  00 00 18 58 10 50 48 08 
     133.  00:62CD                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  00:62CD  10 C0 C0 C0 80 C0 C0 00 
     134.  00:62D5                              ; mask 2
     135.  00:62D5                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  00:62D5  00 00 1E 00 3A 00 00 00 
     136.  00:62DD                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  00:62DD  00 7E 7D 3D 19 1F 07 00 
     137.  00:62E5                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  00:62E5  00 00 B8 00 14 00 00 00 
     138.  00:62ED                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  00:62ED  00 E0 E0 E0 E0 E0 00 00 
     139.  00:62F5                          
     140.  00:62F5                      SPRITE_PATTERN:    
     141.  00:62F5                          ; P1 - DOWN 1 
     142.  00:62F5                          ; DOWN 1 - 00h
     143.  00:62F5                          ; mask 0
     144.  00:62F5                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  00:62F5  07 0F 04 06 0F 07 1F 3F 
     145.  00:62FD                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  00:62FD  4C 4E 4E 3C 0C 0E 0F 08 
     146.  00:6305                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  00:6305  E0 F0 20 20 70 E0 F8 FC 
     147.  00:630D                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  00:630D  32 72 7E 7C 70 F0 C0 00 
     148.  00:6315                          ; mask 1
     149.  00:6315                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  00:6315  00 00 19 19 10 3A 3A 78 
     150.  00:631D                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  00:631D  5F 5E 7E 3C 0C 0E 0F 04 
     151.  00:6325                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  00:6325  00 00 90 D8 88 58 5C 1E 
     152.  00:632D                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  00:632D  F6 FE FE 3C 30 70 A0 00 
     153.  00:6335                          ; mask 2
     154.  00:6335                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  00:6335  00 00 1B 00 10 00 00 00 
     155.  00:633D                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  00:633D  6F 6F 7F 3F 0F 0F 0F 00 
     156.  00:6345                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  00:6345  00 00 D0 00 8C 00 00 00 
     157.  00:634D                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  00:634D  FA 7E 7E BC B0 70 80 00 
     158.  00:6355                          
     159.  00:6355                          ; DOWN 2
     160.  00:6355                          ; mask 0 - 0Ch    
     161.  00:6355                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  00:6355  07 0F 04 06 0F 07 1F 3F 
     162.  00:635D                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  00:635D  4C 4E 7E 3C 0C 0E 05 00 
     163.  00:6365                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  00:6365  E0 F0 20 20 70 E0 F8 FC 
     164.  00:636D                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  00:636D  32 72 72 7C 70 F0 E0 40 
     165.  00:6375                          ; mask 1
     166.  00:6375                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  00:6375  00 00 19 19 10 3A 3A 78 
     167.  00:637D                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  00:637D  5F 7E 7E 3C 0C 0E 03 00 
     168.  00:6385                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  00:6385  00 00 90 D8 88 58 5C 1E 
     169.  00:638D                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  00:638D  F6 F6 FE 3C 30 70 E0 20 
     170.  00:6395                          ; mask 2
     171.  00:6395                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  00:6395  00 00 1B 00 10 00 00 00 
     172.  00:639D                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  00:639D  6F 7F 7F 3F 0F 0F 01 00 
     173.  00:63A5                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  00:63A5  00 00 D0 00 8C 00 00 00 
     174.  00:63AD                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  00:63AD  FA 7A 7E BC B0 70 E0 00 
     175.  00:63B5                          
     176.  00:63B5                          ; Antichrist - RIGHT
     177.  00:63B5                          ; mask 0 - 18h    
     178.  00:63B5                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  00:63B5  00 00 00 01 01 01 01 01 
     179.  00:63BD                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  00:63BD  01 01 07 07 01 01 00 00 
     180.  00:63C5                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  00:63C5  00 00 00 80 80 80 80 80 
     181.  00:63CD                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  00:63CD  80 80 E0 E0 80 80 00 00 
     182.  00:63D5                      
     183.  00:63D5                          ;Ghost 1 Left - 1CH
     184.  00:63D5                          ; mask 0
     185.  00:63D5                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  00:63D5  03 04 08 68 B5 90 50 40 
     186.  00:63DD                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  00:63DD  22 20 10 10 08 06 03 00 
     187.  00:63E5                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  00:63E5  C0 E0 70 36 BB 33 26 06 
     188.  00:63ED                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  00:63ED  0C 18 3E 19 07 0C F8 E0 
     189.  00:63F5                          ; mask 1    20h
     190.  00:63F5                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  00:63F5  00 07 0F 6F DF FF 6F 7F 
     191.  00:63FD                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  00:63FD  3F 3F 1F 1F 0F 05 03 00 
     192.  00:6405                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  00:6405  00 20 90 D6 DD DD DA FA 
     193.  00:640D                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  00:640D  F4 E8 CE EF FB F4 18 00 
     194.  00:6415                          
     195.  00:6415                          ; Ghost 2 Left - 24h
     196.  00:6415                          ; mask 0    24-h
     197.  00:6415                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  00:6415  03 04 08 08 65 B0 90 40 
     198.  00:641D                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  00:641D  22 20 10 10 08 06 01 00 
     199.  00:6425                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  00:6425  C0 E0 70 30 B6 3B 27 06 
     200.  00:642D                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  00:642D  0C 18 3C 1A 06 0C F0 C0 
     201.  00:6435                          ; mask 1    28h
     202.  00:6435                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  00:6435  00 07 0F 0F 6F DF EF 7F 
     203.  00:643D                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  00:643D  3F 3F 1F 1F 0F 05 01 00 
     204.  00:6445                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  00:6445  00 20 90 D0 D6 DD D9 FA 
     205.  00:644D                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  00:644D  F4 E8 CC EE FA F4 30 00 
     206.  00:6455                      
     207.  00:6455                          ; Ghost 1 Right - 2Ch
     208.  00:6455                          ; mask 0
     209.  00:6455                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  00:6455  03 07 0E 6C DD CC 64 60 
     210.  00:645D                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  00:645D  30 18 7C 98 E0 30 1F 07 
     211.  00:6465                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  00:6465  C0 20 10 16 AD 09 0A 02 
     212.  00:646D                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  00:646D  44 04 08 08 10 60 C0 00 
     213.  00:6475                          ; mask 1    - 30h
     214.  00:6475                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  00:6475  00 04 09 6B BB BB 5B 5F 
     215.  00:647D                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  00:647D  2F 17 73 F7 DF 2F 18 00 
     216.  00:6485                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  00:6485  00 E0 F0 F6 FB FF F6 FE 
     217.  00:648D                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  00:648D  FC FC F8 F8 F0 A0 C0 00 
     218.  00:6495                          
     219.  00:6495                          ; Ghost 2 Right - 34h
     220.  00:6495                          ; mask 0
     221.  00:6495                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  00:6495  03 07 0E 0C 6D DC E4 60 
     222.  00:649D                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  00:649D  30 18 3C 58 60 30 0F 03 
     223.  00:64A5                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  00:64A5  C0 20 10 10 A6 0D 09 02 
     224.  00:64AD                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  00:64AD  44 04 08 08 10 60 80 00 
     225.  00:64B5                          ; mask 1    38h
     226.  00:64B5                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  00:64B5  00 04 09 0B 6B BB 9B 5F 
     227.  00:64BD                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  00:64BD  2F 17 33 77 5F 2F 0C 00 
     228.  00:64C5                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  00:64C5  00 E0 F0 F0 F6 FB F7 FE 
     229.  00:64CD                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  00:64CD  FC FC F8 F8 F0 A0 80 00 
     230.  00:64D5                          
     231.  00:64D5                      
     232.  00:64D5                          ; Esqueleto Left - 1
     233.  00:64D5                          ; mask 0 - 3Ch
     234.  00:64D5                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  00:64D5  1F 1B 2E 24 3F 1F 1F 00 
     235.  00:64DD                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  00:64DD  03 05 09 04 01 02 02 04 
     236.  00:64E5                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  00:64E5  80 C0 C0 C0 80 00 00 80 
     237.  00:64ED                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  00:64ED  E0 D0 C8 C4 C0 20 20 40 
     238.  00:64F5                          ; mask 1 - 40h
     239.  00:64F5                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  00:64F5  1F 1F 3F 3F 3F 1E 0A 00 
     240.  00:64FD                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  00:64FD  03 05 09 04 01 00 00 00 
     241.  00:6505                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  00:6505  00 80 80 80 00 00 00 00 
     242.  00:650D                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  00:650D  80 10 88 84 80 00 00 00 
     243.  00:6515                      
     244.  00:6515                          ; Esqueleto Left - 2
     245.  00:6515                          ; mask 0 - 44h
     246.  00:6515                          ; mask 0
     247.  00:6515                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  00:6515  0F 0D 17 12 1F 0F 0F 00 
     248.  00:651D                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  00:651D  03 05 09 10 01 06 08 00 
     249.  00:6525                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  00:6525  C0 E0 60 60 C0 80 80 80 
     250.  00:652D                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  00:652D  E0 D0 C8 D0 C0 20 20 50 
     251.  00:6535                          ; mask 1 - 48h
     252.  00:6535                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  00:6535  0F 0F 1F 1F 1F 0F 05 00 
     253.  00:653D                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  00:653D  03 05 09 10 01 00 00 00 
     254.  00:6545                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  00:6545  80 C0 C0 C0 80 00 00 00 
     255.  00:654D                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  00:654D  80 10 88 90 80 00 20 40 
     256.  00:6555                          
     257.  00:6555                          ; Esqueleto Right - 1
     258.  00:6555                          ; mask 0 - 4Ch
     259.  00:6555                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  00:6555  01 03 03 03 01 00 00 01 
     260.  00:655D                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  00:655D  07 0B 13 23 03 04 04 02 
     261.  00:6565                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  00:6565  F8 D8 74 24 FC F8 F8 00 
     262.  00:656D                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  00:656D  C0 A0 90 20 80 40 40 20 
     263.  00:6575                          ; mask 1 - 50h
     264.  00:6575                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  00:6575  00 01 01 01 00 00 00 00 
     265.  00:657D                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  00:657D  01 08 11 21 01 00 00 00 
     266.  00:6585                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  00:6585  F8 F8 FC FC FC 78 50 00 
     267.  00:658D                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  00:658D  C0 A0 90 20 80 00 00 00 
     268.  00:6595                          
     269.  00:6595                          ; Esqueleto Right - 2
     270.  00:6595                          ; mask 0 - 54h
     271.  00:6595                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  00:6595  03 07 06 06 03 01 01 01 
     272.  00:659D                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  00:659D  07 0B 13 0B 03 04 04 0A 
     273.  00:65A5                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  00:65A5  F0 B0 E8 48 F8 F0 F0 00 
     274.  00:65AD                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  00:65AD  C0 A0 90 08 80 60 10 00 
     275.  00:65B5                          ; mask 1 - 58h
     276.  00:65B5                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  00:65B5  01 03 03 03 01 00 00 00 
     277.  00:65BD                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  00:65BD  01 08 11 09 01 00 04 02 
     278.  00:65C5                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  00:65C5  F0 F0 F8 F8 F8 F0 A0 00 
     279.  00:65CD                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  00:65CD  C0 A0 90 08 80 00 00 00 
     280.  00:65D5                      
     281.  00:65D5                      SPRITE_COLOR_TABLE:       
     282.  00:65D5                           ;P1 - DOWN 1
     283.  00:65D5                          ;DOWN 1
     284.  00:65D5                          ; attr 0
     285.  00:65D5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  00:65D5  05 05 0A 0B 0B 0B 0B 0B 
     286.  00:65DD                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  00:65DD  04 04 04 0A 0A 0A 08 08 
     287.  00:65E5                          ; attr 1
     288.  00:65E5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  00:65E5  00 00 44 45 45 45 45 45 
     289.  00:65ED                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  00:65ED  4A 4A 4A 44 44 44 45 45 
     290.  00:65F5                          ; attr 2
     291.  00:65F5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  00:65F5  00 00 41 00 40 00 00 00 
     292.  00:65FD                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  00:65FD  41 41 41 41 41 41 42 00 
     293.  00:6605                               
     294.  00:6605                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  00:6605                          ; Disparo - antichrist    
     296.  00:6605                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  00:6605  00 00 00 0A 0A 0A 0A 0A 
     297.  00:660D                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  00:660D  0A 0A 0A 0A 0A 0A 00 00 
     298.  00:6615                          ; Fantasma
     299.  00:6615                          ; attr 0
     300.  00:6615                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  00:6615  0F 08 08 08 08 08 08 08 
     301.  00:661D                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  00:661D  08 08 08 08 08 08 08 0F 
     302.  00:6625                          ; attr 1
     303.  00:6625                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  00:6625  00 47 47 47 47 47 47 47 
     304.  00:662D                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  00:662D  47 47 47 47 47 47 47 00 
     305.  00:6635                          
     306.  00:6635                          
     307.  00:6635                          ; Esqueleto Left 1
     308.  00:6635                          ; attr 0
     309.  00:6635                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  00:6635  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  00:663D                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  00:663D  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  00:6645                          ; attr 1
     312.  00:6645                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  00:6645  41 49 49 49 41 41 41 00 
     313.  00:664D                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  00:664D  41 41 41 41 41 00 00 00 
     314.  00:6655                      
     315.  00:6655                      SPRITE_COLOR_P1_UP:
     316.  00:6655                          ;UP 1
     317.  00:6655                          ; attr 0
     318.  00:6655                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  00:6655  05 05 0A 05 05 05 05 05 
     319.  00:665D                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  00:665D  0A 05 0B 0A 0A 0A 08 08 
     320.  00:6665                          ; attr 1
     321.  00:6665                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  00:6665  00 00 44 00 40 00 00 00 
     322.  00:666D                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  00:666D  44 4A 45 45 45 45 45 45 
     323.  00:6675                          ; attr 2
     324.  00:6675                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  00:6675  00 00 41 00 00 00 00 00 
     325.  00:667D                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  00:667D  41 41 00 00 00 00 42 00 
     326.  00:6685                          
     327.  00:6685                          ;SPRITE_COLOR_P1_UP2:
     328.  00:6685                          ;UP 1
     329.  00:6685                          ; attr 0
     330.  00:6685                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  00:6685  05 05 0A 05 05 05 05 05 
     331.  00:668D                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  00:668D  0A 05 0B 0A 0A 0A 08 08 
     332.  00:6695                          ; attr 1
     333.  00:6695                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  00:6695  00 00 44 00 40 00 00 00 
     334.  00:669D                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  00:669D  44 4A 45 45 45 45 45 45 
     335.  00:66A5                          ; attr 2
     336.  00:66A5                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  00:66A5  00 00 41 00 00 00 00 00 
     337.  00:66AD                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  00:66AD  41 41 00 00 00 00 42 00 
     338.  00:66B5                      
     339.  00:66B5                      
     340.  00:66B5                      SPRITE_COLOR_P1_DOWN:
     341.  00:66B5                          ;DOWN 1
     342.  00:66B5                          ; attr 0
     343.  00:66B5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  00:66B5  05 05 0A 0B 0B 0B 0B 0B 
     344.  00:66BD                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  00:66BD  04 04 04 0A 0A 0A 08 08 
     345.  00:66C5                          ; attr 1
     346.  00:66C5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  00:66C5  00 00 44 45 45 45 45 45 
     347.  00:66CD                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  00:66CD  4A 4A 4A 44 44 44 45 45 
     348.  00:66D5                          ; attr 2
     349.  00:66D5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  00:66D5  00 00 41 00 40 00 00 00 
     350.  00:66DD                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  00:66DD  41 41 41 41 41 41 42 00 
     351.  00:66E5                          ;SPRITE_COLOR_P1_DOWN2:
     352.  00:66E5                          ;DOWN 1
     353.  00:66E5                          ; attr 0
     354.  00:66E5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  00:66E5  05 05 0A 0B 0B 0B 0B 0B 
     355.  00:66ED                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  00:66ED  04 04 04 0A 0A 0A 08 08 
     356.  00:66F5                          ; attr 1
     357.  00:66F5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  00:66F5  00 00 44 45 45 45 45 45 
     358.  00:66FD                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  00:66FD  4A 4A 4A 44 44 44 45 45 
     359.  00:6705                          ; attr 2
     360.  00:6705                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  00:6705  00 00 41 00 40 00 00 00 
     361.  00:670D                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  00:670D  41 41 41 41 41 41 42 00 
     362.  00:6715                      
     363.  00:6715                      SPRITE_COLOR_P1_RIGHT:
     364.  00:6715                          ; attr 0
     365.  00:6715                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  00:6715  05 05 0A 0B 0B 0B 0B 0B 
     366.  00:671D                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  00:671D  0B 0A 0A 0B 0A 0A 08 08 
     367.  00:6725                          ; attr 1
     368.  00:6725                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  00:6725  00 00 44 45 45 45 45 45 
     369.  00:672D                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  00:672D  45 44 44 44 44 44 45 45 
     370.  00:6735                          ; attr 2
     371.  00:6735                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  00:6735  00 00 41 00 40 00 00 00 
     372.  00:673D                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  00:673D  00 41 41 41 41 41 42 00 
     373.  00:6745                             
     374.  00:6745                          ; attr 0
     375.  00:6745                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  00:6745  05 05 0A 0B 0B 0B 0B 0B 
     376.  00:674D                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  00:674D  0B 0A 0A 0A 0B 0A 08 08 
     377.  00:6755                          ; attr 1
     378.  00:6755                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  00:6755  00 00 44 45 45 45 45 45 
     379.  00:675D                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  00:675D  45 44 44 44 44 44 45 45 
     380.  00:6765                          ; attr 2
     381.  00:6765                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  00:6765  00 00 41 00 40 00 00 00 
     382.  00:676D                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  00:676D  00 41 41 41 41 41 42 00 
     383.  00:6775                      
     384.  00:6775                      mapa1:
     385.  00:6775                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     385.  00:6775  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     385.  00:6785  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     386.  00:6795                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     386.  00:6795  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     386.  00:67A5  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     387.  00:67B5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     387.  00:67B5  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     387.  00:67C5  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     388.  00:67D5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     388.  00:67D5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     388.  00:67E5  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     389.  00:67F5                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     389.  00:67F5  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     389.  00:6805  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     390.  00:6815                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     390.  00:6815  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     390.  00:6825  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     391.  00:6835                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  00:6835  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  00:6845  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  00:6855                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  00:6855  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     392.  00:6865  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  00:6875                          
     394.  00:6875                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:6875  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     394.  00:6885  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:6895                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:6895  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     395.  00:68A5  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:68B5                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     396.  00:68B5  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  00:68C5  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     397.  00:68D5                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     397.  00:68D5  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     397.  00:68E5  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     398.  00:68F5                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     398.  00:68F5  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  00:6905  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     399.  00:6915                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     399.  00:6915  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  00:6925  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     400.  00:6935                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  00:6935  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     400.  00:6945  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  00:6955                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     401.  00:6955  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     401.  00:6965  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     402.  00:6975                      
     403.  00:6975                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     403.  00:6975  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     403.  00:6985  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     404.  00:6995                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     404.  00:6995  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     404.  00:69A5  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     405.  00:69B5                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  00:69B5  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     405.  00:69C5  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  00:69D5                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     406.  00:69D5  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     406.  00:69E5  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     407.  00:69F5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     407.  00:69F5  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     407.  00:6A05  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     408.  00:6A15                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     408.  00:6A15  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     408.  00:6A25  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     409.  00:6A35                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     409.  00:6A35  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     409.  00:6A45  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     410.  00:6A55                      
     411.  00:6A55                      mapa2:
     412.  00:6A55                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  00:6A55  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  00:6A65  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:6A75                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     413.  00:6A75  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:6A85  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:6A95                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     414.  00:6A95  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:6AA5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:6AB5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     415.  00:6AB5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:6AC5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:6AD5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:6AD5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:6AE5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:6AF5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  00:6AF5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:6B05  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:6B15                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  00:6B15  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:6B25  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:6B35                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:6B35  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:6B45  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:6B55                            
     421.  00:6B55                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  00:6B55  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:6B65  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:6B75                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  00:6B75  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:6B85  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:6B95                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:6B95  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:6BA5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:6BB5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     424.  00:6BB5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:6BC5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:6BD5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  00:6BD5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     425.  00:6BE5  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:6BF5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  00:6BF5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     426.  00:6C05  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:6C15                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  00:6C15  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     427.  00:6C25  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:6C35                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  00:6C35  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     428.  00:6C45  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  00:6C55                            
     430.  00:6C55                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  00:6C55  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  00:6C65  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  00:6C75                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  00:6C75  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  00:6C85  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  00:6C95                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  00:6C95  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  00:6CA5  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  00:6CB5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     433.  00:6CB5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     433.  00:6CC5  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     434.  00:6CD5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  00:6CD5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  00:6CE5  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  00:6CF5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  00:6CF5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  00:6D05  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  00:6D15                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  00:6D15  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  00:6D25  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  00:6D35                            
     438.  00:6D35                      mapa0:      
     439.  00:6D35                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  00:6D35  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  00:6D45  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  00:6D55                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     440.  00:6D55  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     440.  00:6D65  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     441.  00:6D75                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     441.  00:6D75  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     441.  00:6D85  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     442.  00:6D95                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     442.  00:6D95  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     442.  00:6DA5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     443.  00:6DB5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     443.  00:6DB5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     443.  00:6DC5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     444.  00:6DD5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     444.  00:6DD5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     444.  00:6DE5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     445.  00:6DF5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     445.  00:6DF5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     445.  00:6E05  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     446.  00:6E15                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     446.  00:6E15  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     446.  00:6E25  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     447.  00:6E35                            
     448.  00:6E35                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     448.  00:6E35  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     448.  00:6E45  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     449.  00:6E55                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     449.  00:6E55  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     449.  00:6E65  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     450.  00:6E75                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     450.  00:6E75  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     450.  00:6E85  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     451.  00:6E95                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     451.  00:6E95  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     451.  00:6EA5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     452.  00:6EB5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     452.  00:6EB5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     452.  00:6EC5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     453.  00:6ED5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     453.  00:6ED5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     453.  00:6EE5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     454.  00:6EF5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     454.  00:6EF5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     454.  00:6F05  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     455.  00:6F15                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     455.  00:6F15  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     455.  00:6F25  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     456.  00:6F35                      
     457.  00:6F35                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:6F35  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:6F45  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:6F55                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:6F55  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:6F65  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:6F75                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:6F75  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     459.  00:6F85  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:6F95                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     460.  00:6F95  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     460.  00:6FA5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:6FB5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     461.  00:6FB5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:6FC5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:6FD5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     462.  00:6FD5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     462.  00:6FE5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     463.  00:6FF5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     463.  00:6FF5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     463.  00:7005  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     464.  00:7015                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01   
     464.  00:7015  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:7025  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:7035                            
     466.  00:7035                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     466.  00:7035  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     466.  00:7045  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     467.  00:7055                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     467.  00:7055  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     467.  00:7065  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     468.  00:7075                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     468.  00:7075  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     468.  00:7085  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     469.  00:7095                          
     470.  00:7095                      
     471.  00:7095                      SPRITE_COLOR_P1_LEFT:
     472.  00:7095                          ; attr 0
     473.  00:7095                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     473.  00:7095  05 05 0A 0B 0B 0B 0B 0B 
     474.  00:709D                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     474.  00:709D  0B 0A 0A 0B 0A 0A 08 08 
     475.  00:70A5                          ; attr 1
     476.  00:70A5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     476.  00:70A5  00 00 44 45 45 45 45 45 
     477.  00:70AD                          DB $45,$44,$44,$44,$44,$44,$45,$45
     477.  00:70AD  45 44 44 44 44 44 45 45 
     478.  00:70B5                          ; attr 2
     479.  00:70B5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     479.  00:70B5  00 00 41 00 40 00 00 00 
     480.  00:70BD                          DB $00,$41,$41,$41,$41,$41,$42,$00
     480.  00:70BD  00 41 41 41 41 41 42 00 
     481.  00:70C5                          ;SPRITE_COLOR_P1_LEFT2:    
     482.  00:70C5                          ; attr 0
     483.  00:70C5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     483.  00:70C5  05 05 0A 0B 0B 0B 0B 0B 
     484.  00:70CD                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     484.  00:70CD  0B 0A 0A 0A 0B 0A 08 08 
     485.  00:70D5                          ; attr 1
     486.  00:70D5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     486.  00:70D5  00 00 44 45 45 45 45 45 
     487.  00:70DD                          DB $45,$44,$44,$44,$44,$44,$45,$45
     487.  00:70DD  45 44 44 44 44 44 45 45 
     488.  00:70E5                          ; attr 2
     489.  00:70E5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     489.  00:70E5  00 00 41 00 40 00 00 00 
     490.  00:70ED                          DB $00,$41,$41,$41,$41,$41,$42,$00
     490.  00:70ED  00 41 41 41 41 41 42 00 
     491.  00:70F5                      
     492.  00:70F5                      BLANK_DATA:
     493.  00:70F5                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     493.  00:70F5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     493.  00:7105  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     494.  00:7115                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     494.  00:7115  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     494.  00:7125  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     495.  00:7135                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     495.  00:7135  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     495.  00:7145  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     496.  00:7155                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     496.  00:7155  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     496.  00:7165  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     497.  00:7175                      
     498.  00:7175                          
     499.  00:7175                      PaletteData:
     500.  00:7175                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     501.  00:7175  00 00                   db 0x00, 0x00 ; Color index 0
     502.  00:7177  30 00                   db 0x30, 0x00 ; Color index 1
     503.  00:7179  70 06                   db 0x70, 0x06 ; Color index 2
     504.  00:717B  50 00                   db 0x50, 0x00 ; Color index 3
     505.  00:717D  11 01                   db 0x11, 0x01 ; Color index 4
     506.  00:717F  22 02                   db 0x22, 0x02 ; Color index 5
     507.  00:7181  06 02                   db 0x06, 0x02 ; Color index 6
     508.  00:7183  77 07                   db 0x77, 0x07 ; Color index 7
     509.  00:7185  33 03                   db 0x33, 0x03 ; Color index 8
     510.  00:7187  66 06                   db 0x66, 0x06 ; Color index 9
     511.  00:7189  70 00                   db 0x70, 0x00 ; Color index 10
     512.  00:718B  64 05                   db 0x64, 0x05 ; Color index 11
     513.  00:718D  50 03                   db 0x50, 0x03 ; Color index 12
     514.  00:718F  02 04                   db 0x02, 0x04 ; Color index 13
     515.  00:7191  01 02                   db 0x01, 0x02 ; Color index 14
     516.  00:7193  00 00                   db 0x00, 0x00 ; Color index 15
     613   00:7195                      TILES1:
     614   00:7195  (07F9)               INCBIN "gfx\tiles1.sc5",#7
     615   00:798E  (01)                 PAGE 1
     616   01:8000                      ; CODE O NO
     617   01:8000                      
     618   01:8000  (02)                 PAGE 2
     619   02:8000                      
     620   02:8000  (03)                 PAGE 3
     621   03:8000                      
     622   03:8000  (04)                 PAGE 4
     623   04:8000  (05)                 PAGE 5
     624   05:8000  (06)                 PAGE 6
     625   06:8000                      FONT:
     626   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     627   06:87F7  (07)                 PAGE 7
     628   07:8000                      CEMENTER1
     629   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     630   07:C000  (08)                 PAGE 8
     631   08:8000  (2A00)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     632   08:AA00  (09)                 PAGE 9
     633   09:8000                      GRAPHIC
     634   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     635   09:C000  (0A)                 PAGE 10
     636   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     637   0A:C000                      
     638   0A:C000  (0B)                 PAGE 11
     639   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     640   0B:C000                      
     641   0B:C000  (0C)                 PAGE 12
     642   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     643   0C:9400                      
     644   0C:9400  (0D)                 PAGE 13
     645   0D:8000                      CEMENTER2
     646   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     647   0D:C000  (0E)                 PAGE 14
     648   0E:8000  (2A00)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     649   0E:AA00  (0F)                 PAGE 15
     650   0F:C000                      ;---------------------------------------------------------
     651   0F:C000                      ; Variables
     652   0F:C000                      ;---------------------------------------------------------
     653   0F:C000                      	
     654   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     655   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     656   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     657   0F:C000                      ;ETC
     658   0F:C000                      ;
     659   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ; VDP variables
       2.  0F:C000  00 (15)             tileDat: ds 15
       3.  0F:C00F                      
       4.  0F:C00F  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
       5.  0F:C010  00 (1)              SHOWING_MIKE_DIALOG  DS 1
       6.  0F:C011  00 (1)              SHOWING_JOHN_DIALOG  DS 1
       7.  0F:C012  00 (1)              SHOWING_GUS_DIALOG  DS 1
       8.  0F:C013  (0F:0008)           FONT_HEIGHT EQU 8
       9.  0F:C013  (0F:0008)           FONT_WIDTH  EQU 8
      10.  0F:C013  00 (2)              CHR_ACR DS 2
      11.  0F:C015  00 (1)              PTR_STR_DX DS 1
      12.  0F:C016  00 (1)              PTR_STR_DY DS 1
      13.  0F:C017                      
      14.  0F:C017  00 (1)              LAST_KEY_PRESSED DS 1
      15.  0F:C018  00 (1)              OLD_KEY_PRESSED DS 1
      16.  0F:C019  00                  JIFFY_TEMP DB $00
      17.  0F:C01A  00                  CHAR_SPEED_X DB $00
      18.  0F:C01B  00                  CHAR_SPEED_Y DB $00
      19.  0F:C01C  00                  CHAR_SPEED_X_GHOST DB $00
      20.  0F:C01D  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      21.  0F:C01E  00 (1)              CHAR_GHOST_DEAD DS 1
      22.  0F:C01F  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      23.  0F:C020  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      24.  0F:C021  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      25.  0F:C022  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      26.  0F:C023  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      27.  0F:C024  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      28.  0F:C025  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      29.  0F:C026  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      30.  0F:C027  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      31.  0F:C028  00 (1)              CHAR_SPEED_SHOOT DS 1
      32.  0F:C029                      SPRITE_ATTRS:
      33.  0F:C029  00 (128)                DS 128
      34.  0F:C0A9                      SLOTBIOS:
      35.  0F:C0A9  00 (1)                  DS 1
      36.  0F:C0AA                      SLOTGAME:
      37.  0F:C0AA  00 (1)                  DS 1
      38.  0F:C0AB                      SLOTRAM:
      39.  0F:C0AB  00 (1)                  DS 1
      40.  0F:C0AC                      SPRITE_PTR_REPLACE:
      41.  0F:C0AC  00 (2)                  DS 2
      42.  0F:C0AE                      SPRITE_COLOR_REPLACE:
      43.  0F:C0AE  00 (2)                  DS 2
      44.  0F:C0B0                      SPRITE_COLOR_REPLACE2:
      45.  0F:C0B0  00 (2)                  DS 2
      46.  0F:C0B2                      MAPA:
      47.  0F:C0B2  00 (2)                  DS 2
      48.  0F:C0B4                      BITMAP:
      49.  0F:C0B4  00 (2)                  DS 2
      50.  0F:C0B6                      MAP_RAM:
      51.  0F:C0B6  00 (736)                DS 736
     660   0F:C396  (F43F)              	ENDMAP

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006   MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018   SPR_GHOST_STG2
00:0000003C   SPR_GHOST_STG2_PTRN_L1
00:00000044   SPR_GHOST_STG2_PTRN_L2
00:0000004C   SPR_GHOST_STG2_PTRN_R1
00:00000054   SPR_GHOST_STG2_PTRN_R2
00:00004010   mike_tomb_strings
00:00004016   string01M
00:0000401C   string02M
00:00004038   string03M
00:00004039   john_tomb_strings
00:0000403F   string01J
00:00004045   string02J
00:00004060   string03J
00:00004061   gus_tomb_strings
00:00004067   string01G
00:0000406C   string02G
00:00004089   string03G
00:0000408A   stg1_skull_strings
00:00004090   string01Sk
00:00004098   string02Sk
00:000040B3   string03Sk
00:000040B4   check_spr_collision
00:000040C1   check_spr_collision.no_collision
00:000040C4   get_bloque_en_X_Y
00:000040E5   SetVdp_Write
00:00004101   Set212Lines
00:0000410D   ClearVram_MSX2
00:00004117   ClearVram_MSX2.loop_2
00:00004119   ClearVram_MSX2.loop_1
00:0000411B   ClearVram_MSX2.loop
00:00004128 X opening_screen
00:0000414B   load_screen
00:0000416D   _vdpsetvramwr
00:0000417E X _vdpsetvramwr14
00:00004187   GETSLOT
00:0000419E   EXIT
00:000041A0   SETPAGES32K
00:000041A5   NOPRET
00:000041B3   SET_SCREEN5_MODE
00:000041D5   DUMP_SPR_ALL
00:000041FA   load_tiles_vdp
00:00004204   DUMP_SPR_ATTS
00:0000421E X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:0000421F   DUMP_SPR_P1
00:0000423C   SetPalette
00:0000424B   move_up
00:00004285   move_down
00:000042C0   move_right
00:000042D1   move_right.KB_UPDOWN_PRESSED
00:0000431F   move_left
00:00004330   move_left.KB_UPDOWN_PRESSED
00:0000437E   CHECK_DIRECTION_MAIN
00:000043A0   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000043B5   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:000043CA   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:000043DF   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:000043F4   CHECK_DIRECTION_MAIN.FINISH
00:0000440B   UPDATE_MOVEMENT
00:00004433   ANIMATE_P1
00:0000445A   ANIMATE_P1.SET_SPR_1P_2
00:00004471   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:00004477   NO_MOVEMENT
00:00004478   MOVE_SHOOT
00:00004490   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:00004498   MOVE_SHOOT.MOVE_SHOOT_UP
00:000044A0   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000044A8   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000044AD   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:000044C2   MOVE_SHOOT.ADD_SHOOT_Y
00:000044CC   MOVE_SHOOT.ADD_DISTANCE
00:000044D7 X MOVE_SHOOT.HIDE_SHOOT
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008 X VDP_NX
00:0000000A X VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098 X CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008   VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_PAGE
00:00008000 X TILES_START_ADDR
00:00000001 X BACK_BUFFER
00:00000000   FRONT_BUFFER
00:000044E3   initVDPBuffers
00:000044EF   print_strings_dialog_box
00:0000451C   print_string
00:0000451C   print_string.loop_str
00:00004537   print_string.first_line_font
00:00004550   print_char
00:00004587 X CLEAR_DIALOG_BOX_OLD
00:000045B9   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:000045EB X SETPAG
00:000045F9 X SET_WR
00:00004614 X SET_RD
00:0000462D   VDPCMD
00:00004640   WAITCE
00:00004658   ENASCR
00:0000465F   DISSCR
00:00004664   DISSCR.OUT
00:00004670 X ENASPR
00:00004677 X DISSPR
00:0000467C   DISSPR.OUT
00:00004688 X LIN192
00:0000468F X LIN212
00:00004694   LIN212.OUT
00:000046A0   tileDatROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:0000001C   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:000046AF   CHECKLP
00:000046C0 X PT3_MUTE
00:000046CC X PT3_INIT
00:0000470B   PT3_INIT.TP_0
00:00004717   PT3_INIT.TP_1
00:0000471E   PT3_INIT.TP_2
00:0000478C   PT3_INIT.L1
00:00004799   PT3_INIT.L2
00:0000479D X PT3_INIT.L3
00:000047C4   PT3_INIT.CORR_1
00:000047D2   PT3_INIT.CORR_2
00:000047D9   PT3_INIT.TC_EXIT
00:000047E4   PT3_INIT.INITV1
00:000047EC   PT3_INIT.INITV2
00:00004800   PT3_INIT.INITV3
00:00004804   PD_OrSm
00:0000480E   PD_SAM
00:0000480F   PD_SAM_
00:00004825   PD_VOL
00:0000482E   PD_EOff
00:00004836   PD_SorE
00:00004840   PD_ENV
00:00004845   PD_ORN
00:0000484A   PD_ESAM
00:00004857   PTDECOD
00:00004866   PD_LOOP
00:00004869   PD_LP2
00:00004896   PD_NOIS
00:0000489B   PD_REL
00:000048A1   PD_NOTE
00:000048A9   PD_RES
00:000048BB   PD_FIN
00:000048C2   C_PORTM
00:0000490D   C_PORTM.NOSIG
00:00004917   SET_STP
00:00004923   C_GLISS
00:00004936   C_SMPOS
00:0000493C   C_ORPOS
00:00004942   C_VIBRT
00:0000495A   C_ENGLS
00:0000496C   C_DELAY
00:00004972   SETENV
00:0000498D   C_NOP
00:0000498E   SETORN
00:000049A7   SPCCOMS
00:000049C7   CHREGS
00:000049EA   CHREGS.CH_ORPS
00:000049F5   CHREGS.CH_NTP
00:000049FB   CHREGS.CH_NOK
00:00004A16   CHREGS.CH_SMPS
00:00004A2C   CHREGS.CH_NOAC
00:00004A73   CHREGS.CH_STPP
00:00004A88   CHREGS.CH_AMP
00:00004A9A   CHREGS.CH_AMIN
00:00004A9F   CHREGS.CH_SVAM
00:00004AA2   CHREGS.CH_NOAM
00:00004AAB   CHREGS.CH_APOS
00:00004AB1   CHREGS.CH_VOL
00:00004ABC X CHREGS.CH_ENV
00:00004AC3   CHREGS.CH_NOEN
00:00004ADD   CHREGS.NO_ENAC
00:00004AE4   CHREGS.NO_ENSL
00:00004AF2   CHREGS.CH_MIX
00:00004AF6   CHREGS.CH_EXIT
00:00004B15   CHREGS.CH_ONDL
00:00004B19 X PT3_PLAY
00:00004B4D   PT3_PLAY.PLNLP
00:00004B74   PT3_PLAY.PL1A
00:00004B7F   PT3_PLAY.PL1B
00:00004B94   PT3_PLAY.PL1C
00:00004BA9   PT3_PLAY.PL1D
00:00004BAF   PT3_PLAY.PL2
00:00004C11 X PT3_ROUT
00:00004C12   ROUT_A0
00:00004C1E   ROUT_A0.LOUT
00:00004C32   NT_DATA
00:00004C42   T_
00:00004C42   TCOLD_0
00:00004C4E   TCNEW_1
00:00004C4E   TCOLD_1
00:00004C50   TCOLD_2
00:00004C62   TCNEW_3
00:00004C63   TCOLD_3
00:00004C6C   TCNEW_0
00:00004C77   TCNEW_2
00:00004C82   EMPTYSAMORN
00:00004C86   T_PACK
00:0000F200   PT3_SETUP
00:0000F200   PT3_MODADDR
00:0000F202   PT3_CrPsPtr
00:0000F204   PT3_SAMPTRS
00:0000F206   PT3_OrnPtrs
00:0000F208   PT3_PDSP
00:0000F20A   PT3_CSP
00:0000F20C   PT3_PSP
00:0000F20E   PT3_PrNote
00:0000F20F   PT3_PrSlide
00:0000F211   PT3_AdInPtA
00:0000F213   PT3_AdInPtB
00:0000F215   PT3_AdInPtC
00:0000F217   PT3_LPosPtr
00:0000F219   PT3_PatsPtr
00:0000F21B   PT3_Delay
00:0000F21C   PT3_AddToEn
00:0000F21D   PT3_Env_Del
00:0000F21E   PT3_ESldAdd
00:0000F220   PT3_NTL3
00:0000F222   VARS
00:0000F222   ChanA
00:0000F23F   ChanB
00:0000F25C   ChanC
00:0000F279   DelyCnt
00:0000F27A   CurESld
00:0000F27C   CurEDel
00:0000F27D   Ns_Base_AddToNs
00:0000F27D   Ns_Base
00:0000F27E   AddToNs
00:0000F27F   NT_
00:0000F33F   AYREGS
00:0000F33F   VT_
00:0000F34D   EnvBase
00:0000F34F   VAR0END
00:0000F34F   T1_
00:0000F34F   T_NEW_1
00:0000F34F   T_OLD_1
00:0000F367   T_OLD_2
00:0000F37F   T_NEW_3
00:0000F37F   T_OLD_3
00:0000F381   T_OLD_0
00:0000F381   T_NEW_0
00:0000F399   T_NEW_2
00:00004CBB   START
00:00004CEE   INIT_CHARS_VARS
00:00004D77   STAGE1
00:00004DAE   MAIN_LOOP
00:00004DB9 X MAIN_LOOP.check_tombs
00:00004DD7   MAIN_LOOP.check_john_tomb
00:00004DF2   MAIN_LOOP.check_gus_tomb
00:00004E2F   MAIN_LOOP.check_skull_hint
00:00004E53   MAIN_LOOP.check_mike_dialog_box
00:00004E63   MAIN_LOOP.check_gus_dialog
00:00004E73   MAIN_LOOP.check_john_dialog
00:00004E83   MAIN_LOOP.check_skull_dialog
00:00004E91   MAIN_LOOP.animate_ghost
00:00004EB3   MAIN_LOOP.CHANGE_DIR_RIGHT
00:00004EC0   MAIN_LOOP.CHANGE_DIR_LEFT
00:00004EC9   MAIN_LOOP.check_pattern
00:00004EE4   MAIN_LOOP.change_pattern_L
00:00004EEF   MAIN_LOOP.check_pattern_RIGHT
00:00004F02   MAIN_LOOP.change_pattern_R
00:00004F0A   MAIN_LOOP.continue
00:00004F0D X MAIN_LOOP.CHECK_GHOST
00:00004F29 X MAIN_LOOP.KILL_GHOST
00:00004F36   MAIN_LOOP.check_KB
00:00004F57 X no_arrows
00:00004F5F   SHOOT_MAIN_CHAR
00:00004F99   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:00004FA8   SHOOT_MAIN_CHAR.SHOOT_UP
00:00004FBB   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:00004FCB   SHOOT_MAIN_CHAR.CONTINUE
00:00004FCF   STAGE2
00:00005029   MAIN_LOOP2
00:0000504D   MAIN_LOOP2.GHOST_DEAD
00:00005058   MAIN_LOOP2.no_screen_change
00:0000508A   MAIN_LOOP2.CHANGE_DIR_RIGHT
00:00005097   MAIN_LOOP2.CHANGE_DIR_LEFT
00:000050A0   MAIN_LOOP2.check_pattern
00:000050BF   MAIN_LOOP2.change_pattern_L
00:000050CA   MAIN_LOOP2.check_pattern_RIGHT
00:000050DD   MAIN_LOOP2.change_pattern_R
00:000050E5   MAIN_LOOP2.continue
00:0000510E   SONG
00:00005FF5   SPRITE_P1_UP
00:000060B5   SPRITE_P1_DOWN
00:00006175   SPRITE_P1_LEFT
00:00006235   SPRITE_P1_RIGHT
00:000062F5   SPRITE_PATTERN
00:000065D5   SPRITE_COLOR_TABLE
00:00006655   SPRITE_COLOR_P1_UP
00:000066B5   SPRITE_COLOR_P1_DOWN
00:00006715   SPRITE_COLOR_P1_RIGHT
00:00006775   mapa1
00:00006A55   mapa2
00:00006D35 X mapa0
00:00007095   SPRITE_COLOR_P1_LEFT
00:000070F5   BLANK_DATA
00:00007175   PaletteData
00:00007195   TILES1
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   tileDat
0F:0000C00F   SHOWING_SKULL_STG1_DIALOG
0F:0000C010   SHOWING_MIKE_DIALOG
0F:0000C011   SHOWING_JOHN_DIALOG
0F:0000C012   SHOWING_GUS_DIALOG
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C013   CHR_ACR
0F:0000C015 X PTR_STR_DX
0F:0000C016 X PTR_STR_DY
0F:0000C017 X LAST_KEY_PRESSED
0F:0000C018   OLD_KEY_PRESSED
0F:0000C019   JIFFY_TEMP
0F:0000C01A   CHAR_SPEED_X
0F:0000C01B   CHAR_SPEED_Y
0F:0000C01C   CHAR_SPEED_X_GHOST
0F:0000C01D   CHAR_SPEED_X_GHOST_STG2
0F:0000C01E   CHAR_GHOST_DEAD
0F:0000C01F   CHAR_GHOST_DEAD_STG2
0F:0000C020   CHAR_MIN_STEP_STG2
0F:0000C021   CHAR_DIR_GHOST1
0F:0000C022   CHAR_DIR_GHOST_STG2
0F:0000C023   CHAR_DIR_MAIN
0F:0000C024   CHAR_NEW_DIR_MAIN
0F:0000C025   CHAR_MAIN_SHOOT
0F:0000C026   CHAR_MIN_STEP
0F:0000C027   CHAR_DISTANCE_SHOOT
0F:0000C028   CHAR_SPEED_SHOOT
0F:0000C029   SPRITE_ATTRS
0F:0000C0A9 X SLOTBIOS
0F:0000C0AA X SLOTGAME
0F:0000C0AB X SLOTRAM
0F:0000C0AC   SPRITE_PTR_REPLACE
0F:0000C0AE   SPRITE_COLOR_REPLACE
0F:0000C0B0   SPRITE_COLOR_REPLACE2
0F:0000C0B2   MAPA
0F:0000C0B4   BITMAP
0F:0000C0B6   MAP_RAM


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00003994

   Address   Length Align   Label
   00004000   14734         mike_tomb_strings
   0000798E       6         
   00007994    1644       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 00000396

   Address   Length Align   Label
   0000C000     918         tileDat
   0000C396   15466       <empty>
