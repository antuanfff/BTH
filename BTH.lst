Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.05.18 - 14:49:45]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:7F3A                      
       3   00:7F3A                      ;ROM ASCII16
       4   00:7F3A                      		defpage	0,0x4000, 0x4000
       5   00:7F3A                      		defpage	1,0x8000, 0x4000        
       6   00:7F3A                      		defpage	2..14 ;Here it is determined rom size        
       7   00:7F3A                              defpage	15,0xC000, 0x4000
       8   00:7F3A                      
       9   00:7F3A  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:7F3A  (00:6000)           _bank1	equ	6000h
      11   00:7F3A  (00:7000)           _bank2	equ	7000h
      12   00:7F3A  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:7F40  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 F5 4E 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:0069)           CLRSPR                  equ #0069
       2.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       3.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       4.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       5.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       6.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       7.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       8.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       9.  00:4010  (00:0141)           SNSMAT					equ #0141
      10.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      11.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      12.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      13.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      14.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      15.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ; Notes Black Sabbath
       2.  00:4010  (00:0071)           STG2_TILE1_X    equ 113
       3.  00:4010  (00:006E)           STG2_TILE1_Y    equ 110
       4.  00:4010                      
       5.  00:4010                      
       6.  00:4010                      ; VDP Const
       7.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
       8.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
       9.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
      10.  00:4010                      
      11.  00:4010                      ; Energy lv1, lv2, lv3, lv4, lv5, lv6
      12.  00:4010  18 20 28 30 38 40   ANDY_MAX_ENERGY:  db  24, 32, 40, 48, 56, 64
      13.  00:4016                      
      14.  00:4016  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
      15.  00:4016  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
      16.  00:4016  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
      17.  00:4016                      
      18.  00:4016  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      19.  00:4016  (00:0007)           KB_RIGHT 				equ 7
      20.  00:4016  (00:0006)           KB_DOWN 				equ 6
      21.  00:4016  (00:0005)           KB_UP 					equ	5        
      22.  00:4016  (00:0004)           KB_LEFT 				equ	4
      23.  00:4016  (00:0003)           KB_DEL 					equ	3
      24.  00:4016  (00:0000)           KB_SPACE				equ	0
      25.  00:4016                      
      26.  00:4016  (00:0001)           MOV_SPEED				equ 1
      27.  00:4016  (00:0001)           MOV_SPEED_GHOST			equ 1
      28.  00:4016  (00:0003)           MOV_SPEED_SHOOT         equ 3
      29.  00:4016  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      30.  00:4016  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      31.  00:4016  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      32.  00:4016  (00:FFE8)           REG9SAV                 equ #FFE8
      33.  00:4016  (00:0098)           PORT_0                  equ 0x98
      34.  00:4016  (00:0099)           PORT_1                  equ 0x99
      35.  00:4016  (00:009A)           PORT_2                  equ 0x9a
      36.  00:4016  (00:009B)           PORT_3                  equ 0x9b
      37.  00:4016                      
      38.  00:4016  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      39.  00:4016  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      40.  00:4016                      
      41.  00:4016  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      42.  00:4016  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      43.  00:4016  (00:0049)           GUS_TOMB_STG1_X             equ 73
      44.  00:4016  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      45.  00:4016  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      46.  00:4016  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      47.  00:4016  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      48.  00:4016                      
      49.  00:4016  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
      50.  00:4016  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
      51.  00:4016  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
      52.  00:4016  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
      53.  00:4016  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
      54.  00:4016  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
      55.  00:4016  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
      56.  00:4016                      
      57.  00:4016  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
      58.  00:4016  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
      59.  00:4016  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
      60.  00:4016  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
      61.  00:4016  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
      62.  00:4016                      
      22   00:4016                          include "include\BTH_strings.asm"
       1.  00:4016  1C 40 25 40 41 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:401C                      ; Caben 23 caracteres en cada línea
       3.  00:401C                      string01M: db 'MIKE:   ',0
       3.  00:401C  4D 49 4B 45 3A 20 20 20 00 
       4.  00:4025                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:4025  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:4035  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4041  00                  string03M: db 0
       6.  00:4042                      
       7.  00:4042  48 40 51 40 6C 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:4048                      ; Caben 23 caracteres en cada línea
       9.  00:4048                      string01J: db 'JOHN:   ',0
       9.  00:4048  4A 4F 48 4E 3A 20 20 20 00 
      10.  00:4051                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4051  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4061  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:406C  00                  string03J: db 0
      12.  00:406D                      
      13.  00:406D  73 40 7C 40 99 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4073                      ; Caben 23 caracteres en cada línea
      15.  00:4073                      string01G: db 'GUS:    ',0
      15.  00:4073  47 55 53 3A 20 20 20 20 00 
      16.  00:407C                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:407C  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:408C  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:4099  00                  string03G: db  0
      18.  00:409A                      
      19.  00:409A  A0 40 A8 40 C3 40   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:40A0                      ; Caben 23 caracteres en cada línea
      21.  00:40A0                      string01Sk: db 'MURRAY:',0
      21.  00:40A0  4D 55 52 52 41 59 3A 00 
      22.  00:40A8                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:40A8  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:40B8  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:40C3  00                  string03Sk: db 0
      24.  00:40C4                      
      25.  00:40C4  CA 40 D1 40 EA 40   stg1_puzzle_solved_strings: dw string01P, string02P, string03P
      26.  00:40CA                      ; Caben 23 caracteres en cada línea
      27.  00:40CA                      string01P: db 'PETER:',0
      27.  00:40CA  50 45 54 45 52 3A 00 
      28.  00:40D1                      string02P: db 'LA PUERTA SE HA ABIERTO!',0
      28.  00:40D1  4C 41 20 50 55 45 52 54 41 20 53 45 20 48 41 20 
      28.  00:40E1  41 42 49 45 52 54 4F 21 00 
      29.  00:40EA  00                  string03P: db 0
      30.  00:40EB                      
      23   00:40EB                      ; Funciones auxiliares
      24   00:40EB                      	include "include\BTH_func.asm"
       1.  00:40EB                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:40EB                      ;Entrada:
       3.  00:40EB                      ;   b - Y SPR1
       4.  00:40EB                      ;   C - X SPR1
       5.  00:40EB                      
       6.  00:40EB                      ;   d - Y SPR2
       7.  00:40EB                      ;   e - X SPR2
       8.  00:40EB                      ;Salida:
       9.  00:40EB                      ;   a - bloque
      10.  00:40EB                      ;Modifica:
      11.  00:40EB                      ;   a, hl, de
      12.  00:40EB                      check_spr_collision:        
      13.  00:40EB  78                          LD A,B          ; a = Y SPR1
      14.  00:40EC  BA                          CP D
      15.  00:40ED  C2 F8 40                    JP NZ,.no_collision
      16.  00:40F0                      
      17.  00:40F0  79                          LD A,C          ; a = X SPR1
      18.  00:40F1  BB                          CP E
      19.  00:40F2  C2 F8 40                    JP NZ,.no_collision
      20.  00:40F5                      
      21.  00:40F5  3E 01                       LD A,1
      22.  00:40F7  C9                          RET
      23.  00:40F8                      .no_collision
      24.  00:40F8  3E 00                   LD A,0
      25.  00:40FA  C9                      RET
      26.  00:40FB                      
      27.  00:40FB                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:40FB                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:40FB                      ;Entrada:
      30.  00:40FB                      ;   d - X
      31.  00:40FB                      ;   e - y
      32.  00:40FB                      ;Salida:
      33.  00:40FB                      ;   a - bloque
      34.  00:40FB                      ;Modifica:
      35.  00:40FB                      ;   a, hl, de
      36.  00:40FB                      get_bloque_en_X_Y:
      37.  00:40FB                              ;(y/8)*32+(x/8)
      38.  00:40FB  7B                          ld a,e      ;a=y
      39.  00:40FC  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:4102  26 00                       ld h,0
      41.  00:4104  6F                          ld l,a      ;hl=y/8
      42.  00:4105  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:410A                      
      44.  00:410A  7A                          ld a,d      ;a=x
      45.  00:410B  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:4111  16 00                       ld d,0
      47.  00:4113  5F                          ld e,a      ;de=x/8
      48.  00:4114  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:4115                      
      50.  00:4115  ED 5B C2 C0                 ld de,(MAPA)
      51.  00:4119  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:411A                      
      53.  00:411A  7E                          ld a,[hl]
      54.  00:411B  C9                          ret
      55.  00:411C                      
      56.  00:411C                      ; SCREEN 8
      57.  00:411C                      SetVdp_Write:
      58.  00:411C                      
      59.  00:411C                      	; transform address from 
      60.  00:411C                      	;
      61.  00:411C                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:411C                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:411C                      	;
      64.  00:411C                      	; to
      65.  00:411C                      	;
      66.  00:411C                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:411C                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:411C  CB 04                   rlc     h
      69.  00:411E  17                      rla
      70.  00:411F  CB 04                   rlc     h
      71.  00:4121  17                      rla
      72.  00:4122  CB 3C                   srl     h
      73.  00:4124  CB 3C                   srl     h
      74.  00:4126                      
      75.  00:4126  F3                      di
      76.  00:4127                      	    ; write bits a14-16 of address to R#14
      77.  00:4127  D3 99               	    out     (PORT_1), a
      78.  00:4129  3E 8E               	    ld      a, 14 + 128
      79.  00:412B  D3 99               	    out     (PORT_1), a
      80.  00:412D                      
      81.  00:412D                      	    ; write the other address bits to VDP PORT_1
      82.  00:412D  7D                  	    ld      a, l
      83.  00:412E  00                  	    nop
      84.  00:412F  D3 99               	    out     (PORT_1), a
      85.  00:4131  7C                  	    ld      a, h
      86.  00:4132  F6 40               	    or      64
      87.  00:4134  FB                      ei
      88.  00:4135  D3 99                   out     (PORT_1),a
      89.  00:4137  C9                      ret
      90.  00:4138                      
      91.  00:4138                      Set212Lines:
      92.  00:4138                              ; set LN (bit 7) of R#9 to 1
      93.  00:4138  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:413B  F6 80                       or      10000000b
      95.  00:413D  47                          ld      b, a
      96.  00:413E  0E 09                       ld      c, 9            ; register #
      97.  00:4140  CD 47 00                    call    WRTVDP
      98.  00:4143  C9                          ret
      99.  00:4144                      
     100.  00:4144                      ClearVram_MSX2:
     101.  00:4144  AF                          xor     a           ; set vram write base address
     102.  00:4145  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:4148  CD 1C 41                    call    SetVdp_Write
     104.  00:414B  AF                          xor		a
     105.  00:414C                      
     106.  00:414C                          ; TODO: 
     107.  00:414C                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:414C                          ;   disable screen/sprites (should I ??)
     109.  00:414C                      
     110.  00:414C                          ; clear all 128kb of VRAM
     111.  00:414C  16 02               	ld		d, 2		; 2 repetitions
     112.  00:414E                      .loop_2:
     113.  00:414E  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:4150                      .loop_1:
     115.  00:4150  06 00               	ld		b, 0		; 256 repetitions
     116.  00:4152                      .loop:
     117.  00:4152  D3 98               	out		(PORT_0), a
     118.  00:4154  10 FC               	djnz	.loop
     119.  00:4156  0D                  	dec		c
     120.  00:4157  C2 50 41            	jp		nz, .loop_1
     121.  00:415A  15                  	dec		d
     122.  00:415B  C2 4E 41            	jp		nz, .loop_2
     123.  00:415E                      
     124.  00:415E  C9                  	ret
     125.  00:415F                      
     126.  00:415F                      ; MEGAROM
     127.  00:415F                      
     128.  00:415F                      opening_screen		
     129.  00:415F  0E 00               		ld		c,0
     130.  00:4161  11 00 00            		ld		de,0
     131.  00:4164  CD A4 41            		call	_vdpsetvramwr
     132.  00:4167  1E 04               		ld	e,4
     133.  00:4169  3E 09               		ld	a, :GRAPHIC
     134.  00:416B  57                  		ld	d,a
     135.  00:416C  32 00 70            2:		ld	(_bank2),a
     136.  00:416F  21 00 80            		ld	hl,GRAPHIC
     137.  00:4172  01 98 00            		ld	bc,0x98
     138.  00:4175  3E 40               		ld	a,32*2
     139.  00:4177  ED B3               1:		otir
     140.  00:4179  3D                  		dec	a
     141.  00:417A  20 FB               		jr	nz,1b
     142.  00:417C  14                  		inc	d
     143.  00:417D  7A                  		ld	a,d
     144.  00:417E  1D                  		dec	e
     145.  00:417F  20 EB               		jr	nz,2b
     146.  00:4181  C9                  		ret 
     147.  00:4182                      
     148.  00:4182                      load_screen
     149.  00:4182  0E 00               		ld		c,0
     150.  00:4184  11 00 00            		ld		de,0
     151.  00:4187  CD A4 41            		call	_vdpsetvramwr
     152.  00:418A  1E 02               		ld	e,2					; #pages
     153.  00:418C  78                  		ld	a, b			; 1st page bitmap
     154.  00:418D  57                  		ld	d,a
     155.  00:418E  32 00 70            2:		ld	(_bank2),a
     156.  00:4191  2A C4 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:4194  01 98 00            		ld	bc,0x98
     158.  00:4197  3E 40               		ld	a,64
     159.  00:4199  ED B3               1:		otir
     160.  00:419B  3D                  		dec	a
     161.  00:419C  20 FB               		jr	nz,1b
     162.  00:419E  14                  		inc	d
     163.  00:419F  7A                  		ld	a,d
     164.  00:41A0  1D                  		dec	e
     165.  00:41A1  20 EB               		jr	nz,2b
     166.  00:41A3  C9                  		ret 
     167.  00:41A4                      
     168.  00:41A4                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:41A4                      
     170.  00:41A4                      _vdpsetvramwr:
     171.  00:41A4  79                  	ld a,c
     172.  00:41A5  CB 02               	rlc d
     173.  00:41A7  17                  	rla
     174.  00:41A8  CB 02               	rlc d
     175.  00:41AA  17                  	rla
     176.  00:41AB  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:41AD                      
     178.  00:41AD  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:41AF  3E 8E               	ld a,14+128
     180.  00:41B1  D3 99               	out (0x99),a
     181.  00:41B3  CB 3A               	srl d ; secondo shift.     
     182.  00:41B5                      _vdpsetvramwr14
     183.  00:41B5  7B                  	ld a,e ;set bits 0-7
     184.  00:41B6  D3 99               	out (0x99),a
     185.  00:41B8  7A                  	ld a,d ;set bits 8-13
     186.  00:41B9  F6 40               	or 0x40 ; + write access
     187.  00:41BB  D3 99               	out (0x99),a
     188.  00:41BD  C9                  	ret
     189.  00:41BE                      
     190.  00:41BE                      
     191.  00:41BE                      
     192.  00:41BE                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:41BE                      		; -----------------------------------------------------
     194.  00:41BE                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:41BE                      		; -----------------------------------------------------
     196.  00:41BE                      
     197.  00:41BE                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:41BE                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:41BE                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:41BE                      
     201.  00:41BE                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:41BE                      		; NINGUNA
     203.  00:41BE                      
     204.  00:41BE                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:41BE                      		; --- Entrada: a = SLOT                                           ---
     206.  00:41BE                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:41BE                      		; --- AUTOR: Konamiman                                            ---
     208.  00:41BE  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:41C0  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:41C1  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:41C3  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:41C6  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:41C7  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:41C8  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:41CA  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:41CC                      		; --- El slot esta expandido ---
     217.  00:41CC  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:41CD  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:41CE  23                  		inc	hl				; Incrementamos hl una...
     220.  00:41CF  23                  		inc	hl				; ...dos...
     221.  00:41D0  23                  		inc	hl				; ...tres...
     222.  00:41D1  23                  		inc	hl				; ...cuatro veces
     223.  00:41D2  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:41D3  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:41D5  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:41D6  C9                  		ret					; Volvemos
     227.  00:41D7                      
     228.  00:41D7                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:41D7  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:41D9  32 DC 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:41DC  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:41DD                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:41DD  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:41E0  0F                  		rrca					; Rotamos a la derecha...
     235.  00:41E1  0F                  		rrca					; ...dos veces
     236.  00:41E2  CD BE 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:41E5  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:41E7  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:41EA                      
     240.  00:41EA                      SET_SCREEN5_MODE:
     241.  00:41EA                           ;Cambiamos el modo de pantalla
     242.  00:41EA                          ; BASIC: COLOR 15,1,1
     243.  00:41EA                          ; Establecer los colores
     244.  00:41EA  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:41ED  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:41EF  23                  	inc hl ; FORCLR+1
     247.  00:41F0  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     248.  00:41F2  23                  	inc hl ; FORCLR+2
     249.  00:41F3  36 0F               	ld [hl],15 ; Color del borde 1=negro
     250.  00:41F5                      
     251.  00:41F5  3E 05                   ld  a,5     
     252.  00:41F7  CD 5F 00                call CHGMOD 
     253.  00:41FA  CD 69 00            	call CLRSPR
     254.  00:41FD                      
     255.  00:41FD  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     256.  00:4200                          ;En or 0+0=0, 0+1=1, 1+1=1
     257.  00:4200                          ;En and 0+0=0, 0+1=0, 1+1=1
     258.  00:4200                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     259.  00:4200                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     260.  00:4200                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     261.  00:4200  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     262.  00:4202                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:4202  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     264.  00:4204                      
     265.  00:4204  47                      ld b,a ;carga en b el valor de a
     266.  00:4205  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     267.  00:4207  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     268.  00:420A  AF                      xor a ; ld a,0
     269.  00:420B  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     270.  00:420E  C9                      ret
     271.  00:420F                      
     272.  00:420F                      DUMP_SPR_ALL:
     273.  00:420F                      
     274.  00:420F                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     275.  00:420F                      
     276.  00:420F  21 D5 67                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     277.  00:4212  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     278.  00:4215  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     279.  00:4218  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     280.  00:421B                      
     281.  00:421B                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     282.  00:421B                      
     283.  00:421B  21 39 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     284.  00:421E  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     285.  00:4221  01 80 00                ld bc,128; 4 x #Sprites
     286.  00:4224  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     287.  00:4227                      
     288.  00:4227                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     289.  00:4227                      
     290.  00:4227  21 B5 6A                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     291.  00:422A  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     292.  00:422D  01 70 01                ld bc,16*23; 16 x #Sprites
     293.  00:4230  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     294.  00:4233  C9                      ret
     295.  00:4234                      	
     296.  00:4234                      load_tiles_vdp
     297.  00:4234                          
     298.  00:4234                      	;ld hl, TILES1
     299.  00:4234  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     300.  00:4237  01 00 08                ld bc,128*16; 16 lineas
     301.  00:423A  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     302.  00:423D  C9                  	ret 
     303.  00:423E                      
     304.  00:423E                      DUMP_SPR_ATTS:
     305.  00:423E                      
     306.  00:423E                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     307.  00:423E                      
     308.  00:423E  21 39 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     309.  00:4241  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     310.  00:4244  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     311.  00:4247  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     312.  00:424A                      
     313.  00:424A                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     314.  00:424A                      ;	JP Z,.DUMP_SPR_ATTS_END
     315.  00:424A  2A C0 C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     316.  00:424D  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     317.  00:4250  C5                      PUSH BC
     318.  00:4251  01 30 00            	ld bc,16*3; 16 x #Sprites
     319.  00:4254  CD 5C 00                call  LDIRVM 
     320.  00:4257  C1                  	POP BC
     321.  00:4258                      
     322.  00:4258                      .DUMP_SPR_ATTS_END:
     323.  00:4258  C9                      ret
     324.  00:4259                      
     325.  00:4259                      DUMP_SPR_P1:    
     326.  00:4259                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     327.  00:4259                      
     328.  00:4259  2A BC C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     329.  00:425C  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     330.  00:425F  C5                      PUSH BC
     331.  00:4260  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     332.  00:4263  CD 5C 00                call  LDIRVM 
     333.  00:4266  C1                  	POP BC
     334.  00:4267                      
     335.  00:4267                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     336.  00:4267                      
     337.  00:4267  2A BE C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     338.  00:426A  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     339.  00:426D  C5                      PUSH BC
     340.  00:426E  01 30 00            	ld bc,16*3; 16 x #Sprites
     341.  00:4271  CD 5C 00                call  LDIRVM 
     342.  00:4274  C1                  	POP BC
     343.  00:4275                      	
     344.  00:4275                      
     345.  00:4275                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     346.  00:4275                      ;    xor a
     347.  00:4275                      ;	di			; set VRAM address to 1800h
     348.  00:4275                      ;	out (99h),a		; lower byte 00
     349.  00:4275                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     350.  00:4275                      ;	ei
     351.  00:4275                      ;	out (99h),a		; note that this is protected by the ei instruction
     352.  00:4275                      ;   push BC
     353.  00:4275                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     354.  00:4275                      ;	ld hl,(SPRITE_PTR_REPLACE)
     355.  00:4275                      
     356.  00:4275                      ;.loop1:
     357.  00:4275                      ;	outi			; send the data (HL) to port 98h 
     358.  00:4275                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     359.  00:4275                      ;   POP BC
     360.  00:4275                      
     361.  00:4275                          ; Replace 2 entries in sprite color table
     362.  00:4275                      ;    xor a
     363.  00:4275                      ;	di			; set VRAM address to 1800h
     364.  00:4275                      ;	out (99h),a		; lower byte 00
     365.  00:4275                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     366.  00:4275                      ;	ei
     367.  00:4275                      ;	out (99h),a		; note that this is protected by the ei instruction
     368.  00:4275                       ;   push BC
     369.  00:4275                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     370.  00:4275                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     371.  00:4275                      	
     372.  00:4275                      ;.loop2:
     373.  00:4275                      ;	outi			; send the data (HL) to port 98h 
     374.  00:4275                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     375.  00:4275                       ;   POP BC
     376.  00:4275                      
     377.  00:4275  C9                      ret
     378.  00:4276                      
     379.  00:4276                      SetPalette:
     380.  00:4276  AF                  	xor a
     381.  00:4277  F3                  	di
     382.  00:4278  D3 99               	out ($99),a
     383.  00:427A  3E 90               	ld a,16+128
     384.  00:427C  D3 99               	out ($99),a
     385.  00:427E  01 9A 20            	ld bc,$209A
     386.  00:4281  ED B3               	otir
     387.  00:4283  FB                  	ei
     388.  00:4284  C9                  	ret
     389.  00:4285                      
     390.  00:4285                      
     391.  00:4285                      DUMMY_SPR_ATTS:
     392.  00:4285                      
     393.  00:4285                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     394.  00:4285                      
     395.  00:4285  21 C1 76                ld hl, dummy_SPR_ATT__TBL ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     396.  00:4288  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     397.  00:428B  01 80 00                ld bc,128		; 4 x #Sprites mostrados
     398.  00:428E  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     399.  00:4291  C9                  	RET
      25   00:4292                          include "include\BTH_animate.asm"
       1.  00:4292                      ; Movimiento P1
       2.  00:4292                      move_up:
       3.  00:4292  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:4293                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:4293  AF                      XOR A
       6.  00:4294  32 34 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:4297  CD C5 43                CALL CHECK_DIRECTION_MAIN
       8.  00:429A                      
       9.  00:429A  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:429D  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:429F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:42A0  DD 7E 01                ld a,(ix+1)
      13.  00:42A3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:42A4  CD FB 40                call get_bloque_en_X_Y
      15.  00:42A7  FE 01                   cp 1
      16.  00:42A9  CA BE 44                jp z,NO_MOVEMENT
      17.  00:42AC                      
      18.  00:42AC  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:42AF  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:42B1  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:42B2  DD 7E 01                ld a,(ix+1)
      22.  00:42B5  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:42B7  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:42B8  CD FB 40                call get_bloque_en_X_Y
      25.  00:42BB  FE 01                   cp 1
      26.  00:42BD  CA BE 44                jp z,NO_MOVEMENT
      27.  00:42C0                            
      28.  00:42C0  3E FF               	LD A, -MOV_SPEED
      29.  00:42C2  32 2B C0            	LD (CHAR_SPEED_Y), A
      30.  00:42C5  CD 52 44                call UPDATE_MOVEMENT   
      31.  00:42C8  CD 7A 44                call ANIMATE_P1
      32.  00:42CB                          ;JP no_arrows
      33.  00:42CB  C9                      ret
      34.  00:42CC                      
      35.  00:42CC                      move_down:
      36.  00:42CC  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:42CD                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:42CD  3E 01                   LD A,$01
      39.  00:42CF  32 34 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:42D2  CD C5 43                CALL CHECK_DIRECTION_MAIN
      41.  00:42D5                      
      42.  00:42D5  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      43.  00:42D8  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:42DA  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:42DB  DD 7E 01                ld a,(ix+1)
      46.  00:42DE  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:42DF  CD FB 40                call get_bloque_en_X_Y
      48.  00:42E2  FE 01                   cp 1
      49.  00:42E4  CA BE 44                jp z,NO_MOVEMENT
      50.  00:42E7                      
      51.  00:42E7  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      52.  00:42EA  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:42EC  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:42ED  DD 7E 01                ld a,(ix+1)
      55.  00:42F0  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:42F2  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:42F3  CD FB 40                call get_bloque_en_X_Y
      58.  00:42F6  FE 01                   cp 1
      59.  00:42F8  CA BE 44                jp z,NO_MOVEMENT
      60.  00:42FB                          
      61.  00:42FB  3E 01                   LD A, MOV_SPEED
      62.  00:42FD  32 2B C0            	LD (CHAR_SPEED_Y), A
      63.  00:4300  CD 52 44                call UPDATE_MOVEMENT    
      64.  00:4303  CD 7A 44                call ANIMATE_P1
      65.  00:4306                          ;JP no_arrows
      66.  00:4306  C9                      ret
      67.  00:4307                      
      68.  00:4307                      move_right:
      69.  00:4307  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:4308                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:4308  CB 69                   BIT KB_UP, C
      72.  00:430A  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:430C  CB 71                   BIT KB_DOWN, C
      74.  00:430E  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:4310  3E 03                   LD A,$03
      76.  00:4312  32 34 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:4315  CD C5 43                CALL CHECK_DIRECTION_MAIN
      78.  00:4318                      
      79.  00:4318                      .KB_UPDOWN_PRESSED:
      80.  00:4318  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:431B  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:431D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:431E  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      84.  00:4321  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:4323  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:4324  CD FB 40                call get_bloque_en_X_Y
      87.  00:4327  FE 01                   cp 1
      88.  00:4329  CA BE 44                jp z,NO_MOVEMENT
      89.  00:432C                      
      90.  00:432C                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:432C  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:432F  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:4331  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:4332  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      95.  00:4335  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:4337  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:4338  CD FB 40                call get_bloque_en_X_Y
      98.  00:433B  FE 01                   cp 1
      99.  00:433D  CA BE 44                jp z,NO_MOVEMENT
     100.  00:4340                      
     101.  00:4340                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:4340  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:4343  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:4345  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:4346  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     106.  00:4349  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:434B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:434C  CD FB 40                call get_bloque_en_X_Y
     109.  00:434F  FE 01                   cp 1
     110.  00:4351  CA BE 44                jp z,NO_MOVEMENT    
     111.  00:4354                          
     112.  00:4354  3E 01                   LD A, MOV_SPEED
     113.  00:4356  32 2A C0            	LD (CHAR_SPEED_X), A
     114.  00:4359  CD 52 44                call UPDATE_MOVEMENT
     115.  00:435C  CB 69                   BIT KB_UP, C
     116.  00:435E  C8                      ret z
     117.  00:435F  CB 71                   BIT KB_DOWN, C
     118.  00:4361  C8                      ret z
     119.  00:4362  CD 7A 44                call ANIMATE_P1    
     120.  00:4365  C9                      ret
     121.  00:4366                      
     122.  00:4366                      move_left:
     123.  00:4366  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:4367                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:4367  CB 69                   BIT KB_UP, C
     126.  00:4369  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:436B  CB 71                   BIT KB_DOWN, C
     128.  00:436D  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:436F  3E 02                   LD A,$02
     130.  00:4371  32 34 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:4374  CD C5 43                CALL CHECK_DIRECTION_MAIN
     132.  00:4377                      .KB_UPDOWN_PRESSED:
     133.  00:4377  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:437A  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:437C  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:437D  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     137.  00:4380  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:4382  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:4383  CD FB 40                call get_bloque_en_X_Y
     140.  00:4386  FE 01                   cp 1
     141.  00:4388  CA BE 44                jp z,NO_MOVEMENT
     142.  00:438B                      
     143.  00:438B                          ;Miramos el tile inferior parte central del personaje
     144.  00:438B  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:438E  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:4390  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:4391  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     148.  00:4394  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:4396  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:4397  CD FB 40                call get_bloque_en_X_Y
     151.  00:439A  FE 01                   cp 1
     152.  00:439C  CA BE 44                jp z,NO_MOVEMENT
     153.  00:439F                      
     154.  00:439F                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:439F  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:43A2  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:43A4  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:43A5  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     159.  00:43A8  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:43AA  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:43AB  CD FB 40                call get_bloque_en_X_Y
     162.  00:43AE  FE 01                   cp 1
     163.  00:43B0  CA BE 44                jp z,NO_MOVEMENT
     164.  00:43B3                      
     165.  00:43B3  3E FF                   LD A, -MOV_SPEED
     166.  00:43B5  32 2A C0            	LD (CHAR_SPEED_X), A
     167.  00:43B8  CD 52 44                call UPDATE_MOVEMENT     
     168.  00:43BB  CB 69                   BIT KB_UP, C
     169.  00:43BD  C8                      ret z
     170.  00:43BE  CB 71                   BIT KB_DOWN, C
     171.  00:43C0  C8                      ret z
     172.  00:43C1  CD 7A 44                call ANIMATE_P1    
     173.  00:43C4  C9                      ret
     174.  00:43C5                      
     175.  00:43C5                      CHECK_DIRECTION_MAIN:
     176.  00:43C5  3A 33 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:43C8  2A 34 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:43CB  BD                  	CP L		            	                ;Son iguales?
     179.  00:43CC  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:43CD  3A 34 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:43D0  FE 01                   CP $01
     182.  00:43D2  CA E7 43                JP Z,.SET_DIR_DOWN
     183.  00:43D5  FE 00                   CP $00
     184.  00:43D7  CA FC 43                JP Z,.SET_DIR_UP
     185.  00:43DA  FE 03                   CP $03
     186.  00:43DC  CA 26 44                JP Z,.SET_DIR_RIGHT
     187.  00:43DF  FE 02                   CP $02
     188.  00:43E1  CA 11 44                JP Z,.SET_DIR_LEFT
     189.  00:43E4  C3 3B 44                JP .FINISH
     190.  00:43E7                          
     191.  00:43E7                      .SET_DIR_DOWN:    
     192.  00:43E7  21 95 65                ld hl, SPRITE_P1_DOWN
     193.  00:43EA  22 BC C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:43ED                          
     195.  00:43ED  21 95 6B                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:43F0  22 BE C0                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:43F3  22 C0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:43F6  CD 59 42                CALL DUMP_SPR_P1    
     199.  00:43F9                      
     200.  00:43F9  C3 3B 44                JP .FINISH
     201.  00:43FC                      
     202.  00:43FC                      .SET_DIR_UP:
     203.  00:43FC  21 D5 64                ld hl, SPRITE_P1_UP
     204.  00:43FF  22 BC C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:4402                          
     206.  00:4402  21 35 6B                ld hl, SPRITE_COLOR_P1_UP
     207.  00:4405  22 BE C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:4408  22 C0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:440B  CD 59 42                CALL DUMP_SPR_P1
     210.  00:440E  C3 3B 44                JP .FINISH
     211.  00:4411                      
     212.  00:4411                      .SET_DIR_LEFT:    
     213.  00:4411  21 55 66                ld hl, SPRITE_P1_LEFT
     214.  00:4414  22 BC C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:4417                          
     216.  00:4417  21 C1 75                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:441A  22 BE C0                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:441D  22 C0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:4420  CD 59 42                CALL DUMP_SPR_P1   
     220.  00:4423  C3 3B 44                JP .FINISH
     221.  00:4426                      
     222.  00:4426                      .SET_DIR_RIGHT:
     223.  00:4426  21 15 67                ld hl, SPRITE_P1_RIGHT
     224.  00:4429  22 BC C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:442C                          
     226.  00:442C  21 F5 6B                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:442F  22 BE C0                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:4432  22 C0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:4435                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:4435  CD 59 42                CALL DUMP_SPR_P1
     231.  00:4438  C3 3B 44                JP .FINISH
     232.  00:443B                      
     233.  00:443B                      .FINISH:
     234.  00:443B  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:443C  32 36 C0                LD (CHAR_MIN_STEP), A   
     236.  00:443F  3A 34 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:4442  32 33 C0                LD (CHAR_DIR_MAIN),A    
     238.  00:4445                      
     239.  00:4445                          ; ponemos el primer frame del sprite
     240.  00:4445  DD 36 02 00             LD (ix+2), $00
     241.  00:4449  DD 36 06 04             LD (ix+6), $04
     242.  00:444D  DD 36 0A 08             LD (ix+10), $08
     243.  00:4451                          ;CALL DUMP_SPR_ATTS
     244.  00:4451  C9                      RET
     245.  00:4452                      
     246.  00:4452                      UPDATE_MOVEMENT:
     247.  00:4452  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     248.  00:4455  2A 2B C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:4458  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:4459                          
     251.  00:4459  DD 77 00            	LD (ix), A
     252.  00:445C  DD 77 04                LD (ix+4), A
     253.  00:445F  DD 77 08                LD (ix+8), A
     254.  00:4462                      	
     255.  00:4462  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     256.  00:4465  2A 2A C0            	LD HL, (CHAR_SPEED_X)
     257.  00:4468  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     258.  00:4469                          
     259.  00:4469  DD 77 01            	LD (ix+1), A
     260.  00:446C  DD 77 05                LD (ix+5), A
     261.  00:446F  DD 77 09                LD (ix+9), A	
     262.  00:4472                      
     263.  00:4472  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     264.  00:4473  32 2A C0                LD (CHAR_SPEED_X),A
     265.  00:4476  32 2B C0                LD (CHAR_SPEED_Y),A	
     266.  00:4479  C9                      RET
     267.  00:447A                      
     268.  00:447A                      ANIMATE_P1:
     269.  00:447A                          ; Animación/pasos de personaje	
     270.  00:447A  3A 36 C0                LD A, (CHAR_MIN_STEP)
     271.  00:447D  FE 05                   CP MAX_CHAR_STEPS
     272.  00:447F  C2 B8 44                JP NZ,.NO_CHAR_PATTERN_CHANGE
     273.  00:4482                          
     274.  00:4482  AF                      XOR A
     275.  00:4483  32 36 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     276.  00:4486  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     277.  00:4489  FE 00                   CP $00
     278.  00:448B  CA A1 44                JP Z,.SET_SPR_1P_2
     279.  00:448E  DD 36 02 00             LD (ix+2), $00
     280.  00:4492  DD 36 06 04             LD (ix+6), $04
     281.  00:4496  DD 36 0A 08             LD (ix+10), $08
     282.  00:449A  2A BE C0                ld hl, (SPRITE_COLOR_REPLACE)
     283.  00:449D  22 C0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     284.  00:44A0  C9                      ret
     285.  00:44A1                      
     286.  00:44A1                      .SET_SPR_1P_2:
     287.  00:44A1  DD 36 02 0C             LD (ix+2), $0C
     288.  00:44A5  DD 36 06 10             LD (ix+6), $10
     289.  00:44A9  DD 36 0A 14             LD (ix+10), $14
     290.  00:44AD                              
     291.  00:44AD  2A BE C0                ld HL, (SPRITE_COLOR_REPLACE)
     292.  00:44B0  11 30 00                ld DE,48
     293.  00:44B3  19                      ADD HL, DE
     294.  00:44B4  22 C0 C0                ld (SPRITE_COLOR_REPLACE2), HL
     295.  00:44B7                          ;ld a, 0
     296.  00:44B7  C9                  	ret
     297.  00:44B8                      
     298.  00:44B8                      .NO_CHAR_PATTERN_CHANGE    
     299.  00:44B8  C6 01                   ADD 1
     300.  00:44BA  32 36 C0                LD (CHAR_MIN_STEP), A    
     301.  00:44BD  C9                      ret
     302.  00:44BE                      
     303.  00:44BE                      NO_MOVEMENT:    
     304.  00:44BE  C9                      ret
     305.  00:44BF                      
     306.  00:44BF                      MOVE_SHOOT:
     307.  00:44BF  3A 35 C0                LD A,(CHAR_MAIN_SHOOT)    
     308.  00:44C2  FE 01                   CP $01
     309.  00:44C4  CA EF 44                JP Z,.MOVE_SHOOT_LEFT
     310.  00:44C7  FE 02                   CP $02
     311.  00:44C9  CA D7 44                JP Z,.MOVE_SHOOT_RIGHT
     312.  00:44CC  FE 03                   CP $03
     313.  00:44CE  CA DF 44                JP Z,.MOVE_SHOOT_UP    
     314.  00:44D1  FE 04                   CP $04
     315.  00:44D3  CA E7 44                JP Z,.MOVE_SHOOT_DOWN
     316.  00:44D6  C9                      RET
     317.  00:44D7                      
     318.  00:44D7                      .MOVE_SHOOT_RIGHT:        
     319.  00:44D7  3E 03                   LD A, MOV_SPEED_SHOOT
     320.  00:44D9  32 38 C0            	LD (CHAR_SPEED_SHOOT), A    
     321.  00:44DC  C3 F4 44                JP .CHECK_SHOOT_DISTANCE
     322.  00:44DF                      
     323.  00:44DF                      .MOVE_SHOOT_UP:        
     324.  00:44DF  3E FD                   LD A, -MOV_SPEED_SHOOT
     325.  00:44E1  32 38 C0            	LD (CHAR_SPEED_SHOOT), A    
     326.  00:44E4  C3 F4 44                JP .CHECK_SHOOT_DISTANCE
     327.  00:44E7                      
     328.  00:44E7                      .MOVE_SHOOT_DOWN:
     329.  00:44E7  3E 03                   LD A, MOV_SPEED_SHOOT
     330.  00:44E9  32 38 C0            	LD (CHAR_SPEED_SHOOT), A    
     331.  00:44EC  C3 F4 44                JP .CHECK_SHOOT_DISTANCE
     332.  00:44EF                      
     333.  00:44EF                      .MOVE_SHOOT_LEFT:    
     334.  00:44EF  3E FD                   LD A, -MOV_SPEED_SHOOT
     335.  00:44F1  32 38 C0            	LD (CHAR_SPEED_SHOOT), A    
     336.  00:44F4                      
     337.  00:44F4                      .CHECK_SHOOT_DISTANCE:
     338.  00:44F4                          ; Miramos si va a izq o der
     339.  00:44F4  3A 35 C0                LD A,(CHAR_MAIN_SHOOT)    
     340.  00:44F7  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     341.  00:44F9  D2 09 45                JP NC,.ADD_SHOOT_Y
     342.  00:44FC                          ; Movemos el disparo
     343.  00:44FC  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     344.  00:44FF  2A 38 C0            	LD HL, (CHAR_SPEED_SHOOT)
     345.  00:4502  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     346.  00:4503  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     347.  00:4506  C3 13 45                JP .ADD_DISTANCE
     348.  00:4509                      .ADD_SHOOT_Y
     349.  00:4509                          ; Movemos el disparo
     350.  00:4509  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     351.  00:450C  2A 38 C0            	LD HL, (CHAR_SPEED_SHOOT)
     352.  00:450F  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     353.  00:4510  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     354.  00:4513                      
     355.  00:4513                      .ADD_DISTANCE:
     356.  00:4513  3A 37 C0                LD A,(CHAR_DISTANCE_SHOOT)
     357.  00:4516  C6 03                   ADD MOV_SPEED_SHOOT
     358.  00:4518  32 37 C0                LD (CHAR_DISTANCE_SHOOT),A    
     359.  00:451B  FE 30                   CP MAX_DISTANCE_SHOOT
     360.  00:451D  C0                      RET NZ
     361.  00:451E                      
     362.  00:451E                      .HIDE_SHOOT:
     363.  00:451E  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     364.  00:4522  AF                      XOR A
     365.  00:4523  32 35 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     366.  00:4526  32 37 C0                LD (CHAR_DISTANCE_SHOOT),A
     367.  00:4529  C9                      RET
     368.  00:452A                      
     369.  00:452A                      SHOOT_MAIN_CHAR:    
     370.  00:452A  3A 35 C0                LD A, (CHAR_MAIN_SHOOT)
     371.  00:452D  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     372.  00:452F  C8                      RET Z;,MAIN_LOOP
     373.  00:4530  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     374.  00:4532  C8                      RET Z;,MAIN_LOOP
     375.  00:4533  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     376.  00:4535  C8                      RET Z;,MAIN_LOOP
     377.  00:4536  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     378.  00:4538  C8                      RET Z;,MAIN_LOOP
     379.  00:4539                      
     380.  00:4539  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     381.  00:453D                      
     382.  00:453D  DD 7E 00                LD A, (ix)          
     383.  00:4540  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     384.  00:4543                      
     385.  00:4543  3A 33 C0                LD A, (CHAR_DIR_MAIN)
     386.  00:4546  FE 03                   CP $03
     387.  00:4548  CA 64 45                JP Z,.SHOOT_RIGHT
     388.  00:454B  FE 00                   CP $00
     389.  00:454D  CA 73 45                JP Z,.SHOOT_UP
     390.  00:4550  FE 01                   CP $01
     391.  00:4552  CA 86 45                JP Z,.SHOOT_DOWN
     392.  00:4555                          ; SHOOT LEFT
     393.  00:4555  3E 01                   LD A,$01                ; SHOOT LEFT
     394.  00:4557  32 35 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     395.  00:455A  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     396.  00:455D  21 F4 FF            	LD HL, -12
     397.  00:4560  85                  	ADD L
     398.  00:4561                          
     399.  00:4561  C3 96 45                JP .CONTINUE
     400.  00:4564                      
     401.  00:4564                      .SHOOT_RIGHT:    
     402.  00:4564  3E 02                   LD A,$02
     403.  00:4566  32 35 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     404.  00:4569                          
     405.  00:4569  DD 7E 01                LD A, (ix+1)			;cargamos la X
     406.  00:456C  21 0C 00            	LD HL, 12
     407.  00:456F  85                  	ADD L
     408.  00:4570  C3 96 45                JP .CONTINUE
     409.  00:4573                      
     410.  00:4573                      .SHOOT_UP:
     411.  00:4573  3E 03                   LD A,$03
     412.  00:4575  32 35 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     413.  00:4578                          
     414.  00:4578                          ; Sumamos el desplazamiento a la Y
     415.  00:4578  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     416.  00:457B  D6 10                   SUB 16
     417.  00:457D  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     418.  00:4580                          ;LD (ix+17), D
     419.  00:4580  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     420.  00:4583  C3 96 45                JP .CONTINUE
     421.  00:4586                      
     422.  00:4586                      .SHOOT_DOWN
     423.  00:4586  3E 04               	LD A,$04
     424.  00:4588  32 35 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     425.  00:458B                          
     426.  00:458B                          ; Sumamos el desplazamiento a la Y
     427.  00:458B  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     428.  00:458E  C6 10                   ADD 16
     429.  00:4590  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     430.  00:4593                          ;LD (ix+17), D
     431.  00:4593  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     432.  00:4596                      
     433.  00:4596                      .CONTINUE:
     434.  00:4596                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     435.  00:4596  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     436.  00:4599                          ;jp MAIN_LOOP
     437.  00:4599  C9                      ret
      26   00:459A                      	include "include\VDP.asm"
       1.  00:459A                      ; Offset commands registers
       2.  00:459A  (00:0000)           VDP_SX		 EQU 0
       3.  00:459A  (00:0002)           VDP_SY		 EQU 2
       4.  00:459A  (00:0004)           VDP_DX		 EQU 4
       5.  00:459A  (00:0006)           VDP_DY		 EQU 6
       6.  00:459A  (00:0008)           VDP_NX		 EQU 8
       7.  00:459A  (00:000A)           VDP_NY		 EQU 10
       8.  00:459A  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:459A  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:459A  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:459A                      
      12.  00:459A                      ; Offset for sprite commands from memory
      13.  00:459A                      
      14.  00:459A                      ; VDP Commands
      15.  00:459A  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:459A  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:459A  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:459A  (00:0098)           CMD_LMMM	equ	$98
      19.  00:459A  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:459A  (00:0080)           CMD_LMMV    equ $80
      21.  00:459A                      
      22.  00:459A                      ; Logical operations
      23.  00:459A  (00:0000)           VDP_IMP		equ	%0000
      24.  00:459A  (00:0001)           VDP_AND		equ	%0001
      25.  00:459A  (00:0002)           VDP_OR		equ	%0010
      26.  00:459A  (00:0003)           VDP_XOR		equ	%0011
      27.  00:459A  (00:0004)           VDP_NOT		equ	%0100
      28.  00:459A  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:459A  (00:0009)           VDP_TAND	equ	%1001
      30.  00:459A  (00:000A)           VDP_TOR		equ	%1010
      31.  00:459A  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:459A  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:459A                      
      34.  00:459A                      ; Tile
      35.  00:459A  (00:0010)           ENERGY_WIDTH		equ	16		; Blood drops
      36.  00:459A  (00:0020)           TILE_WIDTH			equ	32
      37.  00:459A  (00:0010)           TILE_HEIGHT			equ	16
      38.  00:459A  (00:0001)           TILES_PAGE			equ	1		; Page where tiles are stored
      39.  00:459A  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      40.  00:459A  (00:0002)           BACK_BUFFER			equ 2		; we will draw to page 1
      41.  00:459A  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      42.  00:459A                      
      43.  00:459A                      ; Dialog Box
      44.  00:459A  (00:0014)           DIAGBOX_HEIGHT	equ 20
      45.  00:459A  (00:00FF)           DIAGBOX_WIDTH	equ 255
      46.  00:459A                      
      47.  00:459A                      ;---------------------------------------------------------------------------
      48.  00:459A                      ; Init the RAM buffer used to draw a tile
      49.  00:459A                      ;---------------------------------------------------------------------------
      50.  00:459A                      initVDPBuffers:
      51.  00:459A  21 95 47            		ld	hl,tileDatROM
      52.  00:459D  11 00 C0            		ld	de,tileDat
      53.  00:45A0  01 0F 00            		ld	bc,15
      54.  00:45A3  ED B0               		ldir	
      55.  00:45A5                      
      56.  00:45A5  21 A4 47            		ld	hl,energyDatROM
      57.  00:45A8  11 0F C0            		ld	de,energyDat
      58.  00:45AB  01 0F 00            		ld	bc,15
      59.  00:45AE  ED B0               		ldir	
      60.  00:45B0                      
      61.  00:45B0  C9                  		ret
      62.  00:45B1                      
      63.  00:45B1                      print_strings_dialog_box:		
      64.  00:45B1                      
      65.  00:45B1  FD 66 01            	LD H, (IY+1)
      66.  00:45B4  FD 6E 00            	LD L, (IY)
      67.  00:45B7  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      68.  00:45BA  FD E5               	PUSH IY
      69.  00:45BC  CD DE 45                call print_string 
      70.  00:45BF  FD E1                   POP IY
      71.  00:45C1                      
      72.  00:45C1  FD 66 03            	LD H, (IY+3)
      73.  00:45C4  FD 6E 02            	LD L, (IY+2)
      74.  00:45C7  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
      75.  00:45CA  FD E5               	PUSH IY
      76.  00:45CC  CD DE 45                call print_string 
      77.  00:45CF  FD E1               	POP IY
      78.  00:45D1                      
      79.  00:45D1  FD 66 05                LD H, (IY+5)
      80.  00:45D4  FD 6E 04            	LD L, (IY+4)
      81.  00:45D7  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      82.  00:45DA  CD DE 45                call print_string 
      83.  00:45DD  C9                  	RET
      84.  00:45DE                      
      85.  00:45DE                      print_string:       
      86.  00:45DE                      	
      87.  00:45DE                      	;LD HL, string01
      88.  00:45DE                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
      89.  00:45DE                      .loop_str:
      90.  00:45DE  7E                  	LD A, (HL)
      91.  00:45DF  A7                  	AND A
      92.  00:45E0  C8                  	RET Z
      93.  00:45E1                      
      94.  00:45E1  D6 20               	SUB 32
      95.  00:45E3  CB 07               	RLC A
      96.  00:45E5  CB 07               	RLC A	
      97.  00:45E7                          
      98.  00:45E7  06 00               	LD B, 0
      99.  00:45E9  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
     100.  00:45EA                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
     101.  00:45EA                      				; Si #ASCII > 63 -> 2ª línea
     102.  00:45EA                      				; segunda línea - ((#ASCII -32)*4)+1024
     103.  00:45EA                      	
     104.  00:45EA  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
     105.  00:45EB  E5                  	PUSH HL
     106.  00:45EC  21 00 80            	LD HL, FONT
     107.  00:45EF  09                  	ADD HL, BC
     108.  00:45F0  FE 40               	CP 64
     109.  00:45F2  DA F9 45            	JP C, .first_line_font
     110.  00:45F5  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     111.  00:45F8  09                  	ADD HL, BC
     112.  00:45F9                      
     113.  00:45F9                      .first_line_font:
     114.  00:45F9  22 C4 C0                LD (BITMAP), HL
     115.  00:45FC                          
     116.  00:45FC  06 06               	LD B, :FONT
     117.  00:45FE  D5                  	PUSH DE
     118.  00:45FF  CD 12 46                call print_char
     119.  00:4602  D1                      POP DE
     120.  00:4603                      	
     121.  00:4603  FD 21 04 00         	LD IY, 4
     122.  00:4607  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     123.  00:4609  FD 54               	LD D, IYH
     124.  00:460B  FD 5D               	LD E, IYL
     125.  00:460D                      	
     126.  00:460D                      
     127.  00:460D  E1                  	POP HL
     128.  00:460E  23                  	INC HL
     129.  00:460F  18 CD               	JR .loop_str
     130.  00:4611                          
     131.  00:4611  C9                      RET
     132.  00:4612                      
     133.  00:4612                      print_char
     134.  00:4612  AF                  		XOR A		
     135.  00:4613  0E 00               		ld		c,0
     136.  00:4615                      		;ld		de,0
     137.  00:4615  ED 53 23 C0         		LD (CHR_ACR), DE
     138.  00:4619  CD A4 41                	call	_vdpsetvramwr		
     139.  00:461C  78                  		ld	a, b			; 1st page bitmap
     140.  00:461D                      		;ld	d,a
     141.  00:461D  32 00 70            		ld	(_bank2),a
     142.  00:4620  2A C4 C0            		ld	hl,(BITMAP)		; Bitmap address
     143.  00:4623  3E 08               		ld	a, 8			; #lineas del caracter
     144.  00:4625  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     145.  00:4628  ED B3                       otir
     146.  00:462A  01 7C 00                    LD BC, 124
     147.  00:462D  09                          ADD HL, BC
     148.  00:462E  F5                  		PUSH AF
     149.  00:462F                      
     150.  00:462F  FD 2A 23 C0         		LD IY, (CHR_ACR)
     151.  00:4633  01 80 00            		LD BC, 128
     152.  00:4636  FD 09               		ADD IY, BC
     153.  00:4638  FD 54               		LD D, IYH
     154.  00:463A  FD 5D               		LD E, IYL
     155.  00:463C  A9                  		XOR C
     156.  00:463D  ED 53 23 C0         		LD (CHR_ACR), DE
     157.  00:4641  CD A4 41            		call	_vdpsetvramwr		
     158.  00:4644  F1                  		POP AF		
     159.  00:4645                      
     160.  00:4645  3D                  		dec	a
     161.  00:4646  20 DD               		jr	nz,1b		
     162.  00:4648  C9                  		ret 
     163.  00:4649                      
     164.  00:4649                      CLEAR_DIALOG_BOX_v1:		
     165.  00:4649  0E 00               		LD C,0
     166.  00:464B  11 28 5C            		LD DE, 5C28H
     167.  00:464E  ED 53 23 C0         		LD (CHR_ACR), DE
     168.  00:4652  CD A4 41            		call _vdpsetvramwr
     169.  00:4655  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     170.  00:4657  21 21 76            1:		LD HL, BLANK_DATA
     171.  00:465A  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     172.  00:465D  ED B3               		OTIR
     173.  00:465F                      
     174.  00:465F  F5                  		PUSH AF
     175.  00:4660  FD 2A 23 C0         		LD IY, (CHR_ACR)
     176.  00:4664  01 80 00            		LD BC, 128
     177.  00:4667  FD 09               		ADD IY, BC
     178.  00:4669  FD 54               		LD D, IYH
     179.  00:466B  FD 5D               		LD E, IYL
     180.  00:466D  0E 00               		LD C,0
     181.  00:466F  ED 53 23 C0         		LD (CHR_ACR), DE
     182.  00:4673  CD A4 41            		call	_vdpsetvramwr		
     183.  00:4676  F1                  		POP AF		
     184.  00:4677                      
     185.  00:4677  3D                  		DEC a
     186.  00:4678  20 DD               		JR NZ,1b
     187.  00:467A  C9                  		RET
     188.  00:467B                      
     189.  00:467B                      CLEAR_DIALOG_BOX_v2:
     190.  00:467B  0E 00               		LD C,0
     191.  00:467D  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     192.  00:4680  ED 53 23 C0         		LD (CHR_ACR), DE
     193.  00:4684  CD A4 41            		call _vdpsetvramwr
     194.  00:4687  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     195.  00:4689  21 21 76            1:		LD HL, BLANK_DATA
     196.  00:468C  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     197.  00:468F  ED B3               		OTIR
     198.  00:4691                      
     199.  00:4691  F5                  		PUSH AF
     200.  00:4692  FD 2A 23 C0         		LD IY, (CHR_ACR)
     201.  00:4696  01 80 00            		LD BC, 128
     202.  00:4699  FD 09               		ADD IY, BC
     203.  00:469B  FD 54               		LD D, IYH
     204.  00:469D  FD 5D               		LD E, IYL
     205.  00:469F  0E 00               		LD C,0
     206.  00:46A1  ED 53 23 C0         		LD (CHR_ACR), DE
     207.  00:46A5  CD A4 41            		call	_vdpsetvramwr		
     208.  00:46A8  F1                  		POP AF		
     209.  00:46A9                      
     210.  00:46A9  3D                  		DEC a
     211.  00:46AA  20 DD               		JR NZ,1b
     212.  00:46AC  C9                  		RET
     213.  00:46AD                      	
     214.  00:46AD                      CLEAR_DIALOG_BOX:
     215.  00:46AD  21 C2 47            		LD HL, DiagBoxToFrontkBufROM
     216.  00:46B0  CD F6 46            		CALL VDPCMD
     217.  00:46B3  C9                  		RET
     218.  00:46B4                      
     219.  00:46B4                      
     220.  00:46B4                      ; -----------------------------------------------------------------------------------
     221.  00:46B4                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     222.  00:46B4                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     223.  00:46B4                      ; -----------------------------------------------------------------------------------
     224.  00:46B4  (00:F3E0)           VDP_01: EQU   $F3E0
     225.  00:46B4  (00:FFE7)           VDP_08: EQU   $FFE7
     226.  00:46B4  (00:FFE8)           VDP_09: EQU   $FFE8
     227.  00:46B4                      
     228.  00:46B4                      SETPAG:				; SETPAG [A]
     229.  00:46B4  0F                  	RRCA
     230.  00:46B5  0F                  	RRCA
     231.  00:46B6  0F                  	RRCA
     232.  00:46B7  F6 1F               	OR	%00011111
     233.  00:46B9  F3                  	DI
     234.  00:46BA  D3 99               	OUT	($99),A
     235.  00:46BC  3E 82               	LD	A,$80+2
     236.  00:46BE  FB                  	EI
     237.  00:46BF  D3 99               	OUT	($99),A
     238.  00:46C1  C9                  	RET
     239.  00:46C2                      
     240.  00:46C2                      SET_WR:				; SET_WR [AHL]
     241.  00:46C2  CB 04               	RLC	H
     242.  00:46C4  17                  	RLA
     243.  00:46C5  CB 04               	RLC	H
     244.  00:46C7  17                  	RLA
     245.  00:46C8  CB 3C               	SRL	H
     246.  00:46CA  CB 3C               	SRL	H
     247.  00:46CC  F3                  	DI
     248.  00:46CD  D3 99               	OUT	($99),A
     249.  00:46CF  3E 8E               	LD	A,$80+14
     250.  00:46D1  D3 99               	OUT	($99),A
     251.  00:46D3  7D                  	LD	A,L
     252.  00:46D4                      ;	NOP				; MSX2+
     253.  00:46D4  D3 99               	OUT	($99),A
     254.  00:46D6  7C                  	LD	A,H
     255.  00:46D7  F6 40               	OR	64
     256.  00:46D9  D3 99               	OUT	($99),A
     257.  00:46DB  FB                  	EI
     258.  00:46DC  C9                  	RET
     259.  00:46DD                      
     260.  00:46DD                      SET_RD:				; SET_RD [AHL]
     261.  00:46DD  CB 04               	RLC	H
     262.  00:46DF  17                  	RLA
     263.  00:46E0  CB 04               	RLC	H
     264.  00:46E2  17                  	RLA
     265.  00:46E3  CB 3C               	SRL	H
     266.  00:46E5  CB 3C               	SRL	H
     267.  00:46E7  F3                  	DI
     268.  00:46E8  D3 99               	OUT	($99),A
     269.  00:46EA  3E 8E               	LD	A,$80+14
     270.  00:46EC  D3 99               	OUT	($99),A
     271.  00:46EE  7D                  	LD	A,L
     272.  00:46EF                      ;	NOP				; MSX2+
     273.  00:46EF  D3 99               	OUT	($99),A
     274.  00:46F1  7C                  	LD	A,H
     275.  00:46F2                      ;	NOP				; MSX2+
     276.  00:46F2  D3 99               	OUT	($99),A
     277.  00:46F4  FB                  	EI
     278.  00:46F5  C9                  	RET
     279.  00:46F6                      
     280.  00:46F6                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     281.  00:46F6  CD 09 47            	CALL	WAITCE
     282.  00:46F9  F3                  	DI
     283.  00:46FA  3E 20               	LD	A,$20
     284.  00:46FC  D3 99               	OUT	($99),A
     285.  00:46FE  3E 91               	LD	A,$80+17
     286.  00:4700  D3 99               	OUT	($99),A
     287.  00:4702  FB                  	EI
     288.  00:4703  01 9B 0F            	LD	BC,$0F9B
     289.  00:4706  ED B3               	OTIR
     290.  00:4708  C9                  	RET
     291.  00:4709                      
     292.  00:4709                      WAITCE:				; WAITCE
     293.  00:4709  3E 02               	LD	A,$02
     294.  00:470B  F3                  	DI
     295.  00:470C  D3 99               	OUT	($99),A
     296.  00:470E  3E 8F               	LD	A,$80+15
     297.  00:4710  D3 99               	OUT	($99),A
     298.  00:4712  DB 99               	IN	A,($99)
     299.  00:4714  1F                  	RRA
     300.  00:4715  3E 00               	LD	A,$00
     301.  00:4717  D3 99               	OUT	($99),A
     302.  00:4719  3E 8F               	LD	A,$80+15
     303.  00:471B  FB                  	EI
     304.  00:471C  D3 99               	OUT	($99),A
     305.  00:471E  38 E9               	JR	C,WAITCE
     306.  00:4720  C9                  	RET
     307.  00:4721                      
     308.  00:4721                      ENASCR:				; Enable Screen
     309.  00:4721  3A E0 F3            	LD	A,(VDP_01)
     310.  00:4724  F6 40               	OR	%01000000
     311.  00:4726  18 05               	JR	DISSCR.OUT
     312.  00:4728                      
     313.  00:4728                      DISSCR:				; Disable Screen
     314.  00:4728  3A E0 F3            	LD	A,(VDP_01)
     315.  00:472B  E6 BF               	AND	%10111111
     316.  00:472D  32 E0 F3            .OUT:	LD	(VDP_01),A
     317.  00:4730  F3                  	DI
     318.  00:4731  D3 99               	OUT	($99),A
     319.  00:4733  3E 81               	LD	A,$80+1
     320.  00:4735  FB                  	EI
     321.  00:4736  D3 99               	OUT	($99),A
     322.  00:4738  C9                  	RET
     323.  00:4739                      
     324.  00:4739                      ENASPR:				; Enable Sprites
     325.  00:4739  3A E7 FF            	LD	A,(VDP_08)
     326.  00:473C  E6 FD               	AND	%11111101
     327.  00:473E  18 05               	JR	DISSPR.OUT
     328.  00:4740                      
     329.  00:4740                      DISSPR:				; Disable Sprites
     330.  00:4740  3A E7 FF            	LD	A,(VDP_08)
     331.  00:4743  F6 02               	OR	%00000010
     332.  00:4745  32 E7 FF            .OUT:	LD	(VDP_08),A
     333.  00:4748  F3                  	DI
     334.  00:4749  D3 99               	OUT	($99),A
     335.  00:474B  3E 88               	LD	A,$80+8
     336.  00:474D  FB                  	EI
     337.  00:474E  D3 99               	OUT	($99),A
     338.  00:4750  C9                  	RET
     339.  00:4751                      
     340.  00:4751                      LIN192:				; Set 192 lines
     341.  00:4751  3A E8 FF            	LD	A,(VDP_09)
     342.  00:4754  F6 80               	OR	%10000000
     343.  00:4756  18 05               	JR	LIN212.OUT
     344.  00:4758                      
     345.  00:4758                      LIN212:				; Set 212 lines
     346.  00:4758  3A E8 FF            	LD	A,(VDP_09)
     347.  00:475B  E6 7F               	AND	%01111111
     348.  00:475D  32 E8 FF            .OUT:	LD	(VDP_09),A
     349.  00:4760  F3                  	DI
     350.  00:4761  D3 99               	OUT	($99),A
     351.  00:4763  3E 89               	LD	A,$80+9
     352.  00:4765  FB                  	EI
     353.  00:4766  D3 99               	OUT	($99),A
     354.  00:4768  C9                  	RET
     355.  00:4769                      ;
     356.  00:4769                      ; This lil' routine waits until the VDP is done copying.
     357.  00:4769                      ;
     358.  00:4769                      VDP_Ready:
     359.  00:4769  3E 02                   ld a,2
     360.  00:476B  F3                      di
     361.  00:476C  D3 99                   out (#99),a     ; select s#2
     362.  00:476E  3E 8F                   ld a,15+128
     363.  00:4770  D3 99                   out (#99),a
     364.  00:4772  DB 99                   in a,(#99)
     365.  00:4774  1F                      rra
     366.  00:4775  3E 00                   ld a,0          ; back to s#0, enable ints
     367.  00:4777  D3 99                   out (#99),a
     368.  00:4779  3E 8F                   ld a,15+128
     369.  00:477B  FB                      ei
     370.  00:477C  D3 99                   out (#99),a     ; loop if vdp not ready (CE)
     371.  00:477E  DA 69 47                jp c,VDP_Ready
     372.  00:4781  C9                      ret
     373.  00:4782                      
     374.  00:4782                      ;INPUT: A - ANDY'S MAX ENERGY
     375.  00:4782                      DRAW_ANDY_ENERGY:	
     376.  00:4782  FD 21 0F C0         	LD IY, energyDat
     377.  00:4786  FD 36 00 80             LD (IY + VDP_SX), 128      ; SXL - Tile 2
     378.  00:478A                          ;LD (IY+VDP_SY), 0      ; SYL	
     379.  00:478A                          ;LD (IY + VDP_DX), 0     ; DXL    
     380.  00:478A  FD 36 06 C2             LD (IY + VDP_DY), 194      ; DYL    
     381.  00:478E  21 0F C0                LD HL, energyDat
     382.  00:4791  CD F6 46                CALL VDPCMD
     383.  00:4794  C9                  	ret
      27   00:4795                          include "include\VDP_Data.asm"
       1.  00:4795                      ; VDP COMMAND PARAMETER
       2.  00:4795                      ;                               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:4795                      tileDatROM:                 db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       3.  00:4795  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D0 
       4.  00:47A4                      energyDatROM:               db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, ENERGY_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       4.  00:47A4  00 00 00 01 00 00 00 00 10 00 10 00 00 00 D0 
       5.  00:47B3                      DiagBoxToBackBufROM:        db	0, 0, 192, FRONT_BUFFER, 0, 0, 192, BACK_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       5.  00:47B3  00 00 C0 00 00 00 C0 02 FF 00 14 00 00 00 D0 
       6.  00:47C2                      DiagBoxToFrontkBufROM:      db	0, 0, 192, BACK_BUFFER, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       6.  00:47C2  00 00 C0 02 00 00 C0 00 FF 00 14 00 00 00 D0 
       7.  00:47D1                      DiagBoxClearROM:            db	0, 0, 192, TILES_PAGE, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       7.  00:47D1  00 00 C0 01 00 00 C0 00 FF 00 14 00 00 00 D0 
      28   00:47E0                      ; SFX
      29   00:47E0                          include	"include\PT3_player.s"
       1.  00:47E0                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:47E0                      		; --- Can be assembled with asMSX ---
       3.  00:47E0                      		; --- ROM version: MSX-KUN        ---
       4.  00:47E0                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:47E0                      
       6.  00:47E0                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:47E0                      ;
       8.  00:47E0                      ; This version of the replayer can be used with any note table
       9.  00:47E0                      ; This version also allows the use of PT3 commands
      10.  00:47E0                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:47E0                      ;
      12.  00:47E0                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:47E0                      ;
      14.  00:47E0                      ; ROM LENGTH: 1549 bytes
      15.  00:47E0                      ; RAM LENGTH:  576 bytes
      16.  00:47E0                      
      17.  00:47E0                      
      18.  00:47E0                      
      19.  00:47E0                      ;SJASM version by BTV 2016
      20.  00:47E0                      
      21.  00:47E0                      
      22.  00:47E0                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:47E0                      
      24.  00:47E0                      ;ChannelsVars
      25.  00:47E0                      ;struc	CHNPRM
      26.  00:47E0                      ;reset group
      27.  00:47E0  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:47E0  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:47E0  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:47E0  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:47E0  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:47E0  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:47E0  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:47E0  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:47E0  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:47E0                      ;reset group
      37.  00:47E0                      
      38.  00:47E0  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:47E0                      
      40.  00:47E0                      ;IX for PTDECOD here [+12]
      41.  00:47E0  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:47E0  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:47E0  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:47E0  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:47E0  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:47E0  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:47E0  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:47E0  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:47E0                       ;Enabled - 0,SimpleGliss - 2
      50.  00:47E0  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:47E0  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:47E0  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:47E0  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:47E0  (00:0017)           CHNPRM_Volume	equ 23	;RESB 1
      55.  00:47E0  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:47E0                      ;endstruc
      57.  00:47E0                      
      58.  00:47E0                      ;struc	AR
      59.  00:47E0  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:47E0  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:47E0  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:47E0  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:47E0  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:47E0  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:47E0  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:47E0  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:47E0  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:47E0  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:47E0                      ;endstruc
      70.  00:47E0                      
      71.  00:47E0                      		; --- CODE STARTS HERE ---
      72.  00:47E0                      
      73.  00:47E0  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:47E3  CB FE               		SET	7,[HL]
      75.  00:47E5  CB 46               		BIT	0,[HL]
      76.  00:47E7  C8                  		RET	Z
      77.  00:47E8  E1                  		POP	HL
      78.  00:47E9  21 79 F0            		LD	HL,DelyCnt
      79.  00:47EC  34                  		INC	[HL]
      80.  00:47ED  21 3D F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:47F0  34                  		INC	[HL]
      82.  00:47F1  AF                  PT3_MUTE:	XOR	A
      83.  00:47F2  67                  		LD	H,A
      84.  00:47F3  6F                  		LD	L,A
      85.  00:47F4  32 47 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:47F7  22 48 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:47FA  C3 43 4D            		JP	ROUT_A0
      88.  00:47FD                      
      89.  00:47FD                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:47FD  22 00 F0            		LD [PT3_MODADDR],HL
      91.  00:4800  E5                  		PUSH HL
      92.  00:4801  11 64 00            		LD DE,100
      93.  00:4804  19                  		ADD HL,DE
      94.  00:4805  7E                  		LD A,[HL]
      95.  00:4806  32 1B F0            		LD [PT3_Delay],A
      96.  00:4809  E5                  		PUSH HL
      97.  00:480A  DD E1               		POP IX
      98.  00:480C  19                  		ADD HL,DE
      99.  00:480D  22 02 F0            		LD [PT3_CrPsPtr],HL
     100.  00:4810  DD 5E 02            		LD E,[IX+102-100]
     101.  00:4813  19                  		ADD HL,DE
     102.  00:4814  23                  		INC HL
     103.  00:4815  22 17 F0            		LD [PT3_LPosPtr],HL
     104.  00:4818  D1                  		POP DE
     105.  00:4819  DD 6E 03            		LD L,[IX+103-100]
     106.  00:481C  DD 66 04            		LD H,[IX+104-100]
     107.  00:481F  19                  		ADD HL,DE
     108.  00:4820  22 19 F0            		LD [PT3_PatsPtr],HL
     109.  00:4823  21 A9 00            		LD HL,169
     110.  00:4826  19                  		ADD HL,DE
     111.  00:4827  22 06 F0            		LD [PT3_OrnPtrs],HL
     112.  00:482A  21 69 00            		LD HL,105
     113.  00:482D  19                  		ADD HL,DE
     114.  00:482E  22 04 F0            		LD [PT3_SAMPTRS],HL
     115.  00:4831  21 00 F0            		LD HL,PT3_SETUP
     116.  00:4834  CB BE               		RES 7,[HL]
     117.  00:4836                      
     118.  00:4836                      		; --- note table data depacker ---
     119.  00:4836                      		; Depacks first 12 tones of each tone table
     120.  00:4836                      
     121.  00:4836  11 B7 4D            		LD DE,T_PACK
     122.  00:4839  01 B0 F1            		LD BC,T1_+(2*49)-1
     123.  00:483C  1A                  .TP_0:		LD A,[DE]
     124.  00:483D  13                  		INC DE
     125.  00:483E  FE 1E               		CP 15*2
     126.  00:4840  30 06               		JR NC,.TP_1
     127.  00:4842  67                  		LD H,A
     128.  00:4843  1A                  		LD A,[DE]
     129.  00:4844  6F                  		LD L,A
     130.  00:4845  13                  		INC DE
     131.  00:4846  18 07               		JR .TP_2
     132.  00:4848  D5                  .TP_1:		PUSH DE
     133.  00:4849  16 00               		LD D,0
     134.  00:484B  5F                  		LD E,A
     135.  00:484C  19                  		ADD HL,DE
     136.  00:484D  19                  		ADD HL,DE
     137.  00:484E  D1                  		POP DE
     138.  00:484F  7C                  .TP_2:		LD A,H
     139.  00:4850  02                  		LD [BC],A
     140.  00:4851  0B                  		DEC BC
     141.  00:4852  7D                  		LD A,L
     142.  00:4853  02                  		LD [BC],A
     143.  00:4854  0B                  		DEC BC
     144.  00:4855  D6 F0               		SUB $F0
     145.  00:4857  20 E3               		JR NZ,.TP_0
     146.  00:4859                      
     147.  00:4859                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:4859  21 22 F0            		LD HL,VARS
     149.  00:485C  77                  		LD [HL],A
     150.  00:485D  11 23 F0            		LD DE,VARS+1
     151.  00:4860  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:4863  ED B0               		LDIR
     153.  00:4865                      
     154.  00:4865  3C                  		INC A
     155.  00:4866  32 79 F0            		LD [DelyCnt],A
     156.  00:4869  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:486C  22 3D F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:486F  22 5A F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4872  22 77 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:4875                      
     161.  00:4875  21 B3 4D            		LD HL,EMPTYSAMORN
     162.  00:4878  22 11 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:487B  22 2F F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:487E  22 4C F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:4881  22 69 F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:4884                      
     167.  00:4884  22 31 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:4887  22 4E F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:488A  22 6B F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:488D                      					    ;also EMPTYSAMORN comment
     171.  00:488D                      
     172.  00:488D                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:488D  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:4890  17                  		RLA
     175.  00:4891  E6 07               		AND 7
     176.  00:4893  21 63 4D            		LD HL,NT_DATA
     177.  00:4896  D5                  		PUSH DE
     178.  00:4897  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:4898  87                  		ADD A,A
     180.  00:4899  5F                  		LD E,A
     181.  00:489A  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:489B  5E                  		LD E,[HL]
     183.  00:489C  23                  		INC HL
     184.  00:489D  CB 3B               		SRL E
     185.  00:489F  9F                  		SBC A,A
     186.  00:48A0  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:48A2  32 20 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:48A5  3E C9               		LD A,$C9		; RET CODE
     189.  00:48A7  32 21 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:48AA  EB                  		EX DE,HL
     191.  00:48AB  C1                  		POP BC ;BC=T1_
     192.  00:48AC  09                  		ADD HL,BC
     193.  00:48AD                      
     194.  00:48AD  1A                  		LD A,[DE]                           
     195.  00:48AE                      
     196.  00:48AE  01 73 4D            		LD BC,T_
     197.  00:48B1  81                  		ADD A,C
     198.  00:48B2  4F                  		LD C,A
     199.  00:48B3  88                  		ADC A,B
     200.  00:48B4                      
     201.  00:48B4  91                  		SUB C
     202.  00:48B5  47                  		LD B,A
     203.  00:48B6  C5                  		PUSH BC
     204.  00:48B7  11 7F F0            		LD DE,NT_
     205.  00:48BA  D5                  		PUSH DE
     206.  00:48BB                      
     207.  00:48BB  06 0C               		LD B,12
     208.  00:48BD  C5                  .L1:		PUSH BC
     209.  00:48BE  4E                  		LD C,[HL]
     210.  00:48BF  23                  		INC HL
     211.  00:48C0  E5                  		PUSH HL
     212.  00:48C1  46                  		LD B,[HL]
     213.  00:48C2                      
     214.  00:48C2  D5                  		PUSH DE
     215.  00:48C3  EB                  		EX DE,HL
     216.  00:48C4  11 17 00            		LD DE,23
     217.  00:48C7  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:48CA                      
     219.  00:48CA  CB 38               .L2:		SRL B
     220.  00:48CC  CB 19               		RR C
     221.  00:48CE  CD 20 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:48D1  79                  		LD A,C
     223.  00:48D2  8A                  		ADC A,D	;=ADC 0
     224.  00:48D3  77                  		LD [HL],A
     225.  00:48D4  23                  		INC HL
     226.  00:48D5  78                  		LD A,B
     227.  00:48D6  8A                  		ADC A,D
     228.  00:48D7  77                  		LD [HL],A
     229.  00:48D8  19                  		ADD HL,DE
     230.  00:48D9  DD 25               		db $DD,$25	;DEC XH
     231.  00:48DB  20 ED               		JR NZ,.L2
     232.  00:48DD                      
     233.  00:48DD  D1                  		POP DE
     234.  00:48DE  13                  		INC DE
     235.  00:48DF  13                  		INC DE
     236.  00:48E0  E1                  		POP HL
     237.  00:48E1  23                  		INC HL
     238.  00:48E2  C1                  		POP BC
     239.  00:48E3  10 D8               		DJNZ .L1
     240.  00:48E5                      
     241.  00:48E5  E1                  		POP HL
     242.  00:48E6  D1                  		POP DE
     243.  00:48E7                      
     244.  00:48E7  7B                  		LD A,E
     245.  00:48E8  D5                  		PUSH DE
     246.  00:48E9  11 7F 4D            		LD DE,TCOLD_1
     247.  00:48EC  BB                  		CP E
     248.  00:48ED  D1                  		POP DE
     249.  00:48EE  20 05               		JR NZ,.CORR_1
     250.  00:48F0  3E FD               		LD A,$FD
     251.  00:48F2  32 AD F0            		LD [NT_+$2E],A
     252.  00:48F5                      
     253.  00:48F5  1A                  .CORR_1:	LD A,[DE]
     254.  00:48F6  A7                  		AND A
     255.  00:48F7  28 11               		JR Z,.TC_EXIT
     256.  00:48F9  1F                  		RRA
     257.  00:48FA  F5                  		PUSH AF
     258.  00:48FB  87                  		ADD A,A
     259.  00:48FC  4F                  		LD C,A
     260.  00:48FD  09                  		ADD HL,BC
     261.  00:48FE  F1                  		POP AF
     262.  00:48FF  30 02               		JR NC,.CORR_2
     263.  00:4901  35                  		DEC [HL]
     264.  00:4902  35                  		DEC [HL]
     265.  00:4903  34                  .CORR_2:	INC [HL]
     266.  00:4904  A7                  		AND A
     267.  00:4905  ED 42               		SBC HL,BC
     268.  00:4907  13                  		INC DE
     269.  00:4908  18 EB               		JR .CORR_1
     270.  00:490A                      
     271.  00:490A                      .TC_EXIT:	;POP AF
     272.  00:490A                      
     273.  00:490A                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:490A  21 11 00            		ld	hl,$11
     275.  00:490D  54                  		ld	d,h
     276.  00:490E  5C                  		ld	e,h
     277.  00:490F  DD 21 4F F1         		ld	IX,VT_+16
     278.  00:4913  06 0F               		ld	b,15
     279.  00:4915  E5                  .INITV1:	push	hl
     280.  00:4916  19                  		add	hl,de
     281.  00:4917  EB                  		ex	de,hl
     282.  00:4918  ED 62               		sbc	hl,hl
     283.  00:491A  48                  		ld	c,b
     284.  00:491B  06 10               		ld	b,16
     285.  00:491D  7D                  .INITV2:	ld	a,l
     286.  00:491E  17                  		rla
     287.  00:491F  7C                  		ld	a,h
     288.  00:4920  CE 00               		adc	a,0
     289.  00:4922  DD 77 00            		ld	[ix],a
     290.  00:4925  DD 23               		inc	ix
     291.  00:4927  19                  		add	hl,de
     292.  00:4928  10 F3               		djnz	.INITV2
     293.  00:492A  E1                  		pop	hl
     294.  00:492B  7B                  		ld	a,e
     295.  00:492C  FE 77               		cp	$77
     296.  00:492E  20 01               		jr	nz,.INITV3
     297.  00:4930  1C                  		inc	e
     298.  00:4931  41                  .INITV3:	ld	b,c
     299.  00:4932  10 E1               		djnz	.INITV1
     300.  00:4934                      
     301.  00:4934  C9                  		RET
     302.  00:4935                      
     303.  00:4935                      		;pattern decoder
     304.  00:4935  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:4939  CD BF 4A            		CALL SETORN
     306.  00:493C  0A                  		LD A,[BC]
     307.  00:493D  03                  		INC BC
     308.  00:493E  0F                  		RRCA
     309.  00:493F                      
     310.  00:493F  87                  PD_SAM:		ADD A,A
     311.  00:4940  5F                  PD_SAM_:	LD E,A
     312.  00:4941  16 00               		LD D,0
     313.  00:4943  2A 04 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:4946  19                  		ADD HL,DE
     315.  00:4947  5E                  		LD E,[HL]
     316.  00:4948  23                  		INC HL
     317.  00:4949  56                  		LD D,[HL]
     318.  00:494A  2A 00 F0            		LD HL,[PT3_MODADDR]
     319.  00:494D  19                  		ADD HL,DE
     320.  00:494E  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:4951  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:4954  18 41               		JR PD_LOOP
     323.  00:4956                      
     324.  00:4956  07                  PD_VOL:		RLCA
     325.  00:4957  07                  		RLCA
     326.  00:4958  07                  		RLCA
     327.  00:4959  07                  		RLCA
     328.  00:495A  DD 77 0B            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:495D  18 3B               		JR PD_LP2
     330.  00:495F                      	
     331.  00:495F  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:4962  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:4965  18 33               		JR PD_LP2
     334.  00:4967                      
     335.  00:4967  3D                  PD_SorE:	DEC A
     336.  00:4968  20 07               		JR NZ,PD_ENV
     337.  00:496A  0A                  		LD A,[BC]
     338.  00:496B  03                  		INC BC
     339.  00:496C  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:496F  18 29               		JR PD_LP2
     341.  00:4971                      
     342.  00:4971  CD A3 4A            PD_ENV:		CALL SETENV
     343.  00:4974  18 24               		JR PD_LP2
     344.  00:4976                      
     345.  00:4976  CD BF 4A            PD_ORN:		CALL SETORN
     346.  00:4979  18 1C               		JR PD_LOOP
     347.  00:497B                             
     348.  00:497B  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:497E  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4981  C4 A3 4A            		CALL NZ,SETENV
     351.  00:4984  0A                  		LD A,[BC]
     352.  00:4985  03                  		INC BC
     353.  00:4986  18 B8               		JR PD_SAM_
     354.  00:4988                      
     355.  00:4988  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:498B  32 0E F0            		LD [PT3_PrNote],A
     357.  00:498E  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4991  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4994  22 0F F0            		LD [PT3_PrSlide],HL
     360.  00:4997                      
     361.  00:4997  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:499A  0A                  PD_LP2:		LD A,[BC]
     363.  00:499B  03                  		INC BC
     364.  00:499C  83                  		ADD A,E
     365.  00:499D  38 96               		JR C,PD_OrSm
     366.  00:499F  82                  		ADD A,D
     367.  00:49A0  28 4A               		JR Z,PD_FIN
     368.  00:49A2  38 9B               		JR C,PD_SAM
     369.  00:49A4  83                  		ADD A,E
     370.  00:49A5  28 25               		JR Z,PD_REL
     371.  00:49A7  38 AD               		JR C,PD_VOL
     372.  00:49A9  83                  		ADD A,E
     373.  00:49AA  28 B3               		JR Z,PD_EOff
     374.  00:49AC  38 B9               		JR C,PD_SorE
     375.  00:49AE  C6 60               		ADD A,96
     376.  00:49B0  38 20               		JR C,PD_NOTE
     377.  00:49B2  83                  		ADD A,E
     378.  00:49B3  38 C1               		JR C,PD_ORN
     379.  00:49B5  82                  		ADD A,D
     380.  00:49B6  38 0F               		JR C,PD_NOIS
     381.  00:49B8  83                  		ADD A,E
     382.  00:49B9  38 C0               		JR C,PD_ESAM
     383.  00:49BB  87                  		ADD A,A
     384.  00:49BC  5F                  		LD E,A
     385.  00:49BD  21 F8 29            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:49C0  19                  		ADD HL,DE
     387.  00:49C1  5E                  		LD E,[HL]
     388.  00:49C2  23                  		INC HL
     389.  00:49C3  56                  		LD D,[HL]
     390.  00:49C4  D5                  		PUSH DE
     391.  00:49C5  18 D0               		JR PD_LOOP
     392.  00:49C7                      
     393.  00:49C7  32 7D F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:49CA  18 CE               		JR PD_LP2
     395.  00:49CC                      
     396.  00:49CC  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:49D0  18 08               		JR PD_RES
     398.  00:49D2                      	
     399.  00:49D2  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:49D5  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:49D9  AF                  		XOR A
     402.  00:49DA                      
     403.  00:49DA  ED 73 08 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:49DE  DD F9               		LD SP,IX
     405.  00:49E0  67                  		LD H,A
     406.  00:49E1  6F                  		LD L,A
     407.  00:49E2  E5                  		PUSH HL
     408.  00:49E3  E5                  		PUSH HL
     409.  00:49E4  E5                  		PUSH HL
     410.  00:49E5  E5                  		PUSH HL
     411.  00:49E6  E5                  		PUSH HL
     412.  00:49E7  E5                  		PUSH HL
     413.  00:49E8  ED 7B 08 F0         		LD SP,[PT3_PDSP]
     414.  00:49EC                      
     415.  00:49EC  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:49EF  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:49F2  C9                  		RET
     418.  00:49F3                      
     419.  00:49F3  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:49F7  0A                  		LD A,[BC]
     421.  00:49F8  03                  		INC BC
     422.  00:49F9                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:49F9                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:49F9  03                  		INC BC
     425.  00:49FA  03                  		INC BC
     426.  00:49FB  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:49FE  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:4A01  11 7F F0            		LD DE,NT_
     429.  00:4A04  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:4A07  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:4A0A  87                  		ADD A,A
     432.  00:4A0B  6F                  		LD L,A
     433.  00:4A0C  26 00               		LD H,0
     434.  00:4A0E  19                  		ADD HL,DE
     435.  00:4A0F  7E                  		LD A,[HL]
     436.  00:4A10  23                  		INC HL
     437.  00:4A11  66                  		LD H,[HL]
     438.  00:4A12  6F                  		LD L,A
     439.  00:4A13  E5                  		PUSH HL
     440.  00:4A14  3A 0E F0            		LD A,[PT3_PrNote]
     441.  00:4A17  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:4A1A  87                  		ADD A,A
     443.  00:4A1B  6F                  		LD L,A
     444.  00:4A1C  26 00               		LD H,0
     445.  00:4A1E  19                  		ADD HL,DE
     446.  00:4A1F  5E                  		LD E,[HL]
     447.  00:4A20  23                  		INC HL
     448.  00:4A21  56                  		LD D,[HL]
     449.  00:4A22  E1                  		POP HL
     450.  00:4A23  ED 52               		SBC HL,DE
     451.  00:4A25  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:4A28  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:4A2B  ED 5B 0F F0         		LD DE,[PT3_PrSlide]
     454.  00:4A2F  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4A32  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4A35  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4A36  03                  		INC BC
     458.  00:4A37  08                  		EX AF,AF'
     459.  00:4A38  0A                  		LD A,[BC]
     460.  00:4A39  03                  		INC BC
     461.  00:4A3A  A7                  		AND A
     462.  00:4A3B  28 01               		JR Z,.NOSIG
     463.  00:4A3D  EB                  		EX DE,HL
     464.  00:4A3E  ED 52               .NOSIG:	SBC HL,DE
     465.  00:4A40  F2 48 4A            		JP P,SET_STP
     466.  00:4A43  2F                  		CPL
     467.  00:4A44  08                  		EX AF,AF'
     468.  00:4A45  ED 44               		NEG
     469.  00:4A47  08                  		EX AF,AF'
     470.  00:4A48  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:4A4B  08                  		EX AF,AF'
     472.  00:4A4C  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:4A4F  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4A53  C9                  		RET
     475.  00:4A54                      
     476.  00:4A54  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4A58  0A                  		LD A,[BC]
     478.  00:4A59  03                  		INC BC
     479.  00:4A5A  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:4A5D  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:4A60  0A                  		LD A,[BC]
     482.  00:4A61  03                  		INC BC
     483.  00:4A62  08                  		EX AF,AF'
     484.  00:4A63  0A                  		LD A,[BC]
     485.  00:4A64  03                  		INC BC
     486.  00:4A65  18 E1               		JR SET_STP
     487.  00:4A67                      
     488.  00:4A67  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4A68  03                  		INC BC
     490.  00:4A69  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:4A6C  C9                  		RET
     492.  00:4A6D                      
     493.  00:4A6D  0A                  C_ORPOS:	LD A,[BC]
     494.  00:4A6E  03                  		INC BC
     495.  00:4A6F  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4A72  C9                  		RET
     497.  00:4A73                      
     498.  00:4A73  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4A74  03                  		INC BC
     500.  00:4A75  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4A78  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:4A7B  0A                  		LD A,[BC]
     503.  00:4A7C  03                  		INC BC
     504.  00:4A7D  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:4A80  AF                  		XOR A
     506.  00:4A81  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4A84  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4A87  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4A8A  C9                  		RET
     510.  00:4A8B                      
     511.  00:4A8B  0A                  C_ENGLS:	LD A,[BC]
     512.  00:4A8C  03                  		INC BC
     513.  00:4A8D  32 1D F0            		LD [PT3_Env_Del],A
     514.  00:4A90  32 7C F0            		LD [CurEDel],A
     515.  00:4A93  0A                  		LD A,[BC]
     516.  00:4A94  03                  		INC BC
     517.  00:4A95  6F                  		LD L,A
     518.  00:4A96  0A                  		LD A,[BC]
     519.  00:4A97  03                  		INC BC
     520.  00:4A98  67                  		LD H,A
     521.  00:4A99  22 1E F0            		LD [PT3_ESldAdd],HL
     522.  00:4A9C  C9                  		RET
     523.  00:4A9D                      
     524.  00:4A9D  0A                  C_DELAY:	LD A,[BC]
     525.  00:4A9E  03                  		INC BC
     526.  00:4A9F  32 1B F0            		LD [PT3_Delay],A
     527.  00:4AA2  C9                  		RET
     528.  00:4AA3                      	
     529.  00:4AA3  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4AA6  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:4AA9  0A                  		LD A,[BC]
     532.  00:4AAA  03                  		INC BC
     533.  00:4AAB  67                  		LD H,A
     534.  00:4AAC  0A                  		LD A,[BC]
     535.  00:4AAD  03                  		INC BC
     536.  00:4AAE  6F                  		LD L,A
     537.  00:4AAF  22 4D F1            		LD [EnvBase],HL
     538.  00:4AB2  AF                  		XOR A
     539.  00:4AB3  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4AB6  32 7C F0            		LD [CurEDel],A
     541.  00:4AB9  67                  		LD H,A
     542.  00:4ABA  6F                  		LD L,A
     543.  00:4ABB  22 7A F0            		LD [CurESld],HL
     544.  00:4ABE  C9                  C_NOP:		RET
     545.  00:4ABF                      
     546.  00:4ABF  87                  SETORN:		ADD A,A
     547.  00:4AC0  5F                  		LD E,A
     548.  00:4AC1  16 00               		LD D,0
     549.  00:4AC3  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4AC6  2A 06 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:4AC9  19                  		ADD HL,DE
     552.  00:4ACA  5E                  		LD E,[HL]
     553.  00:4ACB  23                  		INC HL
     554.  00:4ACC  56                  		LD D,[HL]
     555.  00:4ACD  2A 00 F0            		LD HL,[PT3_MODADDR]
     556.  00:4AD0  19                  		ADD HL,DE
     557.  00:4AD1  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:4AD4  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:4AD7  C9                  		RET
     560.  00:4AD8                      
     561.  00:4AD8                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:4AD8  BE 4A               SPCCOMS:	dw C_NOP
     563.  00:4ADA  54 4A               		dw C_GLISS
     564.  00:4ADC  F3 49               		dw C_PORTM
     565.  00:4ADE  67 4A               		dw C_SMPOS
     566.  00:4AE0  6D 4A               		dw C_ORPOS
     567.  00:4AE2  73 4A               		dw C_VIBRT
     568.  00:4AE4  BE 4A               		dw C_NOP
     569.  00:4AE6  BE 4A               		dw C_NOP
     570.  00:4AE8  8B 4A               		dw C_ENGLS
     571.  00:4AEA  9D 4A               		dw C_DELAY
     572.  00:4AEC  BE 4A               		dw C_NOP
     573.  00:4AEE  BE 4A               		dw C_NOP
     574.  00:4AF0  BE 4A               		dw C_NOP
     575.  00:4AF2  BE 4A               		dw C_NOP
     576.  00:4AF4  BE 4A               		dw C_NOP
     577.  00:4AF6  BE 4A               		dw C_NOP
     578.  00:4AF8                      
     579.  00:4AF8  AF                  CHREGS:		XOR A
     580.  00:4AF9  32 49 F1            		LD [AYREGS+AR_AmplC],A
     581.  00:4AFC  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:4B00  E5                  		PUSH HL
     583.  00:4B01  CA 27 4C            		JP Z,.CH_EXIT
     584.  00:4B04  ED 73 0A F0         		LD [PT3_CSP],SP
     585.  00:4B08  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:4B0B  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:4B0E  F9                  		LD SP,HL
     588.  00:4B0F  D1                  		POP DE
     589.  00:4B10  67                  		LD H,A
     590.  00:4B11  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:4B14  6F                  		LD L,A
     592.  00:4B15  39                  		ADD HL,SP
     593.  00:4B16  3C                  		INC A
     594.  00:4B17  BA                  		CP D
     595.  00:4B18  38 01               		JR C,.CH_ORPS
     596.  00:4B1A  7B                  		LD A,E
     597.  00:4B1B  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:4B1E  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:4B21  86                  		ADD A,[HL]
     600.  00:4B22  F2 26 4B            		JP P,.CH_NTP
     601.  00:4B25  AF                  		XOR A
     602.  00:4B26  FE 60               .CH_NTP:	CP 96
     603.  00:4B28  38 02               		JR C,.CH_NOK
     604.  00:4B2A  3E 5F               		LD A,95
     605.  00:4B2C  87                  .CH_NOK:	ADD A,A
     606.  00:4B2D  08                  		EX AF,AF'
     607.  00:4B2E  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4B31  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4B34  F9                  		LD SP,HL
     610.  00:4B35  D1                  		POP DE
     611.  00:4B36  26 00               		LD H,0
     612.  00:4B38  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4B3B  47                  		LD B,A
     614.  00:4B3C  87                  		ADD A,A
     615.  00:4B3D  87                  		ADD A,A
     616.  00:4B3E  6F                  		LD L,A
     617.  00:4B3F  39                  		ADD HL,SP
     618.  00:4B40  F9                  		LD SP,HL
     619.  00:4B41  78                  		LD A,B
     620.  00:4B42  3C                  		INC A
     621.  00:4B43  BA                  		CP D
     622.  00:4B44  38 01               		JR C,.CH_SMPS
     623.  00:4B46  7B                  		LD A,E
     624.  00:4B47  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4B4A  C1                  		POP BC
     626.  00:4B4B  E1                  		POP HL
     627.  00:4B4C  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4B4F  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4B52  19                  		ADD HL,DE
     630.  00:4B53  CB 70               		BIT 6,B
     631.  00:4B55  28 06               		JR Z,.CH_NOAC
     632.  00:4B57  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4B5A  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4B5D  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4B5E  08                  		EX AF,AF'
     636.  00:4B5F  6F                  		LD L,A
     637.  00:4B60  26 00               		LD H,0
     638.  00:4B62  31 7F F0            		LD SP,NT_
     639.  00:4B65  39                  		ADD HL,SP
     640.  00:4B66  F9                  		LD SP,HL
     641.  00:4B67  E1                  		POP HL
     642.  00:4B68  19                  		ADD HL,DE
     643.  00:4B69  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4B6C  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4B6F  19                  		ADD HL,DE
     646.  00:4B70  ED 7B 0A F0         		LD SP,[PT3_CSP]
     647.  00:4B74  E3                  		EX [SP],HL
     648.  00:4B75  AF                  		XOR A
     649.  00:4B76  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4B79  28 3E               		JR Z,.CH_AMP
     651.  00:4B7B  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4B7E  20 39               		JR NZ,.CH_AMP
     653.  00:4B80  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4B83  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4B86  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4B89  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4B8C  7C                  		LD A,H
     658.  00:4B8D  19                  		ADD HL,DE
     659.  00:4B8E  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4B91  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4B94  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4B98  20 1F               		JR NZ,.CH_AMP
     663.  00:4B9A  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4B9D  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4BA0  A7                  		AND A
     666.  00:4BA1  28 01               		JR Z,.CH_STPP
     667.  00:4BA3  EB                  		EX DE,HL
     668.  00:4BA4  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4BA6  FA B9 4B            		JP M,.CH_AMP
     670.  00:4BA9  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4BAC  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4BAF  AF                  		XOR A
     673.  00:4BB0  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4BB3  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4BB6  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4BB9  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4BBC  CB 79               		BIT 7,C
     678.  00:4BBE  28 13               		JR Z,.CH_NOAM
     679.  00:4BC0  CB 71               		BIT 6,C
     680.  00:4BC2  28 07               		JR Z,.CH_AMIN
     681.  00:4BC4  FE 0F               		CP 15
     682.  00:4BC6  28 0B               		JR Z,.CH_NOAM
     683.  00:4BC8  3C                  		INC A
     684.  00:4BC9  18 05               		JR .CH_SVAM
     685.  00:4BCB  FE F1               .CH_AMIN:	CP -15
     686.  00:4BCD  28 04               		JR Z,.CH_NOAM
     687.  00:4BCF  3D                  		DEC A
     688.  00:4BD0  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4BD3  6F                  .CH_NOAM:	LD L,A
     690.  00:4BD4  78                  		LD A,B
     691.  00:4BD5  E6 0F               		AND 15
     692.  00:4BD7  85                  		ADD A,L
     693.  00:4BD8  F2 DC 4B            		JP P,.CH_APOS
     694.  00:4BDB  AF                  		XOR A
     695.  00:4BDC  FE 10               .CH_APOS:	CP 16
     696.  00:4BDE  38 02               		JR C,.CH_VOL
     697.  00:4BE0  3E 0F               		LD A,15
     698.  00:4BE2  DD B6 17            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4BE5  6F                  		LD L,A
     700.  00:4BE6  26 00               		LD H,0
     701.  00:4BE8  11 3F F1            		LD DE,VT_
     702.  00:4BEB  19                  		ADD HL,DE
     703.  00:4BEC  7E                  		LD A,[HL]
     704.  00:4BED  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4BEF  20 03               		JR NZ,.CH_NOEN
     706.  00:4BF1  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4BF4  32 49 F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4BF7  CB 78               		BIT 7,B
     709.  00:4BF9  79                  		LD A,C
     710.  00:4BFA  28 19               		JR Z,.NO_ENSL
     711.  00:4BFC  17                  		RLA
     712.  00:4BFD  17                  		RLA
     713.  00:4BFE  CB 2F               		SRA A
     714.  00:4C00  CB 2F               		SRA A
     715.  00:4C02  CB 2F               		SRA A
     716.  00:4C04  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4C07  CB 68               		BIT 5,B
     718.  00:4C09  28 03               		JR Z,.NO_ENAC
     719.  00:4C0B  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4C0E  21 1C F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4C11  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4C12                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4C12  77                  		LD [HL],A
     724.  00:4C13  18 0E               		JR .CH_MIX
     725.  00:4C15  1F                  .NO_ENSL:	RRA
     726.  00:4C16  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4C19  32 7E F0            		LD [AddToNs],A
     728.  00:4C1C  CB 68               		BIT 5,B
     729.  00:4C1E  28 03               		JR Z,.CH_MIX
     730.  00:4C20  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4C23  78                  .CH_MIX:	LD A,B
     732.  00:4C24  1F                  		RRA
     733.  00:4C25  E6 48               		AND $48
     734.  00:4C27  21 46 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4C2A  B6                  		OR [HL]
     736.  00:4C2B  0F                  		RRCA
     737.  00:4C2C  77                  		LD [HL],A
     738.  00:4C2D  E1                  		POP HL
     739.  00:4C2E  AF                  		XOR A
     740.  00:4C2F  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4C32  C8                  		RET Z
     742.  00:4C33  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4C36  C0                  		RET NZ
     744.  00:4C37  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4C3A  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4C3D  1F                  		RRA
     747.  00:4C3E  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4C41  38 03               		JR C,.CH_ONDL
     749.  00:4C43  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4C46  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4C49  C9                  		RET
     752.  00:4C4A                      
     753.  00:4C4A  AF                  PT3_PLAY:	XOR A
     754.  00:4C4B  32 1C F0            		LD [PT3_AddToEn],A
     755.  00:4C4E  32 46 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:4C51  3D                  		DEC A
     757.  00:4C52  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:4C55  21 79 F0            		LD HL,DelyCnt
     759.  00:4C58  35                  		DEC [HL]
     760.  00:4C59  C2 E0 4C            		JP NZ,.PL2
     761.  00:4C5C  21 3D F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4C5F  35                  		DEC [HL]
     763.  00:4C60  20 4E               		JR NZ,.PL1B
     764.  00:4C62  ED 4B 11 F0         		LD BC,[PT3_AdInPtA]
     765.  00:4C66  0A                  		LD A,[BC]
     766.  00:4C67  A7                  		AND A
     767.  00:4C68  20 3B               		JR NZ,.PL1A
     768.  00:4C6A  57                  		LD D,A
     769.  00:4C6B  32 7D F0            		LD [Ns_Base],A
     770.  00:4C6E  2A 02 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:4C71  23                  		INC HL
     772.  00:4C72  7E                  		LD A,[HL]
     773.  00:4C73  3C                  		INC A
     774.  00:4C74  20 08               		JR NZ,.PLNLP
     775.  00:4C76  CD E0 47            		CALL CHECKLP
     776.  00:4C79  2A 17 F0            		LD HL,[PT3_LPosPtr]
     777.  00:4C7C  7E                  		LD A,[HL]
     778.  00:4C7D  3C                  		INC A
     779.  00:4C7E  22 02 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4C81  3D                  		DEC A
     781.  00:4C82  87                  		ADD A,A
     782.  00:4C83  5F                  		LD E,A
     783.  00:4C84  CB 12               		RL D
     784.  00:4C86  2A 19 F0            		LD HL,[PT3_PatsPtr]
     785.  00:4C89  19                  		ADD HL,DE
     786.  00:4C8A  ED 5B 00 F0         		LD DE,[PT3_MODADDR]
     787.  00:4C8E  ED 73 0C F0         		LD [PT3_PSP],SP
     788.  00:4C92  F9                  		LD SP,HL
     789.  00:4C93  E1                  		POP HL
     790.  00:4C94  19                  		ADD HL,DE
     791.  00:4C95  44                  		LD B,H
     792.  00:4C96  4D                  		LD C,L
     793.  00:4C97  E1                  		POP HL
     794.  00:4C98  19                  		ADD HL,DE
     795.  00:4C99  22 13 F0            		LD [PT3_AdInPtB],HL
     796.  00:4C9C  E1                  		POP HL
     797.  00:4C9D  19                  		ADD HL,DE
     798.  00:4C9E  22 15 F0            		LD [PT3_AdInPtC],HL
     799.  00:4CA1  ED 7B 0C F0         		LD SP,[PT3_PSP]
     800.  00:4CA5                      
     801.  00:4CA5  DD 21 2E F0         .PL1A:		LD IX,ChanA+12
     802.  00:4CA9  CD 88 49            		CALL PTDECOD
     803.  00:4CAC  ED 43 11 F0         		LD [PT3_AdInPtA],BC
     804.  00:4CB0                      
     805.  00:4CB0  21 5A F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4CB3  35                  		DEC [HL]
     807.  00:4CB4  20 0F               		JR NZ,.PL1C
     808.  00:4CB6  DD 21 4B F0         		LD IX,ChanB+12
     809.  00:4CBA  ED 4B 13 F0         		LD BC,[PT3_AdInPtB]
     810.  00:4CBE  CD 88 49            		CALL PTDECOD
     811.  00:4CC1  ED 43 13 F0         		LD [PT3_AdInPtB],BC
     812.  00:4CC5                      
     813.  00:4CC5  21 77 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4CC8  35                  		DEC [HL]
     815.  00:4CC9  20 0F               		JR NZ,.PL1D
     816.  00:4CCB  DD 21 68 F0         		LD IX,ChanC+12
     817.  00:4CCF  ED 4B 15 F0         		LD BC,[PT3_AdInPtC]
     818.  00:4CD3  CD 88 49            		CALL PTDECOD
     819.  00:4CD6  ED 43 15 F0         		LD [PT3_AdInPtC],BC
     820.  00:4CDA                      
     821.  00:4CDA  3A 1B F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:4CDD  32 79 F0            		LD [DelyCnt],A
     823.  00:4CE0                      
     824.  00:4CE0  DD 21 22 F0         .PL2:		LD IX,ChanA
     825.  00:4CE4  2A 3F F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:4CE7  CD F8 4A            		CALL CHREGS
     827.  00:4CEA  22 3F F1            		LD [AYREGS+AR_TonA],HL
     828.  00:4CED  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:4CF0  32 47 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:4CF3  DD 21 3F F0         		LD IX,ChanB
     831.  00:4CF7  2A 41 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:4CFA  CD F8 4A            		CALL CHREGS
     833.  00:4CFD  22 41 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:4D00  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:4D03  32 48 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:4D06  DD 21 5C F0         		LD IX,ChanC
     837.  00:4D0A  2A 43 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:4D0D  CD F8 4A            		CALL CHREGS
     839.  00:4D10  22 43 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:4D13                      
     841.  00:4D13  2A 7D F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:4D16  7C                  		LD A,H
     843.  00:4D17  85                  		ADD A,L
     844.  00:4D18  32 45 F1            		LD [AYREGS+AR_Noise],A
     845.  00:4D1B                      
     846.  00:4D1B  3A 1C F0            		LD A,[PT3_AddToEn]
     847.  00:4D1E  5F                  		LD E,A
     848.  00:4D1F  87                  		ADD A,A
     849.  00:4D20  9F                  		SBC A,A
     850.  00:4D21  57                  		LD D,A
     851.  00:4D22  2A 4D F1            		LD HL,[EnvBase]
     852.  00:4D25  19                  		ADD HL,DE
     853.  00:4D26  ED 5B 7A F0         		LD DE,[CurESld]
     854.  00:4D2A  19                  		ADD HL,DE
     855.  00:4D2B  22 4A F1            		LD [AYREGS+AR_Env],HL
     856.  00:4D2E                      
     857.  00:4D2E  AF                  		XOR A
     858.  00:4D2F  21 7C F0            		LD HL,CurEDel
     859.  00:4D32  B6                  		OR [HL]
     860.  00:4D33  C8                  		RET Z
     861.  00:4D34  35                  		DEC [HL]
     862.  00:4D35  C0                  		RET NZ
     863.  00:4D36  3A 1D F0            		LD A,[PT3_Env_Del]
     864.  00:4D39  77                  		LD [HL],A
     865.  00:4D3A  2A 1E F0            		LD HL,[PT3_ESldAdd]
     866.  00:4D3D  19                  		ADD HL,DE
     867.  00:4D3E  22 7A F0            		LD [CurESld],HL
     868.  00:4D41  C9                  		RET
     869.  00:4D42                      
     870.  00:4D42  AF                  PT3_ROUT:	XOR A
     871.  00:4D43                      	
     872.  00:4D43                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:4D43  21 46 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:4D46  CB FE               		set	7,[hl]
     875.  00:4D48  CB B6               		res	6,[hl]
     876.  00:4D4A                      
     877.  00:4D4A  0E A0               		LD C,$A0
     878.  00:4D4C  21 3F F1            		LD HL,AYREGS
     879.  00:4D4F  ED 79               .LOUT:		OUT [C],A
     880.  00:4D51  0C                  		INC C
     881.  00:4D52  ED A3               		OUTI 
     882.  00:4D54  0D                  		DEC C
     883.  00:4D55  3C                  		INC A
     884.  00:4D56  FE 0D               		CP 13
     885.  00:4D58  20 F5               		JR NZ,.LOUT
     886.  00:4D5A  ED 79               		OUT [C],A
     887.  00:4D5C  7E                  		LD A,[HL]
     888.  00:4D5D  A7                  		AND A
     889.  00:4D5E  F8                  		RET M
     890.  00:4D5F  0C                  		INC C
     891.  00:4D60  ED 79               		OUT [C],A
     892.  00:4D62  C9                  		RET
     893.  00:4D63                      
     894.  00:4D63  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:4D64  2A                  		db TCNEW_0-T_
     896.  00:4D65  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:4D66  00                  		db TCOLD_0-T_
     898.  00:4D67  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:4D68  0C                  		db TCNEW_1-T_
     900.  00:4D69  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:4D6A  0C                  		db TCOLD_1-T_
     902.  00:4D6B  94                  		db (T_NEW_2-T1_)*2
     903.  00:4D6C  35                  		db TCNEW_2-T_
     904.  00:4D6D  30                  		db (T_OLD_2-T1_)*2
     905.  00:4D6E  0E                  		db TCOLD_2-T_
     906.  00:4D6F  60                  		db (T_NEW_3-T1_)*2
     907.  00:4D70  20                  		db TCNEW_3-T_
     908.  00:4D71  60                  		db (T_OLD_3-T1_)*2
     909.  00:4D72  21                  		db TCOLD_3-T_
     910.  00:4D73                      
     911.  00:4D73                      T_:
     912.  00:4D73                      
     913.  00:4D73                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:4D73  01 05 09 0B 0D 0F 13 15 
     914.  00:4D7B  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:4D7F                      TCNEW_1:	
     916.  00:4D7F  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:4D81                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:4D81  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:4D8A                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:4D8A  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:4D93  57                  TCNEW_3:	db $56+1
     920.  00:4D94                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:4D94  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:4D9D                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:4D9D  1D 21 23 27 2B 2D 31 55 
     922.  00:4DA5  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:4DA8                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:4DA8  1B 21 25 29 2B 3B 4D 5F 
     924.  00:4DB0  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:4DB3                      
     926.  00:4DB3  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:4DB7                      
     928.  00:4DB7                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:4DB7  0D                  		db ($06EC*2)/256
     930.  00:4DB8  D8                  		db #d8
     931.  00:4DB9  69                  		db $0755-$06EC
     932.  00:4DBA  70                  		db $07C5-$0755
     933.  00:4DBB  76                  		db $083B-$07C5
     934.  00:4DBC  7D                  		db $08B8-$083B
     935.  00:4DBD  85                  		db $093D-$08B8
     936.  00:4DBE  8D                  		db $09CA-$093D
     937.  00:4DBF  95                  		db $0A5F-$09CA
     938.  00:4DC0  9D                  		db $0AFC-$0A5F
     939.  00:4DC1  A8                  		db $0BA4-$0AFC
     940.  00:4DC2  B1                  		db $0C55-$0BA4
     941.  00:4DC3  BB                  		db $0D10-$0C55
     942.  00:4DC4  0C                  		db ($066D*2)/256
     943.  00:4DC5  DA                  		db #da
     944.  00:4DC6  62                  		db $06CF-$066D
     945.  00:4DC7  68                  		db $0737-$06CF
     946.  00:4DC8  6D                  		db $07A4-$0737
     947.  00:4DC9  75                  		db $0819-$07A4
     948.  00:4DCA  7B                  		db $0894-$0819
     949.  00:4DCB  83                  		db $0917-$0894
     950.  00:4DCC  8A                  		db $09A1-$0917
     951.  00:4DCD  92                  		db $0A33-$09A1
     952.  00:4DCE  9C                  		db $0ACF-$0A33
     953.  00:4DCF  A4                  		db $0B73-$0ACF
     954.  00:4DD0  AF                  		db $0C22-$0B73
     955.  00:4DD1  B8                  		db $0CDA-$0C22
     956.  00:4DD2  0E                  		db ($0704*2)/256
     957.  00:4DD3  08                  		db #08
     958.  00:4DD4  6A                  		db $076E-$0704
     959.  00:4DD5  72                  		db $07E0-$076E
     960.  00:4DD6  78                  		db $0858-$07E0
     961.  00:4DD7  7E                  		db $08D6-$0858
     962.  00:4DD8  86                  		db $095C-$08D6
     963.  00:4DD9  90                  		db $09EC-$095C
     964.  00:4DDA  96                  		db $0A82-$09EC
     965.  00:4DDB  A0                  		db $0B22-$0A82
     966.  00:4DDC  AA                  		db $0BCC-$0B22
     967.  00:4DDD  B4                  		db $0C80-$0BCC
     968.  00:4DDE  BE                  		db $0D3E-$0C80
     969.  00:4DDF  0F                  		db ($07E0*2)/256
     970.  00:4DE0  C0                  		db #c0
     971.  00:4DE1  78                  		db $0858-$07E0
     972.  00:4DE2  88                  		db $08E0-$0858
     973.  00:4DE3  80                  		db $0960-$08E0
     974.  00:4DE4  90                  		db $09F0-$0960
     975.  00:4DE5  98                  		db $0A88-$09F0
     976.  00:4DE6  A0                  		db $0B28-$0A88
     977.  00:4DE7  B0                  		db $0BD8-$0B28
     978.  00:4DE8  A8                  		db $0C80-$0BD8
     979.  00:4DE9  E0                  		db $0D60-$0C80
     980.  00:4DEA  B0                  		db $0E10-$0D60
     981.  00:4DEB  E8                  		db $0EF8-$0E10
     982.  00:4DEC                      
     983.  00:4DEC                      
     984.  00:4DEC                      	;Variables del replayer... las coloco desde aqui.
     985.  00:4DEC                      	;mirar que hace la directiva MAP del SJASM
     986.  00:4DEC  (F000)              	map		#F000
     987.  00:4DEC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     988.  00:4DEC  (00:F000)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
     989.  00:4DEC                                          ;bit7 is set each time, when loop point is passed
     990.  00:4DEC  (00:F000)           PT3_MODADDR:	#2
     991.  00:4DEC  (00:F002)           PT3_CrPsPtr:		#2
     992.  00:4DEC  (00:F004)           PT3_SAMPTRS:		#2
     993.  00:4DEC  (00:F006)           PT3_OrnPtrs:		#2
     994.  00:4DEC  (00:F008)           PT3_PDSP:		#2
     995.  00:4DEC  (00:F00A)           PT3_CSP:		#2 
     996.  00:4DEC  (00:F00C)           PT3_PSP:		#2
     997.  00:4DEC  (00:F00E)           PT3_PrNote:		#1
     998.  00:4DEC  (00:F00F)           PT3_PrSlide:		#2
     999.  00:4DEC  (00:F011)           PT3_AdInPtA:		#2
    1000.  00:4DEC  (00:F013)           PT3_AdInPtB:		#2
    1001.  00:4DEC  (00:F015)           PT3_AdInPtC:		#2
    1002.  00:4DEC  (00:F017)           PT3_LPosPtr:		#2
    1003.  00:4DEC  (00:F019)           PT3_PatsPtr:		#2
    1004.  00:4DEC  (00:F01B)           PT3_Delay:		#1
    1005.  00:4DEC  (00:F01C)           PT3_AddToEn:		#1
    1006.  00:4DEC  (00:F01D)           PT3_Env_Del:		#1
    1007.  00:4DEC  (00:F01E)           PT3_ESldAdd:		#2
    1008.  00:4DEC  (00:F020)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1009.  00:4DEC                      
    1010.  00:4DEC  (00:F022)           VARS:			#0
    1011.  00:4DEC                      
    1012.  00:4DEC  (00:F022)           ChanA:			#29			;CHNPRM_Size
    1013.  00:4DEC  (00:F03F)           ChanB:			#29			;CHNPRM_Size
    1014.  00:4DEC  (00:F05C)           ChanC:			#29			;CHNPRM_Size
    1015.  00:4DEC                      
    1016.  00:4DEC                      ;GlobalVars
    1017.  00:4DEC  (00:F079)           DelyCnt:		#1
    1018.  00:4DEC  (00:F07A)           CurESld:		#2
    1019.  00:4DEC  (00:F07C)           CurEDel:		#1
    1020.  00:4DEC  (00:F07D)           Ns_Base_AddToNs:	#0
    1021.  00:4DEC  (00:F07D)           Ns_Base:		#1
    1022.  00:4DEC  (00:F07E)           AddToNs:		#1
    1023.  00:4DEC                      
    1024.  00:4DEC  (00:F07F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1025.  00:4DEC                      
    1026.  00:4DEC  (00:F13F)           AYREGS:			#0
    1027.  00:4DEC  (00:F13F)           VT_:			#14
    1028.  00:4DEC  (00:F14D)           EnvBase:		#2
    1029.  00:4DEC  (00:F14F)           VAR0END:		#0
    1030.  00:4DEC                      
    1031.  00:4DEC  (00:F14F)           T1_:			#0		
    1032.  00:4DEC  (00:F14F)           T_NEW_1:		#0
    1033.  00:4DEC  (00:F14F)           T_OLD_1:		#24
    1034.  00:4DEC  (00:F167)           T_OLD_2:		#24
    1035.  00:4DEC  (00:F17F)           T_NEW_3:		#0
    1036.  00:4DEC  (00:F17F)           T_OLD_3:		#2
    1037.  00:4DEC  (00:F181)           T_OLD_0:		#0
    1038.  00:4DEC  (00:F181)           T_NEW_0:		#24
    1039.  00:4DEC  (00:F199)           T_NEW_2:		#166
    1040.  00:4DEC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
    1041.  00:4DEC  (0000)                  ENDMAP
      30   00:4DEC                      ; AFX
      31   00:4DEC                          include "include\ayFX-ROM.ASM"
       1.  00:4DEC                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:4DEC                      
       3.  00:4DEC                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:4DEC                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:4DEC                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:4DEC                      		; --- v1.2f/r	ayFX bank support
       7.  00:4DEC                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:4DEC                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:4DEC                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:4DEC                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:4DEC                      		; --- v1.0	Initial release
      12.  00:4DEC                      
      13.  00:4DEC                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:4DEC                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:4DEC  (00:0000)           AYFXRELATIVE: 	equ 0
      16.  00:4DEC                      
      17.  00:4DEC                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:4DEC                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:4DEC  22 A7 C3            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:4DEF  AF                  		xor	a				; a:=0
      21.  00:4DF0  32 A6 C3            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:4DF3  3C                  		inc	a				; Starting channel (=1)
      23.  00:4DF4  32 B0 C3            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:4DF7                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:4DF7  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:4DF9  32 A9 C3            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:4DFC  C9                  		ret					; Return
      28.  00:4DFD                      
      29.  00:4DFD                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:4DFD                      		; --- INPUT: A -> sound to be played ---
      31.  00:4DFD                      		; ---        C -> sound priority     ---
      32.  00:4DFD  C5                  		push	bc				; Store bc in stack
      33.  00:4DFE  D5                  		push	de				; Store de in stack
      34.  00:4DFF  E5                  		push	hl				; Store hl in stack
      35.  00:4E00                      		; --- Check if the index is in the bank ---
      36.  00:4E00  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:4E01  2A A7 C3            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:4E04  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:4E05  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:4E06  28 06               		jr	z,.CHECK_PRI			; ...goto @@CHECK_PRI
      41.  00:4E08                      		; The bank has less than 256 samples
      42.  00:4E08  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:4E09  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:4E0A  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:4E0C  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:4E0E                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:4E0E                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:4E0E  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:4E0F  3A A9 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:4E12  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:4E13  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:4E15  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:4E17                      		; --- Set new priority ---
      54.  00:4E17  79                  		ld	a,c				; a:=New priority
      55.  00:4E18  E6 0F               		and	$0F				; We mask the priority
      56.  00:4E1A  32 A9 C3            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:4E1D                      
      58.  00:4E1D                      		IF ( AYFXRELATIVE == 1 )
      59.  00:4E1D                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:4E1D                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:4E1D                    ~ 			ld	a,15				; a:=15
      62.  00:4E1D                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:4E1D                    ~ 			jr	z,@@INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:4E1D                    ~ 			add	a,a				; a:=a*2
      65.  00:4E1D                    ~ 			add	a,a				; a:=a*4
      66.  00:4E1D                    ~ 			add	a,a				; a:=a*8
      67.  00:4E1D                    ~ 			add	a,a				; a:=a*16
      68.  00:4E1D                    ~ 			ld	e,a				; e:=a
      69.  00:4E1D                    ~ 			ld	d,0				; de:=a
      70.  00:4E1D                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:4E1D                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:4E1D                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:4E1D                    ~ 		ENDIF
      74.  00:4E1D                      
      75.  00:4E1D                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:4E1D  ED 5B A7 C3         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:4E21  13                  		inc	de				; de points to the increments table of the bank
      78.  00:4E22  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:4E23  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:4E25  29                  		add	hl,hl				; hl:=hl*2
      81.  00:4E26  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:4E27  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:4E28  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:4E29  56                  		ld	d,[hl]				; de:=increment
      85.  00:4E2A  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:4E2B  22 AA C3            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:4E2E  AF                  		xor	a				; a:=0 (no errors)
      88.  00:4E2F  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:4E30  D1                  		pop	de				; Retrieve de from stack
      90.  00:4E31  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:4E32  C9                  		ret					; Return
      92.  00:4E33                      
      93.  00:4E33                      		IF ( AYFXRELATIVE == 1 )
      94.  00:4E33                    ~ 	.INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:4E33                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:4E33                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:4E33                    ~ 			jr	.INIT_END			; Jumps to @@INIT_END
      98.  00:4E33                    ~ 		ENDIF
      99.  00:4E33                      
     100.  00:4E33                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:4E33  3A A9 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:4E36  B7                  		or	a				; If priority has bit 7 on...
     103.  00:4E37  F8                  		ret	m				; ...return
     104.  00:4E38                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:4E38  3A A6 C3            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:4E3B  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:4E3D  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:4E3F  21 B0 C3            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:4E42  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:4E43  20 02               		jr	nz,.TAKECB			; If not zero jump to @@TAKECB
     111.  00:4E45  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:4E47                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:4E47  2A AA C3            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:4E4A  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:4E4B  23                  		inc	hl				; Increment pointer
     116.  00:4E4C                      		; --- Check if there's new tone on stream ---
     117.  00:4E4C  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:4E4E  28 08               		jr	z,.CHECK_NN			; ...jump to @@CHECK_NN (no new tone)
     119.  00:4E50                      		; --- Extract new tone from stream ---
     120.  00:4E50  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:4E51  23                  		inc	hl				; Increment pointer
     122.  00:4E52  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:4E53  23                  		inc	hl				; Increment pointer
     124.  00:4E54  ED 53 AC C3         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:4E58                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:4E58  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:4E5A  28 09               		jr	z,.SETPOINTER			; ...jump to @@SETPOINTER (no new noise)
     128.  00:4E5C                      		; --- Extract new noise from stream ---
     129.  00:4E5C  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:4E5D  23                  		inc	hl				; Increment pointer
     131.  00:4E5E  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:4E60  28 95               		jr	z,ayFX_END			; ...jump to ayFX_END
     133.  00:4E62  32 AE C3            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:4E65                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:4E65  22 AA C3            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:4E68                      		; --- Extract volume ---
     137.  00:4E68  79                  		ld	a,c				; a:=Control byte
     138.  00:4E69  E6 0F               		and	$0F				; lower nibble
     139.  00:4E6B                      
     140.  00:4E6B                      		IF ( AYFXRELATIVE == 1 )
     141.  00:4E6B                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:4E6B                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:4E6B                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:4E6B                    ~ 			ld	d,0				; d:=0
     145.  00:4E6B                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:4E6B                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:4E6B                    ~ 			or	a				; If relative volume is zero...
     148.  00:4E6B                    ~ 		ENDIF
     149.  00:4E6B                      
     150.  00:4E6B  32 AF C3            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:4E6E  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:4E6F                      		; -------------------------------------
     153.  00:4E6F                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:4E6F                      		; -------------------------------------
     155.  00:4E6F                      		; --- Set noise channel ---
     156.  00:4E6F  CB 79               		bit	7,c				; If noise is off...
     157.  00:4E71  20 06               		jr	nz,.SETMASKS			; ...jump to @@SETMASKS
     158.  00:4E73  3A AE C3            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:4E76  32 45 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:4E79                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:4E79  79                  		ld	a,c				; a:=Control byte
     162.  00:4E7A  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:4E7C  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:4E7E  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:4E7F                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:4E7F  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:4E80  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:4E81  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:4E83                      		; --- Dump to correct channel ---
     170.  00:4E83  21 B0 C3            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:4E86  46                  		ld	b,[hl]				; Channel counter
     172.  00:4E87                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:4E87  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:4E89                      .LAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:4E89  CD B8 4E            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:4E8C  32 49 F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:4E8F  CB 51               		bit	2,c				; If tone is off...
     178.  00:4E91  C0                  		ret	nz				; ...return
     179.  00:4E92  22 43 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:4E95  C9                  		ret					; Return
     181.  00:4E96                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:4E96  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:4E98  0F                  		rrca					; Rotate right OR mask
     184.  00:4E99  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:4E9B                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:4E9B  CD B8 4E            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:4E9E  32 48 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:4EA1  CB 49               		bit	1,c				; If tone is off...
     189.  00:4EA3  C0                  		ret	nz				; ...return
     190.  00:4EA4  22 41 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:4EA7  C9                  		ret					; Return
     192.  00:4EA8                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:4EA8  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:4EAA  0F                  		rrca					; Rotate right OR mask
     195.  00:4EAB                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:4EAB  CD B8 4E            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:4EAE  32 47 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:4EB1  CB 41               		bit	0,c				; If tone is off...
     199.  00:4EB3  C0                  		ret	nz				; ...return
     200.  00:4EB4  22 3F F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:4EB7  C9                  		ret					; Return
     202.  00:4EB8                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:4EB8  4F                  		ld	c,a				; c:=OR mask
     204.  00:4EB9  3A 46 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:4EBC  A2                  		and	d				; AND mask
     206.  00:4EBD  B1                  		or	c				; OR mask
     207.  00:4EBE  32 46 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:4EC1  3A AF C3            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:4EC4  2A AC C3            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:4EC7  C9                  		ret					; Return
     211.  00:4EC8                      
     212.  00:4EC8                      		IF ( AYFXRELATIVE == 1 )
     213.  00:4EC8                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:4EC8                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:4EC8                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:4EC8                    ~ 		ENDIF
      32   00:4EC8                      ; GFX
      33   00:4EC8                          include "include\metatiles.asm"
       1.  00:4EC8                      metatiles_data:
       2.  00:4EC8                          ; SX, SY, NX, NY, Free
       3.  00:4EC8  00 00 20 10 00          db 0, 0, 32, 16, 0  ; gate lockpad
       4.  00:4ECD  20 00 20 10 00          db 32, 0, 32, 16, 0  ; gate closed
       5.  00:4ED2  40 00 20 10 00          db 64, 0, 32, 16, 0  ; gate half opened
       6.  00:4ED7  60 00 20 10 00          db 96, 0, 32, 16, 0  ; gate opened
       7.  00:4EDC                      
       8.  00:4EDC  80 00 10 10 00          db 128, 0, 16, 16, 0  ; blood drop full
       9.  00:4EE1  90 00 10 10 00          db 144, 0, 16, 16, 0  ; blood drop half
      10.  00:4EE6  A0 00 10 10 00          db 160, 0, 16, 16, 0  ; blood drop empty
      11.  00:4EEB                      
      12.  00:4EEB  B0 00 10 10 00          db 176, 0, 16, 16, 0  ; Tile
      13.  00:4EF0  C0 00 10 10 00          db 192, 0, 16, 16, 0  ; Pressed tile
      34   00:4EF5                      START
      35   00:4EF5                      	; CODE
      36   00:4EF5  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      37   00:4EF8  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      38   00:4EFA  23                  	inc hl ; FORCLR+1
      39   00:4EFB  36 00               	ld [hl],0 ; Color de fondo 1=negro
      40   00:4EFD  23                  	inc hl ; FORCLR+2
      41   00:4EFE  36 00               	ld [hl],0 ; Color del borde 1=negro
      42   00:4F00  3E 08               	LD A,8
      43   00:4F02                      	;CALL CHGMOD    	
      44   00:4F02  CD D7 41                CALL SETPAGES32K
      45   00:4F05                      	;CALL opening_screen
      46   00:4F05  3E 01               	LD A,1
      47   00:4F07  32 00 70            	LD (_bank2),A
      48   00:4F0A                      	;CALL CHGET
      49   00:4F0A                      	; Empieza el juego    
      50   00:4F0A  CD 44 41            	call ClearVram_MSX2		
      51   00:4F0D  CD EA 41            	call SET_SCREEN5_MODE    
      52   00:4F10  CD 38 41                call Set212Lines
      53   00:4F13                              
      54   00:4F13  CD 3A 4F                call INIT_CHARS_VARS
      55   00:4F16  CD 9A 45                call initVDPBuffers    
      56   00:4F19                      
      57   00:4F19  3E FF                   LD A, -MOV_SPEED_GHOST
      58   00:4F1B  32 2C C0            	LD (CHAR_SPEED_X_GHOST), A
      59   00:4F1E  21 A1 76                LD HL, PaletteData
      60   00:4F21  CD 76 42                CALL SetPalette
      61   00:4F24                          ; init sfx
      62   00:4F24  F3                      di	
      63   00:4F25  21 E0 54            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
      64   00:4F28  DD E5                   PUSH IX
      65   00:4F2A  CD FD 47                call	PT3_INIT			; Inicia el reproductor de PT3
      66   00:4F2D  21 4D 53            	ld hl, AFX
      67   00:4F30  CD EC 4D                call ayFX_SETUP
      68   00:4F33  DD E1                   POP IX
      69   00:4F35  FB                      ei
      70   00:4F36                              
      71   00:4F36                          ; Start STG1    
      72   00:4F36  CD C6 4F                CALL STAGE1
      73   00:4F39                      
      74   00:4F39                          ;call MAIN_LOOP
      75   00:4F39                          ;CALL CHGET
      76   00:4F39  C9                  	ret
      77   00:4F3A                      
      78   00:4F3A                      
      79   00:4F3A                      INIT_CHARS_VARS:    
      80   00:4F3A  DD 21 39 C0             ld ix, SPRITE_ATTRS           
      81   00:4F3E                          
      82   00:4F3E  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      83   00:4F42  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      84   00:4F46  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      85   00:4F4A                      
      86   00:4F4A  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      87   00:4F4E  DD 36 05 7F             ld (ix+5), 7Fh
      88   00:4F52  DD 36 06 04             ld (ix+6), 04h        
      89   00:4F56                      
      90   00:4F56  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      91   00:4F5A  DD 36 09 7F             ld (ix+9), 7Fh
      92   00:4F5E  DD 36 0A 08             ld (ix+10), 08h        
      93   00:4F62                      
      94   00:4F62  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
      95   00:4F66  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
      96   00:4F6A  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
      97   00:4F6E                          
      98   00:4F6E  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
      99   00:4F72  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
     100   00:4F76  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
     101   00:4F7A                          
     102   00:4F7A  AF                      XOR A
     103   00:4F7B  32 29 C0                LD (JIFFY_TEMP),A
     104   00:4F7E  32 2A C0                LD (CHAR_SPEED_X),A
     105   00:4F81  32 2B C0                LD (CHAR_SPEED_Y),A
     106   00:4F84  32 2C C0                LD (CHAR_SPEED_X_GHOST),A
     107   00:4F87  32 31 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
     108   00:4F8A  32 34 C0                LD (CHAR_NEW_DIR_MAIN),A    
     109   00:4F8D  32 35 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
     110   00:4F90  32 37 C0                LD (CHAR_DISTANCE_SHOOT),A
     111   00:4F93  32 38 C0                LD (CHAR_SPEED_SHOOT),A
     112   00:4F96  32 2E C0                LD (CHAR_GHOST_DEAD),A
     113   00:4F99  32 36 C0                LD (CHAR_MIN_STEP), A
     114   00:4F9C  32 C0 C0                LD (SPRITE_COLOR_REPLACE2), A
     115   00:4F9F  32 22 C0                LD (SHOWING_GUS_DIALOG), A
     116   00:4FA2  32 21 C0                LD (SHOWING_JOHN_DIALOG), A
     117   00:4FA5  32 20 C0                LD (SHOWING_MIKE_DIALOG), A
     118   00:4FA8  32 1F C0                LD (SHOWING_SKULL_STG1_DIALOG), A    
     119   00:4FAB  32 1E C0                LD (stg1_puzzle_solved), A
     120   00:4FAE                         ; LD A,$FF
     121   00:4FAE  32 28 C0                LD (OLD_KEY_PRESSED), A
     122   00:4FB1  3E 01                   LD A,$01
     123   00:4FB3  32 33 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     124   00:4FB6                      
     125   00:4FB6  21 95 65                ld hl, SPRITE_P1_DOWN
     126   00:4FB9  22 BC C0                ld (SPRITE_PTR_REPLACE), HL    
     127   00:4FBC  21 95 6B                ld hl, SPRITE_COLOR_P1_DOWN
     128   00:4FBF  22 BE C0                ld (SPRITE_COLOR_REPLACE), HL
     129   00:4FC2  22 C0 C0                LD (SPRITE_COLOR_REPLACE2), HL
     130   00:4FC5                      
     131   00:4FC5                          
     132   00:4FC5  C9                      ret
     133   00:4FC6                      
     134   00:4FC6                      STAGE1:
     135   00:4FC6  CD 28 47                CALL DISSCR
     136   00:4FC9  21 00 80                LD HL, CEMENTER1
     137   00:4FCC  22 C4 C0                LD (BITMAP), HL
     138   00:4FCF  06 07                   LD B, :CEMENTER1
     139   00:4FD1  CD 82 41                call load_screen
     140   00:4FD4                          
     141   00:4FD4  CD 0F 42                call DUMP_SPR_ALL
     142   00:4FD7  CD 59 42                CALL DUMP_SPR_P1
     143   00:4FDA                          
     144   00:4FDA  21 61 6C                LD HL, mapa1
     145   00:4FDD  11 C6 C0                LD DE, MAP_RAM
     146   00:4FE0  01 E0 02                LD BC, 736
     147   00:4FE3  ED B0                   LDIR
     148   00:4FE5                          
     149   00:4FE5  21 C6 C0                LD HL, MAP_RAM
     150   00:4FE8  22 C2 C0                LD (MAPA), HL
     151   00:4FEB                          
     152   00:4FEB                          ;We load the tiles on page 1 of VDP
     153   00:4FEB  21 41 77                LD HL, TILES1    
     154   00:4FEE  CD 34 42                call load_tiles_vdp
     155   00:4FF1                          
     156   00:4FF1                          ; set energy
     157   00:4FF1  21 10 40                LD HL, ANDY_MAX_ENERGY
     158   00:4FF4  7E                      LD A, (HL)  ; no offset for level 
     159   00:4FF5  CD 82 47                CALL DRAW_ANDY_ENERGY
     160   00:4FF8                      
     161   00:4FF8  3A 1E C0                LD A, (stg1_puzzle_solved)
     162   00:4FFB  FE 03                   CP 3
     163   00:4FFD  20 30                   JR NZ, .nobackfromstg2
     164   00:4FFF                              ; Open the gate!
     165   00:4FFF  FD 21 00 C0             LD IY, tileDat
     166   00:5003  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     167   00:5007  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     168   00:500B  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     169   00:500F  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     170   00:5013  21 00 C0                LD HL, tileDat
     171   00:5016  CD F6 46                CALL VDPCMD
     172   00:5019                      
     173   00:5019                          ; Modify MAP
     174   00:5019  21 55 6C                LD HL,stg1_gate
     175   00:501C  11 D4 C0                LD DE, MAP_RAM+14
     176   00:501F  01 04 00                LD BC, 4
     177   00:5022  ED B0                   LDIR
     178   00:5024                      
     179   00:5024  21 55 6C                LD HL,stg1_gate
     180   00:5027  11 F4 C0                LD DE, MAP_RAM+46
     181   00:502A  01 04 00                LD BC, 4
     182   00:502D  ED B0                   LDIR
     183   00:502F                          
     184   00:502F                      .nobackfromstg2
     185   00:502F                              ; Copy the energy bar to back buffer
     186   00:502F  21 B3 47                LD HL, DiagBoxToBackBufROM
     187   00:5032  CD F6 46            	call VDPCMD
     188   00:5035                      ;	call VDP_Ready
     189   00:5035  CD 21 47                CALL ENASCR    
     190   00:5038                      
     191   00:5038                      MAIN_LOOP:
     192   00:5038                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     193   00:5038                          
     194   00:5038  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     195   00:503B  FE 00                   CP $00
     196   00:503D  CA 99 52                JP Z, STAGE2
     197   00:5040  CD 3E 42                call DUMP_SPR_ATTS    
     198   00:5043                      
     199   00:5043                      .check_tombs:
     200   00:5043                      
     201   00:5043  3A 1E C0                LD A, (stg1_puzzle_solved)
     202   00:5046  FE 03                   CP 3
     203   00:5048  CA C2 51                JP Z, .animate_ghost
     204   00:504B                      
     205   00:504B  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     206   00:504E  FE C8                   CP MIKE_TOMB_STG1_X
     207   00:5050  C2 C6 50                JP NZ, .check_john_tomb    
     208   00:5053                          
     209   00:5053  3A 1E C0                LD A, (stg1_puzzle_solved)
     210   00:5056  FE 02                   CP 2
     211   00:5058  C2 A0 50                JP NZ, .puzzle_wrong_order
     212   00:505B  3C                      INC A
     213   00:505C  32 1E C0                LD (stg1_puzzle_solved), A
     214   00:505F                          ; Open the gate!
     215   00:505F  FD 21 00 C0             LD IY, tileDat
     216   00:5063  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     217   00:5067  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     218   00:506B  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     219   00:506F  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     220   00:5073  21 00 C0                LD HL, tileDat
     221   00:5076  CD F6 46                CALL VDPCMD
     222   00:5079                      
     223   00:5079  FD 21 C4 40             LD IY, stg1_puzzle_solved_strings
     224   00:507D  CD B1 45                CALL print_strings_dialog_box
     225   00:5080                      
     226   00:5080                          ; Modify MAP
     227   00:5080  21 55 6C                LD HL,stg1_gate
     228   00:5083  11 D4 C0                LD DE, MAP_RAM+14
     229   00:5086  01 04 00                LD BC, 4
     230   00:5089  ED B0                   LDIR
     231   00:508B                      
     232   00:508B  21 55 6C                LD HL,stg1_gate
     233   00:508E  11 F4 C0                LD DE, MAP_RAM+46
     234   00:5091  01 04 00                LD BC, 4
     235   00:5094  ED B0                   LDIR
     236   00:5096                          ; afx
     237   00:5096  3E 02                   LD A,2
     238   00:5098  0E 00                   LD C, 0
     239   00:509A  CD FD 4D                CALL ayFX_INIT
     240   00:509D                      
     241   00:509D  C3 C2 51                JP .animate_ghost
     242   00:50A0                      
     243   00:50A0                      .puzzle_wrong_order
     244   00:50A0  3A 20 C0                LD A, (SHOWING_MIKE_DIALOG)
     245   00:50A3  FE 01                   CP 1
     246   00:50A5  CA C2 51                JP Z, .animate_ghost    
     247   00:50A8  FD 21 16 40             LD IY, mike_tomb_strings
     248   00:50AC  CD B1 45                CALL print_strings_dialog_box
     249   00:50AF  3E 01                   LD A,1
     250   00:50B1  32 20 C0                LD (SHOWING_MIKE_DIALOG), A
     251   00:50B4  AF                      XOR A
     252   00:50B5  32 1E C0                LD (stg1_puzzle_solved), A
     253   00:50B8                                  ; Close the gate!
     254   00:50B8                          ;LD IY, tileDat
     255   00:50B8                          ;LD (IY + VDP_SX), 0      ; SXL - Tile 2
     256   00:50B8                          ;LD (IY+VDP_SY), 0      ; SYL
     257   00:50B8                          ;LD (IY + VDP_DX), 112     ; DXL    
     258   00:50B8                          ;LD (IY + VDP_DY), 0      ; DYL    
     259   00:50B8                          ;LD HL, tileDat
     260   00:50B8                          ;CALL VDPCMD
     261   00:50B8                      
     262   00:50B8  21 5B 6C                LD HL,stg1_gate_blocked
     263   00:50BB  11 F3 C0                LD DE, MAP_RAM+45
     264   00:50BE  01 06 00                LD BC, 6
     265   00:50C1  ED B0                   LDIR
     266   00:50C3                      
     267   00:50C3  C3 C2 51                JP .animate_ghost
     268   00:50C6                      
     269   00:50C6                      .check_john_tomb:
     270   00:50C6  FE 29                   CP JOHN_TOMB_STG1_X
     271   00:50C8  20 44                   jr nz, .check_gus_tomb
     272   00:50CA  3A 21 C0                LD A, (SHOWING_JOHN_DIALOG)
     273   00:50CD  FE 01                   CP 1
     274   00:50CF  CA C2 51                JP Z, .animate_ghost
     275   00:50D2  FD 21 42 40             LD IY, john_tomb_strings
     276   00:50D6  CD B1 45                CALL print_strings_dialog_box
     277   00:50D9  3E 01                   LD A,1
     278   00:50DB  32 21 C0                LD (SHOWING_JOHN_DIALOG), A
     279   00:50DE  3A 1E C0                LD A, (stg1_puzzle_solved)
     280   00:50E1  FE 01                   CP 1
     281   00:50E3  C2 C2 51                JP NZ, .animate_ghost
     282   00:50E6  3C                      INC A
     283   00:50E7  32 1E C0                LD (stg1_puzzle_solved), A
     284   00:50EA                          ; Half open gate
     285   00:50EA  FD 21 00 C0             LD IY, tileDat
     286   00:50EE  FD 36 00 40             LD (IY + VDP_SX), 64      ; SXL - Tile 2
     287   00:50F2  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     288   00:50F6  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     289   00:50FA  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     290   00:50FE  21 00 C0                LD HL, tileDat
     291   00:5101  CD F6 46                CALL VDPCMD
     292   00:5104                          ; afx
     293   00:5104  3E 00                   LD A,0
     294   00:5106  0E 00                   LD C, 0
     295   00:5108  CD FD 4D                CALL ayFX_INIT
     296   00:510B                      
     297   00:510B  C3 C2 51                JP .animate_ghost
     298   00:510E                      
     299   00:510E                      .check_gus_tomb:
     300   00:510E  FE 49                   CP GUS_TOMB_STG1_X
     301   00:5110  C2 60 51                JP nz, .check_skull_hint
     302   00:5113  3A 22 C0                LD A, (SHOWING_GUS_DIALOG)
     303   00:5116  FE 01                   CP 1
     304   00:5118  CA C2 51                JP Z, .animate_ghost
     305   00:511B  DD 7E 00                LD A, (ix)
     306   00:511E  FE 78                   CP GUS_TOMB_STG1_Y
     307   00:5120  DA C2 51                jp c, .animate_ghost
     308   00:5123  FD 21 6D 40             LD IY, gus_tomb_strings
     309   00:5127  CD B1 45                CALL print_strings_dialog_box
     310   00:512A  3E 01                   LD A,1
     311   00:512C  32 22 C0                LD (SHOWING_GUS_DIALOG), A
     312   00:512F  32 1E C0                LD (stg1_puzzle_solved), A
     313   00:5132                          ; Remove the lockpad
     314   00:5132  FD 21 00 C0             LD IY, tileDat
     315   00:5136  FD 36 00 20             LD (IY + VDP_SX), 32      ; SXL - Tile 1
     316   00:513A  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     317   00:513E  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     318   00:5142  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     319   00:5146  21 00 C0                LD HL, tileDat
     320   00:5149  CD F6 46                CALL VDPCMD
     321   00:514C                      
     322   00:514C  21 55 6C                LD HL,stg1_gate
     323   00:514F  11 F5 C0                LD DE, MAP_RAM+47
     324   00:5152  01 02 00                LD BC, 2
     325   00:5155  ED B0                   LDIR
     326   00:5157                      
     327   00:5157                          ; afx
     328   00:5157  3E 01                   LD A,1
     329   00:5159  0E 00                   LD C, 0
     330   00:515B  CD FD 4D                CALL ayFX_INIT
     331   00:515E                      
     332   00:515E  18 62                   JR .animate_ghost
     333   00:5160                      
     334   00:5160                      .check_skull_hint:
     335   00:5160  FE 69                   CP SKULL_TOMB_STG1_X
     336   00:5162  20 20                   jr nz, .check_mike_dialog_box
     337   00:5164                              
     338   00:5164  DD 7E 00                LD A, (ix)
     339   00:5167  FE 5A                   CP SKULL_TOMB_STG1_Y1
     340   00:5169  38 19                   jr c, .check_mike_dialog_box
     341   00:516B  FE 64                   CP SKULL_TOMB_STG1_Y2
     342   00:516D  30 15                   jr nc, .check_mike_dialog_box
     343   00:516F                      
     344   00:516F  3A 1F C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     345   00:5172  FE 01                   CP 1
     346   00:5174  28 4C                   JR Z, .animate_ghost
     347   00:5176  FD 21 9A 40             LD IY, stg1_skull_strings
     348   00:517A  CD B1 45                CALL print_strings_dialog_box
     349   00:517D  3E 01                   LD A,1
     350   00:517F  32 1F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     351   00:5182  18 3E                   JR .animate_ghost
     352   00:5184                      
     353   00:5184                      .check_mike_dialog_box
     354   00:5184  3A 20 C0                LD A, (SHOWING_MIKE_DIALOG)
     355   00:5187  FE 01                   CP 1
     356   00:5189  20 09                   JR nz, .check_gus_dialog
     357   00:518B  CD AD 46                CALL CLEAR_DIALOG_BOX
     358   00:518E  AF                      XOR A
     359   00:518F  32 20 C0                LD (SHOWING_MIKE_DIALOG), A
     360   00:5192  18 2E                   JR .animate_ghost
     361   00:5194                      
     362   00:5194                      .check_gus_dialog
     363   00:5194  3A 22 C0                LD A, (SHOWING_GUS_DIALOG)
     364   00:5197  FE 01                   CP 1
     365   00:5199  20 09                   JR nz, .check_john_dialog
     366   00:519B  CD AD 46                CALL CLEAR_DIALOG_BOX
     367   00:519E  AF                      XOR A
     368   00:519F  32 22 C0                LD (SHOWING_GUS_DIALOG), A
     369   00:51A2  18 1E                   JR .animate_ghost
     370   00:51A4                      
     371   00:51A4                      .check_john_dialog
     372   00:51A4  3A 21 C0                LD A, (SHOWING_JOHN_DIALOG)
     373   00:51A7  FE 01                   CP 1
     374   00:51A9  20 09                   JR nz, .check_skull_dialog
     375   00:51AB  CD AD 46                CALL CLEAR_DIALOG_BOX
     376   00:51AE  AF                      XOR A
     377   00:51AF  32 21 C0                LD (SHOWING_JOHN_DIALOG), A
     378   00:51B2  18 0E                   JR .animate_ghost
     379   00:51B4                      
     380   00:51B4                      .check_skull_dialog
     381   00:51B4  3A 1F C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     382   00:51B7  FE 01                   CP 1
     383   00:51B9  20 07                   JR nz, .animate_ghost
     384   00:51BB  CD AD 46                CALL CLEAR_DIALOG_BOX
     385   00:51BE  AF                      XOR A
     386   00:51BF  32 1F C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     387   00:51C2                      
     388   00:51C2                      .animate_ghost    
     389   00:51C2  3A 2E C0                LD A,(CHAR_GHOST_DEAD)
     390   00:51C5  FE 01                   CP $01
     391   00:51C7  CA 3B 52                JP Z,.continue
     392   00:51CA  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     393   00:51CD  2A 2C C0            	LD HL, (CHAR_SPEED_X_GHOST)
     394   00:51D0  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     395   00:51D1                          
     396   00:51D1  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     397   00:51D4  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     398   00:51D7  FE 50                   CP $50
     399   00:51D9  CA E4 51                JP Z,.CHANGE_DIR_RIGHT
     400   00:51DC  FE AF                   CP $AF
     401   00:51DE  CA F1 51                JP Z,.CHANGE_DIR_LEFT
     402   00:51E1                          		
     403   00:51E1  C3 FA 51                JP .check_pattern
     404   00:51E4                      
     405   00:51E4                      .CHANGE_DIR_RIGHT:
     406   00:51E4  3E 01                   LD A, MOV_SPEED_GHOST
     407   00:51E6  32 2C C0            	LD (CHAR_SPEED_X_GHOST), A
     408   00:51E9  3E FF                   LD A,$FF
     409   00:51EB  32 31 C0                LD (CHAR_DIR_GHOST1),A
     410   00:51EE  C3 FA 51                JP .check_pattern
     411   00:51F1                      
     412   00:51F1                      .CHANGE_DIR_LEFT:
     413   00:51F1  3E FF                   LD A, -MOV_SPEED_GHOST
     414   00:51F3  32 2C C0            	LD (CHAR_SPEED_X_GHOST), A
     415   00:51F6  AF                      XOR A   ; Pone A a 0
     416   00:51F7  32 31 C0                LD (CHAR_DIR_GHOST1),A
     417   00:51FA                      
     418   00:51FA                      .check_pattern:
     419   00:51FA  3A 31 C0                LD A,(CHAR_DIR_GHOST1)
     420   00:51FD  FE FF                   CP $FF
     421   00:51FF  CA 20 52                JP Z,.check_pattern_RIGHT
     422   00:5202  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     423   00:5205  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     424   00:5207  CA 15 52                jp z,.change_pattern_L
     425   00:520A  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     426   00:520E  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     427   00:5212  C3 3B 52                jp .continue
     428   00:5215                      .change_pattern_L:
     429   00:5215  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     430   00:5219  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     431   00:521D  C3 3B 52                jp .continue
     432   00:5220                      
     433   00:5220                      .check_pattern_RIGHT
     434   00:5220  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     435   00:5223  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     436   00:5225  CA 33 52                jp z,.change_pattern_R
     437   00:5228  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     438   00:522C  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     439   00:5230  C3 3B 52                jp .continue
     440   00:5233                      .change_pattern_R:
     441   00:5233  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     442   00:5237  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     443   00:523B                      
     444   00:523B                      .continue:    
     445   00:523B  CD BF 44                CALL MOVE_SHOOT
     446   00:523E                      .CHECK_GHOST:
     447   00:523E                          ; Comprobamos si hay colision con el fantasma
     448   00:523E  3A 2E C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     449   00:5241  FE 01                   CP $01
     450   00:5243  CA 67 52                JP Z,.check_KB
     451   00:5246                      
     452   00:5246  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     453   00:5249  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     454   00:524C  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     455   00:524F  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     456   00:5252  CD EB 40                call check_spr_collision
     457   00:5255  FE 01                   CP 1
     458   00:5257  C2 67 52                JP NZ,.check_KB
     459   00:525A                      
     460   00:525A                      .KILL_GHOST:
     461   00:525A  3E 01                   LD A,1
     462   00:525C  32 2E C0                LD (CHAR_GHOST_DEAD),A
     463   00:525F  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     464   00:5263  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     465   00:5267                      
     466   00:5267                      .check_KB:
     467   00:5267  76                      halt    
     468   00:5268                      	
     469   00:5268  F3                  	di       
     470   00:5269  DD E5                   PUSH IX
     471   00:526B  CD 42 4D            	call	PT3_ROUT			;envia datos a al PSG 	   
     472   00:526E  CD 4A 4C            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     473   00:5271  CD 33 4E            	call ayFX_PLAY
     474   00:5274  DD E1                   POP IX
     475   00:5276  FB                      ei
     476   00:5277                      
     477   00:5277  3E 08                   ld a, 8
     478   00:5279  CD 41 01            	call SNSMAT   
     479   00:527C                          
     480   00:527C  4F                      LD C,A    
     481   00:527D                          
     482   00:527D  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     483   00:527F  CC 07 43                call z, move_right
     484   00:5282                          
     485   00:5282  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     486   00:5284  CC 66 43                call z, move_left
     487   00:5287                      
     488   00:5287  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     489   00:5289  CC 92 42                call z, move_up
     490   00:528C                      
     491   00:528C  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     492   00:528E  CC CC 42                call z, move_down
     493   00:5291                      
     494   00:5291                      no_arrows:
     495   00:5291  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     496   00:5293  CC 2A 45                call z,SHOOT_MAIN_CHAR
     497   00:5296                      
     498   00:5296                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     499   00:5296                          ;ret z
     500   00:5296                          
     501   00:5296  C3 38 50                jp MAIN_LOOP
     502   00:5299                      
     503   00:5299                      
     504   00:5299                      STAGE2:
     505   00:5299  CD 28 47                CALL DISSCR
     506   00:529C  76                      halt
     507   00:529D  F3                  	di       
     508   00:529E  DD E5                   PUSH IX
     509   00:52A0  CD 42 4D            	call	PT3_ROUT			;envia datos a al PSG 	   
     510   00:52A3  CD 4A 4C            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     511   00:52A6  DD E1               	POP IX
     512   00:52A8  FB                      ei
     513   00:52A9  21 00 80                LD HL, CEMENTER2
     514   00:52AC  22 C4 C0                LD (BITMAP), HL
     515   00:52AF  06 0D                   LD B, :CEMENTER2
     516   00:52B1                      
     517   00:52B1  CD 82 41                call load_screen
     518   00:52B4  21 41 6F                LD HL, mapa2
     519   00:52B7  22 C2 C0                LD (MAPA), HL
     520   00:52BA                          
     521   00:52BA                          ; Ponemos el P1 por encima del marco
     522   00:52BA  DD 36 00 AF             LD (ix), 175      ; mask 0
     523   00:52BE  DD 36 04 AF             LD (ix+4), 175    ; mask 1
     524   00:52C2  DD 36 08 AF             LD (ix+8), 175    ; mask 2
     525   00:52C6                          
     526   00:52C6  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     527   00:52CA  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     528   00:52CE                          
     529   00:52CE  CD 0F 42                CALL DUMP_SPR_ALL
     530   00:52D1  CD 59 42                CALL DUMP_SPR_P1        
     531   00:52D4                          
     532   00:52D4  CD 21 47                CALL ENASCR
     533   00:52D7                          
     534   00:52D7                      MAIN_LOOP2:
     535   00:52D7                          ;halt    
     536   00:52D7  76                         halt
     537   00:52D8  F3                  	di       
     538   00:52D9  DD E5                   PUSH IX
     539   00:52DB  CD 42 4D            	call	PT3_ROUT			;envia datos a al PSG 	   
     540   00:52DE  CD 4A 4C            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     541   00:52E1  CD 33 4E            	call ayFX_PLAY
     542   00:52E4  DD E1                   POP IX
     543   00:52E6  FB                      ei
     544   00:52E7  DD 7E 00                LD A, (ix)    
     545   00:52EA  FE B0                   CP 176      ; Miramos si la Y es 160 para pasar a stg1
     546   00:52EC  C2 0E 53                JP NZ, .no_screen_change
     547   00:52EF                          ; Ponemos el P1 al principio de la pantalla 1
     548   00:52EF  DD 36 00 01             LD (ix), 1          ; P1.Y = 1
     549   00:52F3  DD 36 04 01             LD (ix+4), 1
     550   00:52F7  DD 36 08 01             LD (ix+8), 1
     551   00:52FB                      
     552   00:52FB  3A 2E C0                LD A, (CHAR_GHOST_DEAD)
     553   00:52FE  FE 01                   CP $01
     554   00:5300  CA 0B 53                JP Z, .GHOST_DEAD
     555   00:5303  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     556   00:5307  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     557   00:530B                      .GHOST_DEAD:    
     558   00:530B  CD C6 4F                CALL STAGE1
     559   00:530E                      
     560   00:530E                      .no_screen_change:
     561   00:530E                          ; check X,Y to play Black Sabbath
     562   00:530E                          ; Ya tenemos en A la Y
     563   00:530E  FE 6E                   CP STG2_TILE1_Y
     564   00:5310  C2 22 53                JP NZ, .continue
     565   00:5313  DD 7E 01                LD A, (ix+1)
     566   00:5316  FE 71                   CP STG2_TILE1_X
     567   00:5318  C2 22 53                JP NZ, .continue
     568   00:531B  3E 03                   LD A, 3
     569   00:531D  0E 00                   LD C, 0
     570   00:531F  CD FD 4D                CALL ayFX_INIT    
     571   00:5322                          
     572   00:5322                      .continue:
     573   00:5322  CD 3E 42                call DUMP_SPR_ATTS      
     574   00:5325  CD BF 44                CALL MOVE_SHOOT    
     575   00:5328                      
     576   00:5328  3E 08                   ld a, 8
     577   00:532A  CD 41 01            	call SNSMAT   
     578   00:532D  4F                      LD C,A    
     579   00:532E                              
     580   00:532E  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     581   00:5330  CC 07 43                call z, move_right
     582   00:5333                          
     583   00:5333  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     584   00:5335  CC 66 43                call z, move_left
     585   00:5338                      
     586   00:5338  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     587   00:533A  CC 92 42                call z, move_up
     588   00:533D                      
     589   00:533D  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     590   00:533F  CC CC 42                call z, move_down
     591   00:5342                      
     592   00:5342  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     593   00:5344  CC 2A 45                call z,SHOOT_MAIN_CHAR
     594   00:5347                      
     595   00:5347  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     596   00:5349  C8                      ret z
     597   00:534A                      
     598   00:534A                      
     599   00:534A                      
     600   00:534A  C3 D7 52                jp MAIN_LOOP2
     601   00:534D                      
     602   00:534D                      AFX:
     603   00:534D  (01F6)                  incbin "sfx\cementer_sounds.afb"
     604   00:5543                      SONG:
     605   00:5543  (0F92)              	incbin "sfx\Nostalgy_sincabecera.pt3"
     606   00:64D5                          ;incbin "sfx\test.pt3"
     607   00:64D5                          ;incbin "sfx\G-6sin_cabecera.pt3"
     608   00:64D5                      include "include\BTH_data.asm"
       1.  00:64D5                      SPRITE_P1_UP:
       2.  00:64D5                          ; UP 1        
       3.  00:64D5                          ; mask 0
       4.  00:64D5                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  00:64D5  07 0F 05 1F 1F 3F 3F 7F 
       5.  00:64DD                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  00:64DD  00 4F 70 38 0C 0E 07 04 
       6.  00:64E5                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  00:64E5  E0 F0 A0 F8 F8 F8 FC FE 
       7.  00:64ED                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  00:64ED  06 F2 1E 3C 30 70 C0 00 
       8.  00:64F5                          ; mask 1
       9.  00:64F5                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  00:64F5  00 00 18 00 1F 00 00 00 
      10.  00:64FD                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  00:64FD  7F 50 4F 3F 0F 0F 07 02 
      11.  00:6505                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  00:6505  00 00 10 00 FC 00 00 00 
      12.  00:650D                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  00:650D  F2 0E FE FC F0 F0 A0 00 
      13.  00:6515                          ; mask 2
      14.  00:6515                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  00:6515  00 00 1A 00 00 00 00 00 
      15.  00:651D                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  00:651D  7F 60 00 00 00 00 07 00 
      16.  00:6525                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  00:6525  00 00 50 00 00 00 00 00 
      17.  00:652D                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  00:652D  FA 0E 00 00 00 00 80 00 
      18.  00:6535                          
      19.  00:6535                          ; UP 2
      20.  00:6535                          ; mask 0
      21.  00:6535                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  00:6535  07 0F 05 1F 1F 3F 3F 7F 
      22.  00:653D                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  00:653D  10 4F 70 38 0C 0E 05 00 
      23.  00:6545                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  00:6545  E0 F0 A0 F8 F8 F8 FC FE 
      24.  00:654D                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  00:654D  02 F2 1E 3C 30 70 E0 40 
      25.  00:6555                          ; mask 1
      26.  00:6555                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  00:6555  00 00 18 00 1F 00 00 00 
      27.  00:655D                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  00:655D  4F 70 7F 3F 0F 0F 03 00 
      28.  00:6565                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  00:6565  00 00 10 00 FC 00 00 00 
      29.  00:656D                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  00:656D  FE 06 F2 FC F0 F0 E0 20 
      30.  00:6575                          ; mask 2
      31.  00:6575                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  00:6575  00 00 1A 00 00 00 00 00 
      32.  00:657D                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  00:657D  6F 70 00 00 00 00 01 00 
      33.  00:6585                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  00:6585  00 00 50 00 00 00 00 00 
      34.  00:658D                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  00:658D  FE 0A 00 00 00 00 E0 00 
      35.  00:6595                          
      36.  00:6595                      SPRITE_P1_DOWN:
      37.  00:6595                          ; DOWN 1 - 00h
      38.  00:6595                          ; mask 0
      39.  00:6595                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  00:6595  07 0F 04 06 0F 07 1F 3F 
      40.  00:659D                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  00:659D  4C 4E 4E 3C 0C 0E 0F 08 
      41.  00:65A5                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  00:65A5  E0 F0 20 20 70 E0 F8 FC 
      42.  00:65AD                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  00:65AD  32 72 7E 7C 70 F0 C0 00 
      43.  00:65B5                          ; mask 1
      44.  00:65B5                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  00:65B5  00 00 19 19 10 3A 3A 78 
      45.  00:65BD                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  00:65BD  5F 5E 7E 3C 0C 0E 0F 04 
      46.  00:65C5                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  00:65C5  00 00 90 D8 88 58 5C 1E 
      47.  00:65CD                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  00:65CD  F6 FE FE 3C 30 70 A0 00 
      48.  00:65D5                          ; mask 2
      49.  00:65D5                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  00:65D5  00 00 1B 00 10 00 00 00 
      50.  00:65DD                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  00:65DD  6F 6F 7F 3F 0F 0F 0F 00 
      51.  00:65E5                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  00:65E5  00 00 D0 00 8C 00 00 00 
      52.  00:65ED                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  00:65ED  FA 7E 7E BC B0 70 80 00 
      53.  00:65F5                          
      54.  00:65F5                          ; DOWN 2
      55.  00:65F5                          ; mask 0 - 0Ch    
      56.  00:65F5                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  00:65F5  07 0F 04 06 0F 07 1F 3F 
      57.  00:65FD                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  00:65FD  4C 4E 7E 3C 0C 0E 05 00 
      58.  00:6605                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  00:6605  E0 F0 20 20 70 E0 F8 FC 
      59.  00:660D                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  00:660D  32 72 72 7C 70 F0 E0 40 
      60.  00:6615                          ; mask 1
      61.  00:6615                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  00:6615  00 00 19 19 10 3A 3A 78 
      62.  00:661D                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  00:661D  5F 7E 7E 3C 0C 0E 03 00 
      63.  00:6625                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  00:6625  00 00 90 D8 88 58 5C 1E 
      64.  00:662D                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  00:662D  F6 F6 FE 3C 30 70 E0 20 
      65.  00:6635                          ; mask 2
      66.  00:6635                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  00:6635  00 00 1B 00 10 00 00 00 
      67.  00:663D                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  00:663D  6F 7F 7F 3F 0F 0F 01 00 
      68.  00:6645                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  00:6645  00 00 D0 00 8C 00 00 00 
      69.  00:664D                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  00:664D  FA 7A 7E BC B0 70 E0 00 
      70.  00:6655                      
      71.  00:6655                      SPRITE_P1_LEFT:         
      72.  00:6655                          ; --- Slot 3
      73.  00:6655                          ; mask 0
      74.  00:6655                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  00:6655  07 0F 02 05 07 07 0F 0F 
      75.  00:665D                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  00:665D  07 03 03 03 01 03 03 04 
      76.  00:6665                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  00:6665  E0 F0 80 00 A0 E0 C0 C0 
      77.  00:666D                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  00:666D  E0 B0 70 F0 F0 F0 C0 00 
      78.  00:6675                          ; mask 1
      79.  00:6675                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  00:6675  00 00 18 1A 08 0A 12 10 
      80.  00:667D                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  00:667D  08 03 02 02 01 03 03 03 
      81.  00:6685                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  00:6685  00 00 78 F8 5C 1C 7E 7E 
      82.  00:668D                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  00:668D  FE 3E 7E 7C F8 F8 B0 00 
      83.  00:6695                          ; mask 2
      84.  00:6695                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  00:6695  00 00 1D 00 28 00 00 00 
      85.  00:669D                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  00:669D  00 07 06 06 07 07 03 00 
      86.  00:66A5                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  00:66A5  00 00 78 00 5C 00 00 00 
      87.  00:66AD                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  00:66AD  00 7E FE 7C F8 F8 80 00 
      88.  00:66B5                          ; --- Slot 4
      89.  00:66B5                          ; mask 0
      90.  00:66B5                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  00:66B5  07 0F 02 05 07 07 0F 0F 
      91.  00:66BD                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  00:66BD  07 03 03 03 01 03 04 00 
      92.  00:66C5                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  00:66C5  E0 F0 80 00 A0 E0 C0 C0 
      93.  00:66CD                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  00:66CD  E0 B0 D0 D0 F0 F0 E0 40 
      94.  00:66D5                          ; mask 1
      95.  00:66D5                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  00:66D5  00 00 18 1A 08 0A 12 10 
      96.  00:66DD                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  00:66DD  08 03 03 03 01 03 03 00 
      97.  00:66E5                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  00:66E5  00 00 78 F8 5C 1C 7E 7E 
      98.  00:66ED                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  00:66ED  FE 3E 9E 9C 98 F8 E0 30 
      99.  00:66F5                          ; mask 2
     100.  00:66F5                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  00:66F5  00 00 1D 00 28 00 00 00 
     101.  00:66FD                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  00:66FD  00 07 07 07 07 07 00 00 
     102.  00:6705                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  00:6705  00 00 78 00 5C 00 00 00 
     103.  00:670D                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  00:670D  00 7E BE BC 98 F8 E0 00 
     104.  00:6715                      
     105.  00:6715                      SPRITE_P1_RIGHT:
     106.  00:6715                          ; --- Slot 0
     107.  00:6715                          ; mask 0
     108.  00:6715                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  00:6715  07 0F 01 00 05 07 03 03 
     109.  00:671D                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  00:671D  07 0D 0E 0F 0F 0F 03 00 
     110.  00:6725                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  00:6725  E0 F0 40 A0 E0 E0 F0 F0 
     111.  00:672D                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  00:672D  E0 C0 C0 C0 80 C0 C0 20 
     112.  00:6735                          ; mask 1
     113.  00:6735                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  00:6735  00 00 1E 1F 3A 38 7E 7E 
     114.  00:673D                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  00:673D  7F 7C 7E 3E 1F 1F 0D 00 
     115.  00:6745                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  00:6745  00 00 18 58 10 50 48 08 
     116.  00:674D                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  00:674D  10 C0 40 40 80 C0 C0 C0 
     117.  00:6755                          ; mask 2
     118.  00:6755                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  00:6755  00 00 1E 00 3A 00 00 00 
     119.  00:675D                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  00:675D  00 7E 7F 3E 1F 1F 01 00 
     120.  00:6765                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  00:6765  00 00 B8 00 14 00 00 00 
     121.  00:676D                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  00:676D  00 E0 60 60 E0 E0 C0 00 
     122.  00:6775                          
     123.  00:6775                          ; --- Slot 2
     124.  00:6775                         ; mask 0
     125.  00:6775                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  00:6775  07 0F 01 00 05 07 03 03 
     126.  00:677D                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  00:677D  07 0D 0B 0B 0F 0F 07 02 
     127.  00:6785                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  00:6785  E0 F0 40 A0 E0 E0 F0 F0 
     128.  00:678D                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  00:678D  E0 C0 C0 C0 80 C0 20 00 
     129.  00:6795                          ; mask 1
     130.  00:6795                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  00:6795  00 00 1E 1F 3A 38 7E 7E 
     131.  00:679D                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  00:679D  7F 7C 79 39 19 1F 07 0C 
     132.  00:67A5                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  00:67A5  00 00 18 58 10 50 48 08 
     133.  00:67AD                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  00:67AD  10 C0 C0 C0 80 C0 C0 00 
     134.  00:67B5                              ; mask 2
     135.  00:67B5                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  00:67B5  00 00 1E 00 3A 00 00 00 
     136.  00:67BD                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  00:67BD  00 7E 7D 3D 19 1F 07 00 
     137.  00:67C5                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  00:67C5  00 00 B8 00 14 00 00 00 
     138.  00:67CD                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  00:67CD  00 E0 E0 E0 E0 E0 00 00 
     139.  00:67D5                          
     140.  00:67D5                      SPRITE_PATTERN:    
     141.  00:67D5                          ; P1 - DOWN 1 
     142.  00:67D5                          ; DOWN 1 - 00h
     143.  00:67D5                          ; mask 0
     144.  00:67D5                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  00:67D5  07 0F 04 06 0F 07 1F 3F 
     145.  00:67DD                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  00:67DD  4C 4E 4E 3C 0C 0E 0F 08 
     146.  00:67E5                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  00:67E5  E0 F0 20 20 70 E0 F8 FC 
     147.  00:67ED                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  00:67ED  32 72 7E 7C 70 F0 C0 00 
     148.  00:67F5                          ; mask 1
     149.  00:67F5                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  00:67F5  00 00 19 19 10 3A 3A 78 
     150.  00:67FD                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  00:67FD  5F 5E 7E 3C 0C 0E 0F 04 
     151.  00:6805                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  00:6805  00 00 90 D8 88 58 5C 1E 
     152.  00:680D                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  00:680D  F6 FE FE 3C 30 70 A0 00 
     153.  00:6815                          ; mask 2
     154.  00:6815                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  00:6815  00 00 1B 00 10 00 00 00 
     155.  00:681D                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  00:681D  6F 6F 7F 3F 0F 0F 0F 00 
     156.  00:6825                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  00:6825  00 00 D0 00 8C 00 00 00 
     157.  00:682D                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  00:682D  FA 7E 7E BC B0 70 80 00 
     158.  00:6835                          
     159.  00:6835                          ; DOWN 2
     160.  00:6835                          ; mask 0 - 0Ch    
     161.  00:6835                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  00:6835  07 0F 04 06 0F 07 1F 3F 
     162.  00:683D                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  00:683D  4C 4E 7E 3C 0C 0E 05 00 
     163.  00:6845                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  00:6845  E0 F0 20 20 70 E0 F8 FC 
     164.  00:684D                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  00:684D  32 72 72 7C 70 F0 E0 40 
     165.  00:6855                          ; mask 1
     166.  00:6855                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  00:6855  00 00 19 19 10 3A 3A 78 
     167.  00:685D                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  00:685D  5F 7E 7E 3C 0C 0E 03 00 
     168.  00:6865                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  00:6865  00 00 90 D8 88 58 5C 1E 
     169.  00:686D                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  00:686D  F6 F6 FE 3C 30 70 E0 20 
     170.  00:6875                          ; mask 2
     171.  00:6875                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  00:6875  00 00 1B 00 10 00 00 00 
     172.  00:687D                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  00:687D  6F 7F 7F 3F 0F 0F 01 00 
     173.  00:6885                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  00:6885  00 00 D0 00 8C 00 00 00 
     174.  00:688D                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  00:688D  FA 7A 7E BC B0 70 E0 00 
     175.  00:6895                          
     176.  00:6895                          ; Antichrist - RIGHT
     177.  00:6895                          ; mask 0 - 18h    
     178.  00:6895                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  00:6895  00 00 00 01 01 01 01 01 
     179.  00:689D                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  00:689D  01 01 07 07 01 01 00 00 
     180.  00:68A5                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  00:68A5  00 00 00 80 80 80 80 80 
     181.  00:68AD                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  00:68AD  80 80 E0 E0 80 80 00 00 
     182.  00:68B5                      
     183.  00:68B5                          ;Ghost 1 Left - 1CH
     184.  00:68B5                          ; mask 0
     185.  00:68B5                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  00:68B5  03 04 08 68 B5 90 50 40 
     186.  00:68BD                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  00:68BD  22 20 10 10 08 06 03 00 
     187.  00:68C5                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  00:68C5  C0 E0 70 36 BB 33 26 06 
     188.  00:68CD                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  00:68CD  0C 18 3E 19 07 0C F8 E0 
     189.  00:68D5                          ; mask 1    20h
     190.  00:68D5                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  00:68D5  00 07 0F 6F DF FF 6F 7F 
     191.  00:68DD                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  00:68DD  3F 3F 1F 1F 0F 05 03 00 
     192.  00:68E5                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  00:68E5  00 20 90 D6 DD DD DA FA 
     193.  00:68ED                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  00:68ED  F4 E8 CE EF FB F4 18 00 
     194.  00:68F5                          
     195.  00:68F5                          ; Ghost 2 Left - 24h
     196.  00:68F5                          ; mask 0    24-h
     197.  00:68F5                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  00:68F5  03 04 08 08 65 B0 90 40 
     198.  00:68FD                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  00:68FD  22 20 10 10 08 06 01 00 
     199.  00:6905                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  00:6905  C0 E0 70 30 B6 3B 27 06 
     200.  00:690D                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  00:690D  0C 18 3C 1A 06 0C F0 C0 
     201.  00:6915                          ; mask 1    28h
     202.  00:6915                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  00:6915  00 07 0F 0F 6F DF EF 7F 
     203.  00:691D                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  00:691D  3F 3F 1F 1F 0F 05 01 00 
     204.  00:6925                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  00:6925  00 20 90 D0 D6 DD D9 FA 
     205.  00:692D                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  00:692D  F4 E8 CC EE FA F4 30 00 
     206.  00:6935                      
     207.  00:6935                          ; Ghost 1 Right - 2Ch
     208.  00:6935                          ; mask 0
     209.  00:6935                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  00:6935  03 07 0E 6C DD CC 64 60 
     210.  00:693D                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  00:693D  30 18 7C 98 E0 30 1F 07 
     211.  00:6945                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  00:6945  C0 20 10 16 AD 09 0A 02 
     212.  00:694D                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  00:694D  44 04 08 08 10 60 C0 00 
     213.  00:6955                          ; mask 1    - 30h
     214.  00:6955                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  00:6955  00 04 09 6B BB BB 5B 5F 
     215.  00:695D                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  00:695D  2F 17 73 F7 DF 2F 18 00 
     216.  00:6965                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  00:6965  00 E0 F0 F6 FB FF F6 FE 
     217.  00:696D                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  00:696D  FC FC F8 F8 F0 A0 C0 00 
     218.  00:6975                          
     219.  00:6975                          ; Ghost 2 Right - 34h
     220.  00:6975                          ; mask 0
     221.  00:6975                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  00:6975  03 07 0E 0C 6D DC E4 60 
     222.  00:697D                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  00:697D  30 18 3C 58 60 30 0F 03 
     223.  00:6985                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  00:6985  C0 20 10 10 A6 0D 09 02 
     224.  00:698D                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  00:698D  44 04 08 08 10 60 80 00 
     225.  00:6995                          ; mask 1    38h
     226.  00:6995                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  00:6995  00 04 09 0B 6B BB 9B 5F 
     227.  00:699D                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  00:699D  2F 17 33 77 5F 2F 0C 00 
     228.  00:69A5                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  00:69A5  00 E0 F0 F0 F6 FB F7 FE 
     229.  00:69AD                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  00:69AD  FC FC F8 F8 F0 A0 80 00 
     230.  00:69B5                          
     231.  00:69B5                      
     232.  00:69B5                          ; Esqueleto Left - 1
     233.  00:69B5                          ; mask 0 - 3Ch
     234.  00:69B5                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  00:69B5  1F 1B 2E 24 3F 1F 1F 00 
     235.  00:69BD                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  00:69BD  03 05 09 04 01 02 02 04 
     236.  00:69C5                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  00:69C5  80 C0 C0 C0 80 00 00 80 
     237.  00:69CD                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  00:69CD  E0 D0 C8 C4 C0 20 20 40 
     238.  00:69D5                          ; mask 1 - 40h
     239.  00:69D5                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  00:69D5  1F 1F 3F 3F 3F 1E 0A 00 
     240.  00:69DD                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  00:69DD  03 05 09 04 01 00 00 00 
     241.  00:69E5                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  00:69E5  00 80 80 80 00 00 00 00 
     242.  00:69ED                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  00:69ED  80 10 88 84 80 00 00 00 
     243.  00:69F5                      
     244.  00:69F5                          ; Esqueleto Left - 2
     245.  00:69F5                          ; mask 0 - 44h
     246.  00:69F5                          ; mask 0
     247.  00:69F5                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  00:69F5  0F 0D 17 12 1F 0F 0F 00 
     248.  00:69FD                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  00:69FD  03 05 09 10 01 06 08 00 
     249.  00:6A05                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  00:6A05  C0 E0 60 60 C0 80 80 80 
     250.  00:6A0D                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  00:6A0D  E0 D0 C8 D0 C0 20 20 50 
     251.  00:6A15                          ; mask 1 - 48h
     252.  00:6A15                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  00:6A15  0F 0F 1F 1F 1F 0F 05 00 
     253.  00:6A1D                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  00:6A1D  03 05 09 10 01 00 00 00 
     254.  00:6A25                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  00:6A25  80 C0 C0 C0 80 00 00 00 
     255.  00:6A2D                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  00:6A2D  80 10 88 90 80 00 20 40 
     256.  00:6A35                          
     257.  00:6A35                          ; Esqueleto Right - 1
     258.  00:6A35                          ; mask 0 - 4Ch
     259.  00:6A35                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  00:6A35  01 03 03 03 01 00 00 01 
     260.  00:6A3D                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  00:6A3D  07 0B 13 23 03 04 04 02 
     261.  00:6A45                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  00:6A45  F8 D8 74 24 FC F8 F8 00 
     262.  00:6A4D                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  00:6A4D  C0 A0 90 20 80 40 40 20 
     263.  00:6A55                          ; mask 1 - 50h
     264.  00:6A55                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  00:6A55  00 01 01 01 00 00 00 00 
     265.  00:6A5D                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  00:6A5D  01 08 11 21 01 00 00 00 
     266.  00:6A65                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  00:6A65  F8 F8 FC FC FC 78 50 00 
     267.  00:6A6D                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  00:6A6D  C0 A0 90 20 80 00 00 00 
     268.  00:6A75                          
     269.  00:6A75                          ; Esqueleto Right - 2
     270.  00:6A75                          ; mask 0 - 54h
     271.  00:6A75                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  00:6A75  03 07 06 06 03 01 01 01 
     272.  00:6A7D                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  00:6A7D  07 0B 13 0B 03 04 04 0A 
     273.  00:6A85                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  00:6A85  F0 B0 E8 48 F8 F0 F0 00 
     274.  00:6A8D                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  00:6A8D  C0 A0 90 08 80 60 10 00 
     275.  00:6A95                          ; mask 1 - 58h
     276.  00:6A95                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  00:6A95  01 03 03 03 01 00 00 00 
     277.  00:6A9D                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  00:6A9D  01 08 11 09 01 00 04 02 
     278.  00:6AA5                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  00:6AA5  F0 F0 F8 F8 F8 F0 A0 00 
     279.  00:6AAD                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  00:6AAD  C0 A0 90 08 80 00 00 00 
     280.  00:6AB5                      
     281.  00:6AB5                      SPRITE_COLOR_TABLE:       
     282.  00:6AB5                           ;P1 - DOWN 1
     283.  00:6AB5                          ;DOWN 1
     284.  00:6AB5                          ; attr 0
     285.  00:6AB5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  00:6AB5  05 05 0A 0B 0B 0B 0B 0B 
     286.  00:6ABD                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  00:6ABD  04 04 04 0A 0A 0A 08 08 
     287.  00:6AC5                          ; attr 1
     288.  00:6AC5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  00:6AC5  00 00 44 45 45 45 45 45 
     289.  00:6ACD                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  00:6ACD  4A 4A 4A 44 44 44 45 45 
     290.  00:6AD5                          ; attr 2
     291.  00:6AD5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  00:6AD5  00 00 41 00 40 00 00 00 
     292.  00:6ADD                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  00:6ADD  41 41 41 41 41 41 42 00 
     293.  00:6AE5                               
     294.  00:6AE5                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  00:6AE5                          ; Disparo - antichrist    
     296.  00:6AE5                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  00:6AE5  00 00 00 0A 0A 0A 0A 0A 
     297.  00:6AED                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  00:6AED  0A 0A 0A 0A 0A 0A 00 00 
     298.  00:6AF5                          ; Fantasma
     299.  00:6AF5                          ; attr 0
     300.  00:6AF5                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  00:6AF5  0F 08 08 08 08 08 08 08 
     301.  00:6AFD                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  00:6AFD  08 08 08 08 08 08 08 0F 
     302.  00:6B05                          ; attr 1
     303.  00:6B05                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  00:6B05  00 47 47 47 47 47 47 47 
     304.  00:6B0D                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  00:6B0D  47 47 47 47 47 47 47 00 
     305.  00:6B15                          
     306.  00:6B15                          
     307.  00:6B15                          ; Esqueleto Left 1
     308.  00:6B15                          ; attr 0
     309.  00:6B15                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  00:6B15  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  00:6B1D                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  00:6B1D  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  00:6B25                          ; attr 1
     312.  00:6B25                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  00:6B25  41 49 49 49 41 41 41 00 
     313.  00:6B2D                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  00:6B2D  41 41 41 41 41 00 00 00 
     314.  00:6B35                      
     315.  00:6B35                      SPRITE_COLOR_P1_UP:
     316.  00:6B35                          ;UP 1
     317.  00:6B35                          ; attr 0
     318.  00:6B35                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  00:6B35  05 05 0A 05 05 05 05 05 
     319.  00:6B3D                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  00:6B3D  0A 05 0B 0A 0A 0A 08 08 
     320.  00:6B45                          ; attr 1
     321.  00:6B45                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  00:6B45  00 00 44 00 40 00 00 00 
     322.  00:6B4D                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  00:6B4D  44 4A 45 45 45 45 45 45 
     323.  00:6B55                          ; attr 2
     324.  00:6B55                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  00:6B55  00 00 41 00 00 00 00 00 
     325.  00:6B5D                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  00:6B5D  41 41 00 00 00 00 42 00 
     326.  00:6B65                          
     327.  00:6B65                          ;SPRITE_COLOR_P1_UP2:
     328.  00:6B65                          ;UP 1
     329.  00:6B65                          ; attr 0
     330.  00:6B65                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  00:6B65  05 05 0A 05 05 05 05 05 
     331.  00:6B6D                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  00:6B6D  0A 05 0B 0A 0A 0A 08 08 
     332.  00:6B75                          ; attr 1
     333.  00:6B75                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  00:6B75  00 00 44 00 40 00 00 00 
     334.  00:6B7D                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  00:6B7D  44 4A 45 45 45 45 45 45 
     335.  00:6B85                          ; attr 2
     336.  00:6B85                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  00:6B85  00 00 41 00 00 00 00 00 
     337.  00:6B8D                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  00:6B8D  41 41 00 00 00 00 42 00 
     338.  00:6B95                      
     339.  00:6B95                      
     340.  00:6B95                      SPRITE_COLOR_P1_DOWN:
     341.  00:6B95                          ;DOWN 1
     342.  00:6B95                          ; attr 0
     343.  00:6B95                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  00:6B95  05 05 0A 0B 0B 0B 0B 0B 
     344.  00:6B9D                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  00:6B9D  04 04 04 0A 0A 0A 08 08 
     345.  00:6BA5                          ; attr 1
     346.  00:6BA5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  00:6BA5  00 00 44 45 45 45 45 45 
     347.  00:6BAD                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  00:6BAD  4A 4A 4A 44 44 44 45 45 
     348.  00:6BB5                          ; attr 2
     349.  00:6BB5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  00:6BB5  00 00 41 00 40 00 00 00 
     350.  00:6BBD                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  00:6BBD  41 41 41 41 41 41 42 00 
     351.  00:6BC5                          ;SPRITE_COLOR_P1_DOWN2:
     352.  00:6BC5                          ;DOWN 1
     353.  00:6BC5                          ; attr 0
     354.  00:6BC5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  00:6BC5  05 05 0A 0B 0B 0B 0B 0B 
     355.  00:6BCD                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  00:6BCD  04 04 04 0A 0A 0A 08 08 
     356.  00:6BD5                          ; attr 1
     357.  00:6BD5                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  00:6BD5  00 00 44 45 45 45 45 45 
     358.  00:6BDD                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  00:6BDD  4A 4A 4A 44 44 44 45 45 
     359.  00:6BE5                          ; attr 2
     360.  00:6BE5                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  00:6BE5  00 00 41 00 40 00 00 00 
     361.  00:6BED                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  00:6BED  41 41 41 41 41 41 42 00 
     362.  00:6BF5                      
     363.  00:6BF5                      SPRITE_COLOR_P1_RIGHT:
     364.  00:6BF5                          ; attr 0
     365.  00:6BF5                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  00:6BF5  05 05 0A 0B 0B 0B 0B 0B 
     366.  00:6BFD                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  00:6BFD  0B 0A 0A 0B 0A 0A 08 08 
     367.  00:6C05                          ; attr 1
     368.  00:6C05                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  00:6C05  00 00 44 45 45 45 45 45 
     369.  00:6C0D                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  00:6C0D  45 44 44 44 44 44 45 45 
     370.  00:6C15                          ; attr 2
     371.  00:6C15                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  00:6C15  00 00 41 00 40 00 00 00 
     372.  00:6C1D                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  00:6C1D  00 41 41 41 41 41 42 00 
     373.  00:6C25                             
     374.  00:6C25                          ; attr 0
     375.  00:6C25                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  00:6C25  05 05 0A 0B 0B 0B 0B 0B 
     376.  00:6C2D                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  00:6C2D  0B 0A 0A 0A 0B 0A 08 08 
     377.  00:6C35                          ; attr 1
     378.  00:6C35                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  00:6C35  00 00 44 45 45 45 45 45 
     379.  00:6C3D                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  00:6C3D  45 44 44 44 44 44 45 45 
     380.  00:6C45                          ; attr 2
     381.  00:6C45                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  00:6C45  00 00 41 00 40 00 00 00 
     382.  00:6C4D                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  00:6C4D  00 41 41 41 41 41 42 00 
     383.  00:6C55                      
     384.  00:6C55                      stg1_gate:
     385.  00:6C55  00 00 00 00 00 00       DB #00,#00,#00,#00,#00,#00
     386.  00:6C5B                      stg1_gate_blocked:
     387.  00:6C5B  01 01 01 01 01 01       DB #01,#01,#01,#01,#01,#01
     388.  00:6C61                      mapa1:
     389.  00:6C61                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     389.  00:6C61  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     389.  00:6C71  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  00:6C81                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     390.  00:6C81  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  00:6C91  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     391.  00:6CA1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  00:6CA1  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  00:6CB1  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  00:6CC1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  00:6CC1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  00:6CD1  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  00:6CE1                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  00:6CE1  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     393.  00:6CF1  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  00:6D01                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:6D01  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:6D11  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:6D21                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:6D21  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     395.  00:6D31  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:6D41                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  00:6D41  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  00:6D51  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  00:6D61                          
     398.  00:6D61                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  00:6D61  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  00:6D71  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  00:6D81                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  00:6D81  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  00:6D91  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  00:6DA1                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  00:6DA1  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  00:6DB1  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  00:6DC1                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     401.  00:6DC1  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  00:6DD1  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     402.  00:6DE1                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     402.  00:6DE1  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  00:6DF1  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     403.  00:6E01                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  00:6E01  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  00:6E11  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  00:6E21                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     404.  00:6E21  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     404.  00:6E31  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     405.  00:6E41                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  00:6E41  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     405.  00:6E51  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  00:6E61                      
     407.  00:6E61                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  00:6E61  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     407.  00:6E71  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  00:6E81                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  00:6E81  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     408.  00:6E91  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  00:6EA1                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  00:6EA1  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     409.  00:6EB1  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  00:6EC1                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  00:6EC1  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     410.  00:6ED1  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  00:6EE1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     411.  00:6EE1  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  00:6EF1  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  00:6F01                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  00:6F01  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     412.  00:6F11  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:6F21                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     413.  00:6F21  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:6F31  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:6F41                      
     415.  00:6F41                      mapa2:
     416.  00:6F41                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:6F41  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:6F51  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:6F61                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  00:6F61  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:6F71  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:6F81                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  00:6F81  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:6F91  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:6FA1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:6FA1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:6FB1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:6FC1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  00:6FC1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:6FD1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:6FE1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  00:6FE1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:6FF1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:7001                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  00:7001  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:7011  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:7021                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:7021  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:7031  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:7041                            
     425.  00:7041                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  00:7041  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:7051  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:7061                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  00:7061  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:7071  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:7081                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  00:7081  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:7091  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:70A1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  00:70A1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:70B1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  00:70C1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  00:70C1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     429.  00:70D1  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  00:70E1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  00:70E1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  00:70F1  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  00:7101                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  00:7101  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  00:7111  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  00:7121                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  00:7121  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  00:7131  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  00:7141                            
     434.  00:7141                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  00:7141  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  00:7151  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  00:7161                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  00:7161  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  00:7171  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  00:7181                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  00:7181  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  00:7191  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  00:71A1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  00:71A1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     437.  00:71B1  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  00:71C1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  00:71C1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     438.  00:71D1  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  00:71E1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  00:71E1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     439.  00:71F1  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  00:7201                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  00:7201  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     440.  00:7211  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  00:7221                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  00:7221  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     441.  00:7231  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  00:7241                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  00:7241  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     442.  00:7251  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  00:7261                            
     444.  00:7261                      mapa0:      
     445.  00:7261                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     445.  00:7261  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     445.  00:7271  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     446.  00:7281                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     446.  00:7281  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     446.  00:7291  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     447.  00:72A1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     447.  00:72A1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     447.  00:72B1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     448.  00:72C1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     448.  00:72C1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     448.  00:72D1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     449.  00:72E1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     449.  00:72E1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     449.  00:72F1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     450.  00:7301                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     450.  00:7301  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     450.  00:7311  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     451.  00:7321                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     451.  00:7321  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     451.  00:7331  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     452.  00:7341                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     452.  00:7341  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     452.  00:7351  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     453.  00:7361                            
     454.  00:7361                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     454.  00:7361  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     454.  00:7371  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     455.  00:7381                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     455.  00:7381  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     455.  00:7391  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     456.  00:73A1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     456.  00:73A1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     456.  00:73B1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     457.  00:73C1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:73C1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:73D1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:73E1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:73E1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:73F1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:7401                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:7401  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     459.  00:7411  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:7421                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     460.  00:7421  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     460.  00:7431  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:7441                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     461.  00:7441  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:7451  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:7461                      
     463.  00:7461                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     463.  00:7461  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     463.  00:7471  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     464.  00:7481                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     464.  00:7481  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:7491  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:74A1                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     465.  00:74A1  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     465.  00:74B1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     466.  00:74C1                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     466.  00:74C1  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     466.  00:74D1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     467.  00:74E1                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     467.  00:74E1  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  00:74F1  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     468.  00:7501                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     468.  00:7501  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  00:7511  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     469.  00:7521                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     469.  00:7521  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  00:7531  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     470.  00:7541                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01   
     470.  00:7541  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  00:7551  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     471.  00:7561                            
     472.  00:7561                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     472.  00:7561  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     472.  00:7571  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     473.  00:7581                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     473.  00:7581  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     473.  00:7591  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     474.  00:75A1                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     474.  00:75A1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     474.  00:75B1  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     475.  00:75C1                          
     476.  00:75C1                      
     477.  00:75C1                      SPRITE_COLOR_P1_LEFT:
     478.  00:75C1                          ; attr 0
     479.  00:75C1                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     479.  00:75C1  05 05 0A 0B 0B 0B 0B 0B 
     480.  00:75C9                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     480.  00:75C9  0B 0A 0A 0B 0A 0A 08 08 
     481.  00:75D1                          ; attr 1
     482.  00:75D1                          DB $00,$00,$44,$45,$45,$45,$45,$45
     482.  00:75D1  00 00 44 45 45 45 45 45 
     483.  00:75D9                          DB $45,$44,$44,$44,$44,$44,$45,$45
     483.  00:75D9  45 44 44 44 44 44 45 45 
     484.  00:75E1                          ; attr 2
     485.  00:75E1                          DB $00,$00,$41,$00,$40,$00,$00,$00
     485.  00:75E1  00 00 41 00 40 00 00 00 
     486.  00:75E9                          DB $00,$41,$41,$41,$41,$41,$42,$00
     486.  00:75E9  00 41 41 41 41 41 42 00 
     487.  00:75F1                          ;SPRITE_COLOR_P1_LEFT2:    
     488.  00:75F1                          ; attr 0
     489.  00:75F1                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     489.  00:75F1  05 05 0A 0B 0B 0B 0B 0B 
     490.  00:75F9                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     490.  00:75F9  0B 0A 0A 0A 0B 0A 08 08 
     491.  00:7601                          ; attr 1
     492.  00:7601                          DB $00,$00,$44,$45,$45,$45,$45,$45
     492.  00:7601  00 00 44 45 45 45 45 45 
     493.  00:7609                          DB $45,$44,$44,$44,$44,$44,$45,$45
     493.  00:7609  45 44 44 44 44 44 45 45 
     494.  00:7611                          ; attr 2
     495.  00:7611                          DB $00,$00,$41,$00,$40,$00,$00,$00
     495.  00:7611  00 00 41 00 40 00 00 00 
     496.  00:7619                          DB $00,$41,$41,$41,$41,$41,$42,$00
     496.  00:7619  00 41 41 41 41 41 42 00 
     497.  00:7621                      
     498.  00:7621                      BLANK_DATA:
     499.  00:7621                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     499.  00:7621  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     499.  00:7631  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     500.  00:7641                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     500.  00:7641  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     500.  00:7651  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     501.  00:7661                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     501.  00:7661  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     501.  00:7671  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     502.  00:7681                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     502.  00:7681  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     502.  00:7691  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     503.  00:76A1                      
     504.  00:76A1                          
     505.  00:76A1                      PaletteData:
     506.  00:76A1                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     507.  00:76A1  00 00                   db 0x00, 0x00 ; Color index 0
     508.  00:76A3  30 00                   db 0x30, 0x00 ; Color index 1
     509.  00:76A5  70 06                   db 0x70, 0x06 ; Color index 2
     510.  00:76A7  50 00                   db 0x50, 0x00 ; Color index 3
     511.  00:76A9  11 01                   db 0x11, 0x01 ; Color index 4
     512.  00:76AB  22 02                   db 0x22, 0x02 ; Color index 5
     513.  00:76AD  06 02                   db 0x06, 0x02 ; Color index 6
     514.  00:76AF  77 07                   db 0x77, 0x07 ; Color index 7
     515.  00:76B1  33 03                   db 0x33, 0x03 ; Color index 8
     516.  00:76B3  66 06                   db 0x66, 0x06 ; Color index 9
     517.  00:76B5  70 00                   db 0x70, 0x00 ; Color index 10
     518.  00:76B7  64 05                   db 0x64, 0x05 ; Color index 11
     519.  00:76B9  50 03                   db 0x50, 0x03 ; Color index 12
     520.  00:76BB  02 04                   db 0x02, 0x04 ; Color index 13
     521.  00:76BD  01 02                   db 0x01, 0x02 ; Color index 14
     522.  00:76BF  00 00                   db 0x00, 0x00 ; Color index 15
     523.  00:76C1                      
     524.  00:76C1                      dummy_SPR_ATT__TBL:
     525.  00:76C1  D9 00 00 00             db $D9, $00, $00, $00
     526.  00:76C5  D9 00 00 00             db $D9, $00, $00, $00
     527.  00:76C9  D9 00 00 00             db $D9, $00, $00, $00
     528.  00:76CD  D9 00 00 00             db $D9, $00, $00, $00
     529.  00:76D1  D9 00 00 00             db $D9, $00, $00, $00
     530.  00:76D5  D9 00 00 00             db $D9, $00, $00, $00
     531.  00:76D9  D9 00 00 00             db $D9, $00, $00, $00
     532.  00:76DD  D9 00 00 00             db $D9, $00, $00, $00
     533.  00:76E1                      
     534.  00:76E1  D9 00 00 00             db $D9, $00, $00, $00
     535.  00:76E5  D9 00 00 00             db $D9, $00, $00, $00
     536.  00:76E9  D9 00 00 00             db $D9, $00, $00, $00
     537.  00:76ED  D9 00 00 00             db $D9, $00, $00, $00
     538.  00:76F1  D9 00 00 00             db $D9, $00, $00, $00
     539.  00:76F5  D9 00 00 00             db $D9, $00, $00, $00
     540.  00:76F9  D9 00 00 00             db $D9, $00, $00, $00
     541.  00:76FD  D9 00 00 00             db $D9, $00, $00, $00
     542.  00:7701                      
     543.  00:7701  D9 00 00 00             db $D9, $00, $00, $00
     544.  00:7705  D9 00 00 00             db $D9, $00, $00, $00
     545.  00:7709  D9 00 00 00             db $D9, $00, $00, $00
     546.  00:770D  D9 00 00 00             db $D9, $00, $00, $00
     547.  00:7711  D9 00 00 00             db $D9, $00, $00, $00
     548.  00:7715  D9 00 00 00             db $D9, $00, $00, $00
     549.  00:7719  D9 00 00 00             db $D9, $00, $00, $00
     550.  00:771D  D9 00 00 00             db $D9, $00, $00, $00
     551.  00:7721                      
     552.  00:7721  D9 00 00 00             db $D9, $00, $00, $00
     553.  00:7725  D9 00 00 00             db $D9, $00, $00, $00
     554.  00:7729  D9 00 00 00             db $D9, $00, $00, $00
     555.  00:772D  D9 00 00 00             db $D9, $00, $00, $00
     556.  00:7731  D9 00 00 00             db $D9, $00, $00, $00
     557.  00:7735  D9 00 00 00             db $D9, $00, $00, $00
     558.  00:7739  D9 00 00 00             db $D9, $00, $00, $00
     559.  00:773D  D9 00 00 00             db $D9, $00, $00, $00
     609   00:7741                      TILES1:
     610   00:7741  (07F9)               INCBIN "gfx\tiles1.sc5",#7
     611   00:7F3A                      
     612   00:7F3A  (01)                 PAGE 1
     613   01:8000                      ; CODE O NO
     614   01:8000                      
     615   01:8000  (02)                 PAGE 2
     616   02:8000                      
     617   02:8000  (03)                 PAGE 3
     618   03:8000                      
     619   03:8000  (04)                 PAGE 4
     620   04:8000  (05)                 PAGE 5
     621   05:8000  (06)                 PAGE 6
     622   06:8000                      FONT:
     623   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     624   06:87F7  (07)                 PAGE 7
     625   07:8000                      CEMENTER1
     626   07:8000                       ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     627   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     628   07:C000  (08)                 PAGE 8
     629   08:8000  (200D)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     630   08:A00D  (09)                 PAGE 9
     631   09:8000                      GRAPHIC
     632   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     633   09:C000  (0A)                 PAGE 10
     634   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     635   0A:C000                      
     636   0A:C000  (0B)                 PAGE 11
     637   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     638   0B:C000                      
     639   0B:C000  (0C)                 PAGE 12
     640   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     641   0C:9400                      
     642   0C:9400  (0D)                 PAGE 13
     643   0D:8000                      CEMENTER2
     644   0D:8000                      ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     645   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     646   0D:C000  (0E)                 PAGE 14
     647   0E:8000  (200E)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     648   0E:A00E  (0F)                 PAGE 15
     649   0F:C000                      ;---------------------------------------------------------
     650   0F:C000                      ; Variables
     651   0F:C000                      ;---------------------------------------------------------
     652   0F:C000                      	
     653   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     654   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     655   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     656   0F:C000                      ;ETC
     657   0F:C000                      ;
     658   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ; VDP variables
       2.  0F:C000  00 (15)             tileDat: ds 15
       3.  0F:C00F  00 (15)             energyDat: ds 15
       4.  0F:C01E                      
       5.  0F:C01E                      ; puzzle 1st stage
       6.  0F:C01E  00 (1)              stg1_puzzle_solved DS 1
       7.  0F:C01F                      
       8.  0F:C01F  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
       9.  0F:C020  00 (1)              SHOWING_MIKE_DIALOG  DS 1
      10.  0F:C021  00 (1)              SHOWING_JOHN_DIALOG  DS 1
      11.  0F:C022  00 (1)              SHOWING_GUS_DIALOG  DS 1
      12.  0F:C023  (0F:0008)           FONT_HEIGHT EQU 8
      13.  0F:C023  (0F:0008)           FONT_WIDTH  EQU 8
      14.  0F:C023  00 (2)              CHR_ACR DS 2
      15.  0F:C025  00 (1)              PTR_STR_DX DS 1
      16.  0F:C026  00 (1)              PTR_STR_DY DS 1
      17.  0F:C027                      
      18.  0F:C027  00 (1)              LAST_KEY_PRESSED DS 1
      19.  0F:C028  00 (1)              OLD_KEY_PRESSED DS 1
      20.  0F:C029  00                  JIFFY_TEMP DB $00
      21.  0F:C02A  00                  CHAR_SPEED_X DB $00
      22.  0F:C02B  00                  CHAR_SPEED_Y DB $00
      23.  0F:C02C  00                  CHAR_SPEED_X_GHOST DB $00
      24.  0F:C02D  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      25.  0F:C02E  00 (1)              CHAR_GHOST_DEAD DS 1
      26.  0F:C02F  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      27.  0F:C030  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      28.  0F:C031  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      29.  0F:C032  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      30.  0F:C033  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      31.  0F:C034  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      32.  0F:C035  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      33.  0F:C036  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      34.  0F:C037  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      35.  0F:C038  00 (1)              CHAR_SPEED_SHOOT DS 1
      36.  0F:C039                      SPRITE_ATTRS:
      37.  0F:C039  00 (128)                DS 128
      38.  0F:C0B9                      SLOTBIOS:
      39.  0F:C0B9  00 (1)                  DS 1
      40.  0F:C0BA                      SLOTGAME:
      41.  0F:C0BA  00 (1)                  DS 1
      42.  0F:C0BB                      SLOTRAM:
      43.  0F:C0BB  00 (1)                  DS 1
      44.  0F:C0BC                      SPRITE_PTR_REPLACE:
      45.  0F:C0BC  00 (2)                  DS 2
      46.  0F:C0BE                      SPRITE_COLOR_REPLACE:
      47.  0F:C0BE  00 (2)                  DS 2
      48.  0F:C0C0                      SPRITE_COLOR_REPLACE2:
      49.  0F:C0C0  00 (2)                  DS 2
      50.  0F:C0C2                      MAPA:
      51.  0F:C0C2  00 (2)                  DS 2
      52.  0F:C0C4                      BITMAP:
      53.  0F:C0C4  00 (2)                  DS 2
      54.  0F:C0C6                      MAP_RAM:
      55.  0F:C0C6  00 (736)                DS 736
      56.  0F:C3A6                      
      57.  0F:C3A6                      
     659   0F:C3A6                          include "include\ayFX-RAM.ASM"
       1.  0F:C3A6                      		; --- ayFX REPLAYER v1.31 ---
       2.  0F:C3A6                      
       3.  0F:C3A6                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  0F:C3A6                      
       5.  0F:C3A6  00 (1)              ayFX_MODE:	ds	1			; ayFX mode
       6.  0F:C3A7  00 (2)              ayFX_BANK:	ds	2			; Current ayFX Bank
       7.  0F:C3A9  00 (1)              ayFX_PRIORITY:	ds	1			; Current ayFX stream priotity
       8.  0F:C3AA  00 (2)              ayFX_POINTER:	ds	2			; Pointer to the current ayFX stream
       9.  0F:C3AC  00 (2)              ayFX_TONE:	ds	2			; Current tone of the ayFX stream
      10.  0F:C3AE  00 (1)              ayFX_NOISE:	ds	1			; Current noise of the ayFX stream
      11.  0F:C3AF  00 (1)              ayFX_VOLUME:	ds	1			; Current volume of the ayFX stream
      12.  0F:C3B0  00 (1)              ayFX_CHANNEL:	ds	1			; PSG channel to play the ayFX stream
      13.  0F:C3B1                      IF ( AYFXRELATIVE == 1 )
      14.  0F:C3B1                    ~ 	ayFX_VT:	sds	2			; ayFX relative volume table pointer
      15.  0F:C3B1                    ~ ENDIF
      16.  0F:C3B1                      
      17.  0F:C3B1                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      18.  0F:C3B1                      ;AYREGS:		.ds	14			; Ram copy of PSG registers
      19.  0F:C3B1                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     660   0F:C3B1  (0000)              	ENDMAP
     661   0F:C3B1                        

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:00000069   CLRSPR
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000071   STG2_TILE1_X
00:0000006E   STG2_TILE1_Y
00:00004010   ANDY_MAX_ENERGY
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006 X MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018 X SPR_GHOST_STG2
00:0000003C X SPR_GHOST_STG2_PTRN_L1
00:00000044 X SPR_GHOST_STG2_PTRN_L2
00:0000004C X SPR_GHOST_STG2_PTRN_R1
00:00000054 X SPR_GHOST_STG2_PTRN_R2
00:00004016   mike_tomb_strings
00:0000401C   string01M
00:00004025   string02M
00:00004041   string03M
00:00004042   john_tomb_strings
00:00004048   string01J
00:00004051   string02J
00:0000406C   string03J
00:0000406D   gus_tomb_strings
00:00004073   string01G
00:0000407C   string02G
00:00004099   string03G
00:0000409A   stg1_skull_strings
00:000040A0   string01Sk
00:000040A8   string02Sk
00:000040C3   string03Sk
00:000040C4   stg1_puzzle_solved_strings
00:000040CA   string01P
00:000040D1   string02P
00:000040EA   string03P
00:000040EB   check_spr_collision
00:000040F8   check_spr_collision.no_collision
00:000040FB   get_bloque_en_X_Y
00:0000411C   SetVdp_Write
00:00004138   Set212Lines
00:00004144   ClearVram_MSX2
00:0000414E   ClearVram_MSX2.loop_2
00:00004150   ClearVram_MSX2.loop_1
00:00004152   ClearVram_MSX2.loop
00:0000415F X opening_screen
00:00004182   load_screen
00:000041A4   _vdpsetvramwr
00:000041B5 X _vdpsetvramwr14
00:000041BE   GETSLOT
00:000041D5   EXIT
00:000041D7   SETPAGES32K
00:000041DC   NOPRET
00:000041EA   SET_SCREEN5_MODE
00:0000420F   DUMP_SPR_ALL
00:00004234   load_tiles_vdp
00:0000423E   DUMP_SPR_ATTS
00:00004258 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004259   DUMP_SPR_P1
00:00004276   SetPalette
00:00004285 X DUMMY_SPR_ATTS
00:00004292   move_up
00:000042CC   move_down
00:00004307   move_right
00:00004318   move_right.KB_UPDOWN_PRESSED
00:00004366   move_left
00:00004377   move_left.KB_UPDOWN_PRESSED
00:000043C5   CHECK_DIRECTION_MAIN
00:000043E7   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000043FC   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:00004411   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:00004426   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000443B   CHECK_DIRECTION_MAIN.FINISH
00:00004452   UPDATE_MOVEMENT
00:0000447A   ANIMATE_P1
00:000044A1   ANIMATE_P1.SET_SPR_1P_2
00:000044B8   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:000044BE   NO_MOVEMENT
00:000044BF   MOVE_SHOOT
00:000044D7   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:000044DF   MOVE_SHOOT.MOVE_SHOOT_UP
00:000044E7   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000044EF   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000044F4   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:00004509   MOVE_SHOOT.ADD_SHOOT_Y
00:00004513   MOVE_SHOOT.ADD_DISTANCE
00:0000451E X MOVE_SHOOT.HIDE_SHOOT
00:0000452A   SHOOT_MAIN_CHAR
00:00004564   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:00004573   SHOOT_MAIN_CHAR.SHOOT_UP
00:00004586   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:00004596   SHOOT_MAIN_CHAR.CONTINUE
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008 X VDP_NX
00:0000000A X VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098 X CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008 X VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000010   ENERGY_WIDTH
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_PAGE
00:00008000 X TILES_START_ADDR
00:00000002   BACK_BUFFER
00:00000000   FRONT_BUFFER
00:00000014   DIAGBOX_HEIGHT
00:000000FF   DIAGBOX_WIDTH
00:0000459A   initVDPBuffers
00:000045B1   print_strings_dialog_box
00:000045DE   print_string
00:000045DE   print_string.loop_str
00:000045F9   print_string.first_line_font
00:00004612   print_char
00:00004649 X CLEAR_DIALOG_BOX_v1
00:0000467B X CLEAR_DIALOG_BOX_v2
00:000046AD   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:000046B4 X SETPAG
00:000046C2 X SET_WR
00:000046DD X SET_RD
00:000046F6   VDPCMD
00:00004709   WAITCE
00:00004721   ENASCR
00:00004728   DISSCR
00:0000472D   DISSCR.OUT
00:00004739 X ENASPR
00:00004740 X DISSPR
00:00004745   DISSPR.OUT
00:00004751 X LIN192
00:00004758 X LIN212
00:0000475D   LIN212.OUT
00:00004769   VDP_Ready
00:00004782   DRAW_ANDY_ENERGY
00:00004795   tileDatROM
00:000047A4   energyDatROM
00:000047B3   DiagBoxToBackBufROM
00:000047C2   DiagBoxToFrontkBufROM
00:000047D1 X DiagBoxClearROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:00000017   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:000047E0   CHECKLP
00:000047F1 X PT3_MUTE
00:000047FD   PT3_INIT
00:0000483C   PT3_INIT.TP_0
00:00004848   PT3_INIT.TP_1
00:0000484F   PT3_INIT.TP_2
00:000048BD   PT3_INIT.L1
00:000048CA   PT3_INIT.L2
00:000048CE X PT3_INIT.L3
00:000048F5   PT3_INIT.CORR_1
00:00004903   PT3_INIT.CORR_2
00:0000490A   PT3_INIT.TC_EXIT
00:00004915   PT3_INIT.INITV1
00:0000491D   PT3_INIT.INITV2
00:00004931   PT3_INIT.INITV3
00:00004935   PD_OrSm
00:0000493F   PD_SAM
00:00004940   PD_SAM_
00:00004956   PD_VOL
00:0000495F   PD_EOff
00:00004967   PD_SorE
00:00004971   PD_ENV
00:00004976   PD_ORN
00:0000497B   PD_ESAM
00:00004988   PTDECOD
00:00004997   PD_LOOP
00:0000499A   PD_LP2
00:000049C7   PD_NOIS
00:000049CC   PD_REL
00:000049D2   PD_NOTE
00:000049DA   PD_RES
00:000049EC   PD_FIN
00:000049F3   C_PORTM
00:00004A3E   C_PORTM.NOSIG
00:00004A48   SET_STP
00:00004A54   C_GLISS
00:00004A67   C_SMPOS
00:00004A6D   C_ORPOS
00:00004A73   C_VIBRT
00:00004A8B   C_ENGLS
00:00004A9D   C_DELAY
00:00004AA3   SETENV
00:00004ABE   C_NOP
00:00004ABF   SETORN
00:00004AD8   SPCCOMS
00:00004AF8   CHREGS
00:00004B1B   CHREGS.CH_ORPS
00:00004B26   CHREGS.CH_NTP
00:00004B2C   CHREGS.CH_NOK
00:00004B47   CHREGS.CH_SMPS
00:00004B5D   CHREGS.CH_NOAC
00:00004BA4   CHREGS.CH_STPP
00:00004BB9   CHREGS.CH_AMP
00:00004BCB   CHREGS.CH_AMIN
00:00004BD0   CHREGS.CH_SVAM
00:00004BD3   CHREGS.CH_NOAM
00:00004BDC   CHREGS.CH_APOS
00:00004BE2   CHREGS.CH_VOL
00:00004BED X CHREGS.CH_ENV
00:00004BF4   CHREGS.CH_NOEN
00:00004C0E   CHREGS.NO_ENAC
00:00004C15   CHREGS.NO_ENSL
00:00004C23   CHREGS.CH_MIX
00:00004C27   CHREGS.CH_EXIT
00:00004C46   CHREGS.CH_ONDL
00:00004C4A   PT3_PLAY
00:00004C7E   PT3_PLAY.PLNLP
00:00004CA5   PT3_PLAY.PL1A
00:00004CB0   PT3_PLAY.PL1B
00:00004CC5   PT3_PLAY.PL1C
00:00004CDA   PT3_PLAY.PL1D
00:00004CE0   PT3_PLAY.PL2
00:00004D42   PT3_ROUT
00:00004D43   ROUT_A0
00:00004D4F   ROUT_A0.LOUT
00:00004D63   NT_DATA
00:00004D73   T_
00:00004D73   TCOLD_0
00:00004D7F   TCNEW_1
00:00004D7F   TCOLD_1
00:00004D81   TCOLD_2
00:00004D93   TCNEW_3
00:00004D94   TCOLD_3
00:00004D9D   TCNEW_0
00:00004DA8   TCNEW_2
00:00004DB3   EMPTYSAMORN
00:00004DB7   T_PACK
00:0000F000   PT3_SETUP
00:0000F000   PT3_MODADDR
00:0000F002   PT3_CrPsPtr
00:0000F004   PT3_SAMPTRS
00:0000F006   PT3_OrnPtrs
00:0000F008   PT3_PDSP
00:0000F00A   PT3_CSP
00:0000F00C   PT3_PSP
00:0000F00E   PT3_PrNote
00:0000F00F   PT3_PrSlide
00:0000F011   PT3_AdInPtA
00:0000F013   PT3_AdInPtB
00:0000F015   PT3_AdInPtC
00:0000F017   PT3_LPosPtr
00:0000F019   PT3_PatsPtr
00:0000F01B   PT3_Delay
00:0000F01C   PT3_AddToEn
00:0000F01D   PT3_Env_Del
00:0000F01E   PT3_ESldAdd
00:0000F020   PT3_NTL3
00:0000F022   VARS
00:0000F022   ChanA
00:0000F03F   ChanB
00:0000F05C   ChanC
00:0000F079   DelyCnt
00:0000F07A   CurESld
00:0000F07C   CurEDel
00:0000F07D   Ns_Base_AddToNs
00:0000F07D   Ns_Base
00:0000F07E   AddToNs
00:0000F07F   NT_
00:0000F13F   AYREGS
00:0000F13F   VT_
00:0000F14D   EnvBase
00:0000F14F   VAR0END
00:0000F14F   T1_
00:0000F14F   T_NEW_1
00:0000F14F   T_OLD_1
00:0000F167   T_OLD_2
00:0000F17F   T_NEW_3
00:0000F17F   T_OLD_3
00:0000F181   T_OLD_0
00:0000F181   T_NEW_0
00:0000F199   T_NEW_2
00:00000000 X AYFXRELATIVE
00:00004DEC   ayFX_SETUP
00:00004DF7   ayFX_END
00:00004DFD   ayFX_INIT
00:00004E0E   ayFX_INIT.CHECK_PRI
00:00004E2F   ayFX_INIT.INIT_END
00:00004E33   ayFX_PLAY
00:00004E47   ayFX_PLAY.TAKECB
00:00004E58   ayFX_PLAY.CHECK_NN
00:00004E65   ayFX_PLAY.SETPOINTER
00:00004E79   ayFX_PLAY.SETMASKS
00:00004E87 X ayFX_PLAY.CHK1
00:00004E89 X ayFX_PLAY.LAY_C
00:00004E96   ayFX_PLAY.CHK2
00:00004E9B X ayFX_PLAY.PLAY_B
00:00004EA8   ayFX_PLAY.CHK3
00:00004EAB X ayFX_PLAY.PLAY_A
00:00004EB8   ayFX_PLAY.SETMIXER
00:00004EC8 X metatiles_data
00:00004EF5   START
00:00004F3A   INIT_CHARS_VARS
00:00004FC6   STAGE1
00:0000502F   STAGE1.nobackfromstg2
00:00005038   MAIN_LOOP
00:00005043 X MAIN_LOOP.check_tombs
00:000050A0   MAIN_LOOP.puzzle_wrong_order
00:000050C6   MAIN_LOOP.check_john_tomb
00:0000510E   MAIN_LOOP.check_gus_tomb
00:00005160   MAIN_LOOP.check_skull_hint
00:00005184   MAIN_LOOP.check_mike_dialog_box
00:00005194   MAIN_LOOP.check_gus_dialog
00:000051A4   MAIN_LOOP.check_john_dialog
00:000051B4   MAIN_LOOP.check_skull_dialog
00:000051C2   MAIN_LOOP.animate_ghost
00:000051E4   MAIN_LOOP.CHANGE_DIR_RIGHT
00:000051F1   MAIN_LOOP.CHANGE_DIR_LEFT
00:000051FA   MAIN_LOOP.check_pattern
00:00005215   MAIN_LOOP.change_pattern_L
00:00005220   MAIN_LOOP.check_pattern_RIGHT
00:00005233   MAIN_LOOP.change_pattern_R
00:0000523B   MAIN_LOOP.continue
00:0000523E X MAIN_LOOP.CHECK_GHOST
00:0000525A X MAIN_LOOP.KILL_GHOST
00:00005267   MAIN_LOOP.check_KB
00:00005291 X no_arrows
00:00005299   STAGE2
00:000052D7   MAIN_LOOP2
00:0000530B   MAIN_LOOP2.GHOST_DEAD
00:0000530E   MAIN_LOOP2.no_screen_change
00:00005322   MAIN_LOOP2.continue
00:0000534D   AFX
00:00005543   SONG
00:000064D5   SPRITE_P1_UP
00:00006595   SPRITE_P1_DOWN
00:00006655   SPRITE_P1_LEFT
00:00006715   SPRITE_P1_RIGHT
00:000067D5   SPRITE_PATTERN
00:00006AB5   SPRITE_COLOR_TABLE
00:00006B35   SPRITE_COLOR_P1_UP
00:00006B95   SPRITE_COLOR_P1_DOWN
00:00006BF5   SPRITE_COLOR_P1_RIGHT
00:00006C55   stg1_gate
00:00006C5B   stg1_gate_blocked
00:00006C61   mapa1
00:00006F41   mapa2
00:00007261 X mapa0
00:000075C1   SPRITE_COLOR_P1_LEFT
00:00007621   BLANK_DATA
00:000076A1   PaletteData
00:000076C1   dummy_SPR_ATT__TBL
00:00007741   TILES1
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   tileDat
0F:0000C00F   energyDat
0F:0000C01E   stg1_puzzle_solved
0F:0000C01F   SHOWING_SKULL_STG1_DIALOG
0F:0000C020   SHOWING_MIKE_DIALOG
0F:0000C021   SHOWING_JOHN_DIALOG
0F:0000C022   SHOWING_GUS_DIALOG
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C023   CHR_ACR
0F:0000C025 X PTR_STR_DX
0F:0000C026 X PTR_STR_DY
0F:0000C027 X LAST_KEY_PRESSED
0F:0000C028   OLD_KEY_PRESSED
0F:0000C029   JIFFY_TEMP
0F:0000C02A   CHAR_SPEED_X
0F:0000C02B   CHAR_SPEED_Y
0F:0000C02C   CHAR_SPEED_X_GHOST
0F:0000C02D X CHAR_SPEED_X_GHOST_STG2
0F:0000C02E   CHAR_GHOST_DEAD
0F:0000C02F X CHAR_GHOST_DEAD_STG2
0F:0000C030 X CHAR_MIN_STEP_STG2
0F:0000C031   CHAR_DIR_GHOST1
0F:0000C032 X CHAR_DIR_GHOST_STG2
0F:0000C033   CHAR_DIR_MAIN
0F:0000C034   CHAR_NEW_DIR_MAIN
0F:0000C035   CHAR_MAIN_SHOOT
0F:0000C036   CHAR_MIN_STEP
0F:0000C037   CHAR_DISTANCE_SHOOT
0F:0000C038   CHAR_SPEED_SHOOT
0F:0000C039   SPRITE_ATTRS
0F:0000C0B9 X SLOTBIOS
0F:0000C0BA X SLOTGAME
0F:0000C0BB X SLOTRAM
0F:0000C0BC   SPRITE_PTR_REPLACE
0F:0000C0BE   SPRITE_COLOR_REPLACE
0F:0000C0C0   SPRITE_COLOR_REPLACE2
0F:0000C0C2   MAPA
0F:0000C0C4   BITMAP
0F:0000C0C6   MAP_RAM
0F:0000C3A6   ayFX_MODE
0F:0000C3A7   ayFX_BANK
0F:0000C3A9   ayFX_PRIORITY
0F:0000C3AA   ayFX_POINTER
0F:0000C3AC   ayFX_TONE
0F:0000C3AE   ayFX_NOISE
0F:0000C3AF   ayFX_VOLUME
0F:0000C3B0   ayFX_CHANNEL


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00003F40

   Address   Length Align   Label
   00004000   16186         ANDY_MAX_ENERGY
   00007F3A       6         
   00007F40     192       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 0000200D

   Address   Length Align   Label
   00008000    8205         
   0000A00D    8179       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 0000200E

   Address   Length Align   Label
   00008000    8206         
   0000A00E    8178       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000003B1

   Address   Length Align   Label
   0000C000     945         tileDat
   0000C3B1   15439       <empty>
