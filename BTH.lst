Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.04.03 - 10:04:43]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:59C7                      
       3   00:59C7                      ;ROM ASCII16
       4   00:59C7                      		defpage	0,0x4000, 0x4000
       5   00:59C7                      		defpage	1,0x8000, 0x4000        
       6   00:59C7                      		defpage	2..14 ;Here it is determined rom size        
       7   00:59C7                              defpage	15,0xC000, 0x4000
       8   00:59C7                      
       9   00:59C7  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:59C7  (00:6000)           _bank1	equ	6000h
      11   00:59C7  (00:7000)           _bank2	equ	7000h
      12   00:59C7  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:59CD  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 F7 44 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010  (00:0041)           DISSCR                  equ #0041   ; Disable screen
      11.  00:4010  (00:0044)           ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ; VDP Const
       2.  00:4010  (00:5C28)           FIRST_LINE_DLG_BOX   equ 5C28H
       3.  00:4010  (00:6028)           SEC_LINE_DLG_BOX   equ 6028H
       4.  00:4010  (00:6428)           THIRD_LINE_DLG_BOX   equ 6428H
       5.  00:4010                      
       6.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
       7.  00:4010  (00:0007)           KB_RIGHT 				equ 7
       8.  00:4010  (00:0006)           KB_DOWN 				equ 6
       9.  00:4010  (00:0005)           KB_UP 					equ	5        
      10.  00:4010  (00:0004)           KB_LEFT 				equ	4
      11.  00:4010  (00:0003)           KB_DEL 					equ	3
      12.  00:4010  (00:0000)           KB_SPACE				equ	0
      13.  00:4010                      
      14.  00:4010  (00:0001)           MOV_SPEED				equ 1
      15.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      16.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      17.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      18.  00:4010  (00:0004)           MAX_CHAR_STEPS          equ 4       ; #steps pattern change MAIN CHAR
      19.  00:4010  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      20.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      21.  00:4010  (00:0098)           PORT_0                  equ 0x98
      22.  00:4010  (00:0099)           PORT_1                  equ 0x99
      23.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      24.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      25.  00:4010                      
      26.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan es entas direcciones valores globals del sistema
      27.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      28.  00:4010                      
      22   00:4010                          include "include\BTH_strings.asm"
       1.  00:4010  16 40 1D 40 33 40   sardu01_strings: dw string01, string02, string03
       2.  00:4016                      ; Caben 23 caracteres en cada línea
       3.  00:4016                      string01: db 'SARDU:',0
       3.  00:4016  53 41 52 44 55 3A 00 
       4.  00:401D                      string02: db 'CRISTO DE ACERO ES EL',0
       4.  00:401D  43 52 49 53 54 4F 20 44 45 20 41 43 45 52 4F 20 
       4.  00:402D  45 53 20 45 4C 00 
       5.  00:4033                      string03: db 'TERCERO',0
       5.  00:4033  54 45 52 43 45 52 4F 00 
       6.  00:403B  31 32 33 34 00      mensaje: db '1234',0
      23   00:4040                      
      24   00:4040                      ; Funciones auxiliares
      25   00:4040                      	include "include\BTH_func.asm"
       1.  00:4040                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:4040                      ;Entrada:
       3.  00:4040                      ;   b - Y SPR1
       4.  00:4040                      ;   C - X SPR1
       5.  00:4040                      
       6.  00:4040                      ;   d - Y SPR2
       7.  00:4040                      ;   e - X SPR2
       8.  00:4040                      ;Salida:
       9.  00:4040                      ;   a - bloque
      10.  00:4040                      ;Modifica:
      11.  00:4040                      ;   a, hl, de
      12.  00:4040                      check_spr_collision:        
      13.  00:4040  78                          LD A,B          ; a = Y SPR1
      14.  00:4041  BA                          CP D
      15.  00:4042  C2 4D 40                    JP NZ,.no_collision
      16.  00:4045                      
      17.  00:4045  79                          LD A,C          ; a = X SPR1
      18.  00:4046  BB                          CP E
      19.  00:4047  C2 4D 40                    JP NZ,.no_collision
      20.  00:404A                      
      21.  00:404A  3E 01                       LD A,1
      22.  00:404C  C9                          RET
      23.  00:404D                      .no_collision
      24.  00:404D  3E 00                   LD A,0
      25.  00:404F  C9                      RET
      26.  00:4050                      
      27.  00:4050                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:4050                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:4050                      ;Entrada:
      30.  00:4050                      ;   d - X
      31.  00:4050                      ;   e - y
      32.  00:4050                      ;Salida:
      33.  00:4050                      ;   a - bloque
      34.  00:4050                      ;Modifica:
      35.  00:4050                      ;   a, hl, de
      36.  00:4050                      get_bloque_en_X_Y:
      37.  00:4050                              ;(y/8)*32+(x/8)
      38.  00:4050  7B                          ld a,e      ;a=y
      39.  00:4051  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:4057  26 00                       ld h,0
      41.  00:4059  6F                          ld l,a      ;hl=y/8
      42.  00:405A  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:405F                      
      44.  00:405F  7A                          ld a,d      ;a=x
      45.  00:4060  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:4066  16 00                       ld d,0
      47.  00:4068  5F                          ld e,a      ;de=x/8
      48.  00:4069  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:406A                      
      50.  00:406A  ED 5B A0 C0                 ld de,(MAPA)
      51.  00:406E  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:406F                      
      53.  00:406F  7E                          ld a,[hl]
      54.  00:4070  C9                          ret
      55.  00:4071                      
      56.  00:4071                      ; SCREEN 8
      57.  00:4071                      SetVdp_Write:
      58.  00:4071                      
      59.  00:4071                      	; transform address from 
      60.  00:4071                      	;
      61.  00:4071                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:4071                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:4071                      	;
      64.  00:4071                      	; to
      65.  00:4071                      	;
      66.  00:4071                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:4071                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:4071  CB 04                   rlc     h
      69.  00:4073  17                      rla
      70.  00:4074  CB 04                   rlc     h
      71.  00:4076  17                      rla
      72.  00:4077  CB 3C                   srl     h
      73.  00:4079  CB 3C                   srl     h
      74.  00:407B                      
      75.  00:407B  F3                      di
      76.  00:407C                      	    ; write bits a14-16 of address to R#14
      77.  00:407C  D3 99               	    out     (PORT_1), a
      78.  00:407E  3E 8E               	    ld      a, 14 + 128
      79.  00:4080  D3 99               	    out     (PORT_1), a
      80.  00:4082                      
      81.  00:4082                      	    ; write the other address bits to VDP PORT_1
      82.  00:4082  7D                  	    ld      a, l
      83.  00:4083  00                  	    nop
      84.  00:4084  D3 99               	    out     (PORT_1), a
      85.  00:4086  7C                  	    ld      a, h
      86.  00:4087  F6 40               	    or      64
      87.  00:4089  FB                      ei
      88.  00:408A  D3 99                   out     (PORT_1),a
      89.  00:408C  C9                      ret
      90.  00:408D                      
      91.  00:408D                      Set212Lines:
      92.  00:408D                              ; set LN (bit 7) of R#9 to 1
      93.  00:408D  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:4090  F6 80                       or      10000000b
      95.  00:4092  47                          ld      b, a
      96.  00:4093  0E 09                       ld      c, 9            ; register #
      97.  00:4095  CD 47 00                    call    WRTVDP
      98.  00:4098  C9                          ret
      99.  00:4099                      
     100.  00:4099                      ClearVram_MSX2:
     101.  00:4099  AF                          xor     a           ; set vram write base address
     102.  00:409A  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:409D  CD 71 40                    call    SetVdp_Write
     104.  00:40A0  AF                          xor		a
     105.  00:40A1                      
     106.  00:40A1                          ; TODO: 
     107.  00:40A1                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:40A1                          ;   disable screen/sprites (should I ??)
     109.  00:40A1                      
     110.  00:40A1                          ; clear all 128kb of VRAM
     111.  00:40A1  16 02               	ld		d, 2		; 2 repetitions
     112.  00:40A3                      .loop_2:
     113.  00:40A3  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:40A5                      .loop_1:
     115.  00:40A5  06 00               	ld		b, 0		; 256 repetitions
     116.  00:40A7                      .loop:
     117.  00:40A7  D3 98               	out		(PORT_0), a
     118.  00:40A9  10 FC               	djnz	.loop
     119.  00:40AB  0D                  	dec		c
     120.  00:40AC  C2 A5 40            	jp		nz, .loop_1
     121.  00:40AF  15                  	dec		d
     122.  00:40B0  C2 A3 40            	jp		nz, .loop_2
     123.  00:40B3                      
     124.  00:40B3  C9                  	ret
     125.  00:40B4                      
     126.  00:40B4                      ; MEGAROM
     127.  00:40B4                      
     128.  00:40B4                      opening_screen		
     129.  00:40B4  0E 00               		ld		c,0
     130.  00:40B6  11 00 00            		ld		de,0
     131.  00:40B9  CD F9 40            		call	_vdpsetvramwr
     132.  00:40BC  1E 04               		ld	e,4
     133.  00:40BE  3E 09               		ld	a, :GRAPHIC
     134.  00:40C0  57                  		ld	d,a
     135.  00:40C1  32 00 70            2:		ld	(_bank2),a
     136.  00:40C4  21 00 80            		ld	hl,GRAPHIC
     137.  00:40C7  01 98 00            		ld	bc,0x98
     138.  00:40CA  3E 40               		ld	a,32*2
     139.  00:40CC  ED B3               1:		otir
     140.  00:40CE  3D                  		dec	a
     141.  00:40CF  20 FB               		jr	nz,1b
     142.  00:40D1  14                  		inc	d
     143.  00:40D2  7A                  		ld	a,d
     144.  00:40D3  1D                  		dec	e
     145.  00:40D4  20 EB               		jr	nz,2b
     146.  00:40D6  C9                  		ret 
     147.  00:40D7                      
     148.  00:40D7                      load_screen
     149.  00:40D7  0E 00               		ld		c,0
     150.  00:40D9  11 00 00            		ld		de,0
     151.  00:40DC  CD F9 40            		call	_vdpsetvramwr
     152.  00:40DF  1E 02               		ld	e,2					; #pages
     153.  00:40E1  78                  		ld	a, b			; 1st page bitmap
     154.  00:40E2  57                  		ld	d,a
     155.  00:40E3  32 00 70            2:		ld	(_bank2),a
     156.  00:40E6  2A A2 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:40E9  01 98 00            		ld	bc,0x98
     158.  00:40EC  3E 40               		ld	a,64
     159.  00:40EE  ED B3               1:		otir
     160.  00:40F0  3D                  		dec	a
     161.  00:40F1  20 FB               		jr	nz,1b
     162.  00:40F3  14                  		inc	d
     163.  00:40F4  7A                  		ld	a,d
     164.  00:40F5  1D                  		dec	e
     165.  00:40F6  20 EB               		jr	nz,2b
     166.  00:40F8  C9                  		ret 
     167.  00:40F9                      
     168.  00:40F9                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:40F9                      
     170.  00:40F9                      _vdpsetvramwr:
     171.  00:40F9  79                  	ld a,c
     172.  00:40FA  CB 02               	rlc d
     173.  00:40FC  17                  	rla
     174.  00:40FD  CB 02               	rlc d
     175.  00:40FF  17                  	rla
     176.  00:4100  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:4102                      
     178.  00:4102  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:4104  3E 8E               	ld a,14+128
     180.  00:4106  D3 99               	out (0x99),a
     181.  00:4108  CB 3A               	srl d ; secondo shift.     
     182.  00:410A                      _vdpsetvramwr14
     183.  00:410A  7B                  	ld a,e ;set bits 0-7
     184.  00:410B  D3 99               	out (0x99),a
     185.  00:410D  7A                  	ld a,d ;set bits 8-13
     186.  00:410E  F6 40               	or 0x40 ; + write access
     187.  00:4110  D3 99               	out (0x99),a
     188.  00:4112  C9                  	ret
     189.  00:4113                      
     190.  00:4113                      
     191.  00:4113                      
     192.  00:4113                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:4113                      		; -----------------------------------------------------
     194.  00:4113                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:4113                      		; -----------------------------------------------------
     196.  00:4113                      
     197.  00:4113                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:4113                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:4113                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:4113                      
     201.  00:4113                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:4113                      		; NINGUNA
     203.  00:4113                      
     204.  00:4113                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:4113                      		; --- Entrada: a = SLOT                                           ---
     206.  00:4113                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:4113                      		; --- AUTOR: Konamiman                                            ---
     208.  00:4113  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:4115  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:4116  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:4118  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:411B  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:411C  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:411D  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:411F  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:4121                      		; --- El slot esta expandido ---
     217.  00:4121  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:4122  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:4123  23                  		inc	hl				; Incrementamos hl una...
     220.  00:4124  23                  		inc	hl				; ...dos...
     221.  00:4125  23                  		inc	hl				; ...tres...
     222.  00:4126  23                  		inc	hl				; ...cuatro veces
     223.  00:4127  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:4128  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:412A  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:412B  C9                  		ret					; Volvemos
     227.  00:412C                      
     228.  00:412C                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:412C  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:412E  32 31 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:4131  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:4132                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:4132  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:4135  0F                  		rrca					; Rotamos a la derecha...
     235.  00:4136  0F                  		rrca					; ...dos veces
     236.  00:4137  CD 13 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:413A  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:413C  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:413F                      
     240.  00:413F                      SET_SCREEN5_MODE:
     241.  00:413F                           ;Cambiamos el modo de pantalla
     242.  00:413F                          ; BASIC: COLOR 15,1,1
     243.  00:413F                          ; Establecer los colores
     244.  00:413F  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:4142  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:4144  23                  	inc hl ; FORCLR+1
     247.  00:4145  36 01               	ld [hl],1 ; Color de fondo 1=negro
     248.  00:4147  23                  	inc hl ; FORCLR+2
     249.  00:4148  36 01               	ld [hl],1 ; Color del borde 1=negro
     250.  00:414A                      
     251.  00:414A  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     252.  00:414C  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     253.  00:414F                      ;
     254.  00:414F  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     255.  00:4152                          ;En or 0+0=0, 0+1=1, 1+1=1
     256.  00:4152                          ;En and 0+0=0, 0+1=0, 1+1=1
     257.  00:4152                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     258.  00:4152                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     259.  00:4152                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     260.  00:4152  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     261.  00:4154                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     262.  00:4154  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:4156                      
     264.  00:4156  47                      ld b,a ;carga en b el valor de a
     265.  00:4157  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     266.  00:4159  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     267.  00:415C  AF                      xor a ; ld a,0
     268.  00:415D  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     269.  00:4160  C9                      ret
     270.  00:4161                      
     271.  00:4161                      DUMP_SPR_ALL:
     272.  00:4161                      
     273.  00:4161                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     274.  00:4161                      
     275.  00:4161  21 23 4B                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     276.  00:4164  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     277.  00:4167  01 60 02                ld bc, 8*4*19; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     278.  00:416A  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     279.  00:416D                      
     280.  00:416D                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     281.  00:416D                      
     282.  00:416D  21 17 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     283.  00:4170  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     284.  00:4173  01 80 00                ld bc,128; 4 x #Sprites
     285.  00:4176  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     286.  00:4179                      
     287.  00:4179                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     288.  00:4179                      
     289.  00:4179  21 83 4D                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     290.  00:417C  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     291.  00:417F  01 30 01                ld bc,16*19; 16 x #Sprites
     292.  00:4182  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     293.  00:4185  C9                      ret
     294.  00:4186                      	
     295.  00:4186                      DUMP_SPR_ATTS:
     296.  00:4186                      
     297.  00:4186                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     298.  00:4186                      
     299.  00:4186  21 17 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     300.  00:4189  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     301.  00:418C  01 1C 00                ld bc,28		; 6 x #Sprites
     302.  00:418F  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     303.  00:4192                      
     304.  00:4192                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     305.  00:4192                      ;	JP Z,.DUMP_SPR_ATTS_END
     306.  00:4192  2A 9E C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     307.  00:4195  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     308.  00:4198  C5                      PUSH BC
     309.  00:4199  01 30 00            	ld bc,16*3; 16 x #Sprites
     310.  00:419C  CD 5C 00                call  LDIRVM 
     311.  00:419F  C1                  	POP BC
     312.  00:41A0                      
     313.  00:41A0                      .DUMP_SPR_ATTS_END:
     314.  00:41A0  C9                      ret
     315.  00:41A1                      
     316.  00:41A1                      DUMP_SPR_P1:    
     317.  00:41A1                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:41A1                      
     319.  00:41A1  2A 9A C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:41A4  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:41A7  C5                      PUSH BC
     322.  00:41A8  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     323.  00:41AB  CD 5C 00                call  LDIRVM 
     324.  00:41AE  C1                  	POP BC
     325.  00:41AF                      
     326.  00:41AF                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     327.  00:41AF                      
     328.  00:41AF  2A 9C C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     329.  00:41B2  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     330.  00:41B5  C5                      PUSH BC
     331.  00:41B6  01 30 00            	ld bc,16*3; 16 x #Sprites
     332.  00:41B9  CD 5C 00                call  LDIRVM 
     333.  00:41BC  C1                  	POP BC
     334.  00:41BD                      	
     335.  00:41BD                      
     336.  00:41BD                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     337.  00:41BD                      ;    xor a
     338.  00:41BD                      ;	di			; set VRAM address to 1800h
     339.  00:41BD                      ;	out (99h),a		; lower byte 00
     340.  00:41BD                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     341.  00:41BD                      ;	ei
     342.  00:41BD                      ;	out (99h),a		; note that this is protected by the ei instruction
     343.  00:41BD                      ;   push BC
     344.  00:41BD                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     345.  00:41BD                      ;	ld hl,(SPRITE_PTR_REPLACE)
     346.  00:41BD                      
     347.  00:41BD                      ;.loop1:
     348.  00:41BD                      ;	outi			; send the data (HL) to port 98h 
     349.  00:41BD                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     350.  00:41BD                      ;   POP BC
     351.  00:41BD                      
     352.  00:41BD                          ; Replace 2 entries in sprite color table
     353.  00:41BD                      ;    xor a
     354.  00:41BD                      ;	di			; set VRAM address to 1800h
     355.  00:41BD                      ;	out (99h),a		; lower byte 00
     356.  00:41BD                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     357.  00:41BD                      ;	ei
     358.  00:41BD                      ;	out (99h),a		; note that this is protected by the ei instruction
     359.  00:41BD                       ;   push BC
     360.  00:41BD                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     361.  00:41BD                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     362.  00:41BD                      	
     363.  00:41BD                      ;.loop2:
     364.  00:41BD                      ;	outi			; send the data (HL) to port 98h 
     365.  00:41BD                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     366.  00:41BD                       ;   POP BC
     367.  00:41BD                      
     368.  00:41BD  C9                      ret
     369.  00:41BE                      
      26   00:41BE                          include "include\BTH_animate.asm"
       1.  00:41BE                      ; Movimiento P1
       2.  00:41BE                      move_up:
       3.  00:41BE  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:41BF                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:41BF  AF                      XOR A
       6.  00:41C0  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:41C3  CD C9 42                CALL CHECK_DIRECTION_MAIN
       8.  00:41C6                      
       9.  00:41C6  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:41C9  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:41CB  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:41CC  DD 7E 01                ld a,(ix+1)
      13.  00:41CF  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:41D0  CD 50 40                call get_bloque_en_X_Y
      15.  00:41D3  FE 01                   cp 1
      16.  00:41D5  CA C1 43                jp z,NO_MOVEMENT
      17.  00:41D8                      
      18.  00:41D8  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:41DB  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:41DD  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:41DE  DD 7E 01                ld a,(ix+1)
      22.  00:41E1  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:41E3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:41E4  CD 50 40                call get_bloque_en_X_Y
      25.  00:41E7  FE 01                   cp 1
      26.  00:41E9  CA C1 43                jp z,NO_MOVEMENT
      27.  00:41EC                            
      28.  00:41EC  3E FF               	LD A, -MOV_SPEED
      29.  00:41EE  32 09 C0            	LD (CHAR_SPEED_Y), A
      30.  00:41F1  CD 56 43                call UPDATE_MOVEMENT   
      31.  00:41F4                          ;JP no_arrows
      32.  00:41F4  C9                      ret
      33.  00:41F5                      
      34.  00:41F5                      move_down:
      35.  00:41F5  A9                      XOR C               ; Reseteamos la entrada del teclado
      36.  00:41F6                          ; Actualizamos la última tecla de dirección pulsada
      37.  00:41F6  3E 01                   LD A,$01
      38.  00:41F8  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
      39.  00:41FB  CD C9 42                CALL CHECK_DIRECTION_MAIN
      40.  00:41FE                      
      41.  00:41FE  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      42.  00:4201  C6 11                   add 17 ; incrementamos en 15+2 el valor
      43.  00:4203  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      44.  00:4204  DD 7E 01                ld a,(ix+1)
      45.  00:4207  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      46.  00:4208  CD 50 40                call get_bloque_en_X_Y
      47.  00:420B  FE 01                   cp 1
      48.  00:420D  CA C1 43                jp z,NO_MOVEMENT
      49.  00:4210                      
      50.  00:4210  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      51.  00:4213  C6 11                   add 17 ; incrementamos en 15 el valor
      52.  00:4215  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      53.  00:4216  DD 7E 01                ld a,(ix+1)
      54.  00:4219  C6 0A                   add 10 ; miramos la segunda tile 8+2
      55.  00:421B  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      56.  00:421C  CD 50 40                call get_bloque_en_X_Y
      57.  00:421F  FE 01                   cp 1
      58.  00:4221  CA C1 43                jp z,NO_MOVEMENT
      59.  00:4224                          
      60.  00:4224  3E 01                   LD A, MOV_SPEED
      61.  00:4226  32 09 C0            	LD (CHAR_SPEED_Y), A
      62.  00:4229  CD 56 43                call UPDATE_MOVEMENT    
      63.  00:422C                          ;JP no_arrows
      64.  00:422C  C9                      ret
      65.  00:422D                      
      66.  00:422D                      move_right:
      67.  00:422D  A9                      XOR C               ; Reseteamos la entrada del teclado
      68.  00:422E                          ; Actualizamos la última tecla de dirección pulsada
      69.  00:422E  3E 03                   LD A,$03
      70.  00:4230  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
      71.  00:4233  CD C9 42                CALL CHECK_DIRECTION_MAIN
      72.  00:4236                      
      73.  00:4236  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      74.  00:4239  C6 10                   add 16; incrementamos en 3 el valor
      75.  00:423B  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      76.  00:423C  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      77.  00:423F  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      78.  00:4241  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      79.  00:4242  CD 50 40                call get_bloque_en_X_Y
      80.  00:4245  FE 01                   cp 1
      81.  00:4247  CA C1 43                jp z,NO_MOVEMENT
      82.  00:424A                      
      83.  00:424A                          ;Miramos el tile del byte inferior del sprite - centro personaje
      84.  00:424A  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      85.  00:424D  C6 10                   add 16; incrementamos en 2 tiles el valor
      86.  00:424F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      87.  00:4250  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      88.  00:4253  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      89.  00:4255  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      90.  00:4256  CD 50 40                call get_bloque_en_X_Y
      91.  00:4259  FE 01                   cp 1
      92.  00:425B  CA C1 43                jp z,NO_MOVEMENT
      93.  00:425E                      
      94.  00:425E                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
      95.  00:425E  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      96.  00:4261  C6 10                   add 16; incrementamos en 2 tiles el valor
      97.  00:4263  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      98.  00:4264  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      99.  00:4267  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     100.  00:4269  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     101.  00:426A  CD 50 40                call get_bloque_en_X_Y
     102.  00:426D  FE 01                   cp 1
     103.  00:426F  CA C1 43                jp z,NO_MOVEMENT    
     104.  00:4272                          
     105.  00:4272  3E 01                   LD A, MOV_SPEED
     106.  00:4274  32 08 C0            	LD (CHAR_SPEED_X), A
     107.  00:4277  CD 56 43                call UPDATE_MOVEMENT      
     108.  00:427A                          ;JP no_arrows
     109.  00:427A  C9                      ret
     110.  00:427B                      
     111.  00:427B                      move_left:
     112.  00:427B  A9                      XOR C               ; Reseteamos la entrada del teclado
     113.  00:427C                          ; Actualizamos la última tecla de dirección pulsada
     114.  00:427C  3E 02                   LD A,$02
     115.  00:427E  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
     116.  00:4281  CD C9 42                CALL CHECK_DIRECTION_MAIN
     117.  00:4284  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     118.  00:4287  D6 02                   sub 2 ; decrementamos en 2 el valor
     119.  00:4289  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     120.  00:428A  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     121.  00:428D  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     122.  00:428F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     123.  00:4290  CD 50 40                call get_bloque_en_X_Y
     124.  00:4293  FE 01                   cp 1
     125.  00:4295  CA C1 43                jp z,NO_MOVEMENT
     126.  00:4298                      
     127.  00:4298                          ;Miramos el tile inferior parte central del personaje
     128.  00:4298  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     129.  00:429B  D6 02                   sub 2 ; decrementamos en 2 el valor
     130.  00:429D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     131.  00:429E  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     132.  00:42A1  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     133.  00:42A3  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     134.  00:42A4  CD 50 40                call get_bloque_en_X_Y
     135.  00:42A7  FE 01                   cp 1
     136.  00:42A9  CA C1 43                jp z,NO_MOVEMENT
     137.  00:42AC                      
     138.  00:42AC                          ;Miramos el tile inferior esquina inferior izquierda
     139.  00:42AC  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     140.  00:42AF  D6 02                   sub 2 ; decrementamos en 2 el valor
     141.  00:42B1  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     142.  00:42B2  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     143.  00:42B5  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     144.  00:42B7  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     145.  00:42B8  CD 50 40                call get_bloque_en_X_Y
     146.  00:42BB  FE 01                   cp 1
     147.  00:42BD  CA C1 43                jp z,NO_MOVEMENT
     148.  00:42C0                      
     149.  00:42C0  3E FF                   LD A, -MOV_SPEED
     150.  00:42C2  32 08 C0            	LD (CHAR_SPEED_X), A
     151.  00:42C5  CD 56 43                call UPDATE_MOVEMENT     
     152.  00:42C8                          ;JP no_arrows
     153.  00:42C8  C9                      ret
     154.  00:42C9                      
     155.  00:42C9                      CHECK_DIRECTION_MAIN:
     156.  00:42C9  3A 11 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     157.  00:42CC  2A 12 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     158.  00:42CF  BD                  	CP L		            	                ;Son iguales?
     159.  00:42D0  C8                  	RET Z                           			;Si son iguales, vuelvo
     160.  00:42D1  3A 12 C0                LD A,(CHAR_NEW_DIR_MAIN)
     161.  00:42D4  FE 01                   CP $01
     162.  00:42D6  CA EB 42                JP Z,.SET_DIR_DOWN
     163.  00:42D9  FE 00                   CP $00
     164.  00:42DB  CA 00 43                JP Z,.SET_DIR_UP
     165.  00:42DE  FE 03                   CP $03
     166.  00:42E0  CA 2A 43                JP Z,.SET_DIR_RIGHT
     167.  00:42E3  FE 02                   CP $02
     168.  00:42E5  CA 15 43                JP Z,.SET_DIR_LEFT
     169.  00:42E8  C3 3F 43                JP .FINISH
     170.  00:42EB                          
     171.  00:42EB                      .SET_DIR_DOWN:    
     172.  00:42EB  21 E3 48                ld hl, SPRITE_P1_DOWN
     173.  00:42EE  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     174.  00:42F1                          
     175.  00:42F1  21 73 4E                ld hl, SPRITE_COLOR_P1_DOWN
     176.  00:42F4  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL    
     177.  00:42F7  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     178.  00:42FA  CD A1 41                CALL DUMP_SPR_P1    
     179.  00:42FD                      
     180.  00:42FD  C3 3F 43                JP .FINISH
     181.  00:4300                      
     182.  00:4300                      .SET_DIR_UP:
     183.  00:4300  21 23 48                ld hl, SPRITE_P1_UP
     184.  00:4303  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     185.  00:4306                          
     186.  00:4306  21 13 4E                ld hl, SPRITE_COLOR_P1_UP
     187.  00:4309  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
     188.  00:430C  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     189.  00:430F  CD A1 41                CALL DUMP_SPR_P1
     190.  00:4312  C3 3F 43                JP .FINISH
     191.  00:4315                      
     192.  00:4315                      .SET_DIR_LEFT:    
     193.  00:4315  21 A3 49                ld hl, SPRITE_P1_LEFT
     194.  00:4318  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     195.  00:431B                          
     196.  00:431B  21 13 59                ld hl, SPRITE_COLOR_P1_LEFT
     197.  00:431E  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
     198.  00:4321  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     199.  00:4324  CD A1 41                CALL DUMP_SPR_P1   
     200.  00:4327  C3 3F 43                JP .FINISH
     201.  00:432A                      
     202.  00:432A                      .SET_DIR_RIGHT:
     203.  00:432A  21 63 4A                ld hl, SPRITE_P1_RIGHT
     204.  00:432D  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:4330                          
     206.  00:4330  21 D3 4E                ld hl, SPRITE_COLOR_P1_RIGHT
     207.  00:4333  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:4336  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:4339                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     210.  00:4339  CD A1 41                CALL DUMP_SPR_P1
     211.  00:433C  C3 3F 43                JP .FINISH
     212.  00:433F                      
     213.  00:433F                      .FINISH:
     214.  00:433F  AF                      XOR A   ; reseteamos el contador de pasos
     215.  00:4340  32 14 C0                LD (CHAR_MIN_STEP), A   
     216.  00:4343  3A 12 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     217.  00:4346  32 11 C0                LD (CHAR_DIR_MAIN),A    
     218.  00:4349                      
     219.  00:4349                          ; ponemos el primer frame del sprite
     220.  00:4349  DD 36 02 00             LD (ix+2), $00
     221.  00:434D  DD 36 06 04             LD (ix+6), $04
     222.  00:4351  DD 36 0A 08             LD (ix+10), $08
     223.  00:4355                          ;CALL DUMP_SPR_ATTS
     224.  00:4355  C9                      RET
     225.  00:4356                      
     226.  00:4356                      UPDATE_MOVEMENT:
     227.  00:4356  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     228.  00:4359  2A 09 C0            	LD HL, (CHAR_SPEED_Y)
     229.  00:435C  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     230.  00:435D                          
     231.  00:435D  DD 77 00            	LD (ix), A
     232.  00:4360  DD 77 04                LD (ix+4), A
     233.  00:4363  DD 77 08                LD (ix+8), A
     234.  00:4366                      	
     235.  00:4366  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     236.  00:4369  2A 08 C0            	LD HL, (CHAR_SPEED_X)
     237.  00:436C  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     238.  00:436D                          
     239.  00:436D  DD 77 01            	LD (ix+1), A
     240.  00:4370  DD 77 05                LD (ix+5), A
     241.  00:4373  DD 77 09                LD (ix+9), A	
     242.  00:4376                      
     243.  00:4376  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     244.  00:4377  32 08 C0                LD (CHAR_SPEED_X),A
     245.  00:437A  32 09 C0                LD (CHAR_SPEED_Y),A	
     246.  00:437D                      
     247.  00:437D                          ; Animación/pasos de personaje	
     248.  00:437D  3A 14 C0                LD A, (CHAR_MIN_STEP)
     249.  00:4380  FE 04                   CP MAX_CHAR_STEPS
     250.  00:4382  C2 BB 43                JP NZ,.NO_CHAR_PATTERN_CHANGE
     251.  00:4385                          
     252.  00:4385  AF                      XOR A
     253.  00:4386  32 14 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     254.  00:4389  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     255.  00:438C  FE 00                   CP $00
     256.  00:438E  CA A4 43                JP Z,.SET_SPR_1P_2
     257.  00:4391  DD 36 02 00             LD (ix+2), $00
     258.  00:4395  DD 36 06 04             LD (ix+6), $04
     259.  00:4399  DD 36 0A 08             LD (ix+10), $08
     260.  00:439D  2A 9C C0                ld hl, (SPRITE_COLOR_REPLACE)
     261.  00:43A0  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     262.  00:43A3  C9                      ret
     263.  00:43A4                      
     264.  00:43A4                      .SET_SPR_1P_2:
     265.  00:43A4  DD 36 02 0C             LD (ix+2), $0C
     266.  00:43A8  DD 36 06 10             LD (ix+6), $10
     267.  00:43AC  DD 36 0A 14             LD (ix+10), $14
     268.  00:43B0                              
     269.  00:43B0  2A 9C C0                ld HL, (SPRITE_COLOR_REPLACE)
     270.  00:43B3  11 30 00                ld DE,48
     271.  00:43B6  19                      ADD HL, DE
     272.  00:43B7  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     273.  00:43BA                          ;ld a, 0
     274.  00:43BA  C9                  	ret
     275.  00:43BB                      
     276.  00:43BB                      .NO_CHAR_PATTERN_CHANGE    
     277.  00:43BB  C6 01                   ADD 1
     278.  00:43BD  32 14 C0                LD (CHAR_MIN_STEP), A    
     279.  00:43C0  C9                      ret
     280.  00:43C1                      
     281.  00:43C1                      NO_MOVEMENT:    
     282.  00:43C1  C9                      ret
     283.  00:43C2                      
     284.  00:43C2                      MOVE_SHOOT:
     285.  00:43C2  3A 13 C0                LD A,(CHAR_MAIN_SHOOT)    
     286.  00:43C5  FE 01                   CP $01
     287.  00:43C7  CA F2 43                JP Z,.MOVE_SHOOT_LEFT
     288.  00:43CA  FE 02                   CP $02
     289.  00:43CC  CA DA 43                JP Z,.MOVE_SHOOT_RIGHT
     290.  00:43CF  FE 03                   CP $03
     291.  00:43D1  CA E2 43                JP Z,.MOVE_SHOOT_UP    
     292.  00:43D4  FE 04                   CP $04
     293.  00:43D6  CA EA 43                JP Z,.MOVE_SHOOT_DOWN
     294.  00:43D9  C9                      RET
     295.  00:43DA                      
     296.  00:43DA                      .MOVE_SHOOT_RIGHT:        
     297.  00:43DA  3E 03                   LD A, MOV_SPEED_SHOOT
     298.  00:43DC  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     299.  00:43DF  C3 F7 43                JP .CHECK_SHOOT_DISTANCE
     300.  00:43E2                      
     301.  00:43E2                      .MOVE_SHOOT_UP:        
     302.  00:43E2  3E FD                   LD A, -MOV_SPEED_SHOOT
     303.  00:43E4  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     304.  00:43E7  C3 F7 43                JP .CHECK_SHOOT_DISTANCE
     305.  00:43EA                      
     306.  00:43EA                      .MOVE_SHOOT_DOWN:
     307.  00:43EA  3E 03                   LD A, MOV_SPEED_SHOOT
     308.  00:43EC  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     309.  00:43EF  C3 F7 43                JP .CHECK_SHOOT_DISTANCE
     310.  00:43F2                      
     311.  00:43F2                      .MOVE_SHOOT_LEFT:    
     312.  00:43F2  3E FD                   LD A, -MOV_SPEED_SHOOT
     313.  00:43F4  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     314.  00:43F7                      
     315.  00:43F7                      .CHECK_SHOOT_DISTANCE:
     316.  00:43F7                          ; Miramos si va a izq o der
     317.  00:43F7  3A 13 C0                LD A,(CHAR_MAIN_SHOOT)    
     318.  00:43FA  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     319.  00:43FC  D2 0C 44                JP NC,.ADD_SHOOT_Y
     320.  00:43FF                          ; Movemos el disparo
     321.  00:43FF  DD 7E 11                LD A, (ix+17)          ;cargamos la X del disparo
     322.  00:4402  2A 16 C0            	LD HL, (CHAR_SPEED_SHOOT)
     323.  00:4405  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     324.  00:4406  DD 77 11                LD (ix+17), A
     325.  00:4409  C3 16 44                JP .ADD_DISTANCE
     326.  00:440C                      .ADD_SHOOT_Y
     327.  00:440C                          ; Movemos el disparo
     328.  00:440C  DD 7E 10                LD A, (ix+16)          ;cargamos la X del disparo
     329.  00:440F  2A 16 C0            	LD HL, (CHAR_SPEED_SHOOT)
     330.  00:4412  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     331.  00:4413  DD 77 10                LD (ix+16), A
     332.  00:4416                      
     333.  00:4416                      .ADD_DISTANCE:
     334.  00:4416  3A 15 C0                LD A,(CHAR_DISTANCE_SHOOT)
     335.  00:4419  C6 03                   ADD MOV_SPEED_SHOOT
     336.  00:441B  32 15 C0                LD (CHAR_DISTANCE_SHOOT),A    
     337.  00:441E  FE 30                   CP MAX_DISTANCE_SHOOT
     338.  00:4420  C0                      RET NZ
     339.  00:4421                      
     340.  00:4421                      .HIDE_SHOOT:
     341.  00:4421  DD 36 10 D9             LD (ix+16),217          ; Y = 217 para ocultar el Sprite
     342.  00:4425  AF                      XOR A
     343.  00:4426  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     344.  00:4429  32 15 C0                LD (CHAR_DISTANCE_SHOOT),A
     345.  00:442C  C9                      RET
     346.  00:442D                      
      27   00:442D                      	include "include\VDP.asm"
       1.  00:442D                      print_strings_dialog_box:
       2.  00:442D                      
       3.  00:442D  FD 66 01            	LD H, (IY+1)
       4.  00:4430  FD 6E 00            	LD L, (IY)
       5.  00:4433  11 28 5C            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
       6.  00:4436  FD E5               	PUSH IY
       7.  00:4438  CD 5A 44                call print_string 
       8.  00:443B  FD E1                   POP IY
       9.  00:443D                      
      10.  00:443D  FD 66 03            	LD H, (IY+3)
      11.  00:4440  FD 6E 02            	LD L, (IY+2)
      12.  00:4443  11 28 60                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
      13.  00:4446  FD E5               	PUSH IY
      14.  00:4448  CD 5A 44                call print_string 
      15.  00:444B  FD E1               	POP IY
      16.  00:444D                      
      17.  00:444D  FD 66 05                LD H, (IY+5)
      18.  00:4450  FD 6E 04            	LD L, (IY+4)
      19.  00:4453  11 28 64            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      20.  00:4456  CD 5A 44                call print_string 
      21.  00:4459  C9                  	RET
      22.  00:445A                      
      23.  00:445A                      print_string:       
      24.  00:445A                      	
      25.  00:445A                      	;LD HL, string01
      26.  00:445A                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
      27.  00:445A                      .loop_str:
      28.  00:445A  7E                  	LD A, (HL)
      29.  00:445B  A7                  	AND A
      30.  00:445C  C8                  	RET Z
      31.  00:445D                      
      32.  00:445D  D6 20               	SUB 32
      33.  00:445F  CB 07               	RLC A
      34.  00:4461  CB 07               	RLC A	
      35.  00:4463                          
      36.  00:4463  06 00               	LD B, 0
      37.  00:4465  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
      38.  00:4466                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
      39.  00:4466                      				; Si #ASCII > 63 -> 2ª línea
      40.  00:4466                      				; segunda línea - ((#ASCII -32)*4)+1024
      41.  00:4466                      	
      42.  00:4466  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
      43.  00:4467  E5                  	PUSH HL
      44.  00:4468  21 00 80            	LD HL, FONT
      45.  00:446B  09                  	ADD HL, BC
      46.  00:446C  FE 40               	CP 64
      47.  00:446E  DA 75 44            	JP C, .first_line_font
      48.  00:4471  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
      49.  00:4474  09                  	ADD HL, BC
      50.  00:4475                      
      51.  00:4475                      .first_line_font:
      52.  00:4475  22 A2 C0                LD (BITMAP), HL
      53.  00:4478                          
      54.  00:4478  06 06               	LD B, :FONT
      55.  00:447A  D5                  	PUSH DE
      56.  00:447B  CD 8E 44                call print_char
      57.  00:447E  D1                      POP DE
      58.  00:447F                      	
      59.  00:447F  FD 21 04 00         	LD IY, 4
      60.  00:4483  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
      61.  00:4485  FD 54               	LD D, IYH
      62.  00:4487  FD 5D               	LD E, IYL
      63.  00:4489                      	
      64.  00:4489                      
      65.  00:4489  E1                  	POP HL
      66.  00:448A  23                  	INC HL
      67.  00:448B  18 CD               	JR .loop_str
      68.  00:448D                          
      69.  00:448D  C9                      RET
      70.  00:448E                      
      71.  00:448E                      print_char
      72.  00:448E  AF                  		XOR A		
      73.  00:448F  0E 00               		ld		c,0
      74.  00:4491                      		;ld		de,0
      75.  00:4491  ED 53 01 C0         		LD (CHR_ACR), DE
      76.  00:4495  CD F9 40                	call	_vdpsetvramwr		
      77.  00:4498  78                  		ld	a, b			; 1st page bitmap
      78.  00:4499                      		;ld	d,a
      79.  00:4499  32 00 70            		ld	(_bank2),a
      80.  00:449C  2A A2 C0            		ld	hl,(BITMAP)		; Bitmap address
      81.  00:449F  3E 08               		ld	a, 8			; #lineas del caracter
      82.  00:44A1  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
      83.  00:44A4  ED B3                       otir
      84.  00:44A6  01 7C 00                    LD BC, 124
      85.  00:44A9  09                          ADD HL, BC
      86.  00:44AA  F5                  		PUSH AF
      87.  00:44AB                      
      88.  00:44AB  FD 2A 01 C0         		LD IY, (CHR_ACR)
      89.  00:44AF  01 80 00            		LD BC, 128
      90.  00:44B2  FD 09               		ADD IY, BC
      91.  00:44B4  FD 54               		LD D, IYH
      92.  00:44B6  FD 5D               		LD E, IYL
      93.  00:44B8  A9                  		XOR C
      94.  00:44B9  ED 53 01 C0         		LD (CHR_ACR), DE
      95.  00:44BD  CD F9 40            		call	_vdpsetvramwr		
      96.  00:44C0  F1                  		POP AF		
      97.  00:44C1                      
      98.  00:44C1  3D                  		dec	a
      99.  00:44C2  20 DD               		jr	nz,1b		
     100.  00:44C4  C9                  		ret 
     101.  00:44C5                      
     102.  00:44C5                      CLEAR_DIALOG_BOX:		
     103.  00:44C5  0E 00               		LD C,0
     104.  00:44C7  11 28 5C            		LD DE, 5C28H
     105.  00:44CA  ED 53 01 C0         		LD (CHR_ACR), DE
     106.  00:44CE  CD F9 40            		call _vdpsetvramwr
     107.  00:44D1  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     108.  00:44D3  21 73 59            1:		LD HL, BLANK_DATA
     109.  00:44D6  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     110.  00:44D9  ED B3               		OTIR
     111.  00:44DB                      
     112.  00:44DB  F5                  		PUSH AF
     113.  00:44DC  FD 2A 01 C0         		LD IY, (CHR_ACR)
     114.  00:44E0  01 80 00            		LD BC, 128
     115.  00:44E3  FD 09               		ADD IY, BC
     116.  00:44E5  FD 54               		LD D, IYH
     117.  00:44E7  FD 5D               		LD E, IYL
     118.  00:44E9  0E 00               		LD C,0
     119.  00:44EB  ED 53 01 C0         		LD (CHR_ACR), DE
     120.  00:44EF  CD F9 40            		call	_vdpsetvramwr		
     121.  00:44F2  F1                  		POP AF		
     122.  00:44F3                      
     123.  00:44F3  3D                  		DEC a
     124.  00:44F4  20 DD               		JR NZ,1b
     125.  00:44F6  C9                  		RET
      28   00:44F7                      
      29   00:44F7                      START
      30   00:44F7                      	; CODE
      31   00:44F7                      	;LD A,8
      32   00:44F7                      	;CALL CHGMOD    	
      33   00:44F7  CD 2C 41                CALL SETPAGES32K
      34   00:44FA                      ;	CALL opening_screen
      35   00:44FA  3E 01               	LD A,1
      36   00:44FC  32 00 70            	LD (_bank2),A
      37   00:44FF                      ;	CALL CHGET
      38   00:44FF                      	; Empieza el juego    
      39   00:44FF  CD 99 40            	call ClearVram_MSX2		
      40   00:4502  CD 3F 41            	call SET_SCREEN5_MODE    
      41   00:4505  CD 8D 40                call Set212Lines
      42   00:4508                              
      43   00:4508  CD 14 45                call INIT_CHARS_VARS
      44   00:450B  3E FF                   LD A, -MOV_SPEED_GHOST
      45   00:450D  32 0A C0            	LD (CHAR_SPEED_X_GHOST), A
      46   00:4510  CD 85 45                CALL STAGE1
      47   00:4513                          ;call MAIN_LOOP
      48   00:4513                          ;CALL CHGET
      49   00:4513  C9                  	ret
      50   00:4514                      
      51   00:4514                      
      52   00:4514                      INIT_CHARS_VARS:    
      53   00:4514  DD 21 17 C0             ld ix, SPRITE_ATTRS           
      54   00:4518                          
      55   00:4518  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      56   00:451C  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      57   00:4520  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      58   00:4524                      
      59   00:4524  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      60   00:4528  DD 36 05 7F             ld (ix+5), 7Fh
      61   00:452C  DD 36 06 04             ld (ix+6), 04h        
      62   00:4530                      
      63   00:4530  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      64   00:4534  DD 36 09 7F             ld (ix+9), 7Fh
      65   00:4538  DD 36 0A 08             ld (ix+10), 08h        
      66   00:453C                      
      67   00:453C  DD 36 0C 0F             ld (ix+12), $0f      ; Sprite 1 - Ghost
      68   00:4540  DD 36 0D B9             ld (ix+13), $B9
      69   00:4544  DD 36 0E 18             ld (ix+14), $18
      70   00:4548                          
      71   00:4548  AF                      XOR A
      72   00:4549  32 07 C0                LD (JIFFY_TEMP),A
      73   00:454C  32 08 C0                LD (CHAR_SPEED_X),A
      74   00:454F  32 09 C0                LD (CHAR_SPEED_Y),A
      75   00:4552  32 0A C0                LD (CHAR_SPEED_X_GHOST),A
      76   00:4555  32 0F C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      77   00:4558  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A    
      78   00:455B  32 13 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      79   00:455E  32 15 C0                LD (CHAR_DISTANCE_SHOOT),A
      80   00:4561  32 16 C0                LD (CHAR_SPEED_SHOOT),A
      81   00:4564  32 0C C0                LD (CHAR_GHOST_DEAD),A
      82   00:4567  32 14 C0                LD (CHAR_MIN_STEP), A
      83   00:456A  32 9E C0                LD (SPRITE_COLOR_REPLACE2), A
      84   00:456D                         ; LD A,$FF
      85   00:456D  32 06 C0                LD (OLD_KEY_PRESSED), A
      86   00:4570  3E 01                   LD A,$01
      87   00:4572  32 11 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      88   00:4575                      
      89   00:4575  21 E3 48                ld hl, SPRITE_P1_DOWN
      90   00:4578  22 9A C0                ld (SPRITE_PTR_REPLACE), HL    
      91   00:457B  21 73 4E                ld hl, SPRITE_COLOR_P1_DOWN
      92   00:457E  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
      93   00:4581  22 9E C0                LD (SPRITE_COLOR_REPLACE2), HL
      94   00:4584  C9                      ret
      95   00:4585                      
      96   00:4585                      STAGE1:
      97   00:4585  CD 41 00                CALL DISSCR
      98   00:4588  21 00 80                LD HL, CEMENTER1
      99   00:458B  22 A2 C0                LD (BITMAP), HL
     100   00:458E  06 07                   LD B, :CEMENTER1
     101   00:4590  CD D7 40                call load_screen
     102   00:4593                          
     103   00:4593  CD 61 41                call DUMP_SPR_ALL
     104   00:4596  CD A1 41                CALL DUMP_SPR_P1
     105   00:4599  21 33 4F                LD HL, mapa1
     106   00:459C  22 A0 C0                LD (MAPA), HL
     107   00:459F                          
     108   00:459F  CD 44 00                CALL ENASCR
     109   00:45A2                          ;CALL CHGET
     110   00:45A2                          ;CALL CLEAR_DIALOG_BOX
     111   00:45A2                          
     112   00:45A2                      MAIN_LOOP:
     113   00:45A2                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     114   00:45A2  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     115   00:45A5  FE 00                   CP $00
     116   00:45A7  CA EC 46                JP Z, STAGE2
     117   00:45AA  CD 86 41                call DUMP_SPR_ATTS    
     118   00:45AD                          
     119   00:45AD  DD 7E 01                LD A, (ix +1)   ; Cargamos la Y para mirar si hay colisión con la tumba
     120   00:45B0  FE B0                   CP 176
     121   00:45B2  20 10                   JR NZ, .animate_ghost
     122   00:45B4  3A 00 C0                LD A, (SHOWING_DIALOG)
     123   00:45B7  FE 01                   CP 1
     124   00:45B9  28 09                   JR Z, .animate_ghost
     125   00:45BB  FD 21 10 40             LD IY, sardu01_strings
     126   00:45BF  CD 2D 44                CALL print_strings_dialog_box
     127   00:45C2  3E 01                   LD A,1
     128   00:45C4                          ;LD (SHOWING_DIALOG), A
     129   00:45C4                      
     130   00:45C4                      .animate_ghost
     131   00:45C4  3A 0C C0                LD A,(CHAR_GHOST_DEAD)
     132   00:45C7  FE 01                   CP $01
     133   00:45C9  CA 2A 46                JP Z,.continue
     134   00:45CC  DD 7E 0D                LD A, (ix+13)          ;cargamos la X del Fantasma
     135   00:45CF  2A 0A C0            	LD HL, (CHAR_SPEED_X_GHOST)
     136   00:45D2  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     137   00:45D3                          
     138   00:45D3  DD 77 0D            	LD (ix+13), A	
     139   00:45D6  FE 16                   CP $16
     140   00:45D8  CA E3 45                JP Z,.CHANGE_DIR_RIGHT
     141   00:45DB  FE B9                   CP $B9
     142   00:45DD  CA F0 45                JP Z,.CHANGE_DIR_LEFT
     143   00:45E0                          		
     144   00:45E0  C3 F9 45                JP .check_pattern
     145   00:45E3                      
     146   00:45E3                      .CHANGE_DIR_RIGHT:
     147   00:45E3  3E 01                   LD A, MOV_SPEED_GHOST
     148   00:45E5  32 0A C0            	LD (CHAR_SPEED_X_GHOST), A
     149   00:45E8  3E FF                   LD A,$FF
     150   00:45EA  32 0F C0                LD (CHAR_DIR_GHOST1),A
     151   00:45ED  C3 F9 45                JP .check_pattern
     152   00:45F0                      
     153   00:45F0                      .CHANGE_DIR_LEFT:
     154   00:45F0  3E FF                   LD A, -MOV_SPEED_GHOST
     155   00:45F2  32 0A C0            	LD (CHAR_SPEED_X_GHOST), A
     156   00:45F5  AF                      XOR A   ; Pone A a 0
     157   00:45F6  32 0F C0                LD (CHAR_DIR_GHOST1),A
     158   00:45F9                      
     159   00:45F9                      .check_pattern:
     160   00:45F9  3A 0F C0                LD A,(CHAR_DIR_GHOST1)
     161   00:45FC  FE FF                   CP $FF
     162   00:45FE  CA 17 46                JP Z,.check_pattern_RIGHT
     163   00:4601  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     164   00:4604  FE 18                   CP $18
     165   00:4606  CA 10 46                jp z,.change_pattern_L
     166   00:4609  DD 36 0E 18             LD (ix+14),$18
     167   00:460D  C3 2A 46                jp .continue
     168   00:4610                      .change_pattern_L:
     169   00:4610  DD 36 0E 1C             LD (ix+14),$1C
     170   00:4614  C3 2A 46                jp .continue
     171   00:4617                      
     172   00:4617                      .check_pattern_RIGHT
     173   00:4617  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     174   00:461A  FE 20                   CP $20
     175   00:461C  CA 26 46                jp z,.change_pattern_R
     176   00:461F  DD 36 0E 20             LD (ix+14),$20
     177   00:4623  C3 2A 46                jp .continue
     178   00:4626                      .change_pattern_R:
     179   00:4626  DD 36 0E 24             LD (ix+14),$24
     180   00:462A                      
     181   00:462A                      .continue:    
     182   00:462A  CD C2 43                CALL MOVE_SHOOT
     183   00:462D                      .CHECK_GHOST:
     184   00:462D                          ; Comprobamos si hay colision con el fantasma
     185   00:462D  3A 0C C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     186   00:4630  FE 01                   CP $01
     187   00:4632  CA 52 46                JP Z,.check_KB
     188   00:4635                      
     189   00:4635  DD 46 10                LD B,(ix+16)         ; Y del disparo
     190   00:4638  DD 4E 11                LD C,(ix+17)         ; X del disparo
     191   00:463B  DD 56 0C                LD D,(ix+12)         ; Y del fantasma 
     192   00:463E  DD 5E 0D                LD E,(ix+13)         ; X del fantasma
     193   00:4641  CD 40 40                call check_spr_collision
     194   00:4644  FE 01                   CP 1
     195   00:4646  C2 52 46                JP NZ,.check_KB
     196   00:4649                      
     197   00:4649                      .KILL_GHOST:
     198   00:4649  3E 01                   LD A,1
     199   00:464B  32 0C C0                LD (CHAR_GHOST_DEAD),A
     200   00:464E  DD 36 0C D9             LD (ix+12),217    
     201   00:4652                      
     202   00:4652                      .check_KB:
     203   00:4652  76                      halt    
     204   00:4653                      
     205   00:4653  3A 06 C0                LD A, (OLD_KEY_PRESSED)
     206   00:4656  47                      LD B, A
     207   00:4657                      
     208   00:4657  3E 08                   ld a, 8
     209   00:4659  CD 41 01            	call SNSMAT   
     210   00:465C                          
     211   00:465C  32 06 C0                LD (OLD_KEY_PRESSED), A
     212   00:465F                          ;XOR B
     213   00:465F                          ;AND B
     214   00:465F                      
     215   00:465F  4F                      LD C,A    
     216   00:4660                          
     217   00:4660  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     218   00:4662  CC 2D 42                call z, move_right
     219   00:4665                          
     220   00:4665  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     221   00:4667  CC 7B 42                call z, move_left
     222   00:466A                      
     223   00:466A  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     224   00:466C  CC BE 41                call z, move_up
     225   00:466F                      
     226   00:466F  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     227   00:4671  CC F5 41                call z, move_down
     228   00:4674                      
     229   00:4674                      no_arrows:
     230   00:4674  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     231   00:4676  CC 7C 46                call z,SHOOT_MAIN_CHAR
     232   00:4679                      
     233   00:4679                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     234   00:4679                          ;ret z
     235   00:4679                      
     236   00:4679  C3 A2 45                jp MAIN_LOOP
     237   00:467C                      
     238   00:467C                      SHOOT_MAIN_CHAR:    
     239   00:467C  3A 13 C0                LD A, (CHAR_MAIN_SHOOT)
     240   00:467F  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     241   00:4681  C8                      RET Z;,MAIN_LOOP
     242   00:4682  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     243   00:4684  C8                      RET Z;,MAIN_LOOP
     244   00:4685  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     245   00:4687  C8                      RET Z;,MAIN_LOOP
     246   00:4688  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     247   00:468A  C8                      RET Z;,MAIN_LOOP
     248   00:468B                      
     249   00:468B  DD 36 12 28             ld (ix+18), $28     ; Sprite Disparo
     250   00:468F                      
     251   00:468F  DD 7E 00                LD A, (ix)          
     252   00:4692  DD 77 10                ld (ix+16), A       ; Asignamos la Y del personaje    
     253   00:4695                      
     254   00:4695  3A 11 C0                LD A, (CHAR_DIR_MAIN)
     255   00:4698  FE 03                   CP $03
     256   00:469A  CA B6 46                JP Z,.SHOOT_RIGHT
     257   00:469D  FE 00                   CP $00
     258   00:469F  CA C5 46                JP Z,.SHOOT_UP
     259   00:46A2  FE 01                   CP $01
     260   00:46A4  CA D8 46                JP Z,.SHOOT_DOWN
     261   00:46A7                          ; SHOOT LEFT
     262   00:46A7  3E 01                   LD A,$01                ; SHOOT LEFT
     263   00:46A9  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     264   00:46AC  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     265   00:46AF  21 F4 FF            	LD HL, -12
     266   00:46B2  85                  	ADD L
     267   00:46B3                          
     268   00:46B3  C3 E8 46                JP .CONTINUE
     269   00:46B6                      
     270   00:46B6                      .SHOOT_RIGHT:    
     271   00:46B6  3E 02                   LD A,$02
     272   00:46B8  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     273   00:46BB                          
     274   00:46BB  DD 7E 01                LD A, (ix+1)			;cargamos la X
     275   00:46BE  21 0C 00            	LD HL, 12
     276   00:46C1  85                  	ADD L
     277   00:46C2  C3 E8 46                JP .CONTINUE
     278   00:46C5                      
     279   00:46C5                      .SHOOT_UP:
     280   00:46C5  3E 03                   LD A,$03
     281   00:46C7  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     282   00:46CA                          
     283   00:46CA                          ; Sumamos el desplazamiento a la Y
     284   00:46CA  DD 7E 10                LD A, (ix+16)
     285   00:46CD  D6 10                   SUB 16
     286   00:46CF  DD 77 10                LD (ix+16), A    
     287   00:46D2                          ;LD (ix+17), D
     288   00:46D2  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     289   00:46D5  C3 E8 46                JP .CONTINUE
     290   00:46D8                      
     291   00:46D8                      .SHOOT_DOWN
     292   00:46D8  3E 04               	LD A,$04
     293   00:46DA  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     294   00:46DD                          
     295   00:46DD                          ; Sumamos el desplazamiento a la Y
     296   00:46DD  DD 7E 10                LD A, (ix+16)
     297   00:46E0  C6 10                   ADD 16
     298   00:46E2  DD 77 10                LD (ix+16), A    
     299   00:46E5                          ;LD (ix+17), D
     300   00:46E5  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     301   00:46E8                      
     302   00:46E8                      .CONTINUE:
     303   00:46E8                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     304   00:46E8  DD 77 11                ld (ix+17), A       ; Asignamos la X del personaje + el desplazamiento        
     305   00:46EB                          ;jp MAIN_LOOP
     306   00:46EB  C9                      ret
     307   00:46EC                      
     308   00:46EC                      STAGE2:
     309   00:46EC  CD 41 00                CALL DISSCR
     310   00:46EF  21 00 80                LD HL, CEMENTER2
     311   00:46F2  22 A2 C0                LD (BITMAP), HL
     312   00:46F5  06 0D                   LD B, :CEMENTER2
     313   00:46F7                      
     314   00:46F7  CD D7 40                call load_screen
     315   00:46FA  21 73 52                LD HL, mapa2
     316   00:46FD  22 A0 C0                LD (MAPA), HL
     317   00:4700                      
     318   00:4700  DD 36 00 C4             LD (ix), 196    ; Ponemos el P1 abajo
     319   00:4704  DD 36 04 C4             LD (ix+4), 196    
     320   00:4708  DD 36 08 C4             LD (ix+8), 196    
     321   00:470C                          
     322   00:470C  DD 36 0C D9             LD (ix+12),217  ; ocultamos el fantasma
     323   00:4710                          
     324   00:4710  CD 61 41                call DUMP_SPR_ALL    
     325   00:4713  CD A1 41                CALL DUMP_SPR_P1
     326   00:4716                          ; Esqueleto
     327   00:4716  DD 36 14 10             LD (ix+20), 10h
     328   00:471A  DD 36 15 10             LD (ix+21), 10h
     329   00:471E  DD 36 16 3C             LD (ix+22), 3Ch
     330   00:4722                      
     331   00:4722  DD 36 18 10             LD (ix+24), 10h
     332   00:4726  DD 36 19 10             LD (ix+25), 10h
     333   00:472A  DD 36 1A 40             LD (ix+26), 40h
     334   00:472E                      
     335   00:472E  AF                      XOR A
     336   00:472F  32 0D C0                LD (CHAR_GHOST_DEAD_STG2), A
     337   00:4732  32 0E C0                LD (CHAR_MIN_STEP_STG2), A
     338   00:4735  3E FF                   LD A, $FF
     339   00:4737  32 10 C0                LD (CHAR_DIR_GHOST_STG2), A
     340   00:473A  3E 01                   LD A, MOV_SPEED_GHOST
     341   00:473C  32 0B C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     342   00:473F                      
     343   00:473F  CD 44 00                CALL ENASCR
     344   00:4742                          
     345   00:4742                      MAIN_LOOP2:
     346   00:4742  76                      halt    
     347   00:4743                      
     348   00:4743  DD 7E 00                LD A, (ix)    
     349   00:4746  FE C6                   CP 198
     350   00:4748  C2 6E 47                JP NZ, .no_screen_change
     351   00:474B                          ; Ponemos el SP1 al principio de la pantalla 1
     352   00:474B  DD 36 00 01             LD (ix), 1          ; SP1 - Y = 1
     353   00:474F  DD 36 04 01             LD (ix+4), 1
     354   00:4753  DD 36 08 01             LD (ix+8), 1
     355   00:4757                      
     356   00:4757  3A 0C C0                LD A, (CHAR_GHOST_DEAD)
     357   00:475A  FE 01                   CP $01
     358   00:475C  CA 63 47                JP Z, .GHOST_DEAD
     359   00:475F  DD 36 0C 0F             ld (ix+12), $0F      ; Sprite 1 - Ghost
     360   00:4763                      .GHOST_DEAD:
     361   00:4763  DD 36 14 D9             LD (ix+20),217  ; ocultamos el esqueleto
     362   00:4767  DD 36 18 D9             LD (ix+24),217  ; ocultamos el esqueleto
     363   00:476B  CD 85 45                CALL STAGE1
     364   00:476E                      
     365   00:476E                      .no_screen_change:
     366   00:476E                      
     367   00:476E  CD 86 41                call DUMP_SPR_ATTS    
     368   00:4771                          ; Movemos el esqueleto
     369   00:4771  3A 0D C0                LD A,(CHAR_GHOST_DEAD_STG2)
     370   00:4774  FE 01                   CP $01
     371   00:4776  CA FB 47                JP Z,.continue
     372   00:4779  DD 7E 15                LD A, (ix+21)          ;cargamos la X del Esqueleto
     373   00:477C  2A 0B C0            	LD HL, (CHAR_SPEED_X_GHOST_STG2)
     374   00:477F  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     375   00:4780                          
     376   00:4780  DD 77 15            	LD (ix+21), A	
     377   00:4783  DD 77 19                LD (ix+25), A
     378   00:4786  FE 16                   CP $16
     379   00:4788  CA A0 47                JP Z,.CHANGE_DIR_RIGHT
     380   00:478B  FE B9                   CP $B9
     381   00:478D  CA AD 47                JP Z,.CHANGE_DIR_LEFT
     382   00:4790                      
     383   00:4790  3A 0E C0                LD A, (CHAR_MIN_STEP_STG2)		
     384   00:4793  FE 06                   CP MAX_CHAR_STEPS_STG2
     385   00:4795  CA B6 47                JP Z,.check_pattern
     386   00:4798  C6 01                   ADD 1
     387   00:479A  32 0E C0                LD (CHAR_MIN_STEP_STG2), A
     388   00:479D  C3 FB 47                JP .continue
     389   00:47A0                      
     390   00:47A0                      .CHANGE_DIR_RIGHT:
     391   00:47A0  3E 01                   LD A, MOV_SPEED_GHOST
     392   00:47A2  32 0B C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     393   00:47A5  3E FF                   LD A,$FF
     394   00:47A7  32 10 C0                LD (CHAR_DIR_GHOST_STG2),A
     395   00:47AA  C3 B6 47                JP .check_pattern
     396   00:47AD                      
     397   00:47AD                      .CHANGE_DIR_LEFT:
     398   00:47AD  3E FF                   LD A, -MOV_SPEED_GHOST
     399   00:47AF  32 0B C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     400   00:47B2  AF                      XOR A   ; Pone A a 0
     401   00:47B3  32 10 C0                LD (CHAR_DIR_GHOST_STG2),A
     402   00:47B6                      
     403   00:47B6                      .check_pattern:
     404   00:47B6  AF                      XOR A
     405   00:47B7  32 0E C0                LD (CHAR_MIN_STEP_STG2), A
     406   00:47BA  3A 10 C0                LD A,(CHAR_DIR_GHOST_STG2)
     407   00:47BD  FE FF                   CP $FF
     408   00:47BF  CA E0 47                JP Z,.check_pattern_RIGHT
     409   00:47C2  DD 7E 16                LD A, (ix+22)       ; Cargamos el patrón y lo cambiamos
     410   00:47C5  FE 2C                   CP $2C
     411   00:47C7  CA D5 47                jp z,.change_pattern_L
     412   00:47CA  DD 36 16 2C             LD (ix+22),$2C
     413   00:47CE  DD 36 1A 30             LD (ix+26),$30
     414   00:47D2  C3 FB 47                jp .continue
     415   00:47D5                      .change_pattern_L:
     416   00:47D5  DD 36 16 34             LD (ix+22),$34
     417   00:47D9  DD 36 1A 38             LD (ix+26),$38
     418   00:47DD  C3 FB 47                jp .continue
     419   00:47E0                      
     420   00:47E0                      .check_pattern_RIGHT
     421   00:47E0  DD 7E 16                LD A, (ix+22)       ; Cargamos el patrón y lo cambiamos
     422   00:47E3  FE 3C                   CP $3C
     423   00:47E5  CA F3 47                jp z,.change_pattern_R
     424   00:47E8  DD 36 16 3C             LD (ix+22),$3C
     425   00:47EC  DD 36 1A 40             LD (ix+26),$40
     426   00:47F0  C3 FB 47                jp .continue
     427   00:47F3                      .change_pattern_R:
     428   00:47F3  DD 36 16 44             LD (ix+22),$44
     429   00:47F7  DD 36 1A 48             LD (ix+26),$48
     430   00:47FB                      
     431   00:47FB                      .continue:
     432   00:47FB  CD C2 43                CALL MOVE_SHOOT    
     433   00:47FE                      
     434   00:47FE  3E 08                   ld a, 8
     435   00:4800  CD 41 01            	call SNSMAT   
     436   00:4803  4F                      LD C,A    
     437   00:4804                              
     438   00:4804  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     439   00:4806  CC 2D 42                call z, move_right
     440   00:4809                          
     441   00:4809  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     442   00:480B  CC 7B 42                call z, move_left
     443   00:480E                      
     444   00:480E  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     445   00:4810  CC BE 41                call z, move_up
     446   00:4813                      
     447   00:4813  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     448   00:4815  CC F5 41                call z, move_down
     449   00:4818                      
     450   00:4818  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     451   00:481A  CC 7C 46                call z,SHOOT_MAIN_CHAR
     452   00:481D                      
     453   00:481D  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     454   00:481F  C8                      ret z
     455   00:4820                      
     456   00:4820  C3 42 47                jp MAIN_LOOP2
     457   00:4823                      
     458   00:4823                      include "include\BTH_data.asm"
       1.  00:4823                      SPRITE_P1_UP:
       2.  00:4823                          ; UP 1        
       3.  00:4823                          ; mask 0
       4.  00:4823                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
       4.  00:4823  03 0F 1F 1F 1F 3F 1F 0F 
       5.  00:482B                          DB $30,$78,$60,$60,$03,$03,$06,$0E
       5.  00:482B  30 78 60 60 03 03 06 0E 
       6.  00:4833                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
       6.  00:4833  E0 F0 F8 F8 FC F8 FC F0 
       7.  00:483B                          DB $0E,$18,$06,$00,$C0,$E0,$F0,$00    
       7.  00:483B  0E 18 06 00 C0 E0 F0 00 
       8.  00:4843                          ; mask 1
       9.  00:4843                          DB $00,$00,$00,$00,$00,$00,$00,$00
       9.  00:4843  00 00 00 00 00 00 00 00 
      10.  00:484B                          DB $0F,$00,$03,$03,$01,$01,$00,$00
      10.  00:484B  0F 00 03 03 01 01 00 00 
      11.  00:4853                          DB $00,$00,$00,$00,$00,$00,$00,$00
      11.  00:4853  00 00 00 00 00 00 00 00 
      12.  00:485B                          DB $F0,$06,$C0,$C0,$80,$80,$80,$00
      12.  00:485B  F0 06 C0 C0 80 80 80 00 
      13.  00:4863                          ; mask 2
      14.  00:4863                          DB $00,$00,$00,$00,$00,$00,$00,$00
      14.  00:4863  00 00 00 00 00 00 00 00 
      15.  00:486B                          DB $00,$07,$01,$01,$00,$00,$00,$00
      15.  00:486B  00 07 01 01 00 00 00 00 
      16.  00:4873                          DB $00,$00,$00,$00,$00,$00,$00,$00
      16.  00:4873  00 00 00 00 00 00 00 00 
      17.  00:487B                          DB $00,$E0,$80,$80,$00,$00,$00,$00    
      17.  00:487B  00 E0 80 80 00 00 00 00 
      18.  00:4883                      
      19.  00:4883                          ; UP 2
      20.  00:4883                          ; mask 0
      21.  00:4883                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
      21.  00:4883  03 0F 1F 1F 1F 3F 1F 0F 
      22.  00:488B                          DB $70,$18,$60,$00,$03,$07,$0E,$00
      22.  00:488B  70 18 60 00 03 07 0E 00 
      23.  00:4893                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
      23.  00:4893  E0 F0 F8 F8 FC F8 FC F0 
      24.  00:489B                          DB $0C,$1E,$06,$06,$C0,$C0,$E0,$70    
      24.  00:489B  0C 1E 06 06 C0 C0 E0 70 
      25.  00:48A3                          ; mask 1
      26.  00:48A3                          DB $00,$00,$00,$00,$00,$00,$00,$00
      26.  00:48A3  00 00 00 00 00 00 00 00 
      27.  00:48AB                          DB $0F,$60,$03,$03,$01,$01,$00,$00
      27.  00:48AB  0F 60 03 03 01 01 00 00 
      28.  00:48B3                          DB $00,$00,$00,$00,$00,$00,$00,$00
      28.  00:48B3  00 00 00 00 00 00 00 00 
      29.  00:48BB                          DB $F0,$00,$C0,$C0,$80,$80,$80,$00
      29.  00:48BB  F0 00 C0 C0 80 80 80 00 
      30.  00:48C3                          ; mask 2
      31.  00:48C3                          DB $00,$00,$00,$00,$00,$00,$00,$00
      31.  00:48C3  00 00 00 00 00 00 00 00 
      32.  00:48CB                          DB $00,$07,$01,$01,$00,$00,$00,$00
      32.  00:48CB  00 07 01 01 00 00 00 00 
      33.  00:48D3                          DB $00,$00,$00,$00,$00,$00,$00,$00
      33.  00:48D3  00 00 00 00 00 00 00 00 
      34.  00:48DB                          DB $00,$E0,$80,$80,$00,$00,$00,$00
      34.  00:48DB  00 E0 80 80 00 00 00 00 
      35.  00:48E3                      
      36.  00:48E3                      SPRITE_P1_DOWN:
      37.  00:48E3                          ; DOWN 1 - 00h
      38.  00:48E3                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      38.  00:48E3  03 0F 00 0A 0E 0D 07 03 
      39.  00:48EB                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
      39.  00:48EB  3E 7B 60 60 03 03 06 0E 
      40.  00:48F3                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      40.  00:48F3  E0 F0 A0 90 70 B0 E0 C0 
      41.  00:48FB                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
      41.  00:48FB  7E D8 06 00 C0 E0 F0 00 
      42.  00:4903                          ; mask 1 - 04h
      43.  00:4903                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      43.  00:4903  00 00 1F 15 11 32 18 0C 
      44.  00:490B                          DB $01,$00,$03,$03,$01,$01,$00,$00
      44.  00:490B  01 00 03 03 01 01 00 00 
      45.  00:4913                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      45.  00:4913  00 00 58 68 8C 48 1C 30 
      46.  00:491B                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
      46.  00:491B  80 06 C0 C0 80 80 80 00 
      47.  00:4923                          ; mask 2 - 08h
      48.  00:4923                          DB $00,$00,$00,$00,$00,$30,$00,$00
      48.  00:4923  00 00 00 00 00 30 00 00 
      49.  00:492B                          DB $00,$04,$00,$00,$00,$00,$00,$00
      49.  00:492B  00 04 00 00 00 00 00 00 
      50.  00:4933                          DB $00,$00,$00,$00,$00,$08,$00,$00
      50.  00:4933  00 00 00 00 00 08 00 00 
      51.  00:493B                          DB $00,$20,$00,$00,$00,$00,$00,$00
      51.  00:493B  00 20 00 00 00 00 00 00 
      52.  00:4943                      
      53.  00:4943                          ; DOWN 2
      54.  00:4943                          ; mask 0 - 0Ch
      55.  00:4943                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      55.  00:4943  03 0F 00 0A 0E 0D 07 03 
      56.  00:494B                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
      56.  00:494B  7E 1B 60 00 03 07 0E 00 
      57.  00:4953                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      57.  00:4953  E0 F0 A0 90 70 B0 E0 C0 
      58.  00:495B                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
      58.  00:495B  7C DE 06 06 C0 C0 E0 70 
      59.  00:4963                          ; mask 1 - 10h
      60.  00:4963                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      60.  00:4963  00 00 1F 15 11 32 18 0C 
      61.  00:496B                          DB $01,$60,$03,$03,$01,$01,$00,$00
      61.  00:496B  01 60 03 03 01 01 00 00 
      62.  00:4973                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      62.  00:4973  00 00 58 68 8C 48 1C 30 
      63.  00:497B                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
      63.  00:497B  80 00 C0 C0 80 80 80 00 
      64.  00:4983                          ; mask 2 - 14h
      65.  00:4983                          DB $00,$00,$00,$00,$00,$30,$00,$00
      65.  00:4983  00 00 00 00 00 30 00 00 
      66.  00:498B                          DB $00,$04,$00,$00,$00,$00,$00,$00
      66.  00:498B  00 04 00 00 00 00 00 00 
      67.  00:4993                          DB $00,$00,$00,$00,$00,$08,$00,$00
      67.  00:4993  00 00 00 00 00 08 00 00 
      68.  00:499B                          DB $00,$20,$00,$00,$00,$00,$00,$00
      68.  00:499B  00 20 00 00 00 00 00 00 
      69.  00:49A3                      
      70.  00:49A3                      SPRITE_P1_LEFT:         
      71.  00:49A3                          ; --- Slot 1
      72.  00:49A3                          ; mask 0
      73.  00:49A3                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      73.  00:49A3  07 1F 03 07 0B 1F 0F 07 
      74.  00:49AB                          DB $03,$0F,$30,$30,$03,$01,$01,$03
      74.  00:49AB  03 0F 30 30 03 01 01 03 
      75.  00:49B3                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      75.  00:49B3  C0 E0 00 80 C0 C0 80 00 
      76.  00:49BB                          DB $C0,$80,$00,$00,$D8,$B0,$20,$00
      76.  00:49BB  C0 80 00 00 D8 B0 20 00 
      77.  00:49C3                          ; mask 1
      78.  00:49C3                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      78.  00:49C3  00 00 0C 18 34 00 00 00 
      79.  00:49CB                          DB $0C,$00,$09,$03,$00,$00,$00,$00
      79.  00:49CB  0C 00 09 03 00 00 00 00 
      80.  00:49D3                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      80.  00:49D3  00 00 F0 78 38 3C 70 F8 
      81.  00:49DB                          DB $00,$78,$C0,$F8,$18,$10,$00,$00
      81.  00:49DB  00 78 C0 F8 18 10 00 00 
      82.  00:49E3                          ; mask 2
      83.  00:49E3                          DB $00,$00,$00,$00,$30,$00,$00,$00
      83.  00:49E3  00 00 00 00 30 00 00 00 
      84.  00:49EB                          DB $00,$00,$01,$00,$00,$00,$00,$00
      84.  00:49EB  00 00 01 00 00 00 00 00 
      85.  00:49F3                          DB $00,$00,$00,$00,$38,$00,$00,$00
      85.  00:49F3  00 00 00 00 38 00 00 00 
      86.  00:49FB                          DB $3C,$00,$F0,$38,$00,$00,$00,$00
      86.  00:49FB  3C 00 F0 38 00 00 00 00 
      87.  00:4A03                              
      88.  00:4A03                          ; --- Slot 3
      89.  00:4A03                          ; mask 0
      90.  00:4A03                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      90.  00:4A03  07 1F 03 07 0B 1F 0F 07 
      91.  00:4A0B                          DB $03,$0F,$01,$03,$03,$01,$03,$06
      91.  00:4A0B  03 0F 01 03 03 01 03 06 
      92.  00:4A13                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      92.  00:4A13  C0 E0 00 80 C0 C0 80 00 
      93.  00:4A1B                          DB $C0,$80,$F0,$F8,$D8,$D0,$40,$C0
      93.  00:4A1B  C0 80 F0 F8 D8 D0 40 C0 
      94.  00:4A23                          ; mask 1
      95.  00:4A23                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      95.  00:4A23  00 00 0C 18 34 00 00 00 
      96.  00:4A2B                          DB $0C,$30,$31,$00,$00,$00,$00,$00
      96.  00:4A2B  0C 30 31 00 00 00 00 00 
      97.  00:4A33                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      97.  00:4A33  00 00 F0 78 38 3C 70 F8 
      98.  00:4A3B                          DB $00,$00,$C0,$38,$18,$10,$00,$00
      98.  00:4A3B  00 00 C0 38 18 10 00 00 
      99.  00:4A43                          ; mask 2
     100.  00:4A43                          DB $00,$00,$00,$00,$30,$00,$00,$00
     100.  00:4A43  00 00 00 00 30 00 00 00 
     101.  00:4A4B                          DB $00,$00,$30,$00,$00,$00,$00,$00
     101.  00:4A4B  00 00 30 00 00 00 00 00 
     102.  00:4A53                          DB $00,$00,$00,$00,$38,$00,$00,$00
     102.  00:4A53  00 00 00 00 38 00 00 00 
     103.  00:4A5B                          DB $3C,$78,$00,$00,$00,$00,$00,$00
     103.  00:4A5B  3C 78 00 00 00 00 00 00 
     104.  00:4A63                      
     105.  00:4A63                      SPRITE_P1_RIGHT:
     106.  00:4A63                          ; --- Slot 0
     107.  00:4A63                          ; mask 0
     108.  00:4A63                          DB $03,$07,$00,$01,$03,$03,$01,$00
     108.  00:4A63  03 07 00 01 03 03 01 00 
     109.  00:4A6B                          DB $03,$01,$00,$00,$1B,$0D,$04,$00
     109.  00:4A6B  03 01 00 00 1B 0D 04 00 
     110.  00:4A73                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     110.  00:4A73  E0 F8 C0 E0 D0 F8 F0 E0 
     111.  00:4A7B                          DB $C0,$F0,$0C,$0C,$C0,$80,$80,$C0
     111.  00:4A7B  C0 F0 0C 0C C0 80 80 C0 
     112.  00:4A83                          ; mask 1
     113.  00:4A83                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     113.  00:4A83  00 00 0F 1E 1C 3C 0E 1F 
     114.  00:4A8B                          DB $00,$1E,$03,$1F,$18,$08,$00,$00
     114.  00:4A8B  00 1E 03 1F 18 08 00 00 
     115.  00:4A93                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     115.  00:4A93  00 00 30 18 2C 00 00 00 
     116.  00:4A9B                          DB $30,$00,$90,$C0,$00,$00,$00,$00
     116.  00:4A9B  30 00 90 C0 00 00 00 00 
     117.  00:4AA3                          ; mask 2
     118.  00:4AA3                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     118.  00:4AA3  00 00 00 00 1C 00 00 00 
     119.  00:4AAB                          DB $3C,$00,$0F,$1C,$00,$00,$00,$00
     119.  00:4AAB  3C 00 0F 1C 00 00 00 00 
     120.  00:4AB3                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     120.  00:4AB3  00 00 00 00 0C 00 00 00 
     121.  00:4ABB                          DB $00,$00,$80,$00,$00,$00,$00,$00
     121.  00:4ABB  00 00 80 00 00 00 00 00 
     122.  00:4AC3                      
     123.  00:4AC3                          ; --- Slot 2
     124.  00:4AC3                          ; mask 0
     125.  00:4AC3                          DB $03,$07,$00,$01,$03,$03,$01,$00
     125.  00:4AC3  03 07 00 01 03 03 01 00 
     126.  00:4ACB                          DB $03,$01,$0F,$1F,$1B,$0B,$02,$03
     126.  00:4ACB  03 01 0F 1F 1B 0B 02 03 
     127.  00:4AD3                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     127.  00:4AD3  E0 F8 C0 E0 D0 F8 F0 E0 
     128.  00:4ADB                          DB $C0,$F0,$80,$C0,$C0,$80,$C0,$60
     128.  00:4ADB  C0 F0 80 C0 C0 80 C0 60 
     129.  00:4AE3                          ; mask 1
     130.  00:4AE3                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     130.  00:4AE3  00 00 0F 1E 1C 3C 0E 1F 
     131.  00:4AEB                          DB $00,$00,$03,$1C,$18,$08,$00,$00
     131.  00:4AEB  00 00 03 1C 18 08 00 00 
     132.  00:4AF3                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     132.  00:4AF3  00 00 30 18 2C 00 00 00 
     133.  00:4AFB                          DB $30,$0C,$8C,$00,$00,$00,$00,$00
     133.  00:4AFB  30 0C 8C 00 00 00 00 00 
     134.  00:4B03                          ; mask 2
     135.  00:4B03                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     135.  00:4B03  00 00 00 00 1C 00 00 00 
     136.  00:4B0B                          DB $3C,$1E,$00,$00,$00,$00,$00,$00
     136.  00:4B0B  3C 1E 00 00 00 00 00 00 
     137.  00:4B13                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     137.  00:4B13  00 00 00 00 0C 00 00 00 
     138.  00:4B1B                          DB $00,$00,$0C,$00,$00,$00,$00,$00
     138.  00:4B1B  00 00 0C 00 00 00 00 00 
     139.  00:4B23                      
     140.  00:4B23                      SPRITE_PATTERN:    
     141.  00:4B23                          ; P1 - DOWN 1 
     142.  00:4B23                          ; mask 0 - 00h
     143.  00:4B23                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     143.  00:4B23  03 0F 00 0A 0E 0D 07 03 
     144.  00:4B2B                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
     144.  00:4B2B  3E 7B 60 60 03 03 06 0E 
     145.  00:4B33                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     145.  00:4B33  E0 F0 A0 90 70 B0 E0 C0 
     146.  00:4B3B                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
     146.  00:4B3B  7E D8 06 00 C0 E0 F0 00 
     147.  00:4B43                          ; mask 1 - 04h
     148.  00:4B43                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     148.  00:4B43  00 00 1F 15 11 32 18 0C 
     149.  00:4B4B                          DB $01,$00,$03,$03,$01,$01,$00,$00
     149.  00:4B4B  01 00 03 03 01 01 00 00 
     150.  00:4B53                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     150.  00:4B53  00 00 58 68 8C 48 1C 30 
     151.  00:4B5B                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
     151.  00:4B5B  80 06 C0 C0 80 80 80 00 
     152.  00:4B63                          ; mask 2 - 08h
     153.  00:4B63                          DB $00,$00,$00,$00,$00,$30,$00,$00
     153.  00:4B63  00 00 00 00 00 30 00 00 
     154.  00:4B6B                          DB $00,$04,$00,$00,$00,$00,$00,$00
     154.  00:4B6B  00 04 00 00 00 00 00 00 
     155.  00:4B73                          DB $00,$00,$00,$00,$00,$08,$00,$00
     155.  00:4B73  00 00 00 00 00 08 00 00 
     156.  00:4B7B                          DB $00,$20,$00,$00,$00,$00,$00,$00
     156.  00:4B7B  00 20 00 00 00 00 00 00 
     157.  00:4B83                      
     158.  00:4B83                          ; P1 - DOWN 2 
     159.  00:4B83                          ; mask 0 - 0Ch
     160.  00:4B83                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     160.  00:4B83  03 0F 00 0A 0E 0D 07 03 
     161.  00:4B8B                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
     161.  00:4B8B  7E 1B 60 00 03 07 0E 00 
     162.  00:4B93                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     162.  00:4B93  E0 F0 A0 90 70 B0 E0 C0 
     163.  00:4B9B                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
     163.  00:4B9B  7C DE 06 06 C0 C0 E0 70 
     164.  00:4BA3                          ; mask 1 - 10h
     165.  00:4BA3                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     165.  00:4BA3  00 00 1F 15 11 32 18 0C 
     166.  00:4BAB                          DB $01,$60,$03,$03,$01,$01,$00,$00
     166.  00:4BAB  01 60 03 03 01 01 00 00 
     167.  00:4BB3                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     167.  00:4BB3  00 00 58 68 8C 48 1C 30 
     168.  00:4BBB                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
     168.  00:4BBB  80 00 C0 C0 80 80 80 00 
     169.  00:4BC3                          ; mask 2 - 14h
     170.  00:4BC3                          DB $00,$00,$00,$00,$00,$30,$00,$00
     170.  00:4BC3  00 00 00 00 00 30 00 00 
     171.  00:4BCB                          DB $00,$04,$00,$00,$00,$00,$00,$00
     171.  00:4BCB  00 04 00 00 00 00 00 00 
     172.  00:4BD3                          DB $00,$00,$00,$00,$00,$08,$00,$00
     172.  00:4BD3  00 00 00 00 00 08 00 00 
     173.  00:4BDB                          DB $00,$20,$00,$00,$00,$00,$00,$00
     173.  00:4BDB  00 20 00 00 00 00 00 00 
     174.  00:4BE3                          
     175.  00:4BE3                          ;Ghost 1 Left - 18H
     176.  00:4BE3                          DB 00h,01h,07h,0fh,1fh,3fh,7fh,01h
     176.  00:4BE3  00 01 07 0F 1F 3F 7F 01 
     177.  00:4BEB                          DB $15,$14,$7f,$3f,$3f,$3f,$3f,$7f
     177.  00:4BEB  15 14 7F 3F 3F 3F 3F 7F 
     178.  00:4BF3                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     178.  00:4BF3  00 E0 80 00 00 80 80 C0 
     179.  00:4BFB                          DB $c0,$e0,$f0,$f8,$fc,$fc,$fe,$ff  
     179.  00:4BFB  C0 E0 F0 F8 FC FC FE FF 
     180.  00:4C03                          
     181.  00:4C03                          ; Ghost 2 Left - 1Ch
     182.  00:4C03                          DB $00,$01,$07,$0f,$1f,$3f,$7f,$01
     182.  00:4C03  00 01 07 0F 1F 3F 7F 01 
     183.  00:4C0B                          DB $15,$14,$7f,$3f,$3f,$7f,$7f,$83
     183.  00:4C0B  15 14 7F 3F 3F 7F 7F 83 
     184.  00:4C13                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     184.  00:4C13  00 E0 80 00 00 80 80 C0 
     185.  00:4C1B                          DB $c0,$e0,$e0,$f0,$f8,$fc,$fe,$ff      
     185.  00:4C1B  C0 E0 E0 F0 F8 FC FE FF 
     186.  00:4C23                      
     187.  00:4C23                          ; Ghost 1 Right - 20h
     188.  00:4C23                          DB $00,$07,$01,$00,$00,$01,$01,$03
     188.  00:4C23  00 07 01 00 00 01 01 03 
     189.  00:4C2B                          DB $03,$07,$07,$0f,$1f,$3f,$7f,$ff
     189.  00:4C2B  03 07 07 0F 1F 3F 7F FF 
     190.  00:4C33                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     190.  00:4C33  00 80 E0 F0 F8 FC FE 80 
     191.  00:4C3B                          DB $a8,$28,$fe,$fc,$fc,$fe,$fe,$c1
     191.  00:4C3B  A8 28 FE FC FC FE FE C1 
     192.  00:4C43                          
     193.  00:4C43                          ; Ghost 2 Right - 24h
     194.  00:4C43                          DB $00,$07,$01,$00,$00,$01,$01,$03
     194.  00:4C43  00 07 01 00 00 01 01 03 
     195.  00:4C4B                          DB $03,$07,$0f,$1f,$3f,$3f,$7f,$ff
     195.  00:4C4B  03 07 0F 1F 3F 3F 7F FF 
     196.  00:4C53                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     196.  00:4C53  00 80 E0 F0 F8 FC FE 80 
     197.  00:4C5B                          DB $a8,$28,$fe,$fc,$fc,$fc,$fc,$fe  
     197.  00:4C5B  A8 28 FE FC FC FC FC FE 
     198.  00:4C63                      
     199.  00:4C63                          ; Antichrist - RIGHT
     200.  00:4C63                          ; mask 0 - 28h
     201.  00:4C63                          ;DB $00,$00,$00,$03,$07,$0F,$1E,$1E
     202.  00:4C63                          ;DB $1E,$1C,$1E,$0F,$07,$03,$00,$00
     203.  00:4C63                          ;DB $00,$00,$00,$00,$80,$C0,$E0,$F0
     204.  00:4C63                          ;DB $F8,$70,$E0,$C0,$80,$00,$00,$00
     205.  00:4C63                          DB $00,$00,$00,$01,$01,$01,$01,$01
     205.  00:4C63  00 00 00 01 01 01 01 01 
     206.  00:4C6B                          DB $01,$01,$07,$07,$01,$01,$00,$00
     206.  00:4C6B  01 01 07 07 01 01 00 00 
     207.  00:4C73                          DB $00,$00,$00,$80,$80,$80,$80,$80
     207.  00:4C73  00 00 00 80 80 80 80 80 
     208.  00:4C7B                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     208.  00:4C7B  80 80 E0 E0 80 80 00 00 
     209.  00:4C83                      
     210.  00:4C83                          ; Esqueleto Left - 1
     211.  00:4C83                          ; mask 0 - 2Ch
     212.  00:4C83                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     212.  00:4C83  1F 1B 2E 24 3F 1F 1F 00 
     213.  00:4C8B                          DB $03,$05,$09,$04,$01,$02,$02,$04
     213.  00:4C8B  03 05 09 04 01 02 02 04 
     214.  00:4C93                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     214.  00:4C93  80 C0 C0 C0 80 00 00 80 
     215.  00:4C9B                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     215.  00:4C9B  E0 D0 C8 C4 C0 20 20 40 
     216.  00:4CA3                          ; mask 1 - 30h
     217.  00:4CA3                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     217.  00:4CA3  1F 1F 3F 3F 3F 1E 0A 00 
     218.  00:4CAB                          DB $03,$05,$09,$04,$01,$00,$00,$00
     218.  00:4CAB  03 05 09 04 01 00 00 00 
     219.  00:4CB3                          DB $00,$80,$80,$80,$00,$00,$00,$00
     219.  00:4CB3  00 80 80 80 00 00 00 00 
     220.  00:4CBB                          DB $80,$10,$88,$84,$80,$00,$00,$00
     220.  00:4CBB  80 10 88 84 80 00 00 00 
     221.  00:4CC3                      
     222.  00:4CC3                          ; Esqueleto Left - 2
     223.  00:4CC3                          ; mask 0 - 34h
     224.  00:4CC3                          ; mask 0
     225.  00:4CC3                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     225.  00:4CC3  0F 0D 17 12 1F 0F 0F 00 
     226.  00:4CCB                          DB $03,$05,$09,$10,$01,$06,$08,$00
     226.  00:4CCB  03 05 09 10 01 06 08 00 
     227.  00:4CD3                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     227.  00:4CD3  C0 E0 60 60 C0 80 80 80 
     228.  00:4CDB                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     228.  00:4CDB  E0 D0 C8 D0 C0 20 20 50 
     229.  00:4CE3                          ; mask 1 - 38h
     230.  00:4CE3                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     230.  00:4CE3  0F 0F 1F 1F 1F 0F 05 00 
     231.  00:4CEB                          DB $03,$05,$09,$10,$01,$00,$00,$00
     231.  00:4CEB  03 05 09 10 01 00 00 00 
     232.  00:4CF3                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     232.  00:4CF3  80 C0 C0 C0 80 00 00 00 
     233.  00:4CFB                          DB $80,$10,$88,$90,$80,$00,$20,$40
     233.  00:4CFB  80 10 88 90 80 00 20 40 
     234.  00:4D03                          
     235.  00:4D03                          ; Esqueleto Right - 1
     236.  00:4D03                          ; mask 0 - 3Ch
     237.  00:4D03                          DB $01,$03,$03,$03,$01,$00,$00,$01
     237.  00:4D03  01 03 03 03 01 00 00 01 
     238.  00:4D0B                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     238.  00:4D0B  07 0B 13 23 03 04 04 02 
     239.  00:4D13                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     239.  00:4D13  F8 D8 74 24 FC F8 F8 00 
     240.  00:4D1B                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     240.  00:4D1B  C0 A0 90 20 80 40 40 20 
     241.  00:4D23                          ; mask 1 - 40h
     242.  00:4D23                          DB $00,$01,$01,$01,$00,$00,$00,$00
     242.  00:4D23  00 01 01 01 00 00 00 00 
     243.  00:4D2B                          DB $01,$08,$11,$21,$01,$00,$00,$00
     243.  00:4D2B  01 08 11 21 01 00 00 00 
     244.  00:4D33                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     244.  00:4D33  F8 F8 FC FC FC 78 50 00 
     245.  00:4D3B                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     245.  00:4D3B  C0 A0 90 20 80 00 00 00 
     246.  00:4D43                          
     247.  00:4D43                          ; Esqueleto Right - 2
     248.  00:4D43                          ; mask 0 - 44h
     249.  00:4D43                          DB $03,$07,$06,$06,$03,$01,$01,$01
     249.  00:4D43  03 07 06 06 03 01 01 01 
     250.  00:4D4B                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     250.  00:4D4B  07 0B 13 0B 03 04 04 0A 
     251.  00:4D53                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     251.  00:4D53  F0 B0 E8 48 F8 F0 F0 00 
     252.  00:4D5B                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     252.  00:4D5B  C0 A0 90 08 80 60 10 00 
     253.  00:4D63                          ; mask 1 - 48h
     254.  00:4D63                          DB $01,$03,$03,$03,$01,$00,$00,$00
     254.  00:4D63  01 03 03 03 01 00 00 00 
     255.  00:4D6B                          DB $01,$08,$11,$09,$01,$00,$04,$02
     255.  00:4D6B  01 08 11 09 01 00 04 02 
     256.  00:4D73                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     256.  00:4D73  F0 F0 F8 F8 F8 F0 A0 00 
     257.  00:4D7B                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     257.  00:4D7B  C0 A0 90 08 80 00 00 00 
     258.  00:4D83                      
     259.  00:4D83                      
     260.  00:4D83                      SPRITE_COLOR_TABLE:       
     261.  00:4D83                           ;P1 - DOWN 1
     262.  00:4D83                          ; attr 0
     263.  00:4D83                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     263.  00:4D83  06 06 0B 0B 0B 0B 0B 0B 
     264.  00:4D8B                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     264.  00:4D8B  0C 0C 0B 0B 04 04 04 04 
     265.  00:4D93                          ; attr 1
     266.  00:4D93                          DB $00,$00,$46,$46,$46,$44,$46,$46
     266.  00:4D93  00 00 46 46 46 44 46 46 
     267.  00:4D9B                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     267.  00:4D9B  4B 4B 44 44 42 42 42 00 
     268.  00:4DA3                          ; attr 2
     269.  00:4DA3                          DB $00,$00,$00,$00,$00,$42,$00,$00
     269.  00:4DA3  00 00 00 00 00 42 00 00 
     270.  00:4DAB                          DB $00,$46,$00,$00,$00,$00,$00,$00
     270.  00:4DAB  00 46 00 00 00 00 00 00 
     271.  00:4DB3                               
     272.  00:4DB3                          ; Cada posición ha de corresponder con la tabla de atributos    
     273.  00:4DB3                      
     274.  00:4DB3                          ; Fantasma
     275.  00:4DB3                          DB $08,$08,$08,$08,$08,$08,$08,$08
     275.  00:4DB3  08 08 08 08 08 08 08 08 
     276.  00:4DBB                          DB $08,$08,$08,$08,$08,$08,$08,$08
     276.  00:4DBB  08 08 08 08 08 08 08 08 
     277.  00:4DC3                          ; Fantasma
     278.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     279.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     280.  00:4DC3                          ; Fantasma
     281.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     282.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     283.  00:4DC3                          ; Fantasma
     284.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     285.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08    
     286.  00:4DC3                          ; Me ahorro los colores del fantasma, la 4a posicion del array de atributos será para el disparo
     287.  00:4DC3                          ; Boomerang
     288.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     289.  00:4DC3                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     290.  00:4DC3                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     290.  00:4DC3  00 00 00 0F 0F 0F 0F 0F 
     291.  00:4DCB                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     291.  00:4DCB  0F 0F 0F 0F 0F 0F 00 00 
     292.  00:4DD3                          
     293.  00:4DD3                          ; Esqueleto Left 1
     294.  00:4DD3                          ; attr 0
     295.  00:4DD3                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     295.  00:4DD3  0E 0E 0E 0E 0E 0E 0E 0E 
     296.  00:4DDB                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     296.  00:4DDB  0E 0E 0E 0E 0E 0F 0F 0F 
     297.  00:4DE3                          ; attr 1
     298.  00:4DE3                          DB $41,$49,$49,$49,$41,$41,$41,$00
     298.  00:4DE3  41 49 49 49 41 41 41 00 
     299.  00:4DEB                          DB $41,$41,$41,$41,$41,$00,$00,$00
     299.  00:4DEB  41 41 41 41 41 00 00 00 
     300.  00:4DF3                          ; Esqueleto Left 2
     301.  00:4DF3                          ; attr 0
     302.  00:4DF3                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     302.  00:4DF3  0E 0E 0E 0E 0E 0E 0E 0E 
     303.  00:4DFB                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0E
     303.  00:4DFB  0E 0E 0E 0E 0E 0F 0E 0E 
     304.  00:4E03                          ; attr 1
     305.  00:4E03                          DB $41,$49,$49,$49,$41,$41,$41,$00
     305.  00:4E03  41 49 49 49 41 41 41 00 
     306.  00:4E0B                          DB $41,$41,$41,$41,$41,$00,$41,$41
     306.  00:4E0B  41 41 41 41 41 00 41 41 
     307.  00:4E13                      
     308.  00:4E13                          ; Esqueleto Right 1
     309.  00:4E13                          ; attr 0
     310.  00:4E13                          ;DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     311.  00:4E13                          ;DB $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0E    
     312.  00:4E13                          ; attr 1
     313.  00:4E13                          ;DB $41,$49,$49,$49,$41,$41,$41,$41
     314.  00:4E13                          ;DB $41,$41,$41,$41,$41,$00,$41,$41
     315.  00:4E13                          ; Esqueleto Right 2
     316.  00:4E13                          ; attr 0
     317.  00:4E13                          ;DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     318.  00:4E13                          ;DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     319.  00:4E13                          ; attr 1
     320.  00:4E13                          ;DB $41,$49,$49,$49,$41,$41,$41,$41
     321.  00:4E13                          ;DB $41,$41,$41,$41,$41,$00,$00,$00
     322.  00:4E13                      
     323.  00:4E13                      SPRITE_COLOR_P1_UP:
     324.  00:4E13                          ;UP 1
     325.  00:4E13                          ; attr 0
     326.  00:4E13                          DB $06,$06,$06,$06,$06,$06,$06,$06
     326.  00:4E13  06 06 06 06 06 06 06 06 
     327.  00:4E1B                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     327.  00:4E1B  0C 0C 0B 0B 04 04 04 04 
     328.  00:4E23                          ; attr 1
     329.  00:4E23                          DB $00,$00,$00,$00,$00,$00,$00,$00
     329.  00:4E23  00 00 00 00 00 00 00 00 
     330.  00:4E2B                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     330.  00:4E2B  46 4B 44 44 42 42 42 00 
     331.  00:4E33                          ; attr 2
     332.  00:4E33                          DB $00,$00,$00,$00,$00,$00,$00,$00
     332.  00:4E33  00 00 00 00 00 00 00 00 
     333.  00:4E3B                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     333.  00:4E3B  00 46 42 42 00 00 00 00 
     334.  00:4E43                          
     335.  00:4E43                          ;SPRITE_COLOR_P1_UP2:
     336.  00:4E43                          ;UP 1
     337.  00:4E43                          ; attr 0
     338.  00:4E43                          DB $06,$06,$06,$06,$06,$06,$06,$06
     338.  00:4E43  06 06 06 06 06 06 06 06 
     339.  00:4E4B                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     339.  00:4E4B  0C 0C 0B 0B 04 04 04 04 
     340.  00:4E53                          ; attr 1
     341.  00:4E53                          DB $00,$00,$00,$00,$00,$00,$00,$00
     341.  00:4E53  00 00 00 00 00 00 00 00 
     342.  00:4E5B                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     342.  00:4E5B  46 4B 44 44 42 42 42 00 
     343.  00:4E63                          ; attr 2
     344.  00:4E63                          DB $00,$00,$00,$00,$00,$00,$00,$00
     344.  00:4E63  00 00 00 00 00 00 00 00 
     345.  00:4E6B                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     345.  00:4E6B  00 46 42 42 00 00 00 00 
     346.  00:4E73                      
     347.  00:4E73                      SPRITE_COLOR_P1_DOWN:
     348.  00:4E73                          ;DOWN 1
     349.  00:4E73                          ; attr 0
     350.  00:4E73                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     350.  00:4E73  06 06 0B 0B 0B 0B 0B 0B 
     351.  00:4E7B                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     351.  00:4E7B  0C 0C 0B 0B 04 04 04 04 
     352.  00:4E83                          ; attr 1
     353.  00:4E83                          DB $00,$00,$46,$46,$46,$44,$46,$46
     353.  00:4E83  00 00 46 46 46 44 46 46 
     354.  00:4E8B                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     354.  00:4E8B  4B 4B 44 44 42 42 42 00 
     355.  00:4E93                          ; attr 2
     356.  00:4E93                          DB $00,$00,$00,$00,$00,$42,$00,$00
     356.  00:4E93  00 00 00 00 00 42 00 00 
     357.  00:4E9B                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     357.  00:4E9B  00 46 00 00 00 00 00 00 
     358.  00:4EA3                      
     359.  00:4EA3                          ;SPRITE_COLOR_P1_DOWN2:
     360.  00:4EA3                          ;DOWN 1
     361.  00:4EA3                          ; attr 0
     362.  00:4EA3                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     362.  00:4EA3  06 06 0B 0B 0B 0B 0B 0B 
     363.  00:4EAB                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     363.  00:4EAB  0C 0C 0B 0B 04 04 04 04 
     364.  00:4EB3                          ; attr 1
     365.  00:4EB3                          DB $00,$00,$46,$46,$46,$44,$46,$46
     365.  00:4EB3  00 00 46 46 46 44 46 46 
     366.  00:4EBB                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     366.  00:4EBB  4B 4B 44 44 42 42 42 00 
     367.  00:4EC3                          ; attr 2
     368.  00:4EC3                          DB $00,$00,$00,$00,$00,$42,$00,$00
     368.  00:4EC3  00 00 00 00 00 42 00 00 
     369.  00:4ECB                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     369.  00:4ECB  00 46 00 00 00 00 00 00 
     370.  00:4ED3                      
     371.  00:4ED3                      SPRITE_COLOR_P1_RIGHT:
     372.  00:4ED3                          ; attr 0
     373.  00:4ED3                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     373.  00:4ED3  06 06 0B 0B 0B 0B 0B 0B 
     374.  00:4EDB                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     374.  00:4EDB  0C 0C 0B 0B 04 04 04 04 
     375.  00:4EE3                          ; attr 1
     376.  00:4EE3                          DB $00,$00,$46,$46,$44,$46,$46,$46
     376.  00:4EE3  00 00 46 46 44 46 46 46 
     377.  00:4EEB                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     377.  00:4EEB  4B 46 4C 44 42 42 00 00 
     378.  00:4EF3                          ; attr 2
     379.  00:4EF3                          DB $00,$00,$00,$00,$42,$00,$00,$00
     379.  00:4EF3  00 00 00 00 42 00 00 00 
     380.  00:4EFB                          DB $46,$00,$46,$42,$00,$00,$00,$00
     380.  00:4EFB  46 00 46 42 00 00 00 00 
     381.  00:4F03                          ; attr 0
     382.  00:4F03                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     382.  00:4F03  06 06 0B 0B 0B 0B 0B 0B 
     383.  00:4F0B                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     383.  00:4F0B  0C 0C 06 04 04 04 04 04 
     384.  00:4F13                          ; attr 1
     385.  00:4F13                          DB $00,$00,$46,$46,$44,$46,$46,$46
     385.  00:4F13  00 00 46 46 44 46 46 46 
     386.  00:4F1B                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     386.  00:4F1B  4B 4B 4A 42 42 42 00 00 
     387.  00:4F23                          ; attr 2
     388.  00:4F23                          DB $00,$00,$00,$00,$42,$00,$00,$00
     388.  00:4F23  00 00 00 00 42 00 00 00 
     389.  00:4F2B                          DB $46,$46,$41,$00,$00,$00,$00,$00
     389.  00:4F2B  46 46 41 00 00 00 00 00 
     390.  00:4F33                      
     391.  00:4F33                      mapa1:
     392.  00:4F33                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     392.  00:4F33  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     392.  00:4F43  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     393.  00:4F53                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     393.  00:4F53  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     393.  00:4F63  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     394.  00:4F73                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:4F73  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:4F83  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:4F93                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:4F93  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     395.  00:4FA3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:4FB3                            db #01,#01,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  00:4FB3  01 01 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     396.  00:4FC3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  00:4FD3                            db #01,#01,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     397.  00:4FD3  01 01 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     397.  00:4FE3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     398.  00:4FF3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  00:4FF3  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     398.  00:5003  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  00:5013                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  00:5013  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     399.  00:5023  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  00:5033                          
     401.  00:5033                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     401.  00:5033  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     401.  00:5043  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     402.  00:5053                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     402.  00:5053  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     402.  00:5063  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     403.  00:5073                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01,#01        
     403.  00:5073  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     403.  00:5083  01 01 00 00 00 00 00 00 01 01 00 00 00 00 01 01 
     404.  00:5093                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01,#01        
     404.  00:5093  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     404.  00:50A3  01 01 00 00 00 00 00 00 01 01 00 00 00 00 01 01 
     405.  00:50B3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  00:50B3  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     405.  00:50C3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  00:50D3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     406.  00:50D3  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     406.  00:50E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     407.  00:50F3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  00:50F3  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     407.  00:5103  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  00:5113                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  00:5113  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     408.  00:5123  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  00:5133                      
     410.  00:5133                            db #01,#01,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  00:5133  01 01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 
     410.  00:5143  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  00:5153                            db #01,#01,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     411.  00:5153  01 01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 
     411.  00:5163  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     412.  00:5173                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     412.  00:5173  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     412.  00:5183  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     413.  00:5193                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     413.  00:5193  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     413.  00:51A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     414.  00:51B3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     414.  00:51B3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:51C3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:51D3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     415.  00:51D3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:51E3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:51F3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:51F3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:5203  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:5213                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  00:5213  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:5223  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:5233                      
     419.  00:5233                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:5233  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:5243  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:5253                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  00:5253  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:5263  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:5273                      
     422.  00:5273                      mapa2:
     423.  00:5273                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:5273  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:5283  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:5293                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     424.  00:5293  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     424.  00:52A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     425.  00:52B3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     425.  00:52B3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     425.  00:52C3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     426.  00:52D3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     426.  00:52D3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     426.  00:52E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     427.  00:52F3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     427.  00:52F3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     427.  00:5303  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     428.  00:5313                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     428.  00:5313  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     428.  00:5323  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     429.  00:5333                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     429.  00:5333  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     429.  00:5343  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     430.  00:5353                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     430.  00:5353  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     430.  00:5363  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     431.  00:5373                            
     432.  00:5373                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     432.  00:5373  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     432.  00:5383  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     433.  00:5393                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     433.  00:5393  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     433.  00:53A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     434.  00:53B3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     434.  00:53B3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     434.  00:53C3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     435.  00:53D3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     435.  00:53D3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     435.  00:53E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     436.  00:53F3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     436.  00:53F3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     436.  00:5403  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     437.  00:5413                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     437.  00:5413  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     437.  00:5423  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     438.  00:5433                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     438.  00:5433  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     438.  00:5443  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     439.  00:5453                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     439.  00:5453  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     439.  00:5463  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     440.  00:5473                      
     441.  00:5473                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     441.  00:5473  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     441.  00:5483  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     442.  00:5493                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     442.  00:5493  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     442.  00:54A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     443.  00:54B3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     443.  00:54B3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     443.  00:54C3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     444.  00:54D3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     444.  00:54D3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     444.  00:54E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     445.  00:54F3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     445.  00:54F3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     445.  00:5503  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     446.  00:5513                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     446.  00:5513  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     446.  00:5523  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     447.  00:5533                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     447.  00:5533  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     447.  00:5543  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     448.  00:5553                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     448.  00:5553  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     448.  00:5563  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     449.  00:5573                            
     450.  00:5573                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01              
     450.  00:5573  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     450.  00:5583  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     451.  00:5593                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     451.  00:5593  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     451.  00:55A3  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     452.  00:55B3                      
     453.  00:55B3                      
     454.  00:55B3                      mapa0:      
     455.  00:55B3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     455.  00:55B3  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     455.  00:55C3  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     456.  00:55D3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     456.  00:55D3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     456.  00:55E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     457.  00:55F3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:55F3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:5603  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:5613                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:5613  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:5623  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:5633                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:5633  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     459.  00:5643  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:5653                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     460.  00:5653  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     460.  00:5663  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:5673                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     461.  00:5673  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:5683  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:5693                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     462.  00:5693  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     462.  00:56A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     463.  00:56B3                            
     464.  00:56B3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     464.  00:56B3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:56C3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:56D3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     465.  00:56D3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     465.  00:56E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     466.  00:56F3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     466.  00:56F3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     466.  00:5703  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     467.  00:5713                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     467.  00:5713  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  00:5723  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     468.  00:5733                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     468.  00:5733  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  00:5743  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     469.  00:5753                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     469.  00:5753  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  00:5763  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     470.  00:5773                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     470.  00:5773  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  00:5783  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     471.  00:5793                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     471.  00:5793  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     471.  00:57A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     472.  00:57B3                      
     473.  00:57B3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     473.  00:57B3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     473.  00:57C3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     474.  00:57D3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     474.  00:57D3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     474.  00:57E3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     475.  00:57F3                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     475.  00:57F3  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     475.  00:5803  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     476.  00:5813                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     476.  00:5813  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     476.  00:5823  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     477.  00:5833                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     477.  00:5833  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  00:5843  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     478.  00:5853                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     478.  00:5853  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  00:5863  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     479.  00:5873                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     479.  00:5873  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  00:5883  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     480.  00:5893                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     480.  00:5893  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     480.  00:58A3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     481.  00:58B3                            
     482.  00:58B3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     482.  00:58B3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     482.  00:58C3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     483.  00:58D3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     483.  00:58D3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     483.  00:58E3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     484.  00:58F3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     484.  00:58F3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     484.  00:5903  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     485.  00:5913                          
     486.  00:5913                      
     487.  00:5913                      SPRITE_COLOR_P1_LEFT:
     488.  00:5913                          ; attr 0
     489.  00:5913                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     489.  00:5913  06 06 0B 0B 0B 0B 0B 0B 
     490.  00:591B                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     490.  00:591B  0C 0C 0B 0B 04 04 04 04 
     491.  00:5923                          ; attr 1
     492.  00:5923                          DB $00,$00,$46,$46,$44,$46,$46,$46
     492.  00:5923  00 00 46 46 44 46 46 46 
     493.  00:592B                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     493.  00:592B  4B 46 4C 44 42 42 00 00 
     494.  00:5933                          ; attr 2
     495.  00:5933                          DB $00,$00,$00,$00,$42,$00,$00,$00
     495.  00:5933  00 00 00 00 42 00 00 00 
     496.  00:593B                          DB $46,$00,$46,$42,$00,$00,$00,$00
     496.  00:593B  46 00 46 42 00 00 00 00 
     497.  00:5943                          
     498.  00:5943                          ;SPRITE_COLOR_P1_LEFT2:
     499.  00:5943                          ; attr 0
     500.  00:5943                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     500.  00:5943  06 06 0B 0B 0B 0B 0B 0B 
     501.  00:594B                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     501.  00:594B  0C 0C 06 04 04 04 04 04 
     502.  00:5953                          ; attr 1
     503.  00:5953                          DB $00,$00,$46,$46,$44,$46,$46,$46
     503.  00:5953  00 00 46 46 44 46 46 46 
     504.  00:595B                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     504.  00:595B  4B 4B 4A 42 42 42 00 00 
     505.  00:5963                          ; attr 2
     506.  00:5963                          DB $00,$00,$00,$00,$42,$00,$00,$00
     506.  00:5963  00 00 00 00 42 00 00 00 
     507.  00:596B                          DB $46,$46,$41,$00,$00,$00,$00,$00
     507.  00:596B  46 46 41 00 00 00 00 00 
     508.  00:5973                      
     509.  00:5973                      BLANK_DATA:
     510.  00:5973                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     510.  00:5973  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     510.  00:5983  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     511.  00:5993                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     511.  00:5993  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     511.  00:59A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     512.  00:59B3                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     512.  00:59B3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     512.  00:59C3  00 00 00 00 
     513.  00:59C7                          
     459   00:59C7                      
     460   00:59C7  (01)                 PAGE 1
     461   01:8000                      ; CODE O NO
     462   01:8000                      
     463   01:8000  (02)                 PAGE 2
     464   02:8000                      
     465   02:8000  (03)                 PAGE 3
     466   03:8000                      
     467   03:8000  (04)                 PAGE 4
     468   04:8000  (05)                 PAGE 5
     469   05:8000  (06)                 PAGE 6
     470   06:8000                      FONT:
     471   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     472   06:87F7  (07)                 PAGE 7
     473   07:8000                      CEMENTER1
     474   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     475   07:C000  (08)                 PAGE 8
     476   08:8000  (2A00)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     477   08:AA00  (09)                 PAGE 9
     478   09:8000                      GRAPHIC
     479   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     480   09:C000  (0A)                 PAGE 10
     481   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     482   0A:C000                      
     483   0A:C000  (0B)                 PAGE 11
     484   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     485   0B:C000                      
     486   0B:C000  (0C)                 PAGE 12
     487   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     488   0C:9400                      
     489   0C:9400  (0D)                 PAGE 13
     490   0D:8000                      CEMENTER2
     491   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     492   0D:C000  (0E)                 PAGE 14
     493   0E:8000  (2A00)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     494   0E:AA00  (0F)                 PAGE 15
     495   0F:C000                      ;---------------------------------------------------------
     496   0F:C000                      ; Variables
     497   0F:C000                      ;---------------------------------------------------------
     498   0F:C000                      	
     499   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     500   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     501   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     502   0F:C000                      ;ETC
     503   0F:C000                      ;
     504   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000  00 (1)              SHOWING_DIALOG  DS 1
       2.  0F:C001  (0F:0008)           FONT_HEIGHT EQU 8
       3.  0F:C001  (0F:0008)           FONT_WIDTH  EQU 8
       4.  0F:C001  00 (2)              CHR_ACR DS 2
       5.  0F:C003  00 (1)              PTR_STR_DX DS 1
       6.  0F:C004  00 (1)              PTR_STR_DY DS 1
       7.  0F:C005                      
       8.  0F:C005  00 (1)              LAST_KEY_PRESSED DS 1
       9.  0F:C006  00 (1)              OLD_KEY_PRESSED DS 1
      10.  0F:C007  00                  JIFFY_TEMP DB $00
      11.  0F:C008  00                  CHAR_SPEED_X DB $00
      12.  0F:C009  00                  CHAR_SPEED_Y DB $00
      13.  0F:C00A  00                  CHAR_SPEED_X_GHOST DB $00
      14.  0F:C00B  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      15.  0F:C00C  00 (1)              CHAR_GHOST_DEAD DS 1
      16.  0F:C00D  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      17.  0F:C00E  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      18.  0F:C00F  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      19.  0F:C010  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      20.  0F:C011  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      21.  0F:C012  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      22.  0F:C013  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      23.  0F:C014  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      24.  0F:C015  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      25.  0F:C016  00 (1)              CHAR_SPEED_SHOOT DS 1
      26.  0F:C017                      SPRITE_ATTRS:
      27.  0F:C017  00 (128)                DS 128
      28.  0F:C097                      SLOTBIOS:
      29.  0F:C097  00 (1)                  DS 1
      30.  0F:C098                      SLOTGAME:
      31.  0F:C098  00 (1)                  DS 1
      32.  0F:C099                      SLOTRAM:
      33.  0F:C099  00 (1)                  DS 1
      34.  0F:C09A                      SPRITE_PTR_REPLACE:
      35.  0F:C09A  00 (2)                  DS 2
      36.  0F:C09C                      SPRITE_COLOR_REPLACE:
      37.  0F:C09C  00 (2)                  DS 2
      38.  0F:C09E                      SPRITE_COLOR_REPLACE2:
      39.  0F:C09E  00 (2)                  DS 2
      40.  0F:C0A0                      MAPA:
      41.  0F:C0A0  00 (2)                  DS 2
      42.  0F:C0A2                      BITMAP:
      43.  0F:C0A2  00 (2)                  DS 2
     505   0F:C0A4  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000041   DISSCR
00:00000044   ENASCR
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00005C28   FIRST_LINE_DLG_BOX
00:00006028   SEC_LINE_DLG_BOX
00:00006428   THIRD_LINE_DLG_BOX
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000004   MAX_CHAR_STEPS
00:00000006   MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:00004010   sardu01_strings
00:00004016   string01
00:0000401D   string02
00:00004033   string03
00:0000403B X mensaje
00:00004040   check_spr_collision
00:0000404D   check_spr_collision.no_collision
00:00004050   get_bloque_en_X_Y
00:00004071   SetVdp_Write
00:0000408D   Set212Lines
00:00004099   ClearVram_MSX2
00:000040A3   ClearVram_MSX2.loop_2
00:000040A5   ClearVram_MSX2.loop_1
00:000040A7   ClearVram_MSX2.loop
00:000040B4 X opening_screen
00:000040D7   load_screen
00:000040F9   _vdpsetvramwr
00:0000410A X _vdpsetvramwr14
00:00004113   GETSLOT
00:0000412A   EXIT
00:0000412C   SETPAGES32K
00:00004131   NOPRET
00:0000413F   SET_SCREEN5_MODE
00:00004161   DUMP_SPR_ALL
00:00004186   DUMP_SPR_ATTS
00:000041A0 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:000041A1   DUMP_SPR_P1
00:000041BE   move_up
00:000041F5   move_down
00:0000422D   move_right
00:0000427B   move_left
00:000042C9   CHECK_DIRECTION_MAIN
00:000042EB   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:00004300   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:00004315   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:0000432A   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000433F   CHECK_DIRECTION_MAIN.FINISH
00:00004356   UPDATE_MOVEMENT
00:000043A4   UPDATE_MOVEMENT.SET_SPR_1P_2
00:000043BB   UPDATE_MOVEMENT.NO_CHAR_PATTERN_CHANGE
00:000043C1   NO_MOVEMENT
00:000043C2   MOVE_SHOOT
00:000043DA   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:000043E2   MOVE_SHOOT.MOVE_SHOOT_UP
00:000043EA   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000043F2   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000043F7   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:0000440C   MOVE_SHOOT.ADD_SHOOT_Y
00:00004416   MOVE_SHOOT.ADD_DISTANCE
00:00004421 X MOVE_SHOOT.HIDE_SHOOT
00:0000442D   print_strings_dialog_box
00:0000445A   print_string
00:0000445A   print_string.loop_str
00:00004475   print_string.first_line_font
00:0000448E   print_char
00:000044C5 X CLEAR_DIALOG_BOX
00:000044F7   START
00:00004514   INIT_CHARS_VARS
00:00004585   STAGE1
00:000045A2   MAIN_LOOP
00:000045C4   MAIN_LOOP.animate_ghost
00:000045E3   MAIN_LOOP.CHANGE_DIR_RIGHT
00:000045F0   MAIN_LOOP.CHANGE_DIR_LEFT
00:000045F9   MAIN_LOOP.check_pattern
00:00004610   MAIN_LOOP.change_pattern_L
00:00004617   MAIN_LOOP.check_pattern_RIGHT
00:00004626   MAIN_LOOP.change_pattern_R
00:0000462A   MAIN_LOOP.continue
00:0000462D X MAIN_LOOP.CHECK_GHOST
00:00004649 X MAIN_LOOP.KILL_GHOST
00:00004652   MAIN_LOOP.check_KB
00:00004674 X no_arrows
00:0000467C   SHOOT_MAIN_CHAR
00:000046B6   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000046C5   SHOOT_MAIN_CHAR.SHOOT_UP
00:000046D8   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:000046E8   SHOOT_MAIN_CHAR.CONTINUE
00:000046EC   STAGE2
00:00004742   MAIN_LOOP2
00:00004763   MAIN_LOOP2.GHOST_DEAD
00:0000476E   MAIN_LOOP2.no_screen_change
00:000047A0   MAIN_LOOP2.CHANGE_DIR_RIGHT
00:000047AD   MAIN_LOOP2.CHANGE_DIR_LEFT
00:000047B6   MAIN_LOOP2.check_pattern
00:000047D5   MAIN_LOOP2.change_pattern_L
00:000047E0   MAIN_LOOP2.check_pattern_RIGHT
00:000047F3   MAIN_LOOP2.change_pattern_R
00:000047FB   MAIN_LOOP2.continue
00:00004823   SPRITE_P1_UP
00:000048E3   SPRITE_P1_DOWN
00:000049A3   SPRITE_P1_LEFT
00:00004A63   SPRITE_P1_RIGHT
00:00004B23   SPRITE_PATTERN
00:00004D83   SPRITE_COLOR_TABLE
00:00004E13   SPRITE_COLOR_P1_UP
00:00004E73   SPRITE_COLOR_P1_DOWN
00:00004ED3   SPRITE_COLOR_P1_RIGHT
00:00004F33   mapa1
00:00005273   mapa2
00:000055B3 X mapa0
00:00005913   SPRITE_COLOR_P1_LEFT
00:00005973   BLANK_DATA
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   SHOWING_DIALOG
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C001   CHR_ACR
0F:0000C003 X PTR_STR_DX
0F:0000C004 X PTR_STR_DY
0F:0000C005 X LAST_KEY_PRESSED
0F:0000C006   OLD_KEY_PRESSED
0F:0000C007   JIFFY_TEMP
0F:0000C008   CHAR_SPEED_X
0F:0000C009   CHAR_SPEED_Y
0F:0000C00A   CHAR_SPEED_X_GHOST
0F:0000C00B   CHAR_SPEED_X_GHOST_STG2
0F:0000C00C   CHAR_GHOST_DEAD
0F:0000C00D   CHAR_GHOST_DEAD_STG2
0F:0000C00E   CHAR_MIN_STEP_STG2
0F:0000C00F   CHAR_DIR_GHOST1
0F:0000C010   CHAR_DIR_GHOST_STG2
0F:0000C011   CHAR_DIR_MAIN
0F:0000C012   CHAR_NEW_DIR_MAIN
0F:0000C013   CHAR_MAIN_SHOOT
0F:0000C014   CHAR_MIN_STEP
0F:0000C015   CHAR_DISTANCE_SHOOT
0F:0000C016   CHAR_SPEED_SHOOT
0F:0000C017   SPRITE_ATTRS
0F:0000C097 X SLOTBIOS
0F:0000C098 X SLOTGAME
0F:0000C099 X SLOTRAM
0F:0000C09A   SPRITE_PTR_REPLACE
0F:0000C09C   SPRITE_COLOR_REPLACE
0F:0000C09E   SPRITE_COLOR_REPLACE2
0F:0000C0A0   MAPA
0F:0000C0A2   BITMAP


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 000019CD

   Address   Length Align   Label
   00004000    6599         sardu01_strings
   000059C7       6         
   000059CD    9779       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000000A4

   Address   Length Align   Label
   0000C000     164         SHOWING_DIALOG
   0000C0A4   16220       <empty>
