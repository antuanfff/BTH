Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.03.13 - 17:21:06]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:4FB5                      
       3   00:4FB5                      ;ROM ASCII16
       4   00:4FB5                      		defpage	0,0x4000, 0x4000
       5   00:4FB5                      		defpage	1,0x8000, 0x4000        
       6   00:4FB5                      		defpage	2..14 ;Here it is determined rom size        
       7   00:4FB5                              defpage	15,0xC000, 0x4000
       8   00:4FB5                      
       9   00:4FB5  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:4FB5  (00:6000)           _bank1	equ	6000h
      11   00:4FB5  (00:7000)           _bank2	equ	7000h
      12   00:4FB5  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:4FBB  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 DC 41 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010  (00:0041)           DISSCR                  equ #0041   ; Disable screen
      11.  00:4010  (00:0044)           ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
       2.  00:4010  (00:0007)           KB_RIGHT 				equ 7
       3.  00:4010  (00:0006)           KB_DOWN 				equ 6
       4.  00:4010  (00:0005)           KB_UP 					equ	5        
       5.  00:4010  (00:0004)           KB_LEFT 				equ	4
       6.  00:4010  (00:0003)           KB_DEL 					equ	3
       7.  00:4010  (00:0000)           KB_SPACE				equ	0
       8.  00:4010                      
       9.  00:4010  (00:0001)           MOV_SPEED				equ 1
      10.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      11.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      12.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      13.  00:4010  (00:0004)           MAX_CHAR_STEPS          equ 4       ; #steps pattern change MAIN CHAR
      14.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      15.  00:4010  (00:0098)           PORT_0                  equ 0x98
      16.  00:4010  (00:0099)           PORT_1                  equ 0x99
      17.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      18.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      19.  00:4010                      
      20.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan es entas direcciones valores globals del sistema
      21.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      22.  00:4010                      
      22   00:4010                      
      23   00:4010                      ; Funciones auxiliares
      24   00:4010                      	include "include\BTH_func.asm"
       1.  00:4010                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:4010                      ;Entrada:
       3.  00:4010                      ;   b - Y SPR1
       4.  00:4010                      ;   C - X SPR1
       5.  00:4010                      
       6.  00:4010                      ;   d - Y SPR2
       7.  00:4010                      ;   e - X SPR2
       8.  00:4010                      ;Salida:
       9.  00:4010                      ;   a - bloque
      10.  00:4010                      ;Modifica:
      11.  00:4010                      ;   a, hl, de
      12.  00:4010                      check_spr_collision:        
      13.  00:4010  78                          LD A,B          ; a = Y SPR1
      14.  00:4011  BA                          CP D
      15.  00:4012  C2 1D 40                    JP NZ,.no_collision
      16.  00:4015                      
      17.  00:4015  79                          LD A,C          ; a = X SPR1
      18.  00:4016  BB                          CP E
      19.  00:4017  C2 1D 40                    JP NZ,.no_collision
      20.  00:401A                      
      21.  00:401A  3E 01                       LD A,1
      22.  00:401C  C9                          RET
      23.  00:401D                      .no_collision
      24.  00:401D  3E 00                   LD A,0
      25.  00:401F  C9                      RET
      26.  00:4020                      
      27.  00:4020                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:4020                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:4020                      ;Entrada:
      30.  00:4020                      ;   d - X
      31.  00:4020                      ;   e - y
      32.  00:4020                      ;Salida:
      33.  00:4020                      ;   a - bloque
      34.  00:4020                      ;Modifica:
      35.  00:4020                      ;   a, hl, de
      36.  00:4020                      get_bloque_en_X_Y:
      37.  00:4020                              ;(y/8)*32+(x/8)
      38.  00:4020  7B                          ld a,e      ;a=y
      39.  00:4021  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:4027  26 00                       ld h,0
      41.  00:4029  6F                          ld l,a      ;hl=y/8
      42.  00:402A  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:402F                      
      44.  00:402F  7A                          ld a,d      ;a=x
      45.  00:4030  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:4036  16 00                       ld d,0
      47.  00:4038  5F                          ld e,a      ;de=x/8
      48.  00:4039  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:403A                      
      50.  00:403A  11 F5 4B                    ld de,mapa
      51.  00:403D  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:403E                      
      53.  00:403E  7E                          ld a,[hl]
      54.  00:403F  C9                          ret
      55.  00:4040                      
      56.  00:4040                      ; SCREEN 8
      57.  00:4040                      SetVdp_Write:
      58.  00:4040                      
      59.  00:4040                      	; transform address from 
      60.  00:4040                      	;
      61.  00:4040                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:4040                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:4040                      	;
      64.  00:4040                      	; to
      65.  00:4040                      	;
      66.  00:4040                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:4040                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:4040  CB 04                   rlc     h
      69.  00:4042  17                      rla
      70.  00:4043  CB 04                   rlc     h
      71.  00:4045  17                      rla
      72.  00:4046  CB 3C                   srl     h
      73.  00:4048  CB 3C                   srl     h
      74.  00:404A                      
      75.  00:404A  F3                      di
      76.  00:404B                      	    ; write bits a14-16 of address to R#14
      77.  00:404B  D3 99               	    out     (PORT_1), a
      78.  00:404D  3E 8E               	    ld      a, 14 + 128
      79.  00:404F  D3 99               	    out     (PORT_1), a
      80.  00:4051                      
      81.  00:4051                      	    ; write the other address bits to VDP PORT_1
      82.  00:4051  7D                  	    ld      a, l
      83.  00:4052  00                  	    nop
      84.  00:4053  D3 99               	    out     (PORT_1), a
      85.  00:4055  7C                  	    ld      a, h
      86.  00:4056  F6 40               	    or      64
      87.  00:4058  FB                      ei
      88.  00:4059  D3 99                   out     (PORT_1),a
      89.  00:405B  C9                      ret
      90.  00:405C                      
      91.  00:405C                      Set212Lines:
      92.  00:405C                              ; set LN (bit 7) of R#9 to 1
      93.  00:405C  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:405F  F6 80                       or      10000000b
      95.  00:4061  47                          ld      b, a
      96.  00:4062  0E 09                       ld      c, 9            ; register #
      97.  00:4064  CD 47 00                    call    WRTVDP
      98.  00:4067  C9                          ret
      99.  00:4068                      
     100.  00:4068                      ClearVram_MSX2:
     101.  00:4068  AF                          xor     a           ; set vram write base address
     102.  00:4069  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:406C  CD 40 40                    call    SetVdp_Write
     104.  00:406F  AF                          xor		a
     105.  00:4070                      
     106.  00:4070                          ; TODO: 
     107.  00:4070                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:4070                          ;   disable screen/sprites (should I ??)
     109.  00:4070                      
     110.  00:4070                          ; clear all 128kb of VRAM
     111.  00:4070  16 02               	ld		d, 2		; 2 repetitions
     112.  00:4072                      .loop_2:
     113.  00:4072  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:4074                      .loop_1:
     115.  00:4074  06 00               	ld		b, 0		; 256 repetitions
     116.  00:4076                      .loop:
     117.  00:4076  D3 98               	out		(PORT_0), a
     118.  00:4078  10 FC               	djnz	.loop
     119.  00:407A  0D                  	dec		c
     120.  00:407B  C2 74 40            	jp		nz, .loop_1
     121.  00:407E  15                  	dec		d
     122.  00:407F  C2 72 40            	jp		nz, .loop_2
     123.  00:4082                      
     124.  00:4082  C9                  	ret
     125.  00:4083                      
     126.  00:4083                      ; MEGAROM
     127.  00:4083                      
     128.  00:4083                      opening_screen		
     129.  00:4083  0E 00               		ld		c,0
     130.  00:4085  11 00 00            		ld		de,0
     131.  00:4088  CD C8 40            		call	_vdpsetvramwr
     132.  00:408B  1E 04               		ld	e,4
     133.  00:408D  3E 09               		ld	a, :GRAPHIC
     134.  00:408F  57                  		ld	d,a
     135.  00:4090  32 00 70            2:		ld	(_bank2),a
     136.  00:4093  21 00 80            		ld	hl,GRAPHIC
     137.  00:4096  01 98 00            		ld	bc,0x98
     138.  00:4099  3E 40               		ld	a,32*2
     139.  00:409B  ED B3               1:		otir
     140.  00:409D  3D                  		dec	a
     141.  00:409E  20 FB               		jr	nz,1b
     142.  00:40A0  14                  		inc	d
     143.  00:40A1  7A                  		ld	a,d
     144.  00:40A2  1D                  		dec	e
     145.  00:40A3  20 EB               		jr	nz,2b
     146.  00:40A5  C9                  		ret 
     147.  00:40A6                      
     148.  00:40A6                      load_screen
     149.  00:40A6  0E 00               		ld		c,0
     150.  00:40A8  11 00 00            		ld		de,0
     151.  00:40AB  CD C8 40            		call	_vdpsetvramwr
     152.  00:40AE  1E 02               		ld	e,2					; #pages
     153.  00:40B0  78                  		ld	a, b			; 1st page bitmap
     154.  00:40B1  57                  		ld	d,a
     155.  00:40B2  32 00 70            2:		ld	(_bank2),a
     156.  00:40B5  2A 95 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:40B8  01 98 00            		ld	bc,0x98
     158.  00:40BB  3E 40               		ld	a,64
     159.  00:40BD  ED B3               1:		otir
     160.  00:40BF  3D                  		dec	a
     161.  00:40C0  20 FB               		jr	nz,1b
     162.  00:40C2  14                  		inc	d
     163.  00:40C3  7A                  		ld	a,d
     164.  00:40C4  1D                  		dec	e
     165.  00:40C5  20 EB               		jr	nz,2b
     166.  00:40C7  C9                  		ret 
     167.  00:40C8                      
     168.  00:40C8                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:40C8                      
     170.  00:40C8                      _vdpsetvramwr:
     171.  00:40C8  79                  	ld a,c
     172.  00:40C9  CB 02               	rlc d
     173.  00:40CB  17                  	rla
     174.  00:40CC  CB 02               	rlc d
     175.  00:40CE  17                  	rla
     176.  00:40CF  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:40D1                      
     178.  00:40D1  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:40D3  3E 8E               	ld a,14+128
     180.  00:40D5  D3 99               	out (0x99),a
     181.  00:40D7  CB 3A               	srl d ; secondo shift.     
     182.  00:40D9                      _vdpsetvramwr14
     183.  00:40D9  7B                  	ld a,e ;set bits 0-7
     184.  00:40DA  D3 99               	out (0x99),a
     185.  00:40DC  7A                  	ld a,d ;set bits 8-13
     186.  00:40DD  F6 40               	or 0x40 ; + write access
     187.  00:40DF  D3 99               	out (0x99),a
     188.  00:40E1  C9                  	ret
     189.  00:40E2                      
     190.  00:40E2                      
     191.  00:40E2                      
     192.  00:40E2                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:40E2                      		; -----------------------------------------------------
     194.  00:40E2                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:40E2                      		; -----------------------------------------------------
     196.  00:40E2                      
     197.  00:40E2                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:40E2                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:40E2                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:40E2                      
     201.  00:40E2                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:40E2                      		; NINGUNA
     203.  00:40E2                      
     204.  00:40E2                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:40E2                      		; --- Entrada: a = SLOT                                           ---
     206.  00:40E2                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:40E2                      		; --- AUTOR: Konamiman                                            ---
     208.  00:40E2  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:40E4  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:40E5  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:40E7  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:40EA  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:40EB  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:40EC  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:40EE  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:40F0                      		; --- El slot esta expandido ---
     217.  00:40F0  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:40F1  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:40F2  23                  		inc	hl				; Incrementamos hl una...
     220.  00:40F3  23                  		inc	hl				; ...dos...
     221.  00:40F4  23                  		inc	hl				; ...tres...
     222.  00:40F5  23                  		inc	hl				; ...cuatro veces
     223.  00:40F6  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:40F7  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:40F9  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:40FA  C9                  		ret					; Volvemos
     227.  00:40FB                      
     228.  00:40FB                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:40FB  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:40FD  32 00 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:4100  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:4101                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:4101  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:4104  0F                  		rrca					; Rotamos a la derecha...
     235.  00:4105  0F                  		rrca					; ...dos veces
     236.  00:4106  CD E2 40            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:4109  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:410B  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:410E                      
     240.  00:410E                      SET_SCREEN5_MODE:
     241.  00:410E                           ;Cambiamos el modo de pantalla
     242.  00:410E                          ; BASIC: COLOR 15,1,1
     243.  00:410E                          ; Establecer los colores
     244.  00:410E  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:4111  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:4113  23                  	inc hl ; FORCLR+1
     247.  00:4114  36 01               	ld [hl],1 ; Color de fondo 1=negro
     248.  00:4116  23                  	inc hl ; FORCLR+2
     249.  00:4117  36 01               	ld [hl],1 ; Color del borde 1=negro
     250.  00:4119                      
     251.  00:4119  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     252.  00:411B  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     253.  00:411E                      ;
     254.  00:411E  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     255.  00:4121                          ;En or 0+0=0, 0+1=1, 1+1=1
     256.  00:4121                          ;En and 0+0=0, 0+1=0, 1+1=1
     257.  00:4121                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     258.  00:4121                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     259.  00:4121                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     260.  00:4121  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     261.  00:4123                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     262.  00:4123  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:4125                      
     264.  00:4125  47                      ld b,a ;carga en b el valor de a
     265.  00:4126  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     266.  00:4128  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     267.  00:412B  AF                      xor a ; ld a,0
     268.  00:412C  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     269.  00:412F  C9                      ret
     270.  00:4130                      
     271.  00:4130                      DUMP_SPR_ALL:
     272.  00:4130                      
     273.  00:4130                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     274.  00:4130                      
     275.  00:4130  21 F5 48                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     276.  00:4133  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     277.  00:4136  01 80 01                ld bc, 8*4*12; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     278.  00:4139  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     279.  00:413C                      
     280.  00:413C                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     281.  00:413C                      
     282.  00:413C  21 0C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     283.  00:413F  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     284.  00:4142  01 80 00                ld bc,128; 4 x #Sprites
     285.  00:4145  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     286.  00:4148                      
     287.  00:4148                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     288.  00:4148                      
     289.  00:4148  21 75 4A                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     290.  00:414B  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     291.  00:414E  01 A0 00                ld bc,16*10; 16 x #Sprites
     292.  00:4151  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     293.  00:4154  C9                      ret
     294.  00:4155                      	
     295.  00:4155                      DUMP_SPR_ATTS:
     296.  00:4155                      
     297.  00:4155                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     298.  00:4155                      
     299.  00:4155  21 0C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     300.  00:4158  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     301.  00:415B  01 14 00                ld bc,20		; 5 x #Sprites
     302.  00:415E  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     303.  00:4161                      
     304.  00:4161                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     305.  00:4161                      ;	JP Z,.DUMP_SPR_ATTS_END
     306.  00:4161  2A 93 C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     307.  00:4164  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     308.  00:4167  C5                      PUSH BC
     309.  00:4168  01 30 00            	ld bc,16*3; 16 x #Sprites
     310.  00:416B  CD 5C 00                call  LDIRVM 
     311.  00:416E  C1                  	POP BC
     312.  00:416F                      
     313.  00:416F                      .DUMP_SPR_ATTS_END:
     314.  00:416F  C9                      ret
     315.  00:4170                      
     316.  00:4170                      DUMP_SPR_P1:    
     317.  00:4170                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:4170                      
     319.  00:4170  2A 8F C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:4173  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:4176  C5                      PUSH BC
     322.  00:4177  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     323.  00:417A  CD 5C 00                call  LDIRVM 
     324.  00:417D  C1                  	POP BC
     325.  00:417E                      
     326.  00:417E                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     327.  00:417E                      
     328.  00:417E  2A 91 C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     329.  00:4181  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     330.  00:4184  C5                      PUSH BC
     331.  00:4185  01 30 00            	ld bc,16*3; 16 x #Sprites
     332.  00:4188  CD 5C 00                call  LDIRVM 
     333.  00:418B  C1                  	POP BC
     334.  00:418C                      	
     335.  00:418C                      
     336.  00:418C                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     337.  00:418C                      ;    xor a
     338.  00:418C                      ;	di			; set VRAM address to 1800h
     339.  00:418C                      ;	out (99h),a		; lower byte 00
     340.  00:418C                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     341.  00:418C                      ;	ei
     342.  00:418C                      ;	out (99h),a		; note that this is protected by the ei instruction
     343.  00:418C                      ;   push BC
     344.  00:418C                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     345.  00:418C                      ;	ld hl,(SPRITE_PTR_REPLACE)
     346.  00:418C                      
     347.  00:418C                      ;.loop1:
     348.  00:418C                      ;	outi			; send the data (HL) to port 98h 
     349.  00:418C                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     350.  00:418C                      ;   POP BC
     351.  00:418C                      
     352.  00:418C                          ; Replace 2 entries in sprite color table
     353.  00:418C                      ;    xor a
     354.  00:418C                      ;	di			; set VRAM address to 1800h
     355.  00:418C                      ;	out (99h),a		; lower byte 00
     356.  00:418C                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     357.  00:418C                      ;	ei
     358.  00:418C                      ;	out (99h),a		; note that this is protected by the ei instruction
     359.  00:418C                       ;   push BC
     360.  00:418C                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     361.  00:418C                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     362.  00:418C                      	
     363.  00:418C                      ;.loop2:
     364.  00:418C                      ;	outi			; send the data (HL) to port 98h 
     365.  00:418C                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     366.  00:418C                       ;   POP BC
     367.  00:418C                      
     368.  00:418C  C9                      ret
      25   00:418D                      	include "include\SETPAGES48K.asm"
       1.  00:418D                      		; -----------------------------------------------------
       2.  00:418D                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
       3.  00:418D                      		; --- MODO 48K                                      ---
       4.  00:418D                      		; -----------------------------------------------------
       5.  00:418D                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
       6.  00:418D                      		; -----------------------------------------------------
       7.  00:418D                      
       8.  00:418D                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
       9.  00:418D                      		; SETPAGES48K:	BIOS-ROM-YY-ZZ	 -> ROM-ROM-ROM-ZZ (SITUA PAGINAS 2 Y 0, EN ESTE ORDEN)
      10.  00:418D                      		;               ADEMAS GUARDA LOS SLOTS DEL JUEGO Y LA BIOS POR SI HAY QUE INTERCAMBIAR
      11.  00:418D                      		; SETGAMEPAGE0:	XX-ROM-YY-ZZ     -> ROM-ROM-YY-ZZ (NO TOCA LA PAGINA 2)
      12.  00:418D                      		; RESTOREBIOS:  XX-ROM-YY-ZZ     -> BIOS-ROM-YY-ZZ (VUELVE A SITUAR LA BIOS)
      13.  00:418D                      		; SETPAGE0:	POSICIONA SLOT EN LA PAGINA 0
      14.  00:418D                      
      15.  00:418D                      		; --- VARIABLES EN RAM NECESARIAS ---
      16.  00:418D                      		; SLOTBIOS:	BYTE PARA ALMACENAR EL SLOT DE LA BIOS
      17.  00:418D                      		; SLOTGAME:	BYTE PARA ALMACENAR EL SLOT DEL JUEGO
      18.  00:418D                      
      19.  00:418D                      		;INCLUDE	"SETPAGES32K.ASM"
      20.  00:418D                      
      21.  00:418D                      SETPAGES48K:	; --- Posiciona las paginas de un cartucho de 48K ---
      22.  00:418D  CD FB 40            		call	SETPAGES32K			; Colocamos la pagina 2 del cartucho
      23.  00:4190                      		; --- Guardamos el slot de la BIOS por si tenemos que restaurarla ---
      24.  00:4190  3A C1 FC            		ld	a,[$FCC1]			; Valor del slot de la BIOS
      25.  00:4193  32 8C C0            		ld	[SLOTBIOS],a			; Grabamos el slot de la BIOS para recuperarlo si hace falta
      26.  00:4196                      		; --- Guardamos el slot del juego por si hay que restaurarlo ---
      27.  00:4196  CD 38 01            		call	RSLREG				; Leemos el contenido del registro de seleccion de slots
      28.  00:4199  0F                  		rrca					; Rotamos a la derecha...
      29.  00:419A  0F                  		rrca					; ...dos veces
      30.  00:419B  CD E2 40            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$7FFF) y volvemos
      31.  00:419E  32 8D C0            		ld	[SLOTGAME],a			; Grabamos el slot del juego para recuperarlo si hace falta
      32.  00:41A1                      SETGAMEPAGE0:	; --- RUTINA QUE POSICIONA LA PAGINA 0 DEL JUEGO ---
      33.  00:41A1                      		; ---     ANTES HAY QUE LLAMAR A SETPAGES48K     ---
      34.  00:41A1  3A 8D C0            		ld	a,[SLOTGAME]			; Leemos el slot del juego
      35.  00:41A4  C3 AA 41            		jp	SETPAGE0			; Situamos la pagina 0 del juego y volvemos
      36.  00:41A7                      RESTOREBIOS:	; --- RUTINA QUE VUELVE A SITUAR LA BIOS ---
      37.  00:41A7                      		; --- ANTES HAY QUE LLAMAR A SETPAGES48K ---
      38.  00:41A7  3A 8C C0            		ld	a,[SLOTBIOS]			; Leemos el slot de la BIOS
      39.  00:41AA                      SETPAGE0:	; --- RUTINA QUE POSICIONA SLOT EN LA PAGINA 0 ---
      40.  00:41AA                      		; --- AUTOR: Ramones                           ---
      41.  00:41AA                      		; --- ENTRADA: a = slot con formato FxxxSSPP   ---
      42.  00:41AA  F3                  		di					; Desactivamos las interrupciones
      43.  00:41AB  47                  		ld	b,a				; Guardamos el slot
      44.  00:41AC  DB A8               		in	a,[$0A8]			; Leemos el registro principal de slots
      45.  00:41AE  E6 FC               		and	$FC				; Nos quedamos con los valores de las tres paginas superiores
      46.  00:41B0  57                  		ld	d,a				; D = Valor del slot primario
      47.  00:41B1  78                  		ld	a,b				; Recuperamos el slot
      48.  00:41B2  E6 03               		and	$03				; Nos fijamos en el slot primario
      49.  00:41B4  B2                  		or	d				; Colocamos los bits de las paginas superiores
      50.  00:41B5  57                  		ld	d,a				; Guardamos en D el valor final para el slot primario
      51.  00:41B6                      		; Comprobamos si esta expandido
      52.  00:41B6  78                  		ld	a,b				; Recuperamos el slot
      53.  00:41B7  CB 7F               		bit	7,a				; Miramos el bit de expansion
      54.  00:41B9  28 1D               		jr	z,.SETPRIMARY			; ...y saltamos si no esta expandido
      55.  00:41BB                      		; Si llegamos aqui el slot esta expandido
      56.  00:41BB  E6 03               		and	03h				; Nos quedamos con el slot primario
      57.  00:41BD  0F                  		rrca					; Rotamos ciclicamente a la derecha una...
      58.  00:41BE  0F                  		rrca					; ...y dos veces
      59.  00:41BF  4F                  		ld	c,a				; Guardamos el valor en c
      60.  00:41C0  7A                  		ld	a,d				; Recuperamos el valor final para el slot primario
      61.  00:41C1  E6 3F               		and	$3F				; Nos quedamos con las paginas 0, 1 y 2
      62.  00:41C3  B1                  		or	c				; Colocamos los bits para la pagina 3
      63.  00:41C4  4F                  		ld	c,a				; C:=valor del slot primario incluso en pagina 3
      64.  00:41C5  78                  		ld	a,b				; Recuperamos otra vez el slot
      65.  00:41C6  E6 0C               		and	$0C				; Nos quedamos con el valor del subslot
      66.  00:41C8  0F                  		rrca					; Rotamos ciclicamente a la derecha una...
      67.  00:41C9  0F                  		rrca					; ...y dos veces
      68.  00:41CA  47                  		ld	b,a				; B:= Slot expandido en pagina 3
      69.  00:41CB  79                  		ld	a,c				; valor del slot primario incluyendo pagina 3
      70.  00:41CC  D3 A8               		out	[$A8],a				; Slots : Primario, xx, xx, Primario
      71.  00:41CE  3A FF FF            		ld	a,[$FFFF]			; Leemos registro de seleccion de subslots
      72.  00:41D1  2F                  		cpl					; Complementamos (recordemos que siempre hay que complementarlo)
      73.  00:41D2  E6 FC               		and	$FC				; Nos quedamos con las paginas superiores
      74.  00:41D4  B0                  		or	b				; Colocamos el valor del slot expandido en pagina 0
      75.  00:41D5  32 FF FF            		ld	[$FFFF],a			; Seleccionamos el slot expandido
      76.  00:41D8                      .SETPRIMARY:	; --- Colocamos el slot primario ---
      77.  00:41D8  7A                  		ld	a,d				; Valor final del slot primario
      78.  00:41D9  D3 A8               		out	[$A8],a				; Slots: Seleccionado, xx, xx, Ram
      79.  00:41DB  C9                  		ret					; Volvemos
      26   00:41DC                      
      27   00:41DC                      START
      28   00:41DC                      	; CODE
      29   00:41DC  3E 08               	LD A,8
      30   00:41DE  CD 5F 00            	CALL CHGMOD    	
      31   00:41E1  CD FB 40                CALL SETPAGES32K
      32   00:41E4  CD 83 40            	CALL opening_screen
      33   00:41E7  3E 01               	LD A,1
      34   00:41E9  32 00 70            	LD (_bank2),A
      35   00:41EC  CD 9F 00            	CALL CHGET
      36   00:41EF                      	; Empieza el juego    
      37   00:41EF  CD 68 40            	call ClearVram_MSX2		
      38   00:41F2  CD 0E 41            	call SET_SCREEN5_MODE    
      39   00:41F5  CD 5C 40                call Set212Lines
      40   00:41F8  21 00 80                LD HL, CEMENTER
      41   00:41FB  22 95 C0                LD (BITMAP), HL
      42   00:41FE  06 07                   LD B, :CEMENTER
      43   00:4200  CD A6 40                call load_screen
      44   00:4203                          
      45   00:4203  CD 12 42                call INIT_CHARS_VARS
      46   00:4206  3E FF                   LD A, -MOV_SPEED_GHOST
      47   00:4208  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
      48   00:420B  CD 30 41                call DUMP_SPR_ALL
      49   00:420E  CD 80 42                call MAIN_LOOP
      50   00:4211                          ;CALL CHGET
      51   00:4211  C9                  	ret
      52   00:4212                      
      53   00:4212                      
      54   00:4212                      INIT_CHARS_VARS:    
      55   00:4212  DD 21 0C C0             ld ix, SPRITE_ATTRS           
      56   00:4216                          
      57   00:4216  DD 36 00 07             ld (ix), 07h        ; Sprite 1 - $AF abajo
      58   00:421A  DD 36 01 09             ld (ix+1), 09h
      59   00:421E  DD 36 02 00             ld (ix+2), 00h    
      60   00:4222                      
      61   00:4222  DD 36 04 07             ld (ix+4), 07h     ; Sprite 2
      62   00:4226  DD 36 05 09             ld (ix+5), 09h
      63   00:422A  DD 36 06 04             ld (ix+6), 04h        
      64   00:422E                      
      65   00:422E  DD 36 08 07             ld (ix+8), 07h     ; Sprite 3
      66   00:4232  DD 36 09 09             ld (ix+9), 09h
      67   00:4236  DD 36 0A 08             ld (ix+10), 08h        
      68   00:423A                      
      69   00:423A  DD 36 0C 07             ld (ix+12), $07      ; Sprite 1 - Ghost
      70   00:423E  DD 36 0D B9             ld (ix+13), $B9
      71   00:4242  DD 36 0E 18             ld (ix+14), $18
      72   00:4246                          
      73   00:4246  AF                      XOR A
      74   00:4247  32 00 C0                LD (JIFFY_TEMP),A
      75   00:424A  32 01 C0                LD (CHAR_SPEED_X),A
      76   00:424D  32 02 C0                LD (CHAR_SPEED_Y),A
      77   00:4250  32 03 C0                LD (CHAR_SPEED_X_GHOST),A
      78   00:4253  32 05 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      79   00:4256  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A    
      80   00:4259  32 08 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      81   00:425C  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A
      82   00:425F  32 0B C0                LD (CHAR_SPEED_SHOOT),A
      83   00:4262  32 04 C0                LD (CHAR_GHOST_DEAD),A
      84   00:4265  32 09 C0                LD (CHAR_MIN_STEP), A
      85   00:4268  32 93 C0                LD (SPRITE_COLOR_REPLACE2), A
      86   00:426B  3E 01                   LD A,$01
      87   00:426D  32 06 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      88   00:4270                      
      89   00:4270  21 B5 46                ld hl, SPRITE_P1_DOWN
      90   00:4273  22 8F C0                ld (SPRITE_PTR_REPLACE), HL    
      91   00:4276  21 35 4B                ld hl, SPRITE_COLOR_P1_DOWN
      92   00:4279  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
      93   00:427C  22 93 C0                LD (SPRITE_COLOR_REPLACE2), HL
      94   00:427F  C9                      ret
      95   00:4280                      
      96   00:4280                      MAIN_LOOP:
      97   00:4280                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
      98   00:4280  CD 55 41                call DUMP_SPR_ATTS    
      99   00:4283                          
     100   00:4283  3A 04 C0                LD A,(CHAR_GHOST_DEAD)
     101   00:4286  FE 01                   CP $01
     102   00:4288  CA E9 42                JP Z,.continue
     103   00:428B  DD 7E 0D                LD A, (ix+13)          ;cargamos la X del Fantasma
     104   00:428E  2A 03 C0            	LD HL, (CHAR_SPEED_X_GHOST)
     105   00:4291  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     106   00:4292                          
     107   00:4292  DD 77 0D            	LD (ix+13), A	
     108   00:4295  FE 16                   CP $16
     109   00:4297  CA A2 42                JP Z,.CHANGE_DIR_RIGHT
     110   00:429A  FE B9                   CP $B9
     111   00:429C  CA AF 42                JP Z,.CHANGE_DIR_LEFT
     112   00:429F                          		
     113   00:429F  C3 B8 42                JP .check_pattern
     114   00:42A2                      
     115   00:42A2                      .CHANGE_DIR_RIGHT:
     116   00:42A2  3E 01                   LD A, MOV_SPEED_GHOST
     117   00:42A4  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
     118   00:42A7  3E FF                   LD A,$FF
     119   00:42A9  32 05 C0                LD (CHAR_DIR_GHOST1),A
     120   00:42AC  C3 B8 42                JP .check_pattern
     121   00:42AF                      
     122   00:42AF                      .CHANGE_DIR_LEFT:
     123   00:42AF  3E FF                   LD A, -MOV_SPEED_GHOST
     124   00:42B1  32 03 C0            	LD (CHAR_SPEED_X_GHOST), A
     125   00:42B4  AF                      XOR A   ; Pone A a 0
     126   00:42B5  32 05 C0                LD (CHAR_DIR_GHOST1),A
     127   00:42B8                      
     128   00:42B8                      .check_pattern:
     129   00:42B8  3A 05 C0                LD A,(CHAR_DIR_GHOST1)
     130   00:42BB  FE FF                   CP $FF
     131   00:42BD  CA D6 42                JP Z,.check_pattern_RIGHT
     132   00:42C0  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     133   00:42C3  FE 18                   CP $18
     134   00:42C5  CA CF 42                jp z,.change_pattern_L
     135   00:42C8  DD 36 0E 18             LD (ix+14),$18
     136   00:42CC  C3 E9 42                jp .continue
     137   00:42CF                      .change_pattern_L:
     138   00:42CF  DD 36 0E 1C             LD (ix+14),$1C
     139   00:42D3  C3 E9 42                jp .continue
     140   00:42D6                      
     141   00:42D6                      .check_pattern_RIGHT
     142   00:42D6  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     143   00:42D9  FE 20                   CP $20
     144   00:42DB  CA E5 42                jp z,.change_pattern_R
     145   00:42DE  DD 36 0E 20             LD (ix+14),$20
     146   00:42E2  C3 E9 42                jp .continue
     147   00:42E5                      .change_pattern_R:
     148   00:42E5  DD 36 0E 24             LD (ix+14),$24
     149   00:42E9                      
     150   00:42E9                      .continue:    
     151   00:42E9  3A 08 C0                LD A,(CHAR_MAIN_SHOOT)    
     152   00:42EC  FE 01                   CP $01
     153   00:42EE  CA 0E 43                JP Z,.MOVE_SHOOT_LEFT
     154   00:42F1  FE 02                   CP $02
     155   00:42F3  CA FE 42                JP Z,.MOVE_SHOOT_RIGHT
     156   00:42F6  FE 03                   CP $03
     157   00:42F8  CA 06 43                JP Z,.MOVE_SHOOT_UP    
     158   00:42FB  C3 72 43                JP .check_KB
     159   00:42FE                      
     160   00:42FE                      .MOVE_SHOOT_RIGHT:        
     161   00:42FE  3E 03                   LD A, MOV_SPEED_SHOOT
     162   00:4300  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     163   00:4303  C3 13 43                JP .CHECK_SHOOT_DISTANCE
     164   00:4306                      
     165   00:4306                      .MOVE_SHOOT_UP:        
     166   00:4306  3E FD                   LD A, -MOV_SPEED_SHOOT
     167   00:4308  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     168   00:430B  C3 13 43                JP .CHECK_SHOOT_DISTANCE
     169   00:430E                      
     170   00:430E                      .MOVE_SHOOT_LEFT:    
     171   00:430E  3E FD                   LD A, -MOV_SPEED_SHOOT
     172   00:4310  32 0B C0            	LD (CHAR_SPEED_SHOOT), A    
     173   00:4313                      
     174   00:4313                      .CHECK_SHOOT_DISTANCE:
     175   00:4313                          ; Miramos si va a izq o der
     176   00:4313  3A 08 C0                LD A,(CHAR_MAIN_SHOOT)    
     177   00:4316  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     178   00:4318  D2 28 43                JP NC,.ADD_SHOOT_Y
     179   00:431B                          ; Movemos el disparo
     180   00:431B  DD 7E 11                LD A, (ix+17)          ;cargamos la X del disparo
     181   00:431E  2A 0B C0            	LD HL, (CHAR_SPEED_SHOOT)
     182   00:4321  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     183   00:4322  DD 77 11                LD (ix+17), A
     184   00:4325  C3 32 43                JP .CHECK_GHOST
     185   00:4328                      .ADD_SHOOT_Y
     186   00:4328                          ; Movemos el disparo
     187   00:4328  DD 7E 10                LD A, (ix+16)          ;cargamos la X del disparo
     188   00:432B  2A 0B C0            	LD HL, (CHAR_SPEED_SHOOT)
     189   00:432E  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     190   00:432F  DD 77 10                LD (ix+16), A
     191   00:4332                      
     192   00:4332                      .CHECK_GHOST:
     193   00:4332                          ; Comprobamos si hay colision con el fantasma
     194   00:4332  3A 04 C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     195   00:4335  FE 01                   CP $01
     196   00:4337  CA 4E 43                JP Z,.ADD_DISTANCE
     197   00:433A                      
     198   00:433A  DD 46 10                LD B,(ix+16)         ; Y del disparo
     199   00:433D  DD 4E 11                LD C,(ix+17)         ; X del disparo
     200   00:4340  DD 56 0C                LD D,(ix+12)         ; Y del fantasma 
     201   00:4343  DD 5E 0D                LD E,(ix+13)         ; X del fantasma
     202   00:4346  CD 10 40                call check_spr_collision
     203   00:4349  FE 01                   CP 1
     204   00:434B  CA 5E 43                JP Z,.KILL_GHOST
     205   00:434E                      .ADD_DISTANCE:
     206   00:434E  3A 0A C0                LD A,(CHAR_DISTANCE_SHOOT)
     207   00:4351  C6 03                   ADD MOV_SPEED_SHOOT
     208   00:4353  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A    
     209   00:4356  FE 30                   CP MAX_DISTANCE_SHOOT
     210   00:4358  C2 72 43                JP NZ,.check_KB
     211   00:435B  C3 67 43                JP .HIDE_SHOOT
     212   00:435E                      
     213   00:435E                      .KILL_GHOST:
     214   00:435E  3E 01                   LD A,1
     215   00:4360  32 04 C0                LD (CHAR_GHOST_DEAD),A
     216   00:4363  DD 36 0C D9             LD (ix+12),217    
     217   00:4367                      
     218   00:4367                      .HIDE_SHOOT:
     219   00:4367  DD 36 10 D9             LD (ix+16),217          ; Y = 217 para ocultar el Sprite
     220   00:436B  AF                      XOR A
     221   00:436C  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     222   00:436F  32 0A C0                LD (CHAR_DISTANCE_SHOOT),A
     223   00:4372                      
     224   00:4372                      .check_KB:
     225   00:4372  76                      halt    
     226   00:4373                      
     227   00:4373  3E 08                   ld a, 8
     228   00:4375  CD 41 01            	call SNSMAT   
     229   00:4378  4F                      LD C,A    
     230   00:4379                          
     231   00:4379  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es DOWN?
     232   00:437B  CC 5F 44                call z, move_right
     233   00:437E                          
     234   00:437E  CB 61                   BIT KB_LEFT, C			; La tecla presionada es DOWN?
     235   00:4380  CC AC 44                call z, move_left
     236   00:4383                      
     237   00:4383  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     238   00:4385  CC F2 43                call z, move_up
     239   00:4388                      
     240   00:4388  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     241   00:438A  CC 28 44                call z, move_down
     242   00:438D                          
     243   00:438D  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     244   00:438F  CC 98 43                call z,SHOOT_MAIN_CHAR
     245   00:4392                      
     246   00:4392  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     247   00:4394  C8                      ret z
     248   00:4395                      
     249   00:4395  C3 80 42                jp MAIN_LOOP
     250   00:4398                      
     251   00:4398                      SHOOT_MAIN_CHAR:    
     252   00:4398  3A 08 C0                LD A, (CHAR_MAIN_SHOOT)
     253   00:439B  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     254   00:439D  CA 80 42                JP Z,MAIN_LOOP
     255   00:43A0  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     256   00:43A2  CA 80 42                JP Z,MAIN_LOOP
     257   00:43A5  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     258   00:43A7  CA 80 42                JP Z,MAIN_LOOP
     259   00:43AA                      
     260   00:43AA  DD 7E 00                LD A, (ix)          
     261   00:43AD  DD 77 10                ld (ix+16), A       ; Asignamos la Y del personaje    
     262   00:43B0                      
     263   00:43B0  3A 06 C0                LD A, (CHAR_DIR_MAIN)
     264   00:43B3  FE 03                   CP $03
     265   00:43B5  CA D0 43                JP Z,.SHOOT_RIGHT
     266   00:43B8  FE 00                   CP $00
     267   00:43BA  CA E3 43                JP Z,.SHOOT_UP
     268   00:43BD  3E 01                   LD A,$01                ; SHOOT LEFT
     269   00:43BF  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     270   00:43C2  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     271   00:43C5  21 F4 FF            	LD HL, -12
     272   00:43C8  85                  	ADD L
     273   00:43C9  DD 36 12 2C             ld (ix+18), $2C     ; Sprite Boomerang
     274   00:43CD  C3 EC 43                JP .CONTINUE
     275   00:43D0                      
     276   00:43D0                      .SHOOT_RIGHT:
     277   00:43D0  3E 02                   LD A,$02
     278   00:43D2  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     279   00:43D5  DD 36 12 28             ld (ix+18), $28     ; Sprite Boomerang - Right
     280   00:43D9  DD 7E 01                LD A, (ix+1)			;cargamos la X
     281   00:43DC  21 0C 00            	LD HL, 12
     282   00:43DF  85                  	ADD L
     283   00:43E0  C3 EC 43                JP .CONTINUE
     284   00:43E3                      
     285   00:43E3                      .SHOOT_UP:
     286   00:43E3  3E 03                   LD A,$03
     287   00:43E5  32 08 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     288   00:43E8  DD 36 12 28             ld (ix+18), $28     ; Sprite Disparo
     289   00:43EC                          ; Sumamos el desplazamiento a la Y
     290   00:43EC                          ;LD A, (ix+16)
     291   00:43EC                          ;SUB 16
     292   00:43EC                          ;LD (ix+16), A    
     293   00:43EC                          ;LD (ix+17), D
     294   00:43EC                          ;LD A, (ix+1)			;cargamos la X    
     295   00:43EC                      	
     296   00:43EC                      .CONTINUE:
     297   00:43EC                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     298   00:43EC  DD 77 11                ld (ix+17), A       ; Asignamos la X del personaje + el desplazamiento        
     299   00:43EF  C3 80 42                jp MAIN_LOOP
     300   00:43F2                      
     301   00:43F2                      move_up:
     302   00:43F2                          ; Actualizamos la última tecla de dirección pulsada
     303   00:43F2  AF                      XOR A
     304   00:43F3  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     305   00:43F6  CD F9 44                CALL CHECK_DIRECTION_MAIN
     306   00:43F9                      
     307   00:43F9  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     308   00:43FC  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
     309   00:43FE  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     310   00:43FF  DD 7E 01                ld a,(ix+1)
     311   00:4402  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     312   00:4403  CD 20 40                call get_bloque_en_X_Y
     313   00:4406  FE 01                   cp 1
     314   00:4408  CA F1 45                jp z,NO_MOVEMENT
     315   00:440B                      
     316   00:440B  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     317   00:440E  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
     318   00:4410  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     319   00:4411  DD 7E 01                ld a,(ix+1)
     320   00:4414  C6 0A                   add 10 ; miramos la segunda tile 8+2
     321   00:4416  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     322   00:4417  CD 20 40                call get_bloque_en_X_Y
     323   00:441A  FE 01                   cp 1
     324   00:441C  CA F1 45                jp z,NO_MOVEMENT
     325   00:441F                            
     326   00:441F  3E FF               	LD A, -MOV_SPEED
     327   00:4421  32 02 C0            	LD (CHAR_SPEED_Y), A
     328   00:4424  CD 86 45                call UPDATE_MOVEMENT    
     329   00:4427  C9                      ret
     330   00:4428                      
     331   00:4428                      move_down:    
     332   00:4428                          ; Actualizamos la última tecla de dirección pulsada
     333   00:4428  3E 01                   LD A,$01
     334   00:442A  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     335   00:442D  CD F9 44                CALL CHECK_DIRECTION_MAIN
     336   00:4430                      
     337   00:4430  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     338   00:4433  C6 11                   add 17 ; incrementamos en 15+2 el valor
     339   00:4435  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     340   00:4436  DD 7E 01                ld a,(ix+1)
     341   00:4439  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     342   00:443A  CD 20 40                call get_bloque_en_X_Y
     343   00:443D  FE 01                   cp 1
     344   00:443F  CA F1 45                jp z,NO_MOVEMENT
     345   00:4442                      
     346   00:4442  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
     347   00:4445  C6 11                   add 17 ; incrementamos en 15 el valor
     348   00:4447  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     349   00:4448  DD 7E 01                ld a,(ix+1)
     350   00:444B  C6 0A                   add 10 ; miramos la segunda tile 8+2
     351   00:444D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
     352   00:444E  CD 20 40                call get_bloque_en_X_Y
     353   00:4451  FE 01                   cp 1
     354   00:4453  CA F1 45                jp z,NO_MOVEMENT
     355   00:4456                          
     356   00:4456  3E 01                   LD A, MOV_SPEED
     357   00:4458  32 02 C0            	LD (CHAR_SPEED_Y), A
     358   00:445B  CD 86 45                call UPDATE_MOVEMENT    
     359   00:445E  C9                      ret
     360   00:445F                      
     361   00:445F                      move_right:
     362   00:445F                          ; Actualizamos la última tecla de dirección pulsada
     363   00:445F  3E 03                   LD A,$03
     364   00:4461  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     365   00:4464  CD F9 44                CALL CHECK_DIRECTION_MAIN
     366   00:4467                      
     367   00:4467  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
     368   00:446A  C6 10                   add 16; incrementamos en 3 el valor
     369   00:446C  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     370   00:446D  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     371   00:4470  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     372   00:4472  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     373   00:4473  CD 20 40                call get_bloque_en_X_Y
     374   00:4476  FE 01                   cp 1
     375   00:4478  CA F1 45                jp z,NO_MOVEMENT
     376   00:447B                      
     377   00:447B                          ;Miramos el tile del byte inferior del sprite - centro personaje
     378   00:447B  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     379   00:447E  C6 10                   add 16; incrementamos en 2 tiles el valor
     380   00:4480  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     381   00:4481  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     382   00:4484  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
     383   00:4486  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     384   00:4487  CD 20 40                call get_bloque_en_X_Y
     385   00:448A  FE 01                   cp 1
     386   00:448C  CA F1 45                jp z,NO_MOVEMENT
     387   00:448F                      
     388   00:448F                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     389   00:448F  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     390   00:4492  C6 10                   add 16; incrementamos en 2 tiles el valor
     391   00:4494  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     392   00:4495  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     393   00:4498  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     394   00:449A  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     395   00:449B  CD 20 40                call get_bloque_en_X_Y
     396   00:449E  FE 01                   cp 1
     397   00:44A0  CA F1 45                jp z,NO_MOVEMENT    
     398   00:44A3                          
     399   00:44A3  3E 01                   LD A, MOV_SPEED
     400   00:44A5  32 01 C0            	LD (CHAR_SPEED_X), A
     401   00:44A8  CD 86 45                call UPDATE_MOVEMENT            
     402   00:44AB  C9                      ret
     403   00:44AC                      
     404   00:44AC                      move_left:
     405   00:44AC                          ; Actualizamos la última tecla de dirección pulsada
     406   00:44AC  3E 02                   LD A,$02
     407   00:44AE  32 07 C0                LD (CHAR_NEW_DIR_MAIN),A
     408   00:44B1  CD F9 44                CALL CHECK_DIRECTION_MAIN
     409   00:44B4  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     410   00:44B7  D6 02                   sub 2 ; decrementamos en 2 el valor
     411   00:44B9  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     412   00:44BA  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     413   00:44BD  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     414   00:44BF  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     415   00:44C0  CD 20 40                call get_bloque_en_X_Y
     416   00:44C3  FE 01                   cp 1
     417   00:44C5  CA F1 45                jp z,NO_MOVEMENT
     418   00:44C8                      
     419   00:44C8                          ;Miramos el tile inferior parte central del personaje
     420   00:44C8  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     421   00:44CB  D6 02                   sub 2 ; decrementamos en 2 el valor
     422   00:44CD  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     423   00:44CE  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     424   00:44D1  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     425   00:44D3  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     426   00:44D4  CD 20 40                call get_bloque_en_X_Y
     427   00:44D7  FE 01                   cp 1
     428   00:44D9  CA F1 45                jp z,NO_MOVEMENT
     429   00:44DC                      
     430   00:44DC                          ;Miramos el tile inferior esquina inferior izquierda
     431   00:44DC  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     432   00:44DF  D6 02                   sub 2 ; decrementamos en 2 el valor
     433   00:44E1  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     434   00:44E2  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     435   00:44E5  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     436   00:44E7  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     437   00:44E8  CD 20 40                call get_bloque_en_X_Y
     438   00:44EB  FE 01                   cp 1
     439   00:44ED  CA F1 45                jp z,NO_MOVEMENT
     440   00:44F0                      
     441   00:44F0  3E FF                   LD A, -MOV_SPEED
     442   00:44F2  32 01 C0            	LD (CHAR_SPEED_X), A
     443   00:44F5  CD 86 45                call UPDATE_MOVEMENT     
     444   00:44F8  C9                      ret
     445   00:44F9                      
     446   00:44F9                      CHECK_DIRECTION_MAIN:
     447   00:44F9  3A 06 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     448   00:44FC  2A 07 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     449   00:44FF  BD                  	CP L		            	                ;Son iguales?
     450   00:4500  C8                  	RET Z                           			;Si son iguales, vuelvo
     451   00:4501  3A 07 C0                LD A,(CHAR_NEW_DIR_MAIN)
     452   00:4504  FE 01                   CP $01
     453   00:4506  CA 1B 45                JP Z,.SET_DIR_DOWN
     454   00:4509  FE 00                   CP $00
     455   00:450B  CA 30 45                JP Z,.SET_DIR_UP
     456   00:450E  FE 03                   CP $03
     457   00:4510  CA 5A 45                JP Z,.SET_DIR_RIGHT
     458   00:4513  FE 02                   CP $02
     459   00:4515  CA 45 45                JP Z,.SET_DIR_LEFT
     460   00:4518  C3 6F 45                JP .FINISH
     461   00:451B                          
     462   00:451B                      .SET_DIR_DOWN:    
     463   00:451B  21 B5 46                ld hl, SPRITE_P1_DOWN
     464   00:451E  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     465   00:4521                          
     466   00:4521  21 35 4B                ld hl, SPRITE_COLOR_P1_DOWN
     467   00:4524  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL    
     468   00:4527  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     469   00:452A  CD 70 41                CALL DUMP_SPR_P1    
     470   00:452D                      
     471   00:452D  C3 6F 45                JP .FINISH
     472   00:4530                      
     473   00:4530                      .SET_DIR_UP:
     474   00:4530  21 F5 45                ld hl, SPRITE_P1_UP
     475   00:4533  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     476   00:4536                          
     477   00:4536  21 D5 4A                ld hl, SPRITE_COLOR_P1_UP
     478   00:4539  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     479   00:453C  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     480   00:453F  CD 70 41                CALL DUMP_SPR_P1
     481   00:4542  C3 6F 45                JP .FINISH
     482   00:4545                      
     483   00:4545                      .SET_DIR_LEFT:    
     484   00:4545  21 75 47                ld hl, SPRITE_P1_LEFT
     485   00:4548  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     486   00:454B                          
     487   00:454B  21 55 4F                ld hl, SPRITE_COLOR_P1_LEFT
     488   00:454E  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     489   00:4551  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     490   00:4554  CD 70 41                CALL DUMP_SPR_P1   
     491   00:4557  C3 6F 45                JP .FINISH
     492   00:455A                      
     493   00:455A                      .SET_DIR_RIGHT:
     494   00:455A  21 35 48                ld hl, SPRITE_P1_RIGHT
     495   00:455D  22 8F C0                ld (SPRITE_PTR_REPLACE), HL
     496   00:4560                          
     497   00:4560  21 95 4B                ld hl, SPRITE_COLOR_P1_RIGHT
     498   00:4563  22 91 C0                ld (SPRITE_COLOR_REPLACE), HL
     499   00:4566  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     500   00:4569                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     501   00:4569  CD 70 41                CALL DUMP_SPR_P1
     502   00:456C  C3 6F 45                JP .FINISH
     503   00:456F                      
     504   00:456F                      .FINISH:
     505   00:456F  AF                      XOR A   ; reseteamos el contador de pasos
     506   00:4570  32 09 C0                LD (CHAR_MIN_STEP), A   
     507   00:4573  3A 07 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     508   00:4576  32 06 C0                LD (CHAR_DIR_MAIN),A    
     509   00:4579                      
     510   00:4579                          ; ponemos el primer frame del sprite
     511   00:4579  DD 36 02 00             LD (ix+2), $00
     512   00:457D  DD 36 06 04             LD (ix+6), $04
     513   00:4581  DD 36 0A 08             LD (ix+10), $08
     514   00:4585                          ;CALL DUMP_SPR_ATTS
     515   00:4585  C9                      RET
     516   00:4586                      
     517   00:4586                      UPDATE_MOVEMENT:
     518   00:4586  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     519   00:4589  2A 02 C0            	LD HL, (CHAR_SPEED_Y)
     520   00:458C  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     521   00:458D                          
     522   00:458D  DD 77 00            	LD (ix), A
     523   00:4590  DD 77 04                LD (ix+4), A
     524   00:4593  DD 77 08                LD (ix+8), A
     525   00:4596                      	
     526   00:4596  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     527   00:4599  2A 01 C0            	LD HL, (CHAR_SPEED_X)
     528   00:459C  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     529   00:459D                          
     530   00:459D  DD 77 01            	LD (ix+1), A
     531   00:45A0  DD 77 05                LD (ix+5), A
     532   00:45A3  DD 77 09                LD (ix+9), A	
     533   00:45A6                      
     534   00:45A6  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     535   00:45A7  32 01 C0                LD (CHAR_SPEED_X),A
     536   00:45AA  32 02 C0                LD (CHAR_SPEED_Y),A	
     537   00:45AD                      
     538   00:45AD                          ; Animación/pasos de personaje	
     539   00:45AD  3A 09 C0                LD A, (CHAR_MIN_STEP)
     540   00:45B0  FE 04                   CP MAX_CHAR_STEPS
     541   00:45B2  C2 EB 45                JP NZ,.NO_CHAR_PATTERN_CHANGE
     542   00:45B5                          
     543   00:45B5  AF                      XOR A
     544   00:45B6  32 09 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     545   00:45B9  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     546   00:45BC  FE 00                   CP $00
     547   00:45BE  CA D4 45                JP Z,.SET_SPR_1P_2
     548   00:45C1  DD 36 02 00             LD (ix+2), $00
     549   00:45C5  DD 36 06 04             LD (ix+6), $04
     550   00:45C9  DD 36 0A 08             LD (ix+10), $08
     551   00:45CD  2A 91 C0                ld hl, (SPRITE_COLOR_REPLACE)
     552   00:45D0  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     553   00:45D3  C9                      ret
     554   00:45D4                      
     555   00:45D4                      .SET_SPR_1P_2:
     556   00:45D4  DD 36 02 0C             LD (ix+2), $0C
     557   00:45D8  DD 36 06 10             LD (ix+6), $10
     558   00:45DC  DD 36 0A 14             LD (ix+10), $14
     559   00:45E0                              
     560   00:45E0  2A 91 C0                ld HL, (SPRITE_COLOR_REPLACE)
     561   00:45E3  11 30 00                ld DE,48
     562   00:45E6  19                      ADD HL, DE
     563   00:45E7  22 93 C0                ld (SPRITE_COLOR_REPLACE2), HL
     564   00:45EA                          ;ld a, 0
     565   00:45EA  C9                  	ret
     566   00:45EB                      
     567   00:45EB                      .NO_CHAR_PATTERN_CHANGE    
     568   00:45EB  C6 01                   ADD 1
     569   00:45ED  32 09 C0                LD (CHAR_MIN_STEP), A    
     570   00:45F0  C9                      ret
     571   00:45F1                      
     572   00:45F1                      NO_MOVEMENT:    
     573   00:45F1                          
     574   00:45F1  CD 80 42                call MAIN_LOOP
     575   00:45F4  C9                      ret
     576   00:45F5                      
     577   00:45F5                      include "include\BTH_data.asm"
       1.  00:45F5                      SPRITE_P1_UP:
       2.  00:45F5                          ; UP 1        
       3.  00:45F5                          ; mask 0
       4.  00:45F5                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
       4.  00:45F5  03 0F 1F 1F 1F 3F 1F 0F 
       5.  00:45FD                          DB $30,$78,$60,$60,$03,$03,$06,$0E
       5.  00:45FD  30 78 60 60 03 03 06 0E 
       6.  00:4605                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
       6.  00:4605  E0 F0 F8 F8 FC F8 FC F0 
       7.  00:460D                          DB $0E,$18,$06,$00,$C0,$E0,$F0,$00    
       7.  00:460D  0E 18 06 00 C0 E0 F0 00 
       8.  00:4615                          ; mask 1
       9.  00:4615                          DB $00,$00,$00,$00,$00,$00,$00,$00
       9.  00:4615  00 00 00 00 00 00 00 00 
      10.  00:461D                          DB $0F,$00,$03,$03,$01,$01,$00,$00
      10.  00:461D  0F 00 03 03 01 01 00 00 
      11.  00:4625                          DB $00,$00,$00,$00,$00,$00,$00,$00
      11.  00:4625  00 00 00 00 00 00 00 00 
      12.  00:462D                          DB $F0,$06,$C0,$C0,$80,$80,$80,$00
      12.  00:462D  F0 06 C0 C0 80 80 80 00 
      13.  00:4635                          ; mask 2
      14.  00:4635                          DB $00,$00,$00,$00,$00,$00,$00,$00
      14.  00:4635  00 00 00 00 00 00 00 00 
      15.  00:463D                          DB $00,$07,$01,$01,$00,$00,$00,$00
      15.  00:463D  00 07 01 01 00 00 00 00 
      16.  00:4645                          DB $00,$00,$00,$00,$00,$00,$00,$00
      16.  00:4645  00 00 00 00 00 00 00 00 
      17.  00:464D                          DB $00,$E0,$80,$80,$00,$00,$00,$00    
      17.  00:464D  00 E0 80 80 00 00 00 00 
      18.  00:4655                      
      19.  00:4655                          ; UP 2
      20.  00:4655                          ; mask 0
      21.  00:4655                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
      21.  00:4655  03 0F 1F 1F 1F 3F 1F 0F 
      22.  00:465D                          DB $70,$18,$60,$00,$03,$07,$0E,$00
      22.  00:465D  70 18 60 00 03 07 0E 00 
      23.  00:4665                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
      23.  00:4665  E0 F0 F8 F8 FC F8 FC F0 
      24.  00:466D                          DB $0C,$1E,$06,$06,$C0,$C0,$E0,$70    
      24.  00:466D  0C 1E 06 06 C0 C0 E0 70 
      25.  00:4675                          ; mask 1
      26.  00:4675                          DB $00,$00,$00,$00,$00,$00,$00,$00
      26.  00:4675  00 00 00 00 00 00 00 00 
      27.  00:467D                          DB $0F,$60,$03,$03,$01,$01,$00,$00
      27.  00:467D  0F 60 03 03 01 01 00 00 
      28.  00:4685                          DB $00,$00,$00,$00,$00,$00,$00,$00
      28.  00:4685  00 00 00 00 00 00 00 00 
      29.  00:468D                          DB $F0,$00,$C0,$C0,$80,$80,$80,$00
      29.  00:468D  F0 00 C0 C0 80 80 80 00 
      30.  00:4695                          ; mask 2
      31.  00:4695                          DB $00,$00,$00,$00,$00,$00,$00,$00
      31.  00:4695  00 00 00 00 00 00 00 00 
      32.  00:469D                          DB $00,$07,$01,$01,$00,$00,$00,$00
      32.  00:469D  00 07 01 01 00 00 00 00 
      33.  00:46A5                          DB $00,$00,$00,$00,$00,$00,$00,$00
      33.  00:46A5  00 00 00 00 00 00 00 00 
      34.  00:46AD                          DB $00,$E0,$80,$80,$00,$00,$00,$00
      34.  00:46AD  00 E0 80 80 00 00 00 00 
      35.  00:46B5                      
      36.  00:46B5                      SPRITE_P1_DOWN:
      37.  00:46B5                          ; DOWN 1 - 00h
      38.  00:46B5                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      38.  00:46B5  03 0F 00 0A 0E 0D 07 03 
      39.  00:46BD                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
      39.  00:46BD  3E 7B 60 60 03 03 06 0E 
      40.  00:46C5                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      40.  00:46C5  E0 F0 A0 90 70 B0 E0 C0 
      41.  00:46CD                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
      41.  00:46CD  7E D8 06 00 C0 E0 F0 00 
      42.  00:46D5                          ; mask 1 - 04h
      43.  00:46D5                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      43.  00:46D5  00 00 1F 15 11 32 18 0C 
      44.  00:46DD                          DB $01,$00,$03,$03,$01,$01,$00,$00
      44.  00:46DD  01 00 03 03 01 01 00 00 
      45.  00:46E5                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      45.  00:46E5  00 00 58 68 8C 48 1C 30 
      46.  00:46ED                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
      46.  00:46ED  80 06 C0 C0 80 80 80 00 
      47.  00:46F5                          ; mask 2 - 08h
      48.  00:46F5                          DB $00,$00,$00,$00,$00,$30,$00,$00
      48.  00:46F5  00 00 00 00 00 30 00 00 
      49.  00:46FD                          DB $00,$04,$00,$00,$00,$00,$00,$00
      49.  00:46FD  00 04 00 00 00 00 00 00 
      50.  00:4705                          DB $00,$00,$00,$00,$00,$08,$00,$00
      50.  00:4705  00 00 00 00 00 08 00 00 
      51.  00:470D                          DB $00,$20,$00,$00,$00,$00,$00,$00
      51.  00:470D  00 20 00 00 00 00 00 00 
      52.  00:4715                      
      53.  00:4715                          ; DOWN 2
      54.  00:4715                          ; mask 0 - 0Ch
      55.  00:4715                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      55.  00:4715  03 0F 00 0A 0E 0D 07 03 
      56.  00:471D                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
      56.  00:471D  7E 1B 60 00 03 07 0E 00 
      57.  00:4725                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      57.  00:4725  E0 F0 A0 90 70 B0 E0 C0 
      58.  00:472D                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
      58.  00:472D  7C DE 06 06 C0 C0 E0 70 
      59.  00:4735                          ; mask 1 - 10h
      60.  00:4735                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      60.  00:4735  00 00 1F 15 11 32 18 0C 
      61.  00:473D                          DB $01,$60,$03,$03,$01,$01,$00,$00
      61.  00:473D  01 60 03 03 01 01 00 00 
      62.  00:4745                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      62.  00:4745  00 00 58 68 8C 48 1C 30 
      63.  00:474D                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
      63.  00:474D  80 00 C0 C0 80 80 80 00 
      64.  00:4755                          ; mask 2 - 14h
      65.  00:4755                          DB $00,$00,$00,$00,$00,$30,$00,$00
      65.  00:4755  00 00 00 00 00 30 00 00 
      66.  00:475D                          DB $00,$04,$00,$00,$00,$00,$00,$00
      66.  00:475D  00 04 00 00 00 00 00 00 
      67.  00:4765                          DB $00,$00,$00,$00,$00,$08,$00,$00
      67.  00:4765  00 00 00 00 00 08 00 00 
      68.  00:476D                          DB $00,$20,$00,$00,$00,$00,$00,$00
      68.  00:476D  00 20 00 00 00 00 00 00 
      69.  00:4775                      
      70.  00:4775                      SPRITE_P1_LEFT:         
      71.  00:4775                          ; --- Slot 1
      72.  00:4775                          ; mask 0
      73.  00:4775                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      73.  00:4775  07 1F 03 07 0B 1F 0F 07 
      74.  00:477D                          DB $03,$0F,$30,$30,$03,$01,$01,$03
      74.  00:477D  03 0F 30 30 03 01 01 03 
      75.  00:4785                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      75.  00:4785  C0 E0 00 80 C0 C0 80 00 
      76.  00:478D                          DB $C0,$80,$00,$00,$D8,$B0,$20,$00
      76.  00:478D  C0 80 00 00 D8 B0 20 00 
      77.  00:4795                          ; mask 1
      78.  00:4795                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      78.  00:4795  00 00 0C 18 34 00 00 00 
      79.  00:479D                          DB $0C,$00,$09,$03,$00,$00,$00,$00
      79.  00:479D  0C 00 09 03 00 00 00 00 
      80.  00:47A5                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      80.  00:47A5  00 00 F0 78 38 3C 70 F8 
      81.  00:47AD                          DB $00,$78,$C0,$F8,$18,$10,$00,$00
      81.  00:47AD  00 78 C0 F8 18 10 00 00 
      82.  00:47B5                          ; mask 2
      83.  00:47B5                          DB $00,$00,$00,$00,$30,$00,$00,$00
      83.  00:47B5  00 00 00 00 30 00 00 00 
      84.  00:47BD                          DB $00,$00,$01,$00,$00,$00,$00,$00
      84.  00:47BD  00 00 01 00 00 00 00 00 
      85.  00:47C5                          DB $00,$00,$00,$00,$38,$00,$00,$00
      85.  00:47C5  00 00 00 00 38 00 00 00 
      86.  00:47CD                          DB $3C,$00,$F0,$38,$00,$00,$00,$00
      86.  00:47CD  3C 00 F0 38 00 00 00 00 
      87.  00:47D5                              
      88.  00:47D5                          ; --- Slot 3
      89.  00:47D5                          ; mask 0
      90.  00:47D5                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      90.  00:47D5  07 1F 03 07 0B 1F 0F 07 
      91.  00:47DD                          DB $03,$0F,$01,$03,$03,$01,$03,$06
      91.  00:47DD  03 0F 01 03 03 01 03 06 
      92.  00:47E5                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      92.  00:47E5  C0 E0 00 80 C0 C0 80 00 
      93.  00:47ED                          DB $C0,$80,$F0,$F8,$D8,$D0,$40,$C0
      93.  00:47ED  C0 80 F0 F8 D8 D0 40 C0 
      94.  00:47F5                          ; mask 1
      95.  00:47F5                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      95.  00:47F5  00 00 0C 18 34 00 00 00 
      96.  00:47FD                          DB $0C,$30,$31,$00,$00,$00,$00,$00
      96.  00:47FD  0C 30 31 00 00 00 00 00 
      97.  00:4805                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      97.  00:4805  00 00 F0 78 38 3C 70 F8 
      98.  00:480D                          DB $00,$00,$C0,$38,$18,$10,$00,$00
      98.  00:480D  00 00 C0 38 18 10 00 00 
      99.  00:4815                          ; mask 2
     100.  00:4815                          DB $00,$00,$00,$00,$30,$00,$00,$00
     100.  00:4815  00 00 00 00 30 00 00 00 
     101.  00:481D                          DB $00,$00,$30,$00,$00,$00,$00,$00
     101.  00:481D  00 00 30 00 00 00 00 00 
     102.  00:4825                          DB $00,$00,$00,$00,$38,$00,$00,$00
     102.  00:4825  00 00 00 00 38 00 00 00 
     103.  00:482D                          DB $3C,$78,$00,$00,$00,$00,$00,$00
     103.  00:482D  3C 78 00 00 00 00 00 00 
     104.  00:4835                      
     105.  00:4835                      SPRITE_P1_RIGHT:
     106.  00:4835                          ; --- Slot 0
     107.  00:4835                          ; mask 0
     108.  00:4835                          DB $03,$07,$00,$01,$03,$03,$01,$00
     108.  00:4835  03 07 00 01 03 03 01 00 
     109.  00:483D                          DB $03,$01,$00,$00,$1B,$0D,$04,$00
     109.  00:483D  03 01 00 00 1B 0D 04 00 
     110.  00:4845                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     110.  00:4845  E0 F8 C0 E0 D0 F8 F0 E0 
     111.  00:484D                          DB $C0,$F0,$0C,$0C,$C0,$80,$80,$C0
     111.  00:484D  C0 F0 0C 0C C0 80 80 C0 
     112.  00:4855                          ; mask 1
     113.  00:4855                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     113.  00:4855  00 00 0F 1E 1C 3C 0E 1F 
     114.  00:485D                          DB $00,$1E,$03,$1F,$18,$08,$00,$00
     114.  00:485D  00 1E 03 1F 18 08 00 00 
     115.  00:4865                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     115.  00:4865  00 00 30 18 2C 00 00 00 
     116.  00:486D                          DB $30,$00,$90,$C0,$00,$00,$00,$00
     116.  00:486D  30 00 90 C0 00 00 00 00 
     117.  00:4875                          ; mask 2
     118.  00:4875                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     118.  00:4875  00 00 00 00 1C 00 00 00 
     119.  00:487D                          DB $3C,$00,$0F,$1C,$00,$00,$00,$00
     119.  00:487D  3C 00 0F 1C 00 00 00 00 
     120.  00:4885                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     120.  00:4885  00 00 00 00 0C 00 00 00 
     121.  00:488D                          DB $00,$00,$80,$00,$00,$00,$00,$00
     121.  00:488D  00 00 80 00 00 00 00 00 
     122.  00:4895                      
     123.  00:4895                          ; --- Slot 2
     124.  00:4895                          ; mask 0
     125.  00:4895                          DB $03,$07,$00,$01,$03,$03,$01,$00
     125.  00:4895  03 07 00 01 03 03 01 00 
     126.  00:489D                          DB $03,$01,$0F,$1F,$1B,$0B,$02,$03
     126.  00:489D  03 01 0F 1F 1B 0B 02 03 
     127.  00:48A5                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     127.  00:48A5  E0 F8 C0 E0 D0 F8 F0 E0 
     128.  00:48AD                          DB $C0,$F0,$80,$C0,$C0,$80,$C0,$60
     128.  00:48AD  C0 F0 80 C0 C0 80 C0 60 
     129.  00:48B5                          ; mask 1
     130.  00:48B5                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     130.  00:48B5  00 00 0F 1E 1C 3C 0E 1F 
     131.  00:48BD                          DB $00,$00,$03,$1C,$18,$08,$00,$00
     131.  00:48BD  00 00 03 1C 18 08 00 00 
     132.  00:48C5                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     132.  00:48C5  00 00 30 18 2C 00 00 00 
     133.  00:48CD                          DB $30,$0C,$8C,$00,$00,$00,$00,$00
     133.  00:48CD  30 0C 8C 00 00 00 00 00 
     134.  00:48D5                          ; mask 2
     135.  00:48D5                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     135.  00:48D5  00 00 00 00 1C 00 00 00 
     136.  00:48DD                          DB $3C,$1E,$00,$00,$00,$00,$00,$00
     136.  00:48DD  3C 1E 00 00 00 00 00 00 
     137.  00:48E5                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     137.  00:48E5  00 00 00 00 0C 00 00 00 
     138.  00:48ED                          DB $00,$00,$0C,$00,$00,$00,$00,$00
     138.  00:48ED  00 00 0C 00 00 00 00 00 
     139.  00:48F5                      
     140.  00:48F5                      SPRITE_PATTERN:    
     141.  00:48F5                          ; DOWN 1 
     142.  00:48F5                          ; mask 0 - 00h
     143.  00:48F5                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     143.  00:48F5  03 0F 00 0A 0E 0D 07 03 
     144.  00:48FD                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
     144.  00:48FD  3E 7B 60 60 03 03 06 0E 
     145.  00:4905                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     145.  00:4905  E0 F0 A0 90 70 B0 E0 C0 
     146.  00:490D                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
     146.  00:490D  7E D8 06 00 C0 E0 F0 00 
     147.  00:4915                          ; mask 1 - 04h
     148.  00:4915                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     148.  00:4915  00 00 1F 15 11 32 18 0C 
     149.  00:491D                          DB $01,$00,$03,$03,$01,$01,$00,$00
     149.  00:491D  01 00 03 03 01 01 00 00 
     150.  00:4925                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     150.  00:4925  00 00 58 68 8C 48 1C 30 
     151.  00:492D                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
     151.  00:492D  80 06 C0 C0 80 80 80 00 
     152.  00:4935                          ; mask 2 - 08h
     153.  00:4935                          DB $00,$00,$00,$00,$00,$30,$00,$00
     153.  00:4935  00 00 00 00 00 30 00 00 
     154.  00:493D                          DB $00,$04,$00,$00,$00,$00,$00,$00
     154.  00:493D  00 04 00 00 00 00 00 00 
     155.  00:4945                          DB $00,$00,$00,$00,$00,$08,$00,$00
     155.  00:4945  00 00 00 00 00 08 00 00 
     156.  00:494D                          DB $00,$20,$00,$00,$00,$00,$00,$00
     156.  00:494D  00 20 00 00 00 00 00 00 
     157.  00:4955                      
     158.  00:4955                          ; DOWN 2 
     159.  00:4955                          ; mask 0 - 0Ch
     160.  00:4955                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     160.  00:4955  03 0F 00 0A 0E 0D 07 03 
     161.  00:495D                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
     161.  00:495D  7E 1B 60 00 03 07 0E 00 
     162.  00:4965                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     162.  00:4965  E0 F0 A0 90 70 B0 E0 C0 
     163.  00:496D                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
     163.  00:496D  7C DE 06 06 C0 C0 E0 70 
     164.  00:4975                          ; mask 1 - 10h
     165.  00:4975                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     165.  00:4975  00 00 1F 15 11 32 18 0C 
     166.  00:497D                          DB $01,$60,$03,$03,$01,$01,$00,$00
     166.  00:497D  01 60 03 03 01 01 00 00 
     167.  00:4985                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     167.  00:4985  00 00 58 68 8C 48 1C 30 
     168.  00:498D                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
     168.  00:498D  80 00 C0 C0 80 80 80 00 
     169.  00:4995                          ; mask 2 - 14h
     170.  00:4995                          DB $00,$00,$00,$00,$00,$30,$00,$00
     170.  00:4995  00 00 00 00 00 30 00 00 
     171.  00:499D                          DB $00,$04,$00,$00,$00,$00,$00,$00
     171.  00:499D  00 04 00 00 00 00 00 00 
     172.  00:49A5                          DB $00,$00,$00,$00,$00,$08,$00,$00
     172.  00:49A5  00 00 00 00 00 08 00 00 
     173.  00:49AD                          DB $00,$20,$00,$00,$00,$00,$00,$00
     173.  00:49AD  00 20 00 00 00 00 00 00 
     174.  00:49B5                          
     175.  00:49B5                          ;Ghost 1 Left - 18H
     176.  00:49B5                          DB 00h,01h,07h,0fh,1fh,3fh,7fh,01h
     176.  00:49B5  00 01 07 0F 1F 3F 7F 01 
     177.  00:49BD                          DB $15,$14,$7f,$3f,$3f,$3f,$3f,$7f
     177.  00:49BD  15 14 7F 3F 3F 3F 3F 7F 
     178.  00:49C5                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     178.  00:49C5  00 E0 80 00 00 80 80 C0 
     179.  00:49CD                          DB $c0,$e0,$f0,$f8,$fc,$fc,$fe,$ff  
     179.  00:49CD  C0 E0 F0 F8 FC FC FE FF 
     180.  00:49D5                          
     181.  00:49D5                          ; Ghost 2 Left - 1Ch
     182.  00:49D5                          DB $00,$01,$07,$0f,$1f,$3f,$7f,$01
     182.  00:49D5  00 01 07 0F 1F 3F 7F 01 
     183.  00:49DD                          DB $15,$14,$7f,$3f,$3f,$7f,$7f,$83
     183.  00:49DD  15 14 7F 3F 3F 7F 7F 83 
     184.  00:49E5                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     184.  00:49E5  00 E0 80 00 00 80 80 C0 
     185.  00:49ED                          DB $c0,$e0,$e0,$f0,$f8,$fc,$fe,$ff      
     185.  00:49ED  C0 E0 E0 F0 F8 FC FE FF 
     186.  00:49F5                      
     187.  00:49F5                          ; Ghost 1 Right - 20h
     188.  00:49F5                          DB $00,$07,$01,$00,$00,$01,$01,$03
     188.  00:49F5  00 07 01 00 00 01 01 03 
     189.  00:49FD                          DB $03,$07,$07,$0f,$1f,$3f,$7f,$ff
     189.  00:49FD  03 07 07 0F 1F 3F 7F FF 
     190.  00:4A05                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     190.  00:4A05  00 80 E0 F0 F8 FC FE 80 
     191.  00:4A0D                          DB $a8,$28,$fe,$fc,$fc,$fe,$fe,$c1
     191.  00:4A0D  A8 28 FE FC FC FE FE C1 
     192.  00:4A15                          
     193.  00:4A15                          ; Ghost 2 Right - 24h
     194.  00:4A15                          DB $00,$07,$01,$00,$00,$01,$01,$03
     194.  00:4A15  00 07 01 00 00 01 01 03 
     195.  00:4A1D                          DB $03,$07,$0f,$1f,$3f,$3f,$7f,$ff
     195.  00:4A1D  03 07 0F 1F 3F 3F 7F FF 
     196.  00:4A25                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     196.  00:4A25  00 80 E0 F0 F8 FC FE 80 
     197.  00:4A2D                          DB $a8,$28,$fe,$fc,$fc,$fc,$fc,$fe  
     197.  00:4A2D  A8 28 FE FC FC FC FC FE 
     198.  00:4A35                      
     199.  00:4A35                          ; Antichrist - RIGHT
     200.  00:4A35                          ; mask 0 - 28h
     201.  00:4A35                          ;DB $00,$00,$00,$03,$07,$0F,$1E,$1E
     202.  00:4A35                          ;DB $1E,$1C,$1E,$0F,$07,$03,$00,$00
     203.  00:4A35                          ;DB $00,$00,$00,$00,$80,$C0,$E0,$F0
     204.  00:4A35                          ;DB $F8,$70,$E0,$C0,$80,$00,$00,$00
     205.  00:4A35                          DB $00,$00,$00,$01,$01,$01,$01,$01
     205.  00:4A35  00 00 00 01 01 01 01 01 
     206.  00:4A3D                          DB $01,$01,$07,$07,$01,$01,$00,$00
     206.  00:4A3D  01 01 07 07 01 01 00 00 
     207.  00:4A45                          DB $00,$00,$00,$80,$80,$80,$80,$80
     207.  00:4A45  00 00 00 80 80 80 80 80 
     208.  00:4A4D                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     208.  00:4A4D  80 80 E0 E0 80 80 00 00 
     209.  00:4A55                      
     210.  00:4A55                      
     211.  00:4A55                          ; Antichrist - LEFT
     212.  00:4A55                          ; mask 0 - 2Ch
     213.  00:4A55                          ;DB $00,$00,$00,$00,$01,$03,$07,$0F
     214.  00:4A55                          ;DB $1F,$0E,$07,$03,$01,$00,$00,$00
     215.  00:4A55                          ;DB $00,$00,$00,$C0,$E0,$F0,$78,$78
     216.  00:4A55                          ;DB $78,$38,$78,$F0,$E0,$C0,$00,$00
     217.  00:4A55                          DB $00,$00,$00,$01,$01,$01,$01,$01
     217.  00:4A55  00 00 00 01 01 01 01 01 
     218.  00:4A5D                          DB $01,$01,$07,$07,$01,$01,$00,$00
     218.  00:4A5D  01 01 07 07 01 01 00 00 
     219.  00:4A65                          DB $00,$00,$00,$80,$80,$80,$80,$80
     219.  00:4A65  00 00 00 80 80 80 80 80 
     220.  00:4A6D                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     220.  00:4A6D  80 80 E0 E0 80 80 00 00 
     221.  00:4A75                      
     222.  00:4A75                      SPRITE_COLOR_TABLE:       
     223.  00:4A75                           ;DOWN 1
     224.  00:4A75                          ; attr 0
     225.  00:4A75                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     225.  00:4A75  06 06 0B 0B 0B 0B 0B 0B 
     226.  00:4A7D                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     226.  00:4A7D  0C 0C 0B 0B 04 04 04 04 
     227.  00:4A85                          ; attr 1
     228.  00:4A85                          DB $00,$00,$46,$46,$46,$44,$46,$46
     228.  00:4A85  00 00 46 46 46 44 46 46 
     229.  00:4A8D                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     229.  00:4A8D  4B 4B 44 44 42 42 42 00 
     230.  00:4A95                          ; attr 2
     231.  00:4A95                          DB $00,$00,$00,$00,$00,$42,$00,$00
     231.  00:4A95  00 00 00 00 00 42 00 00 
     232.  00:4A9D                          DB $00,$46,$00,$00,$00,$00,$00,$00
     232.  00:4A9D  00 46 00 00 00 00 00 00 
     233.  00:4AA5                               
     234.  00:4AA5                          ; Cada posición ha de corresponder con la tabla de atributos    
     235.  00:4AA5                      
     236.  00:4AA5                          ; Fantasma
     237.  00:4AA5                          DB $08,$08,$08,$08,$08,$08,$08,$08
     237.  00:4AA5  08 08 08 08 08 08 08 08 
     238.  00:4AAD                          DB $08,$08,$08,$08,$08,$08,$08,$08
     238.  00:4AAD  08 08 08 08 08 08 08 08 
     239.  00:4AB5                          ; Fantasma
     240.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     241.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     242.  00:4AB5                          ; Fantasma
     243.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     244.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     245.  00:4AB5                          ; Fantasma
     246.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     247.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08    
     248.  00:4AB5                          ; Me ahorro los colores del fantasma, la 4a posicion del array de atributos será para el disparo
     249.  00:4AB5                          ; Boomerang
     250.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     251.  00:4AB5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     252.  00:4AB5                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     252.  00:4AB5  00 00 00 0F 0F 0F 0F 0F 
     253.  00:4ABD                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     253.  00:4ABD  0F 0F 0F 0F 0F 0F 00 00 
     254.  00:4AC5                          ; Boomerang
     255.  00:4AC5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     256.  00:4AC5                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     257.  00:4AC5                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     257.  00:4AC5  00 00 00 0F 0F 0F 0F 0F 
     258.  00:4ACD                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     258.  00:4ACD  0F 0F 0F 0F 0F 0F 00 00 
     259.  00:4AD5                      
     260.  00:4AD5                      SPRITE_COLOR_P1_UP:
     261.  00:4AD5                          ;UP 1
     262.  00:4AD5                          ; attr 0
     263.  00:4AD5                          DB $06,$06,$06,$06,$06,$06,$06,$06
     263.  00:4AD5  06 06 06 06 06 06 06 06 
     264.  00:4ADD                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     264.  00:4ADD  0C 0C 0B 0B 04 04 04 04 
     265.  00:4AE5                          ; attr 1
     266.  00:4AE5                          DB $00,$00,$00,$00,$00,$00,$00,$00
     266.  00:4AE5  00 00 00 00 00 00 00 00 
     267.  00:4AED                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     267.  00:4AED  46 4B 44 44 42 42 42 00 
     268.  00:4AF5                          ; attr 2
     269.  00:4AF5                          DB $00,$00,$00,$00,$00,$00,$00,$00
     269.  00:4AF5  00 00 00 00 00 00 00 00 
     270.  00:4AFD                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     270.  00:4AFD  00 46 42 42 00 00 00 00 
     271.  00:4B05                          
     272.  00:4B05                          ;SPRITE_COLOR_P1_UP2:
     273.  00:4B05                          ;UP 1
     274.  00:4B05                          ; attr 0
     275.  00:4B05                          DB $06,$06,$06,$06,$06,$06,$06,$06
     275.  00:4B05  06 06 06 06 06 06 06 06 
     276.  00:4B0D                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     276.  00:4B0D  0C 0C 0B 0B 04 04 04 04 
     277.  00:4B15                          ; attr 1
     278.  00:4B15                          DB $00,$00,$00,$00,$00,$00,$00,$00
     278.  00:4B15  00 00 00 00 00 00 00 00 
     279.  00:4B1D                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     279.  00:4B1D  46 4B 44 44 42 42 42 00 
     280.  00:4B25                          ; attr 2
     281.  00:4B25                          DB $00,$00,$00,$00,$00,$00,$00,$00
     281.  00:4B25  00 00 00 00 00 00 00 00 
     282.  00:4B2D                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     282.  00:4B2D  00 46 42 42 00 00 00 00 
     283.  00:4B35                      
     284.  00:4B35                      SPRITE_COLOR_P1_DOWN:
     285.  00:4B35                          ;DOWN 1
     286.  00:4B35                          ; attr 0
     287.  00:4B35                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     287.  00:4B35  06 06 0B 0B 0B 0B 0B 0B 
     288.  00:4B3D                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     288.  00:4B3D  0C 0C 0B 0B 04 04 04 04 
     289.  00:4B45                          ; attr 1
     290.  00:4B45                          DB $00,$00,$46,$46,$46,$44,$46,$46
     290.  00:4B45  00 00 46 46 46 44 46 46 
     291.  00:4B4D                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     291.  00:4B4D  4B 4B 44 44 42 42 42 00 
     292.  00:4B55                          ; attr 2
     293.  00:4B55                          DB $00,$00,$00,$00,$00,$42,$00,$00
     293.  00:4B55  00 00 00 00 00 42 00 00 
     294.  00:4B5D                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     294.  00:4B5D  00 46 00 00 00 00 00 00 
     295.  00:4B65                      
     296.  00:4B65                          ;SPRITE_COLOR_P1_DOWN2:
     297.  00:4B65                          ;DOWN 1
     298.  00:4B65                          ; attr 0
     299.  00:4B65                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     299.  00:4B65  06 06 0B 0B 0B 0B 0B 0B 
     300.  00:4B6D                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     300.  00:4B6D  0C 0C 0B 0B 04 04 04 04 
     301.  00:4B75                          ; attr 1
     302.  00:4B75                          DB $00,$00,$46,$46,$46,$44,$46,$46
     302.  00:4B75  00 00 46 46 46 44 46 46 
     303.  00:4B7D                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     303.  00:4B7D  4B 4B 44 44 42 42 42 00 
     304.  00:4B85                          ; attr 2
     305.  00:4B85                          DB $00,$00,$00,$00,$00,$42,$00,$00
     305.  00:4B85  00 00 00 00 00 42 00 00 
     306.  00:4B8D                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     306.  00:4B8D  00 46 00 00 00 00 00 00 
     307.  00:4B95                      
     308.  00:4B95                      SPRITE_COLOR_P1_RIGHT:
     309.  00:4B95                          ; attr 0
     310.  00:4B95                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     310.  00:4B95  06 06 0B 0B 0B 0B 0B 0B 
     311.  00:4B9D                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     311.  00:4B9D  0C 0C 0B 0B 04 04 04 04 
     312.  00:4BA5                          ; attr 1
     313.  00:4BA5                          DB $00,$00,$46,$46,$44,$46,$46,$46
     313.  00:4BA5  00 00 46 46 44 46 46 46 
     314.  00:4BAD                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     314.  00:4BAD  4B 46 4C 44 42 42 00 00 
     315.  00:4BB5                          ; attr 2
     316.  00:4BB5                          DB $00,$00,$00,$00,$42,$00,$00,$00
     316.  00:4BB5  00 00 00 00 42 00 00 00 
     317.  00:4BBD                          DB $46,$00,$46,$42,$00,$00,$00,$00
     317.  00:4BBD  46 00 46 42 00 00 00 00 
     318.  00:4BC5                          ; attr 0
     319.  00:4BC5                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     319.  00:4BC5  06 06 0B 0B 0B 0B 0B 0B 
     320.  00:4BCD                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     320.  00:4BCD  0C 0C 06 04 04 04 04 04 
     321.  00:4BD5                          ; attr 1
     322.  00:4BD5                          DB $00,$00,$46,$46,$44,$46,$46,$46
     322.  00:4BD5  00 00 46 46 44 46 46 46 
     323.  00:4BDD                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     323.  00:4BDD  4B 4B 4A 42 42 42 00 00 
     324.  00:4BE5                          ; attr 2
     325.  00:4BE5                          DB $00,$00,$00,$00,$42,$00,$00,$00
     325.  00:4BE5  00 00 00 00 42 00 00 00 
     326.  00:4BED                          DB $46,$46,$41,$00,$00,$00,$00,$00
     326.  00:4BED  46 46 41 00 00 00 00 00 
     327.  00:4BF5                                  
     328.  00:4BF5                      mapa:      
     329.  00:4BF5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     329.  00:4BF5  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     329.  00:4C05  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     330.  00:4C15                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     330.  00:4C15  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     330.  00:4C25  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     331.  00:4C35                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     331.  00:4C35  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     331.  00:4C45  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     332.  00:4C55                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     332.  00:4C55  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     332.  00:4C65  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     333.  00:4C75                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     333.  00:4C75  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     333.  00:4C85  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     334.  00:4C95                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     334.  00:4C95  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     334.  00:4CA5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     335.  00:4CB5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     335.  00:4CB5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     335.  00:4CC5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     336.  00:4CD5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     336.  00:4CD5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     336.  00:4CE5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     337.  00:4CF5                            
     338.  00:4CF5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     338.  00:4CF5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     338.  00:4D05  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     339.  00:4D15                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     339.  00:4D15  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     339.  00:4D25  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     340.  00:4D35                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     340.  00:4D35  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     340.  00:4D45  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     341.  00:4D55                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     341.  00:4D55  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     341.  00:4D65  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     342.  00:4D75                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     342.  00:4D75  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     342.  00:4D85  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     343.  00:4D95                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     343.  00:4D95  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     343.  00:4DA5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     344.  00:4DB5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     344.  00:4DB5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     344.  00:4DC5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     345.  00:4DD5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     345.  00:4DD5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     345.  00:4DE5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     346.  00:4DF5                      
     347.  00:4DF5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     347.  00:4DF5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     347.  00:4E05  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     348.  00:4E15                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     348.  00:4E15  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     348.  00:4E25  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     349.  00:4E35                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     349.  00:4E35  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     349.  00:4E45  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     350.  00:4E55                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     350.  00:4E55  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     350.  00:4E65  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     351.  00:4E75                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     351.  00:4E75  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     351.  00:4E85  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     352.  00:4E95                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     352.  00:4E95  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     352.  00:4EA5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     353.  00:4EB5                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     353.  00:4EB5  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     353.  00:4EC5  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     354.  00:4ED5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     354.  00:4ED5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     354.  00:4EE5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     355.  00:4EF5                            
     356.  00:4EF5                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     356.  00:4EF5  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     356.  00:4F05  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     357.  00:4F15                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     357.  00:4F15  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     357.  00:4F25  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     358.  00:4F35                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     358.  00:4F35  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     358.  00:4F45  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     359.  00:4F55                          
     360.  00:4F55                      
     361.  00:4F55                      SPRITE_COLOR_P1_LEFT:
     362.  00:4F55                          ; attr 0
     363.  00:4F55                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     363.  00:4F55  06 06 0B 0B 0B 0B 0B 0B 
     364.  00:4F5D                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     364.  00:4F5D  0C 0C 0B 0B 04 04 04 04 
     365.  00:4F65                          ; attr 1
     366.  00:4F65                          DB $00,$00,$46,$46,$44,$46,$46,$46
     366.  00:4F65  00 00 46 46 44 46 46 46 
     367.  00:4F6D                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     367.  00:4F6D  4B 46 4C 44 42 42 00 00 
     368.  00:4F75                          ; attr 2
     369.  00:4F75                          DB $00,$00,$00,$00,$42,$00,$00,$00
     369.  00:4F75  00 00 00 00 42 00 00 00 
     370.  00:4F7D                          DB $46,$00,$46,$42,$00,$00,$00,$00
     370.  00:4F7D  46 00 46 42 00 00 00 00 
     371.  00:4F85                          
     372.  00:4F85                          ;SPRITE_COLOR_P1_LEFT2:
     373.  00:4F85                          ; attr 0
     374.  00:4F85                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     374.  00:4F85  06 06 0B 0B 0B 0B 0B 0B 
     375.  00:4F8D                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     375.  00:4F8D  0C 0C 06 04 04 04 04 04 
     376.  00:4F95                          ; attr 1
     377.  00:4F95                          DB $00,$00,$46,$46,$44,$46,$46,$46
     377.  00:4F95  00 00 46 46 44 46 46 46 
     378.  00:4F9D                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     378.  00:4F9D  4B 4B 4A 42 42 42 00 00 
     379.  00:4FA5                          ; attr 2
     380.  00:4FA5                          DB $00,$00,$00,$00,$42,$00,$00,$00
     380.  00:4FA5  00 00 00 00 42 00 00 00 
     381.  00:4FAD                          DB $46,$46,$41,$00,$00,$00,$00,$00
     381.  00:4FAD  46 46 41 00 00 00 00 00 
     578   00:4FB5                      
     579   00:4FB5  (01)                 PAGE 1
     580   01:8000                      ; CODE O NO
     581   01:8000                      
     582   01:8000  (02)                 PAGE 2
     583   02:8000                      
     584   02:8000  (03)                 PAGE 3
     585   03:8000                      
     586   03:8000  (04)                 PAGE 4
     587   04:8000  (05)                 PAGE 5
     588   05:8000  (06)                 PAGE 6
     589   06:8000                      
     590   06:8000  (07)                 PAGE 7
     591   07:8000                      CEMENTER
     592   07:8000  (4000)               INCBIN "gfx\CEMENTER0.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     593   07:C000  (08)                 PAGE 8
     594   08:8000  (2A00)               INCBIN "gfx\CEMENTER0.SC5",#4007			; Cada página tiene 16K = 4000h 
     595   08:AA00  (09)                 PAGE 9
     596   09:8000                      GRAPHIC
     597   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     598   09:C000  (0A)                 PAGE 10
     599   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     600   0A:C000                      
     601   0A:C000  (0B)                 PAGE 11
     602   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     603   0B:C000                      
     604   0B:C000  (0C)                 PAGE 12
     605   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     606   0C:9400                      
     607   0C:9400  (0D)                 PAGE 13
     608   0D:8000                      
     609   0D:8000  (0E)                 PAGE 14
     610   0E:8000                      
     611   0E:8000  (0F)                 PAGE 15
     612   0F:C000                      ;---------------------------------------------------------
     613   0F:C000                      ; Variables
     614   0F:C000                      ;---------------------------------------------------------
     615   0F:C000                      	
     616   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     617   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     618   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     619   0F:C000                      ;ETC
     620   0F:C000                      ;
     621   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000  00                  JIFFY_TEMP DB $00
       2.  0F:C001  00                  CHAR_SPEED_X DB $00
       3.  0F:C002  00                  CHAR_SPEED_Y DB $00
       4.  0F:C003  00                  CHAR_SPEED_X_GHOST DB $00
       5.  0F:C004  00 (1)              CHAR_GHOST_DEAD DS 1
       6.  0F:C005  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
       7.  0F:C006  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
       8.  0F:C007  00 (1)              CHAR_NEW_DIR_MAIN DS 1
       9.  0F:C008  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      10.  0F:C009  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      11.  0F:C00A  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      12.  0F:C00B  00 (1)              CHAR_SPEED_SHOOT DS 1
      13.  0F:C00C                      SPRITE_ATTRS:
      14.  0F:C00C  00 (128)                DS 128
      15.  0F:C08C                      SLOTBIOS:
      16.  0F:C08C  00 (1)                  DS 1
      17.  0F:C08D                      SLOTGAME:
      18.  0F:C08D  00 (1)                  DS 1
      19.  0F:C08E                      SLOTRAM:
      20.  0F:C08E  00 (1)                  DS 1
      21.  0F:C08F                      SPRITE_PTR_REPLACE:
      22.  0F:C08F  00 (2)                  DS 2
      23.  0F:C091                      SPRITE_COLOR_REPLACE:
      24.  0F:C091  00 (2)                  DS 2
      25.  0F:C093                      SPRITE_COLOR_REPLACE2:
      26.  0F:C093  00 (2)                  DS 2
      27.  0F:C095                      BITMAP:
      28.  0F:C095  00 (2)                  DS 2
     622   0F:C097  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F   CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000041 X DISSCR
00:00000044 X ENASCR
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000004   MAX_CHAR_STEPS
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:00004010   check_spr_collision
00:0000401D   check_spr_collision.no_collision
00:00004020   get_bloque_en_X_Y
00:00004040   SetVdp_Write
00:0000405C   Set212Lines
00:00004068   ClearVram_MSX2
00:00004072   ClearVram_MSX2.loop_2
00:00004074   ClearVram_MSX2.loop_1
00:00004076   ClearVram_MSX2.loop
00:00004083   opening_screen
00:000040A6   load_screen
00:000040C8   _vdpsetvramwr
00:000040D9 X _vdpsetvramwr14
00:000040E2   GETSLOT
00:000040F9   EXIT
00:000040FB   SETPAGES32K
00:00004100   NOPRET
00:0000410E   SET_SCREEN5_MODE
00:00004130   DUMP_SPR_ALL
00:00004155   DUMP_SPR_ATTS
00:0000416F X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004170   DUMP_SPR_P1
00:0000418D X SETPAGES48K
00:000041A1 X SETGAMEPAGE0
00:000041A7 X RESTOREBIOS
00:000041AA   SETPAGE0
00:000041D8   SETPAGE0.SETPRIMARY
00:000041DC   START
00:00004212   INIT_CHARS_VARS
00:00004280   MAIN_LOOP
00:000042A2   MAIN_LOOP.CHANGE_DIR_RIGHT
00:000042AF   MAIN_LOOP.CHANGE_DIR_LEFT
00:000042B8   MAIN_LOOP.check_pattern
00:000042CF   MAIN_LOOP.change_pattern_L
00:000042D6   MAIN_LOOP.check_pattern_RIGHT
00:000042E5   MAIN_LOOP.change_pattern_R
00:000042E9   MAIN_LOOP.continue
00:000042FE   MAIN_LOOP.MOVE_SHOOT_RIGHT
00:00004306   MAIN_LOOP.MOVE_SHOOT_UP
00:0000430E   MAIN_LOOP.MOVE_SHOOT_LEFT
00:00004313   MAIN_LOOP.CHECK_SHOOT_DISTANCE
00:00004328   MAIN_LOOP.ADD_SHOOT_Y
00:00004332   MAIN_LOOP.CHECK_GHOST
00:0000434E   MAIN_LOOP.ADD_DISTANCE
00:0000435E   MAIN_LOOP.KILL_GHOST
00:00004367   MAIN_LOOP.HIDE_SHOOT
00:00004372   MAIN_LOOP.check_KB
00:00004398   SHOOT_MAIN_CHAR
00:000043D0   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000043E3   SHOOT_MAIN_CHAR.SHOOT_UP
00:000043EC   SHOOT_MAIN_CHAR.CONTINUE
00:000043F2   move_up
00:00004428   move_down
00:0000445F   move_right
00:000044AC   move_left
00:000044F9   CHECK_DIRECTION_MAIN
00:0000451B   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:00004530   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:00004545   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:0000455A   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000456F   CHECK_DIRECTION_MAIN.FINISH
00:00004586   UPDATE_MOVEMENT
00:000045D4   UPDATE_MOVEMENT.SET_SPR_1P_2
00:000045EB   UPDATE_MOVEMENT.NO_CHAR_PATTERN_CHANGE
00:000045F1   NO_MOVEMENT
00:000045F5   SPRITE_P1_UP
00:000046B5   SPRITE_P1_DOWN
00:00004775   SPRITE_P1_LEFT
00:00004835   SPRITE_P1_RIGHT
00:000048F5   SPRITE_PATTERN
00:00004A75   SPRITE_COLOR_TABLE
00:00004AD5   SPRITE_COLOR_P1_UP
00:00004B35   SPRITE_COLOR_P1_DOWN
00:00004B95   SPRITE_COLOR_P1_RIGHT
00:00004BF5   mapa
00:00004F55   SPRITE_COLOR_P1_LEFT
07:00008000   CEMENTER
09:00008000   GRAPHIC
0F:0000C000   JIFFY_TEMP
0F:0000C001   CHAR_SPEED_X
0F:0000C002   CHAR_SPEED_Y
0F:0000C003   CHAR_SPEED_X_GHOST
0F:0000C004   CHAR_GHOST_DEAD
0F:0000C005   CHAR_DIR_GHOST1
0F:0000C006   CHAR_DIR_MAIN
0F:0000C007   CHAR_NEW_DIR_MAIN
0F:0000C008   CHAR_MAIN_SHOOT
0F:0000C009   CHAR_MIN_STEP
0F:0000C00A   CHAR_DISTANCE_SHOOT
0F:0000C00B   CHAR_SPEED_SHOOT
0F:0000C00C   SPRITE_ATTRS
0F:0000C08C   SLOTBIOS
0F:0000C08D   SLOTGAME
0F:0000C08E X SLOTRAM
0F:0000C08F   SPRITE_PTR_REPLACE
0F:0000C091   SPRITE_COLOR_REPLACE
0F:0000C093   SPRITE_COLOR_REPLACE2
0F:0000C095   BITMAP


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00000FBB

   Address   Length Align   Label
   00004000    4021         check_spr_collision
   00004FB5       6         
   00004FBB   12357       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 00000097

   Address   Length Align   Label
   0000C000     151         JIFFY_TEMP
   0000C097   16233       <empty>
