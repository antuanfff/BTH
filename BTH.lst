Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.03.30 - 12:11:19]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:5950                      
       3   00:5950                      ;ROM ASCII16
       4   00:5950                      		defpage	0,0x4000, 0x4000
       5   00:5950                      		defpage	1,0x8000, 0x4000        
       6   00:5950                      		defpage	2..14 ;Here it is determined rom size        
       7   00:5950                              defpage	15,0xC000, 0x4000
       8   00:5950                      
       9   00:5950  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:5950  (00:6000)           _bank1	equ	6000h
      11   00:5950  (00:7000)           _bank2	equ	7000h
      12   00:5950  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:5956  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 E8 44 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010  (00:0041)           DISSCR                  equ #0041   ; Disable screen
      11.  00:4010  (00:0044)           ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
       2.  00:4010  (00:0007)           KB_RIGHT 				equ 7
       3.  00:4010  (00:0006)           KB_DOWN 				equ 6
       4.  00:4010  (00:0005)           KB_UP 					equ	5        
       5.  00:4010  (00:0004)           KB_LEFT 				equ	4
       6.  00:4010  (00:0003)           KB_DEL 					equ	3
       7.  00:4010  (00:0000)           KB_SPACE				equ	0
       8.  00:4010                      
       9.  00:4010  (00:0001)           MOV_SPEED				equ 1
      10.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      11.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      12.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      13.  00:4010  (00:0004)           MAX_CHAR_STEPS          equ 4       ; #steps pattern change MAIN CHAR
      14.  00:4010  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      15.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      16.  00:4010  (00:0098)           PORT_0                  equ 0x98
      17.  00:4010  (00:0099)           PORT_1                  equ 0x99
      18.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      19.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      20.  00:4010                      
      21.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan es entas direcciones valores globals del sistema
      22.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      23.  00:4010                      
      22   00:4010                          include "include\BTH_strings.asm"
       1.  00:4010  14 40 25 40         intro_strings: dw string01, string05
       2.  00:4014                      
       3.  00:4014                      string01: db 'CRISTO DE ACERO.',0
       3.  00:4014  43 52 49 53 54 4F 20 44 45 20 41 43 45 52 4F 2E 
       3.  00:4024  00 
       4.  00:4025                      string05: db 'COMO HEREDERO DE TUKARAM, TU DEBER ES PONERTE EN MARCHA, VENCER AL CAOS Y RESTABLECER EL ORDEN.',0
       4.  00:4025  43 4F 4D 4F 20 48 45 52 45 44 45 52 4F 20 44 45 
       4.  00:4035  20 54 55 4B 41 52 41 4D 2C 20 54 55 20 44 45 42 
       4.  00:4045  45 52 20 45 53 20 50 4F 4E 45 52 54 45 20 45 4E 
       4.  00:4055  20 4D 41 52 43 48 41 2C 20 56 45 4E 43 45 52 20 
       4.  00:4065  41 4C 20 43 41 4F 53 20 59 20 52 45 53 54 41 42 
       4.  00:4075  4C 45 43 45 52 20 45 4C 20 4F 52 44 45 4E 2E 00 
       5.  00:4085  31 32 33 34 00      mensaje: db '1234',0
      23   00:408A                      
      24   00:408A                      ; Funciones auxiliares
      25   00:408A                      	include "include\BTH_func.asm"
       1.  00:408A                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:408A                      ;Entrada:
       3.  00:408A                      ;   b - Y SPR1
       4.  00:408A                      ;   C - X SPR1
       5.  00:408A                      
       6.  00:408A                      ;   d - Y SPR2
       7.  00:408A                      ;   e - X SPR2
       8.  00:408A                      ;Salida:
       9.  00:408A                      ;   a - bloque
      10.  00:408A                      ;Modifica:
      11.  00:408A                      ;   a, hl, de
      12.  00:408A                      check_spr_collision:        
      13.  00:408A  78                          LD A,B          ; a = Y SPR1
      14.  00:408B  BA                          CP D
      15.  00:408C  C2 97 40                    JP NZ,.no_collision
      16.  00:408F                      
      17.  00:408F  79                          LD A,C          ; a = X SPR1
      18.  00:4090  BB                          CP E
      19.  00:4091  C2 97 40                    JP NZ,.no_collision
      20.  00:4094                      
      21.  00:4094  3E 01                       LD A,1
      22.  00:4096  C9                          RET
      23.  00:4097                      .no_collision
      24.  00:4097  3E 00                   LD A,0
      25.  00:4099  C9                      RET
      26.  00:409A                      
      27.  00:409A                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:409A                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:409A                      ;Entrada:
      30.  00:409A                      ;   d - X
      31.  00:409A                      ;   e - y
      32.  00:409A                      ;Salida:
      33.  00:409A                      ;   a - bloque
      34.  00:409A                      ;Modifica:
      35.  00:409A                      ;   a, hl, de
      36.  00:409A                      get_bloque_en_X_Y:
      37.  00:409A                              ;(y/8)*32+(x/8)
      38.  00:409A  7B                          ld a,e      ;a=y
      39.  00:409B  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:40A1  26 00                       ld h,0
      41.  00:40A3  6F                          ld l,a      ;hl=y/8
      42.  00:40A4  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:40A9                      
      44.  00:40A9  7A                          ld a,d      ;a=x
      45.  00:40AA  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:40B0  16 00                       ld d,0
      47.  00:40B2  5F                          ld e,a      ;de=x/8
      48.  00:40B3  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:40B4                      
      50.  00:40B4  ED 5B 9F C0                 ld de,(MAPA)
      51.  00:40B8  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:40B9                      
      53.  00:40B9  7E                          ld a,[hl]
      54.  00:40BA  C9                          ret
      55.  00:40BB                      
      56.  00:40BB                      ; SCREEN 8
      57.  00:40BB                      SetVdp_Write:
      58.  00:40BB                      
      59.  00:40BB                      	; transform address from 
      60.  00:40BB                      	;
      61.  00:40BB                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:40BB                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:40BB                      	;
      64.  00:40BB                      	; to
      65.  00:40BB                      	;
      66.  00:40BB                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:40BB                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:40BB  CB 04                   rlc     h
      69.  00:40BD  17                      rla
      70.  00:40BE  CB 04                   rlc     h
      71.  00:40C0  17                      rla
      72.  00:40C1  CB 3C                   srl     h
      73.  00:40C3  CB 3C                   srl     h
      74.  00:40C5                      
      75.  00:40C5  F3                      di
      76.  00:40C6                      	    ; write bits a14-16 of address to R#14
      77.  00:40C6  D3 99               	    out     (PORT_1), a
      78.  00:40C8  3E 8E               	    ld      a, 14 + 128
      79.  00:40CA  D3 99               	    out     (PORT_1), a
      80.  00:40CC                      
      81.  00:40CC                      	    ; write the other address bits to VDP PORT_1
      82.  00:40CC  7D                  	    ld      a, l
      83.  00:40CD  00                  	    nop
      84.  00:40CE  D3 99               	    out     (PORT_1), a
      85.  00:40D0  7C                  	    ld      a, h
      86.  00:40D1  F6 40               	    or      64
      87.  00:40D3  FB                      ei
      88.  00:40D4  D3 99                   out     (PORT_1),a
      89.  00:40D6  C9                      ret
      90.  00:40D7                      
      91.  00:40D7                      Set212Lines:
      92.  00:40D7                              ; set LN (bit 7) of R#9 to 1
      93.  00:40D7  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:40DA  F6 80                       or      10000000b
      95.  00:40DC  47                          ld      b, a
      96.  00:40DD  0E 09                       ld      c, 9            ; register #
      97.  00:40DF  CD 47 00                    call    WRTVDP
      98.  00:40E2  C9                          ret
      99.  00:40E3                      
     100.  00:40E3                      ClearVram_MSX2:
     101.  00:40E3  AF                          xor     a           ; set vram write base address
     102.  00:40E4  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:40E7  CD BB 40                    call    SetVdp_Write
     104.  00:40EA  AF                          xor		a
     105.  00:40EB                      
     106.  00:40EB                          ; TODO: 
     107.  00:40EB                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:40EB                          ;   disable screen/sprites (should I ??)
     109.  00:40EB                      
     110.  00:40EB                          ; clear all 128kb of VRAM
     111.  00:40EB  16 02               	ld		d, 2		; 2 repetitions
     112.  00:40ED                      .loop_2:
     113.  00:40ED  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:40EF                      .loop_1:
     115.  00:40EF  06 00               	ld		b, 0		; 256 repetitions
     116.  00:40F1                      .loop:
     117.  00:40F1  D3 98               	out		(PORT_0), a
     118.  00:40F3  10 FC               	djnz	.loop
     119.  00:40F5  0D                  	dec		c
     120.  00:40F6  C2 EF 40            	jp		nz, .loop_1
     121.  00:40F9  15                  	dec		d
     122.  00:40FA  C2 ED 40            	jp		nz, .loop_2
     123.  00:40FD                      
     124.  00:40FD  C9                  	ret
     125.  00:40FE                      
     126.  00:40FE                      ; MEGAROM
     127.  00:40FE                      
     128.  00:40FE                      opening_screen		
     129.  00:40FE  0E 00               		ld		c,0
     130.  00:4100  11 00 00            		ld		de,0
     131.  00:4103  CD 43 41            		call	_vdpsetvramwr
     132.  00:4106  1E 04               		ld	e,4
     133.  00:4108  3E 09               		ld	a, :GRAPHIC
     134.  00:410A  57                  		ld	d,a
     135.  00:410B  32 00 70            2:		ld	(_bank2),a
     136.  00:410E  21 00 80            		ld	hl,GRAPHIC
     137.  00:4111  01 98 00            		ld	bc,0x98
     138.  00:4114  3E 40               		ld	a,32*2
     139.  00:4116  ED B3               1:		otir
     140.  00:4118  3D                  		dec	a
     141.  00:4119  20 FB               		jr	nz,1b
     142.  00:411B  14                  		inc	d
     143.  00:411C  7A                  		ld	a,d
     144.  00:411D  1D                  		dec	e
     145.  00:411E  20 EB               		jr	nz,2b
     146.  00:4120  C9                  		ret 
     147.  00:4121                      
     148.  00:4121                      load_screen
     149.  00:4121  0E 00               		ld		c,0
     150.  00:4123  11 00 00            		ld		de,0
     151.  00:4126  CD 43 41            		call	_vdpsetvramwr
     152.  00:4129  1E 02               		ld	e,2					; #pages
     153.  00:412B  78                  		ld	a, b			; 1st page bitmap
     154.  00:412C  57                  		ld	d,a
     155.  00:412D  32 00 70            2:		ld	(_bank2),a
     156.  00:4130  2A A1 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:4133  01 98 00            		ld	bc,0x98
     158.  00:4136  3E 40               		ld	a,64
     159.  00:4138  ED B3               1:		otir
     160.  00:413A  3D                  		dec	a
     161.  00:413B  20 FB               		jr	nz,1b
     162.  00:413D  14                  		inc	d
     163.  00:413E  7A                  		ld	a,d
     164.  00:413F  1D                  		dec	e
     165.  00:4140  20 EB               		jr	nz,2b
     166.  00:4142  C9                  		ret 
     167.  00:4143                      
     168.  00:4143                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:4143                      
     170.  00:4143                      _vdpsetvramwr:
     171.  00:4143  79                  	ld a,c
     172.  00:4144  CB 02               	rlc d
     173.  00:4146  17                  	rla
     174.  00:4147  CB 02               	rlc d
     175.  00:4149  17                  	rla
     176.  00:414A  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:414C                      
     178.  00:414C  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:414E  3E 8E               	ld a,14+128
     180.  00:4150  D3 99               	out (0x99),a
     181.  00:4152  CB 3A               	srl d ; secondo shift.     
     182.  00:4154                      _vdpsetvramwr14
     183.  00:4154  7B                  	ld a,e ;set bits 0-7
     184.  00:4155  D3 99               	out (0x99),a
     185.  00:4157  7A                  	ld a,d ;set bits 8-13
     186.  00:4158  F6 40               	or 0x40 ; + write access
     187.  00:415A  D3 99               	out (0x99),a
     188.  00:415C  C9                  	ret
     189.  00:415D                      
     190.  00:415D                      
     191.  00:415D                      
     192.  00:415D                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:415D                      		; -----------------------------------------------------
     194.  00:415D                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:415D                      		; -----------------------------------------------------
     196.  00:415D                      
     197.  00:415D                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:415D                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:415D                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:415D                      
     201.  00:415D                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:415D                      		; NINGUNA
     203.  00:415D                      
     204.  00:415D                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:415D                      		; --- Entrada: a = SLOT                                           ---
     206.  00:415D                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:415D                      		; --- AUTOR: Konamiman                                            ---
     208.  00:415D  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:415F  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:4160  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:4162  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:4165  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:4166  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:4167  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:4169  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:416B                      		; --- El slot esta expandido ---
     217.  00:416B  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:416C  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:416D  23                  		inc	hl				; Incrementamos hl una...
     220.  00:416E  23                  		inc	hl				; ...dos...
     221.  00:416F  23                  		inc	hl				; ...tres...
     222.  00:4170  23                  		inc	hl				; ...cuatro veces
     223.  00:4171  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:4172  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:4174  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:4175  C9                  		ret					; Volvemos
     227.  00:4176                      
     228.  00:4176                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:4176  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:4178  32 7B 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:417B  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:417C                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:417C  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:417F  0F                  		rrca					; Rotamos a la derecha...
     235.  00:4180  0F                  		rrca					; ...dos veces
     236.  00:4181  CD 5D 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:4184  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:4186  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:4189                      
     240.  00:4189                      SET_SCREEN5_MODE:
     241.  00:4189                           ;Cambiamos el modo de pantalla
     242.  00:4189                          ; BASIC: COLOR 15,1,1
     243.  00:4189                          ; Establecer los colores
     244.  00:4189  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:418C  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:418E  23                  	inc hl ; FORCLR+1
     247.  00:418F  36 01               	ld [hl],1 ; Color de fondo 1=negro
     248.  00:4191  23                  	inc hl ; FORCLR+2
     249.  00:4192  36 01               	ld [hl],1 ; Color del borde 1=negro
     250.  00:4194                      
     251.  00:4194  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     252.  00:4196  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     253.  00:4199                      ;
     254.  00:4199  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     255.  00:419C                          ;En or 0+0=0, 0+1=1, 1+1=1
     256.  00:419C                          ;En and 0+0=0, 0+1=0, 1+1=1
     257.  00:419C                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     258.  00:419C                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     259.  00:419C                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     260.  00:419C  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     261.  00:419E                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     262.  00:419E  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:41A0                      
     264.  00:41A0  47                      ld b,a ;carga en b el valor de a
     265.  00:41A1  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     266.  00:41A3  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     267.  00:41A6  AF                      xor a ; ld a,0
     268.  00:41A7  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     269.  00:41AA  C9                      ret
     270.  00:41AB                      
     271.  00:41AB                      DUMP_SPR_ALL:
     272.  00:41AB                      
     273.  00:41AB                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     274.  00:41AB                      
     275.  00:41AB  21 00 4B                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     276.  00:41AE  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     277.  00:41B1  01 60 02                ld bc, 8*4*19; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     278.  00:41B4  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     279.  00:41B7                      
     280.  00:41B7                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     281.  00:41B7                      
     282.  00:41B7  21 16 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     283.  00:41BA  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     284.  00:41BD  01 80 00                ld bc,128; 4 x #Sprites
     285.  00:41C0  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     286.  00:41C3                      
     287.  00:41C3                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     288.  00:41C3                      
     289.  00:41C3  21 60 4D                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     290.  00:41C6  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     291.  00:41C9  01 30 01                ld bc,16*19; 16 x #Sprites
     292.  00:41CC  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     293.  00:41CF  C9                      ret
     294.  00:41D0                      	
     295.  00:41D0                      DUMP_SPR_ATTS:
     296.  00:41D0                      
     297.  00:41D0                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     298.  00:41D0                      
     299.  00:41D0  21 16 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     300.  00:41D3  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     301.  00:41D6  01 1C 00                ld bc,28		; 6 x #Sprites
     302.  00:41D9  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     303.  00:41DC                      
     304.  00:41DC                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     305.  00:41DC                      ;	JP Z,.DUMP_SPR_ATTS_END
     306.  00:41DC  2A 9D C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     307.  00:41DF  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     308.  00:41E2  C5                      PUSH BC
     309.  00:41E3  01 30 00            	ld bc,16*3; 16 x #Sprites
     310.  00:41E6  CD 5C 00                call  LDIRVM 
     311.  00:41E9  C1                  	POP BC
     312.  00:41EA                      
     313.  00:41EA                      .DUMP_SPR_ATTS_END:
     314.  00:41EA  C9                      ret
     315.  00:41EB                      
     316.  00:41EB                      DUMP_SPR_P1:    
     317.  00:41EB                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:41EB                      
     319.  00:41EB  2A 99 C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:41EE  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:41F1  C5                      PUSH BC
     322.  00:41F2  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     323.  00:41F5  CD 5C 00                call  LDIRVM 
     324.  00:41F8  C1                  	POP BC
     325.  00:41F9                      
     326.  00:41F9                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     327.  00:41F9                      
     328.  00:41F9  2A 9B C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     329.  00:41FC  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     330.  00:41FF  C5                      PUSH BC
     331.  00:4200  01 30 00            	ld bc,16*3; 16 x #Sprites
     332.  00:4203  CD 5C 00                call  LDIRVM 
     333.  00:4206  C1                  	POP BC
     334.  00:4207                      	
     335.  00:4207                      
     336.  00:4207                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     337.  00:4207                      ;    xor a
     338.  00:4207                      ;	di			; set VRAM address to 1800h
     339.  00:4207                      ;	out (99h),a		; lower byte 00
     340.  00:4207                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     341.  00:4207                      ;	ei
     342.  00:4207                      ;	out (99h),a		; note that this is protected by the ei instruction
     343.  00:4207                      ;   push BC
     344.  00:4207                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     345.  00:4207                      ;	ld hl,(SPRITE_PTR_REPLACE)
     346.  00:4207                      
     347.  00:4207                      ;.loop1:
     348.  00:4207                      ;	outi			; send the data (HL) to port 98h 
     349.  00:4207                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     350.  00:4207                      ;   POP BC
     351.  00:4207                      
     352.  00:4207                          ; Replace 2 entries in sprite color table
     353.  00:4207                      ;    xor a
     354.  00:4207                      ;	di			; set VRAM address to 1800h
     355.  00:4207                      ;	out (99h),a		; lower byte 00
     356.  00:4207                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     357.  00:4207                      ;	ei
     358.  00:4207                      ;	out (99h),a		; note that this is protected by the ei instruction
     359.  00:4207                       ;   push BC
     360.  00:4207                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     361.  00:4207                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     362.  00:4207                      	
     363.  00:4207                      ;.loop2:
     364.  00:4207                      ;	outi			; send the data (HL) to port 98h 
     365.  00:4207                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     366.  00:4207                       ;   POP BC
     367.  00:4207                      
     368.  00:4207  C9                      ret
     369.  00:4208                      
      26   00:4208                          include "include\BTH_animate.asm"
       1.  00:4208                      ; Movimiento P1
       2.  00:4208                      move_up:
       3.  00:4208  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:4209                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:4209  AF                      XOR A
       6.  00:420A  32 11 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:420D  CD 13 43                CALL CHECK_DIRECTION_MAIN
       8.  00:4210                      
       9.  00:4210  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:4213  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:4215  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:4216  DD 7E 01                ld a,(ix+1)
      13.  00:4219  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:421A  CD 9A 40                call get_bloque_en_X_Y
      15.  00:421D  FE 01                   cp 1
      16.  00:421F  CA 0B 44                jp z,NO_MOVEMENT
      17.  00:4222                      
      18.  00:4222  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:4225  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:4227  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:4228  DD 7E 01                ld a,(ix+1)
      22.  00:422B  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:422D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:422E  CD 9A 40                call get_bloque_en_X_Y
      25.  00:4231  FE 01                   cp 1
      26.  00:4233  CA 0B 44                jp z,NO_MOVEMENT
      27.  00:4236                            
      28.  00:4236  3E FF               	LD A, -MOV_SPEED
      29.  00:4238  32 08 C0            	LD (CHAR_SPEED_Y), A
      30.  00:423B  CD A0 43                call UPDATE_MOVEMENT   
      31.  00:423E                          ;JP no_arrows
      32.  00:423E  C9                      ret
      33.  00:423F                      
      34.  00:423F                      move_down:
      35.  00:423F  A9                      XOR C               ; Reseteamos la entrada del teclado
      36.  00:4240                          ; Actualizamos la última tecla de dirección pulsada
      37.  00:4240  3E 01                   LD A,$01
      38.  00:4242  32 11 C0                LD (CHAR_NEW_DIR_MAIN),A
      39.  00:4245  CD 13 43                CALL CHECK_DIRECTION_MAIN
      40.  00:4248                      
      41.  00:4248  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      42.  00:424B  C6 11                   add 17 ; incrementamos en 15+2 el valor
      43.  00:424D  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      44.  00:424E  DD 7E 01                ld a,(ix+1)
      45.  00:4251  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      46.  00:4252  CD 9A 40                call get_bloque_en_X_Y
      47.  00:4255  FE 01                   cp 1
      48.  00:4257  CA 0B 44                jp z,NO_MOVEMENT
      49.  00:425A                      
      50.  00:425A  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      51.  00:425D  C6 11                   add 17 ; incrementamos en 15 el valor
      52.  00:425F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      53.  00:4260  DD 7E 01                ld a,(ix+1)
      54.  00:4263  C6 0A                   add 10 ; miramos la segunda tile 8+2
      55.  00:4265  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      56.  00:4266  CD 9A 40                call get_bloque_en_X_Y
      57.  00:4269  FE 01                   cp 1
      58.  00:426B  CA 0B 44                jp z,NO_MOVEMENT
      59.  00:426E                          
      60.  00:426E  3E 01                   LD A, MOV_SPEED
      61.  00:4270  32 08 C0            	LD (CHAR_SPEED_Y), A
      62.  00:4273  CD A0 43                call UPDATE_MOVEMENT    
      63.  00:4276                          ;JP no_arrows
      64.  00:4276  C9                      ret
      65.  00:4277                      
      66.  00:4277                      move_right:
      67.  00:4277  A9                      XOR C               ; Reseteamos la entrada del teclado
      68.  00:4278                          ; Actualizamos la última tecla de dirección pulsada
      69.  00:4278  3E 03                   LD A,$03
      70.  00:427A  32 11 C0                LD (CHAR_NEW_DIR_MAIN),A
      71.  00:427D  CD 13 43                CALL CHECK_DIRECTION_MAIN
      72.  00:4280                      
      73.  00:4280  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      74.  00:4283  C6 10                   add 16; incrementamos en 3 el valor
      75.  00:4285  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      76.  00:4286  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      77.  00:4289  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      78.  00:428B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      79.  00:428C  CD 9A 40                call get_bloque_en_X_Y
      80.  00:428F  FE 01                   cp 1
      81.  00:4291  CA 0B 44                jp z,NO_MOVEMENT
      82.  00:4294                      
      83.  00:4294                          ;Miramos el tile del byte inferior del sprite - centro personaje
      84.  00:4294  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      85.  00:4297  C6 10                   add 16; incrementamos en 2 tiles el valor
      86.  00:4299  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      87.  00:429A  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      88.  00:429D  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      89.  00:429F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      90.  00:42A0  CD 9A 40                call get_bloque_en_X_Y
      91.  00:42A3  FE 01                   cp 1
      92.  00:42A5  CA 0B 44                jp z,NO_MOVEMENT
      93.  00:42A8                      
      94.  00:42A8                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
      95.  00:42A8  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      96.  00:42AB  C6 10                   add 16; incrementamos en 2 tiles el valor
      97.  00:42AD  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      98.  00:42AE  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      99.  00:42B1  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     100.  00:42B3  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     101.  00:42B4  CD 9A 40                call get_bloque_en_X_Y
     102.  00:42B7  FE 01                   cp 1
     103.  00:42B9  CA 0B 44                jp z,NO_MOVEMENT    
     104.  00:42BC                          
     105.  00:42BC  3E 01                   LD A, MOV_SPEED
     106.  00:42BE  32 07 C0            	LD (CHAR_SPEED_X), A
     107.  00:42C1  CD A0 43                call UPDATE_MOVEMENT      
     108.  00:42C4                          ;JP no_arrows
     109.  00:42C4  C9                      ret
     110.  00:42C5                      
     111.  00:42C5                      move_left:
     112.  00:42C5  A9                      XOR C               ; Reseteamos la entrada del teclado
     113.  00:42C6                          ; Actualizamos la última tecla de dirección pulsada
     114.  00:42C6  3E 02                   LD A,$02
     115.  00:42C8  32 11 C0                LD (CHAR_NEW_DIR_MAIN),A
     116.  00:42CB  CD 13 43                CALL CHECK_DIRECTION_MAIN
     117.  00:42CE  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     118.  00:42D1  D6 02                   sub 2 ; decrementamos en 2 el valor
     119.  00:42D3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     120.  00:42D4  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     121.  00:42D7  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     122.  00:42D9  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     123.  00:42DA  CD 9A 40                call get_bloque_en_X_Y
     124.  00:42DD  FE 01                   cp 1
     125.  00:42DF  CA 0B 44                jp z,NO_MOVEMENT
     126.  00:42E2                      
     127.  00:42E2                          ;Miramos el tile inferior parte central del personaje
     128.  00:42E2  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     129.  00:42E5  D6 02                   sub 2 ; decrementamos en 2 el valor
     130.  00:42E7  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     131.  00:42E8  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     132.  00:42EB  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     133.  00:42ED  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     134.  00:42EE  CD 9A 40                call get_bloque_en_X_Y
     135.  00:42F1  FE 01                   cp 1
     136.  00:42F3  CA 0B 44                jp z,NO_MOVEMENT
     137.  00:42F6                      
     138.  00:42F6                          ;Miramos el tile inferior esquina inferior izquierda
     139.  00:42F6  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     140.  00:42F9  D6 02                   sub 2 ; decrementamos en 2 el valor
     141.  00:42FB  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     142.  00:42FC  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     143.  00:42FF  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     144.  00:4301  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     145.  00:4302  CD 9A 40                call get_bloque_en_X_Y
     146.  00:4305  FE 01                   cp 1
     147.  00:4307  CA 0B 44                jp z,NO_MOVEMENT
     148.  00:430A                      
     149.  00:430A  3E FF                   LD A, -MOV_SPEED
     150.  00:430C  32 07 C0            	LD (CHAR_SPEED_X), A
     151.  00:430F  CD A0 43                call UPDATE_MOVEMENT     
     152.  00:4312                          ;JP no_arrows
     153.  00:4312  C9                      ret
     154.  00:4313                      
     155.  00:4313                      CHECK_DIRECTION_MAIN:
     156.  00:4313  3A 10 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     157.  00:4316  2A 11 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     158.  00:4319  BD                  	CP L		            	                ;Son iguales?
     159.  00:431A  C8                  	RET Z                           			;Si son iguales, vuelvo
     160.  00:431B  3A 11 C0                LD A,(CHAR_NEW_DIR_MAIN)
     161.  00:431E  FE 01                   CP $01
     162.  00:4320  CA 35 43                JP Z,.SET_DIR_DOWN
     163.  00:4323  FE 00                   CP $00
     164.  00:4325  CA 4A 43                JP Z,.SET_DIR_UP
     165.  00:4328  FE 03                   CP $03
     166.  00:432A  CA 74 43                JP Z,.SET_DIR_RIGHT
     167.  00:432D  FE 02                   CP $02
     168.  00:432F  CA 5F 43                JP Z,.SET_DIR_LEFT
     169.  00:4332  C3 89 43                JP .FINISH
     170.  00:4335                          
     171.  00:4335                      .SET_DIR_DOWN:    
     172.  00:4335  21 C0 48                ld hl, SPRITE_P1_DOWN
     173.  00:4338  22 99 C0                ld (SPRITE_PTR_REPLACE), HL
     174.  00:433B                          
     175.  00:433B  21 50 4E                ld hl, SPRITE_COLOR_P1_DOWN
     176.  00:433E  22 9B C0                ld (SPRITE_COLOR_REPLACE), HL    
     177.  00:4341  22 9D C0                ld (SPRITE_COLOR_REPLACE2), HL
     178.  00:4344  CD EB 41                CALL DUMP_SPR_P1    
     179.  00:4347                      
     180.  00:4347  C3 89 43                JP .FINISH
     181.  00:434A                      
     182.  00:434A                      .SET_DIR_UP:
     183.  00:434A  21 00 48                ld hl, SPRITE_P1_UP
     184.  00:434D  22 99 C0                ld (SPRITE_PTR_REPLACE), HL
     185.  00:4350                          
     186.  00:4350  21 F0 4D                ld hl, SPRITE_COLOR_P1_UP
     187.  00:4353  22 9B C0                ld (SPRITE_COLOR_REPLACE), HL
     188.  00:4356  22 9D C0                ld (SPRITE_COLOR_REPLACE2), HL
     189.  00:4359  CD EB 41                CALL DUMP_SPR_P1
     190.  00:435C  C3 89 43                JP .FINISH
     191.  00:435F                      
     192.  00:435F                      .SET_DIR_LEFT:    
     193.  00:435F  21 80 49                ld hl, SPRITE_P1_LEFT
     194.  00:4362  22 99 C0                ld (SPRITE_PTR_REPLACE), HL
     195.  00:4365                          
     196.  00:4365  21 F0 58                ld hl, SPRITE_COLOR_P1_LEFT
     197.  00:4368  22 9B C0                ld (SPRITE_COLOR_REPLACE), HL
     198.  00:436B  22 9D C0                ld (SPRITE_COLOR_REPLACE2), HL
     199.  00:436E  CD EB 41                CALL DUMP_SPR_P1   
     200.  00:4371  C3 89 43                JP .FINISH
     201.  00:4374                      
     202.  00:4374                      .SET_DIR_RIGHT:
     203.  00:4374  21 40 4A                ld hl, SPRITE_P1_RIGHT
     204.  00:4377  22 99 C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:437A                          
     206.  00:437A  21 B0 4E                ld hl, SPRITE_COLOR_P1_RIGHT
     207.  00:437D  22 9B C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:4380  22 9D C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:4383                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     210.  00:4383  CD EB 41                CALL DUMP_SPR_P1
     211.  00:4386  C3 89 43                JP .FINISH
     212.  00:4389                      
     213.  00:4389                      .FINISH:
     214.  00:4389  AF                      XOR A   ; reseteamos el contador de pasos
     215.  00:438A  32 13 C0                LD (CHAR_MIN_STEP), A   
     216.  00:438D  3A 11 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     217.  00:4390  32 10 C0                LD (CHAR_DIR_MAIN),A    
     218.  00:4393                      
     219.  00:4393                          ; ponemos el primer frame del sprite
     220.  00:4393  DD 36 02 00             LD (ix+2), $00
     221.  00:4397  DD 36 06 04             LD (ix+6), $04
     222.  00:439B  DD 36 0A 08             LD (ix+10), $08
     223.  00:439F                          ;CALL DUMP_SPR_ATTS
     224.  00:439F  C9                      RET
     225.  00:43A0                      
     226.  00:43A0                      UPDATE_MOVEMENT:
     227.  00:43A0  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     228.  00:43A3  2A 08 C0            	LD HL, (CHAR_SPEED_Y)
     229.  00:43A6  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     230.  00:43A7                          
     231.  00:43A7  DD 77 00            	LD (ix), A
     232.  00:43AA  DD 77 04                LD (ix+4), A
     233.  00:43AD  DD 77 08                LD (ix+8), A
     234.  00:43B0                      	
     235.  00:43B0  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     236.  00:43B3  2A 07 C0            	LD HL, (CHAR_SPEED_X)
     237.  00:43B6  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     238.  00:43B7                          
     239.  00:43B7  DD 77 01            	LD (ix+1), A
     240.  00:43BA  DD 77 05                LD (ix+5), A
     241.  00:43BD  DD 77 09                LD (ix+9), A	
     242.  00:43C0                      
     243.  00:43C0  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     244.  00:43C1  32 07 C0                LD (CHAR_SPEED_X),A
     245.  00:43C4  32 08 C0                LD (CHAR_SPEED_Y),A	
     246.  00:43C7                      
     247.  00:43C7                          ; Animación/pasos de personaje	
     248.  00:43C7  3A 13 C0                LD A, (CHAR_MIN_STEP)
     249.  00:43CA  FE 04                   CP MAX_CHAR_STEPS
     250.  00:43CC  C2 05 44                JP NZ,.NO_CHAR_PATTERN_CHANGE
     251.  00:43CF                          
     252.  00:43CF  AF                      XOR A
     253.  00:43D0  32 13 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     254.  00:43D3  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     255.  00:43D6  FE 00                   CP $00
     256.  00:43D8  CA EE 43                JP Z,.SET_SPR_1P_2
     257.  00:43DB  DD 36 02 00             LD (ix+2), $00
     258.  00:43DF  DD 36 06 04             LD (ix+6), $04
     259.  00:43E3  DD 36 0A 08             LD (ix+10), $08
     260.  00:43E7  2A 9B C0                ld hl, (SPRITE_COLOR_REPLACE)
     261.  00:43EA  22 9D C0                ld (SPRITE_COLOR_REPLACE2), HL
     262.  00:43ED  C9                      ret
     263.  00:43EE                      
     264.  00:43EE                      .SET_SPR_1P_2:
     265.  00:43EE  DD 36 02 0C             LD (ix+2), $0C
     266.  00:43F2  DD 36 06 10             LD (ix+6), $10
     267.  00:43F6  DD 36 0A 14             LD (ix+10), $14
     268.  00:43FA                              
     269.  00:43FA  2A 9B C0                ld HL, (SPRITE_COLOR_REPLACE)
     270.  00:43FD  11 30 00                ld DE,48
     271.  00:4400  19                      ADD HL, DE
     272.  00:4401  22 9D C0                ld (SPRITE_COLOR_REPLACE2), HL
     273.  00:4404                          ;ld a, 0
     274.  00:4404  C9                  	ret
     275.  00:4405                      
     276.  00:4405                      .NO_CHAR_PATTERN_CHANGE    
     277.  00:4405  C6 01                   ADD 1
     278.  00:4407  32 13 C0                LD (CHAR_MIN_STEP), A    
     279.  00:440A  C9                      ret
     280.  00:440B                      
     281.  00:440B                      NO_MOVEMENT:    
     282.  00:440B  C9                      ret
     283.  00:440C                      
     284.  00:440C                      MOVE_SHOOT:
     285.  00:440C  3A 12 C0                LD A,(CHAR_MAIN_SHOOT)    
     286.  00:440F  FE 01                   CP $01
     287.  00:4411  CA 3C 44                JP Z,.MOVE_SHOOT_LEFT
     288.  00:4414  FE 02                   CP $02
     289.  00:4416  CA 24 44                JP Z,.MOVE_SHOOT_RIGHT
     290.  00:4419  FE 03                   CP $03
     291.  00:441B  CA 2C 44                JP Z,.MOVE_SHOOT_UP    
     292.  00:441E  FE 04                   CP $04
     293.  00:4420  CA 34 44                JP Z,.MOVE_SHOOT_DOWN
     294.  00:4423  C9                      RET
     295.  00:4424                      
     296.  00:4424                      .MOVE_SHOOT_RIGHT:        
     297.  00:4424  3E 03                   LD A, MOV_SPEED_SHOOT
     298.  00:4426  32 15 C0            	LD (CHAR_SPEED_SHOOT), A    
     299.  00:4429  C3 41 44                JP .CHECK_SHOOT_DISTANCE
     300.  00:442C                      
     301.  00:442C                      .MOVE_SHOOT_UP:        
     302.  00:442C  3E FD                   LD A, -MOV_SPEED_SHOOT
     303.  00:442E  32 15 C0            	LD (CHAR_SPEED_SHOOT), A    
     304.  00:4431  C3 41 44                JP .CHECK_SHOOT_DISTANCE
     305.  00:4434                      
     306.  00:4434                      .MOVE_SHOOT_DOWN:
     307.  00:4434  3E 03                   LD A, MOV_SPEED_SHOOT
     308.  00:4436  32 15 C0            	LD (CHAR_SPEED_SHOOT), A    
     309.  00:4439  C3 41 44                JP .CHECK_SHOOT_DISTANCE
     310.  00:443C                      
     311.  00:443C                      .MOVE_SHOOT_LEFT:    
     312.  00:443C  3E FD                   LD A, -MOV_SPEED_SHOOT
     313.  00:443E  32 15 C0            	LD (CHAR_SPEED_SHOOT), A    
     314.  00:4441                      
     315.  00:4441                      .CHECK_SHOOT_DISTANCE:
     316.  00:4441                          ; Miramos si va a izq o der
     317.  00:4441  3A 12 C0                LD A,(CHAR_MAIN_SHOOT)    
     318.  00:4444  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     319.  00:4446  D2 56 44                JP NC,.ADD_SHOOT_Y
     320.  00:4449                          ; Movemos el disparo
     321.  00:4449  DD 7E 11                LD A, (ix+17)          ;cargamos la X del disparo
     322.  00:444C  2A 15 C0            	LD HL, (CHAR_SPEED_SHOOT)
     323.  00:444F  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     324.  00:4450  DD 77 11                LD (ix+17), A
     325.  00:4453  C3 60 44                JP .ADD_DISTANCE
     326.  00:4456                      .ADD_SHOOT_Y
     327.  00:4456                          ; Movemos el disparo
     328.  00:4456  DD 7E 10                LD A, (ix+16)          ;cargamos la X del disparo
     329.  00:4459  2A 15 C0            	LD HL, (CHAR_SPEED_SHOOT)
     330.  00:445C  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     331.  00:445D  DD 77 10                LD (ix+16), A
     332.  00:4460                      
     333.  00:4460                      .ADD_DISTANCE:
     334.  00:4460  3A 14 C0                LD A,(CHAR_DISTANCE_SHOOT)
     335.  00:4463  C6 03                   ADD MOV_SPEED_SHOOT
     336.  00:4465  32 14 C0                LD (CHAR_DISTANCE_SHOOT),A    
     337.  00:4468  FE 30                   CP MAX_DISTANCE_SHOOT
     338.  00:446A  C0                      RET NZ
     339.  00:446B                      
     340.  00:446B                      .HIDE_SHOOT:
     341.  00:446B  DD 36 10 D9             LD (ix+16),217          ; Y = 217 para ocultar el Sprite
     342.  00:446F  AF                      XOR A
     343.  00:4470  32 12 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     344.  00:4473  32 14 C0                LD (CHAR_DISTANCE_SHOOT),A
     345.  00:4476  C9                      RET
     346.  00:4477                      
      27   00:4477                      	include "include\VDP.asm"
       1.  00:4477                      print_string:       
       2.  00:4477                      	
       3.  00:4477  21 14 40            	LD HL, string01
       4.  00:447A  11 28 5D            	LD DE, 5D28H	; Aquí irá el offset de la memoria del VDP en base a X, Y
       5.  00:447D                      .loop_str:
       6.  00:447D  7E                  	LD A, (HL)
       7.  00:447E  A7                  	AND A
       8.  00:447F  C8                  	RET Z
       9.  00:4480                      
      10.  00:4480  D6 20               	SUB 32
      11.  00:4482  CB 07               	RLC A
      12.  00:4484  CB 07               	RLC A	
      13.  00:4486                          
      14.  00:4486  06 00               	LD B, 0
      15.  00:4488  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
      16.  00:4489                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
      17.  00:4489                      				; Si #ASCII > 63 -> 2ª línea
      18.  00:4489                      				; segunda línea - ((#ASCII -32)*4)+1024
      19.  00:4489                      	
      20.  00:4489  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
      21.  00:448A  E5                  	PUSH HL
      22.  00:448B  21 00 80            	LD HL, FONT
      23.  00:448E  09                  	ADD HL, BC
      24.  00:448F  FE 40               	CP 64
      25.  00:4491  DA 98 44            	JP C, .first_line_font
      26.  00:4494  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
      27.  00:4497  09                  	ADD HL, BC
      28.  00:4498                      
      29.  00:4498                      .first_line_font:
      30.  00:4498  22 A1 C0                LD (BITMAP), HL
      31.  00:449B                          
      32.  00:449B  06 06               	LD B, :FONT
      33.  00:449D  D5                  	PUSH DE
      34.  00:449E  CD B1 44                call print_char
      35.  00:44A1  D1                      POP DE
      36.  00:44A2                      	
      37.  00:44A2  FD 21 04 00         	LD IY, 4
      38.  00:44A6  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
      39.  00:44A8  FD 54               	LD D, IYH
      40.  00:44AA  FD 5D               	LD E, IYL
      41.  00:44AC                      	
      42.  00:44AC                      
      43.  00:44AC  E1                  	POP HL
      44.  00:44AD  23                  	INC HL
      45.  00:44AE  18 CD               	JR .loop_str
      46.  00:44B0                          
      47.  00:44B0  C9                      RET
      48.  00:44B1                      
      49.  00:44B1                      print_char
      50.  00:44B1  AF                  		XOR A		
      51.  00:44B2  0E 00               		ld		c,0
      52.  00:44B4                      		;ld		de,0
      53.  00:44B4  ED 53 00 C0         		LD (CHR_ACR), DE
      54.  00:44B8  CD 43 41                	call	_vdpsetvramwr		
      55.  00:44BB  78                  		ld	a, b			; 1st page bitmap
      56.  00:44BC                      		;ld	d,a
      57.  00:44BC  32 00 70            		ld	(_bank2),a
      58.  00:44BF  2A A1 C0            		ld	hl,(BITMAP)		; Bitmap address
      59.  00:44C2  3E 08               		ld	a, 8			; #lineas del caracter
      60.  00:44C4  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
      61.  00:44C7  ED B3                       otir
      62.  00:44C9  01 7C 00                    LD BC, 124
      63.  00:44CC  09                          ADD HL, BC
      64.  00:44CD  F5                  		PUSH AF
      65.  00:44CE                      
      66.  00:44CE  FD 2A 00 C0         		LD IY, (CHR_ACR)
      67.  00:44D2  01 80 00            		LD BC, 128
      68.  00:44D5  FD 09               		ADD IY, BC
      69.  00:44D7  FD 54               		LD D, IYH
      70.  00:44D9  FD 5D               		LD E, IYL
      71.  00:44DB  A9                  		XOR C
      72.  00:44DC  ED 53 00 C0         		LD (CHR_ACR), DE
      73.  00:44E0  CD 43 41            		call	_vdpsetvramwr		
      74.  00:44E3  F1                  		POP AF		
      75.  00:44E4                      
      76.  00:44E4  3D                  		dec	a
      77.  00:44E5  20 DD               		jr	nz,1b		
      78.  00:44E7  C9                  		ret 
      28   00:44E8                      
      29   00:44E8                      START
      30   00:44E8                      	; CODE
      31   00:44E8                      	;LD A,8
      32   00:44E8                      	;CALL CHGMOD    	
      33   00:44E8  CD 76 41                CALL SETPAGES32K
      34   00:44EB                      ;	CALL opening_screen
      35   00:44EB  3E 01               	LD A,1
      36   00:44ED  32 00 70            	LD (_bank2),A
      37   00:44F0                      ;	CALL CHGET
      38   00:44F0                      	; Empieza el juego    
      39   00:44F0  CD E3 40            	call ClearVram_MSX2		
      40   00:44F3  CD 89 41            	call SET_SCREEN5_MODE    
      41   00:44F6  CD D7 40                call Set212Lines
      42   00:44F9                              
      43   00:44F9  CD 05 45                call INIT_CHARS_VARS
      44   00:44FC  3E FF                   LD A, -MOV_SPEED_GHOST
      45   00:44FE  32 09 C0            	LD (CHAR_SPEED_X_GHOST), A
      46   00:4501  CD 76 45                CALL STAGE1
      47   00:4504                          ;call MAIN_LOOP
      48   00:4504                          ;CALL CHGET
      49   00:4504  C9                  	ret
      50   00:4505                      
      51   00:4505                      
      52   00:4505                      INIT_CHARS_VARS:    
      53   00:4505  DD 21 16 C0             ld ix, SPRITE_ATTRS           
      54   00:4509                          
      55   00:4509  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      56   00:450D  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      57   00:4511  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      58   00:4515                      
      59   00:4515  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      60   00:4519  DD 36 05 7F             ld (ix+5), 7Fh
      61   00:451D  DD 36 06 04             ld (ix+6), 04h        
      62   00:4521                      
      63   00:4521  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      64   00:4525  DD 36 09 7F             ld (ix+9), 7Fh
      65   00:4529  DD 36 0A 08             ld (ix+10), 08h        
      66   00:452D                      
      67   00:452D  DD 36 0C 0F             ld (ix+12), $0f      ; Sprite 1 - Ghost
      68   00:4531  DD 36 0D B9             ld (ix+13), $B9
      69   00:4535  DD 36 0E 18             ld (ix+14), $18
      70   00:4539                          
      71   00:4539  AF                      XOR A
      72   00:453A  32 06 C0                LD (JIFFY_TEMP),A
      73   00:453D  32 07 C0                LD (CHAR_SPEED_X),A
      74   00:4540  32 08 C0                LD (CHAR_SPEED_Y),A
      75   00:4543  32 09 C0                LD (CHAR_SPEED_X_GHOST),A
      76   00:4546  32 0E C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      77   00:4549  32 11 C0                LD (CHAR_NEW_DIR_MAIN),A    
      78   00:454C  32 12 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      79   00:454F  32 14 C0                LD (CHAR_DISTANCE_SHOOT),A
      80   00:4552  32 15 C0                LD (CHAR_SPEED_SHOOT),A
      81   00:4555  32 0B C0                LD (CHAR_GHOST_DEAD),A
      82   00:4558  32 13 C0                LD (CHAR_MIN_STEP), A
      83   00:455B  32 9D C0                LD (SPRITE_COLOR_REPLACE2), A
      84   00:455E                         ; LD A,$FF
      85   00:455E  32 05 C0                LD (OLD_KEY_PRESSED), A
      86   00:4561  3E 01                   LD A,$01
      87   00:4563  32 10 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      88   00:4566                      
      89   00:4566  21 C0 48                ld hl, SPRITE_P1_DOWN
      90   00:4569  22 99 C0                ld (SPRITE_PTR_REPLACE), HL    
      91   00:456C  21 50 4E                ld hl, SPRITE_COLOR_P1_DOWN
      92   00:456F  22 9B C0                ld (SPRITE_COLOR_REPLACE), HL
      93   00:4572  22 9D C0                LD (SPRITE_COLOR_REPLACE2), HL
      94   00:4575  C9                      ret
      95   00:4576                      
      96   00:4576                      STAGE1:
      97   00:4576  CD 41 00                CALL DISSCR
      98   00:4579  21 00 80                LD HL, CEMENTER1
      99   00:457C  22 A1 C0                LD (BITMAP), HL
     100   00:457F  06 07                   LD B, :CEMENTER1
     101   00:4581  CD 21 41                call load_screen
     102   00:4584                          
     103   00:4584  CD AB 41                call DUMP_SPR_ALL
     104   00:4587  CD EB 41                CALL DUMP_SPR_P1
     105   00:458A  21 10 4F                LD HL, mapa1
     106   00:458D  22 9F C0                LD (MAPA), HL   
     107   00:4590  CD 77 44                call print_string 
     108   00:4593  CD 44 00                CALL ENASCR
     109   00:4596                      
     110   00:4596                      MAIN_LOOP:
     111   00:4596                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     112   00:4596  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     113   00:4599  FE 00                   CP $00
     114   00:459B  CA C9 46                JP Z, STAGE2
     115   00:459E  CD D0 41                call DUMP_SPR_ATTS    
     116   00:45A1                          
     117   00:45A1  3A 0B C0                LD A,(CHAR_GHOST_DEAD)
     118   00:45A4  FE 01                   CP $01
     119   00:45A6  CA 07 46                JP Z,.continue
     120   00:45A9  DD 7E 0D                LD A, (ix+13)          ;cargamos la X del Fantasma
     121   00:45AC  2A 09 C0            	LD HL, (CHAR_SPEED_X_GHOST)
     122   00:45AF  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     123   00:45B0                          
     124   00:45B0  DD 77 0D            	LD (ix+13), A	
     125   00:45B3  FE 16                   CP $16
     126   00:45B5  CA C0 45                JP Z,.CHANGE_DIR_RIGHT
     127   00:45B8  FE B9                   CP $B9
     128   00:45BA  CA CD 45                JP Z,.CHANGE_DIR_LEFT
     129   00:45BD                          		
     130   00:45BD  C3 D6 45                JP .check_pattern
     131   00:45C0                      
     132   00:45C0                      .CHANGE_DIR_RIGHT:
     133   00:45C0  3E 01                   LD A, MOV_SPEED_GHOST
     134   00:45C2  32 09 C0            	LD (CHAR_SPEED_X_GHOST), A
     135   00:45C5  3E FF                   LD A,$FF
     136   00:45C7  32 0E C0                LD (CHAR_DIR_GHOST1),A
     137   00:45CA  C3 D6 45                JP .check_pattern
     138   00:45CD                      
     139   00:45CD                      .CHANGE_DIR_LEFT:
     140   00:45CD  3E FF                   LD A, -MOV_SPEED_GHOST
     141   00:45CF  32 09 C0            	LD (CHAR_SPEED_X_GHOST), A
     142   00:45D2  AF                      XOR A   ; Pone A a 0
     143   00:45D3  32 0E C0                LD (CHAR_DIR_GHOST1),A
     144   00:45D6                      
     145   00:45D6                      .check_pattern:
     146   00:45D6  3A 0E C0                LD A,(CHAR_DIR_GHOST1)
     147   00:45D9  FE FF                   CP $FF
     148   00:45DB  CA F4 45                JP Z,.check_pattern_RIGHT
     149   00:45DE  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     150   00:45E1  FE 18                   CP $18
     151   00:45E3  CA ED 45                jp z,.change_pattern_L
     152   00:45E6  DD 36 0E 18             LD (ix+14),$18
     153   00:45EA  C3 07 46                jp .continue
     154   00:45ED                      .change_pattern_L:
     155   00:45ED  DD 36 0E 1C             LD (ix+14),$1C
     156   00:45F1  C3 07 46                jp .continue
     157   00:45F4                      
     158   00:45F4                      .check_pattern_RIGHT
     159   00:45F4  DD 7E 0E                LD A, (ix+14)       ; Cargamos el patrón y lo cambiamos
     160   00:45F7  FE 20                   CP $20
     161   00:45F9  CA 03 46                jp z,.change_pattern_R
     162   00:45FC  DD 36 0E 20             LD (ix+14),$20
     163   00:4600  C3 07 46                jp .continue
     164   00:4603                      .change_pattern_R:
     165   00:4603  DD 36 0E 24             LD (ix+14),$24
     166   00:4607                      
     167   00:4607                      .continue:    
     168   00:4607  CD 0C 44                CALL MOVE_SHOOT
     169   00:460A                      .CHECK_GHOST:
     170   00:460A                          ; Comprobamos si hay colision con el fantasma
     171   00:460A  3A 0B C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     172   00:460D  FE 01                   CP $01
     173   00:460F  CA 2F 46                JP Z,.check_KB
     174   00:4612                      
     175   00:4612  DD 46 10                LD B,(ix+16)         ; Y del disparo
     176   00:4615  DD 4E 11                LD C,(ix+17)         ; X del disparo
     177   00:4618  DD 56 0C                LD D,(ix+12)         ; Y del fantasma 
     178   00:461B  DD 5E 0D                LD E,(ix+13)         ; X del fantasma
     179   00:461E  CD 8A 40                call check_spr_collision
     180   00:4621  FE 01                   CP 1
     181   00:4623  C2 2F 46                JP NZ,.check_KB
     182   00:4626                      
     183   00:4626                      .KILL_GHOST:
     184   00:4626  3E 01                   LD A,1
     185   00:4628  32 0B C0                LD (CHAR_GHOST_DEAD),A
     186   00:462B  DD 36 0C D9             LD (ix+12),217    
     187   00:462F                      
     188   00:462F                      .check_KB:
     189   00:462F  76                      halt    
     190   00:4630                      
     191   00:4630  3A 05 C0                LD A, (OLD_KEY_PRESSED)
     192   00:4633  47                      LD B, A
     193   00:4634                      
     194   00:4634  3E 08                   ld a, 8
     195   00:4636  CD 41 01            	call SNSMAT   
     196   00:4639                          
     197   00:4639  32 05 C0                LD (OLD_KEY_PRESSED), A
     198   00:463C                          ;XOR B
     199   00:463C                          ;AND B
     200   00:463C                      
     201   00:463C  4F                      LD C,A    
     202   00:463D                          
     203   00:463D  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     204   00:463F  CC 77 42                call z, move_right
     205   00:4642                          
     206   00:4642  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     207   00:4644  CC C5 42                call z, move_left
     208   00:4647                      
     209   00:4647  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     210   00:4649  CC 08 42                call z, move_up
     211   00:464C                      
     212   00:464C  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     213   00:464E  CC 3F 42                call z, move_down
     214   00:4651                      
     215   00:4651                      no_arrows:
     216   00:4651  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     217   00:4653  CC 59 46                call z,SHOOT_MAIN_CHAR
     218   00:4656                      
     219   00:4656                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     220   00:4656                          ;ret z
     221   00:4656                      
     222   00:4656  C3 96 45                jp MAIN_LOOP
     223   00:4659                      
     224   00:4659                      SHOOT_MAIN_CHAR:    
     225   00:4659  3A 12 C0                LD A, (CHAR_MAIN_SHOOT)
     226   00:465C  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     227   00:465E  C8                      RET Z;,MAIN_LOOP
     228   00:465F  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     229   00:4661  C8                      RET Z;,MAIN_LOOP
     230   00:4662  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     231   00:4664  C8                      RET Z;,MAIN_LOOP
     232   00:4665  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     233   00:4667  C8                      RET Z;,MAIN_LOOP
     234   00:4668                      
     235   00:4668  DD 36 12 28             ld (ix+18), $28     ; Sprite Disparo
     236   00:466C                      
     237   00:466C  DD 7E 00                LD A, (ix)          
     238   00:466F  DD 77 10                ld (ix+16), A       ; Asignamos la Y del personaje    
     239   00:4672                      
     240   00:4672  3A 10 C0                LD A, (CHAR_DIR_MAIN)
     241   00:4675  FE 03                   CP $03
     242   00:4677  CA 93 46                JP Z,.SHOOT_RIGHT
     243   00:467A  FE 00                   CP $00
     244   00:467C  CA A2 46                JP Z,.SHOOT_UP
     245   00:467F  FE 01                   CP $01
     246   00:4681  CA B5 46                JP Z,.SHOOT_DOWN
     247   00:4684                          ; SHOOT LEFT
     248   00:4684  3E 01                   LD A,$01                ; SHOOT LEFT
     249   00:4686  32 12 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     250   00:4689  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     251   00:468C  21 F4 FF            	LD HL, -12
     252   00:468F  85                  	ADD L
     253   00:4690                          
     254   00:4690  C3 C5 46                JP .CONTINUE
     255   00:4693                      
     256   00:4693                      .SHOOT_RIGHT:    
     257   00:4693  3E 02                   LD A,$02
     258   00:4695  32 12 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     259   00:4698                          
     260   00:4698  DD 7E 01                LD A, (ix+1)			;cargamos la X
     261   00:469B  21 0C 00            	LD HL, 12
     262   00:469E  85                  	ADD L
     263   00:469F  C3 C5 46                JP .CONTINUE
     264   00:46A2                      
     265   00:46A2                      .SHOOT_UP:
     266   00:46A2  3E 03                   LD A,$03
     267   00:46A4  32 12 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     268   00:46A7                          
     269   00:46A7                          ; Sumamos el desplazamiento a la Y
     270   00:46A7  DD 7E 10                LD A, (ix+16)
     271   00:46AA  D6 10                   SUB 16
     272   00:46AC  DD 77 10                LD (ix+16), A    
     273   00:46AF                          ;LD (ix+17), D
     274   00:46AF  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     275   00:46B2  C3 C5 46                JP .CONTINUE
     276   00:46B5                      
     277   00:46B5                      .SHOOT_DOWN
     278   00:46B5  3E 04               	LD A,$04
     279   00:46B7  32 12 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     280   00:46BA                          
     281   00:46BA                          ; Sumamos el desplazamiento a la Y
     282   00:46BA  DD 7E 10                LD A, (ix+16)
     283   00:46BD  C6 10                   ADD 16
     284   00:46BF  DD 77 10                LD (ix+16), A    
     285   00:46C2                          ;LD (ix+17), D
     286   00:46C2  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     287   00:46C5                      
     288   00:46C5                      .CONTINUE:
     289   00:46C5                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     290   00:46C5  DD 77 11                ld (ix+17), A       ; Asignamos la X del personaje + el desplazamiento        
     291   00:46C8                          ;jp MAIN_LOOP
     292   00:46C8  C9                      ret
     293   00:46C9                      
     294   00:46C9                      STAGE2:
     295   00:46C9  CD 41 00                CALL DISSCR
     296   00:46CC  21 00 80                LD HL, CEMENTER2
     297   00:46CF  22 A1 C0                LD (BITMAP), HL
     298   00:46D2  06 0D                   LD B, :CEMENTER2
     299   00:46D4                      
     300   00:46D4  CD 21 41                call load_screen
     301   00:46D7  21 50 52                LD HL, mapa2
     302   00:46DA  22 9F C0                LD (MAPA), HL
     303   00:46DD                      
     304   00:46DD  DD 36 00 C4             LD (ix), 196    ; Ponemos el P1 abajo
     305   00:46E1  DD 36 04 C4             LD (ix+4), 196    
     306   00:46E5  DD 36 08 C4             LD (ix+8), 196    
     307   00:46E9                          
     308   00:46E9  DD 36 0C D9             LD (ix+12),217  ; ocultamos el fantasma
     309   00:46ED                          
     310   00:46ED  CD AB 41                call DUMP_SPR_ALL    
     311   00:46F0  CD EB 41                CALL DUMP_SPR_P1
     312   00:46F3                          ; Esqueleto
     313   00:46F3  DD 36 14 10             LD (ix+20), 10h
     314   00:46F7  DD 36 15 10             LD (ix+21), 10h
     315   00:46FB  DD 36 16 3C             LD (ix+22), 3Ch
     316   00:46FF                      
     317   00:46FF  DD 36 18 10             LD (ix+24), 10h
     318   00:4703  DD 36 19 10             LD (ix+25), 10h
     319   00:4707  DD 36 1A 40             LD (ix+26), 40h
     320   00:470B                      
     321   00:470B  AF                      XOR A
     322   00:470C  32 0C C0                LD (CHAR_GHOST_DEAD_STG2), A
     323   00:470F  32 0D C0                LD (CHAR_MIN_STEP_STG2), A
     324   00:4712  3E FF                   LD A, $FF
     325   00:4714  32 0F C0                LD (CHAR_DIR_GHOST_STG2), A
     326   00:4717  3E 01                   LD A, MOV_SPEED_GHOST
     327   00:4719  32 0A C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     328   00:471C                      
     329   00:471C  CD 44 00                CALL ENASCR
     330   00:471F                          
     331   00:471F                      MAIN_LOOP2:
     332   00:471F  76                      halt    
     333   00:4720                      
     334   00:4720  DD 7E 00                LD A, (ix)    
     335   00:4723  FE C6                   CP 198
     336   00:4725  C2 4B 47                JP NZ, .no_screen_change
     337   00:4728                          ; Ponemos el SP1 al principio de la pantalla 1
     338   00:4728  DD 36 00 01             LD (ix), 1          ; SP1 - Y = 1
     339   00:472C  DD 36 04 01             LD (ix+4), 1
     340   00:4730  DD 36 08 01             LD (ix+8), 1
     341   00:4734                      
     342   00:4734  3A 0B C0                LD A, (CHAR_GHOST_DEAD)
     343   00:4737  FE 01                   CP $01
     344   00:4739  CA 40 47                JP Z, .GHOST_DEAD
     345   00:473C  DD 36 0C 07             ld (ix+12), $07      ; Sprite 1 - Ghost
     346   00:4740                      .GHOST_DEAD:
     347   00:4740  DD 36 14 D9             LD (ix+20),217  ; ocultamos el esqueleto
     348   00:4744  DD 36 18 D9             LD (ix+24),217  ; ocultamos el esqueleto
     349   00:4748  CD 76 45                CALL STAGE1
     350   00:474B                      
     351   00:474B                      .no_screen_change:
     352   00:474B                      
     353   00:474B  CD D0 41                call DUMP_SPR_ATTS    
     354   00:474E                          ; Movemos el esqueleto
     355   00:474E  3A 0C C0                LD A,(CHAR_GHOST_DEAD_STG2)
     356   00:4751  FE 01                   CP $01
     357   00:4753  CA D8 47                JP Z,.continue
     358   00:4756  DD 7E 15                LD A, (ix+21)          ;cargamos la X del Esqueleto
     359   00:4759  2A 0A C0            	LD HL, (CHAR_SPEED_X_GHOST_STG2)
     360   00:475C  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     361   00:475D                          
     362   00:475D  DD 77 15            	LD (ix+21), A	
     363   00:4760  DD 77 19                LD (ix+25), A
     364   00:4763  FE 16                   CP $16
     365   00:4765  CA 7D 47                JP Z,.CHANGE_DIR_RIGHT
     366   00:4768  FE B9                   CP $B9
     367   00:476A  CA 8A 47                JP Z,.CHANGE_DIR_LEFT
     368   00:476D                      
     369   00:476D  3A 0D C0                LD A, (CHAR_MIN_STEP_STG2)		
     370   00:4770  FE 06                   CP MAX_CHAR_STEPS_STG2
     371   00:4772  CA 93 47                JP Z,.check_pattern
     372   00:4775  C6 01                   ADD 1
     373   00:4777  32 0D C0                LD (CHAR_MIN_STEP_STG2), A
     374   00:477A  C3 D8 47                JP .continue
     375   00:477D                      
     376   00:477D                      .CHANGE_DIR_RIGHT:
     377   00:477D  3E 01                   LD A, MOV_SPEED_GHOST
     378   00:477F  32 0A C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     379   00:4782  3E FF                   LD A,$FF
     380   00:4784  32 0F C0                LD (CHAR_DIR_GHOST_STG2),A
     381   00:4787  C3 93 47                JP .check_pattern
     382   00:478A                      
     383   00:478A                      .CHANGE_DIR_LEFT:
     384   00:478A  3E FF                   LD A, -MOV_SPEED_GHOST
     385   00:478C  32 0A C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     386   00:478F  AF                      XOR A   ; Pone A a 0
     387   00:4790  32 0F C0                LD (CHAR_DIR_GHOST_STG2),A
     388   00:4793                      
     389   00:4793                      .check_pattern:
     390   00:4793  AF                      XOR A
     391   00:4794  32 0D C0                LD (CHAR_MIN_STEP_STG2), A
     392   00:4797  3A 0F C0                LD A,(CHAR_DIR_GHOST_STG2)
     393   00:479A  FE FF                   CP $FF
     394   00:479C  CA BD 47                JP Z,.check_pattern_RIGHT
     395   00:479F  DD 7E 16                LD A, (ix+22)       ; Cargamos el patrón y lo cambiamos
     396   00:47A2  FE 2C                   CP $2C
     397   00:47A4  CA B2 47                jp z,.change_pattern_L
     398   00:47A7  DD 36 16 2C             LD (ix+22),$2C
     399   00:47AB  DD 36 1A 30             LD (ix+26),$30
     400   00:47AF  C3 D8 47                jp .continue
     401   00:47B2                      .change_pattern_L:
     402   00:47B2  DD 36 16 34             LD (ix+22),$34
     403   00:47B6  DD 36 1A 38             LD (ix+26),$38
     404   00:47BA  C3 D8 47                jp .continue
     405   00:47BD                      
     406   00:47BD                      .check_pattern_RIGHT
     407   00:47BD  DD 7E 16                LD A, (ix+22)       ; Cargamos el patrón y lo cambiamos
     408   00:47C0  FE 3C                   CP $3C
     409   00:47C2  CA D0 47                jp z,.change_pattern_R
     410   00:47C5  DD 36 16 3C             LD (ix+22),$3C
     411   00:47C9  DD 36 1A 40             LD (ix+26),$40
     412   00:47CD  C3 D8 47                jp .continue
     413   00:47D0                      .change_pattern_R:
     414   00:47D0  DD 36 16 44             LD (ix+22),$44
     415   00:47D4  DD 36 1A 48             LD (ix+26),$48
     416   00:47D8                      
     417   00:47D8                      .continue:
     418   00:47D8  CD 0C 44                CALL MOVE_SHOOT    
     419   00:47DB                      
     420   00:47DB  3E 08                   ld a, 8
     421   00:47DD  CD 41 01            	call SNSMAT   
     422   00:47E0  4F                      LD C,A    
     423   00:47E1                              
     424   00:47E1  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     425   00:47E3  CC 77 42                call z, move_right
     426   00:47E6                          
     427   00:47E6  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     428   00:47E8  CC C5 42                call z, move_left
     429   00:47EB                      
     430   00:47EB  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     431   00:47ED  CC 08 42                call z, move_up
     432   00:47F0                      
     433   00:47F0  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     434   00:47F2  CC 3F 42                call z, move_down
     435   00:47F5                      
     436   00:47F5  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     437   00:47F7  CC 59 46                call z,SHOOT_MAIN_CHAR
     438   00:47FA                      
     439   00:47FA  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     440   00:47FC  C8                      ret z
     441   00:47FD                      
     442   00:47FD  C3 1F 47                jp MAIN_LOOP2
     443   00:4800                      
     444   00:4800                      include "include\BTH_data.asm"
       1.  00:4800                      SPRITE_P1_UP:
       2.  00:4800                          ; UP 1        
       3.  00:4800                          ; mask 0
       4.  00:4800                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
       4.  00:4800  03 0F 1F 1F 1F 3F 1F 0F 
       5.  00:4808                          DB $30,$78,$60,$60,$03,$03,$06,$0E
       5.  00:4808  30 78 60 60 03 03 06 0E 
       6.  00:4810                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
       6.  00:4810  E0 F0 F8 F8 FC F8 FC F0 
       7.  00:4818                          DB $0E,$18,$06,$00,$C0,$E0,$F0,$00    
       7.  00:4818  0E 18 06 00 C0 E0 F0 00 
       8.  00:4820                          ; mask 1
       9.  00:4820                          DB $00,$00,$00,$00,$00,$00,$00,$00
       9.  00:4820  00 00 00 00 00 00 00 00 
      10.  00:4828                          DB $0F,$00,$03,$03,$01,$01,$00,$00
      10.  00:4828  0F 00 03 03 01 01 00 00 
      11.  00:4830                          DB $00,$00,$00,$00,$00,$00,$00,$00
      11.  00:4830  00 00 00 00 00 00 00 00 
      12.  00:4838                          DB $F0,$06,$C0,$C0,$80,$80,$80,$00
      12.  00:4838  F0 06 C0 C0 80 80 80 00 
      13.  00:4840                          ; mask 2
      14.  00:4840                          DB $00,$00,$00,$00,$00,$00,$00,$00
      14.  00:4840  00 00 00 00 00 00 00 00 
      15.  00:4848                          DB $00,$07,$01,$01,$00,$00,$00,$00
      15.  00:4848  00 07 01 01 00 00 00 00 
      16.  00:4850                          DB $00,$00,$00,$00,$00,$00,$00,$00
      16.  00:4850  00 00 00 00 00 00 00 00 
      17.  00:4858                          DB $00,$E0,$80,$80,$00,$00,$00,$00    
      17.  00:4858  00 E0 80 80 00 00 00 00 
      18.  00:4860                      
      19.  00:4860                          ; UP 2
      20.  00:4860                          ; mask 0
      21.  00:4860                          DB $03,$0F,$1F,$1F,$1F,$3F,$1F,$0F
      21.  00:4860  03 0F 1F 1F 1F 3F 1F 0F 
      22.  00:4868                          DB $70,$18,$60,$00,$03,$07,$0E,$00
      22.  00:4868  70 18 60 00 03 07 0E 00 
      23.  00:4870                          DB $E0,$F0,$F8,$F8,$FC,$F8,$FC,$F0
      23.  00:4870  E0 F0 F8 F8 FC F8 FC F0 
      24.  00:4878                          DB $0C,$1E,$06,$06,$C0,$C0,$E0,$70    
      24.  00:4878  0C 1E 06 06 C0 C0 E0 70 
      25.  00:4880                          ; mask 1
      26.  00:4880                          DB $00,$00,$00,$00,$00,$00,$00,$00
      26.  00:4880  00 00 00 00 00 00 00 00 
      27.  00:4888                          DB $0F,$60,$03,$03,$01,$01,$00,$00
      27.  00:4888  0F 60 03 03 01 01 00 00 
      28.  00:4890                          DB $00,$00,$00,$00,$00,$00,$00,$00
      28.  00:4890  00 00 00 00 00 00 00 00 
      29.  00:4898                          DB $F0,$00,$C0,$C0,$80,$80,$80,$00
      29.  00:4898  F0 00 C0 C0 80 80 80 00 
      30.  00:48A0                          ; mask 2
      31.  00:48A0                          DB $00,$00,$00,$00,$00,$00,$00,$00
      31.  00:48A0  00 00 00 00 00 00 00 00 
      32.  00:48A8                          DB $00,$07,$01,$01,$00,$00,$00,$00
      32.  00:48A8  00 07 01 01 00 00 00 00 
      33.  00:48B0                          DB $00,$00,$00,$00,$00,$00,$00,$00
      33.  00:48B0  00 00 00 00 00 00 00 00 
      34.  00:48B8                          DB $00,$E0,$80,$80,$00,$00,$00,$00
      34.  00:48B8  00 E0 80 80 00 00 00 00 
      35.  00:48C0                      
      36.  00:48C0                      SPRITE_P1_DOWN:
      37.  00:48C0                          ; DOWN 1 - 00h
      38.  00:48C0                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      38.  00:48C0  03 0F 00 0A 0E 0D 07 03 
      39.  00:48C8                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
      39.  00:48C8  3E 7B 60 60 03 03 06 0E 
      40.  00:48D0                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      40.  00:48D0  E0 F0 A0 90 70 B0 E0 C0 
      41.  00:48D8                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
      41.  00:48D8  7E D8 06 00 C0 E0 F0 00 
      42.  00:48E0                          ; mask 1 - 04h
      43.  00:48E0                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      43.  00:48E0  00 00 1F 15 11 32 18 0C 
      44.  00:48E8                          DB $01,$00,$03,$03,$01,$01,$00,$00
      44.  00:48E8  01 00 03 03 01 01 00 00 
      45.  00:48F0                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      45.  00:48F0  00 00 58 68 8C 48 1C 30 
      46.  00:48F8                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
      46.  00:48F8  80 06 C0 C0 80 80 80 00 
      47.  00:4900                          ; mask 2 - 08h
      48.  00:4900                          DB $00,$00,$00,$00,$00,$30,$00,$00
      48.  00:4900  00 00 00 00 00 30 00 00 
      49.  00:4908                          DB $00,$04,$00,$00,$00,$00,$00,$00
      49.  00:4908  00 04 00 00 00 00 00 00 
      50.  00:4910                          DB $00,$00,$00,$00,$00,$08,$00,$00
      50.  00:4910  00 00 00 00 00 08 00 00 
      51.  00:4918                          DB $00,$20,$00,$00,$00,$00,$00,$00
      51.  00:4918  00 20 00 00 00 00 00 00 
      52.  00:4920                      
      53.  00:4920                          ; DOWN 2
      54.  00:4920                          ; mask 0 - 0Ch
      55.  00:4920                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
      55.  00:4920  03 0F 00 0A 0E 0D 07 03 
      56.  00:4928                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
      56.  00:4928  7E 1B 60 00 03 07 0E 00 
      57.  00:4930                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
      57.  00:4930  E0 F0 A0 90 70 B0 E0 C0 
      58.  00:4938                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
      58.  00:4938  7C DE 06 06 C0 C0 E0 70 
      59.  00:4940                          ; mask 1 - 10h
      60.  00:4940                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
      60.  00:4940  00 00 1F 15 11 32 18 0C 
      61.  00:4948                          DB $01,$60,$03,$03,$01,$01,$00,$00
      61.  00:4948  01 60 03 03 01 01 00 00 
      62.  00:4950                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
      62.  00:4950  00 00 58 68 8C 48 1C 30 
      63.  00:4958                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
      63.  00:4958  80 00 C0 C0 80 80 80 00 
      64.  00:4960                          ; mask 2 - 14h
      65.  00:4960                          DB $00,$00,$00,$00,$00,$30,$00,$00
      65.  00:4960  00 00 00 00 00 30 00 00 
      66.  00:4968                          DB $00,$04,$00,$00,$00,$00,$00,$00
      66.  00:4968  00 04 00 00 00 00 00 00 
      67.  00:4970                          DB $00,$00,$00,$00,$00,$08,$00,$00
      67.  00:4970  00 00 00 00 00 08 00 00 
      68.  00:4978                          DB $00,$20,$00,$00,$00,$00,$00,$00
      68.  00:4978  00 20 00 00 00 00 00 00 
      69.  00:4980                      
      70.  00:4980                      SPRITE_P1_LEFT:         
      71.  00:4980                          ; --- Slot 1
      72.  00:4980                          ; mask 0
      73.  00:4980                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      73.  00:4980  07 1F 03 07 0B 1F 0F 07 
      74.  00:4988                          DB $03,$0F,$30,$30,$03,$01,$01,$03
      74.  00:4988  03 0F 30 30 03 01 01 03 
      75.  00:4990                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      75.  00:4990  C0 E0 00 80 C0 C0 80 00 
      76.  00:4998                          DB $C0,$80,$00,$00,$D8,$B0,$20,$00
      76.  00:4998  C0 80 00 00 D8 B0 20 00 
      77.  00:49A0                          ; mask 1
      78.  00:49A0                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      78.  00:49A0  00 00 0C 18 34 00 00 00 
      79.  00:49A8                          DB $0C,$00,$09,$03,$00,$00,$00,$00
      79.  00:49A8  0C 00 09 03 00 00 00 00 
      80.  00:49B0                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      80.  00:49B0  00 00 F0 78 38 3C 70 F8 
      81.  00:49B8                          DB $00,$78,$C0,$F8,$18,$10,$00,$00
      81.  00:49B8  00 78 C0 F8 18 10 00 00 
      82.  00:49C0                          ; mask 2
      83.  00:49C0                          DB $00,$00,$00,$00,$30,$00,$00,$00
      83.  00:49C0  00 00 00 00 30 00 00 00 
      84.  00:49C8                          DB $00,$00,$01,$00,$00,$00,$00,$00
      84.  00:49C8  00 00 01 00 00 00 00 00 
      85.  00:49D0                          DB $00,$00,$00,$00,$38,$00,$00,$00
      85.  00:49D0  00 00 00 00 38 00 00 00 
      86.  00:49D8                          DB $3C,$00,$F0,$38,$00,$00,$00,$00
      86.  00:49D8  3C 00 F0 38 00 00 00 00 
      87.  00:49E0                              
      88.  00:49E0                          ; --- Slot 3
      89.  00:49E0                          ; mask 0
      90.  00:49E0                          DB $07,$1F,$03,$07,$0B,$1F,$0F,$07
      90.  00:49E0  07 1F 03 07 0B 1F 0F 07 
      91.  00:49E8                          DB $03,$0F,$01,$03,$03,$01,$03,$06
      91.  00:49E8  03 0F 01 03 03 01 03 06 
      92.  00:49F0                          DB $C0,$E0,$00,$80,$C0,$C0,$80,$00
      92.  00:49F0  C0 E0 00 80 C0 C0 80 00 
      93.  00:49F8                          DB $C0,$80,$F0,$F8,$D8,$D0,$40,$C0
      93.  00:49F8  C0 80 F0 F8 D8 D0 40 C0 
      94.  00:4A00                          ; mask 1
      95.  00:4A00                          DB $00,$00,$0C,$18,$34,$00,$00,$00
      95.  00:4A00  00 00 0C 18 34 00 00 00 
      96.  00:4A08                          DB $0C,$30,$31,$00,$00,$00,$00,$00
      96.  00:4A08  0C 30 31 00 00 00 00 00 
      97.  00:4A10                          DB $00,$00,$F0,$78,$38,$3C,$70,$F8
      97.  00:4A10  00 00 F0 78 38 3C 70 F8 
      98.  00:4A18                          DB $00,$00,$C0,$38,$18,$10,$00,$00
      98.  00:4A18  00 00 C0 38 18 10 00 00 
      99.  00:4A20                          ; mask 2
     100.  00:4A20                          DB $00,$00,$00,$00,$30,$00,$00,$00
     100.  00:4A20  00 00 00 00 30 00 00 00 
     101.  00:4A28                          DB $00,$00,$30,$00,$00,$00,$00,$00
     101.  00:4A28  00 00 30 00 00 00 00 00 
     102.  00:4A30                          DB $00,$00,$00,$00,$38,$00,$00,$00
     102.  00:4A30  00 00 00 00 38 00 00 00 
     103.  00:4A38                          DB $3C,$78,$00,$00,$00,$00,$00,$00
     103.  00:4A38  3C 78 00 00 00 00 00 00 
     104.  00:4A40                      
     105.  00:4A40                      SPRITE_P1_RIGHT:
     106.  00:4A40                          ; --- Slot 0
     107.  00:4A40                          ; mask 0
     108.  00:4A40                          DB $03,$07,$00,$01,$03,$03,$01,$00
     108.  00:4A40  03 07 00 01 03 03 01 00 
     109.  00:4A48                          DB $03,$01,$00,$00,$1B,$0D,$04,$00
     109.  00:4A48  03 01 00 00 1B 0D 04 00 
     110.  00:4A50                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     110.  00:4A50  E0 F8 C0 E0 D0 F8 F0 E0 
     111.  00:4A58                          DB $C0,$F0,$0C,$0C,$C0,$80,$80,$C0
     111.  00:4A58  C0 F0 0C 0C C0 80 80 C0 
     112.  00:4A60                          ; mask 1
     113.  00:4A60                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     113.  00:4A60  00 00 0F 1E 1C 3C 0E 1F 
     114.  00:4A68                          DB $00,$1E,$03,$1F,$18,$08,$00,$00
     114.  00:4A68  00 1E 03 1F 18 08 00 00 
     115.  00:4A70                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     115.  00:4A70  00 00 30 18 2C 00 00 00 
     116.  00:4A78                          DB $30,$00,$90,$C0,$00,$00,$00,$00
     116.  00:4A78  30 00 90 C0 00 00 00 00 
     117.  00:4A80                          ; mask 2
     118.  00:4A80                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     118.  00:4A80  00 00 00 00 1C 00 00 00 
     119.  00:4A88                          DB $3C,$00,$0F,$1C,$00,$00,$00,$00
     119.  00:4A88  3C 00 0F 1C 00 00 00 00 
     120.  00:4A90                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     120.  00:4A90  00 00 00 00 0C 00 00 00 
     121.  00:4A98                          DB $00,$00,$80,$00,$00,$00,$00,$00
     121.  00:4A98  00 00 80 00 00 00 00 00 
     122.  00:4AA0                      
     123.  00:4AA0                          ; --- Slot 2
     124.  00:4AA0                          ; mask 0
     125.  00:4AA0                          DB $03,$07,$00,$01,$03,$03,$01,$00
     125.  00:4AA0  03 07 00 01 03 03 01 00 
     126.  00:4AA8                          DB $03,$01,$0F,$1F,$1B,$0B,$02,$03
     126.  00:4AA8  03 01 0F 1F 1B 0B 02 03 
     127.  00:4AB0                          DB $E0,$F8,$C0,$E0,$D0,$F8,$F0,$E0
     127.  00:4AB0  E0 F8 C0 E0 D0 F8 F0 E0 
     128.  00:4AB8                          DB $C0,$F0,$80,$C0,$C0,$80,$C0,$60
     128.  00:4AB8  C0 F0 80 C0 C0 80 C0 60 
     129.  00:4AC0                          ; mask 1
     130.  00:4AC0                          DB $00,$00,$0F,$1E,$1C,$3C,$0E,$1F
     130.  00:4AC0  00 00 0F 1E 1C 3C 0E 1F 
     131.  00:4AC8                          DB $00,$00,$03,$1C,$18,$08,$00,$00
     131.  00:4AC8  00 00 03 1C 18 08 00 00 
     132.  00:4AD0                          DB $00,$00,$30,$18,$2C,$00,$00,$00
     132.  00:4AD0  00 00 30 18 2C 00 00 00 
     133.  00:4AD8                          DB $30,$0C,$8C,$00,$00,$00,$00,$00
     133.  00:4AD8  30 0C 8C 00 00 00 00 00 
     134.  00:4AE0                          ; mask 2
     135.  00:4AE0                          DB $00,$00,$00,$00,$1C,$00,$00,$00
     135.  00:4AE0  00 00 00 00 1C 00 00 00 
     136.  00:4AE8                          DB $3C,$1E,$00,$00,$00,$00,$00,$00
     136.  00:4AE8  3C 1E 00 00 00 00 00 00 
     137.  00:4AF0                          DB $00,$00,$00,$00,$0C,$00,$00,$00
     137.  00:4AF0  00 00 00 00 0C 00 00 00 
     138.  00:4AF8                          DB $00,$00,$0C,$00,$00,$00,$00,$00
     138.  00:4AF8  00 00 0C 00 00 00 00 00 
     139.  00:4B00                      
     140.  00:4B00                      SPRITE_PATTERN:    
     141.  00:4B00                          ; P1 - DOWN 1 
     142.  00:4B00                          ; mask 0 - 00h
     143.  00:4B00                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     143.  00:4B00  03 0F 00 0A 0E 0D 07 03 
     144.  00:4B08                          DB $3E,$7B,$60,$60,$03,$03,$06,$0E
     144.  00:4B08  3E 7B 60 60 03 03 06 0E 
     145.  00:4B10                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     145.  00:4B10  E0 F0 A0 90 70 B0 E0 C0 
     146.  00:4B18                          DB $7E,$D8,$06,$00,$C0,$E0,$F0,$00
     146.  00:4B18  7E D8 06 00 C0 E0 F0 00 
     147.  00:4B20                          ; mask 1 - 04h
     148.  00:4B20                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     148.  00:4B20  00 00 1F 15 11 32 18 0C 
     149.  00:4B28                          DB $01,$00,$03,$03,$01,$01,$00,$00
     149.  00:4B28  01 00 03 03 01 01 00 00 
     150.  00:4B30                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     150.  00:4B30  00 00 58 68 8C 48 1C 30 
     151.  00:4B38                          DB $80,$06,$C0,$C0,$80,$80,$80,$00
     151.  00:4B38  80 06 C0 C0 80 80 80 00 
     152.  00:4B40                          ; mask 2 - 08h
     153.  00:4B40                          DB $00,$00,$00,$00,$00,$30,$00,$00
     153.  00:4B40  00 00 00 00 00 30 00 00 
     154.  00:4B48                          DB $00,$04,$00,$00,$00,$00,$00,$00
     154.  00:4B48  00 04 00 00 00 00 00 00 
     155.  00:4B50                          DB $00,$00,$00,$00,$00,$08,$00,$00
     155.  00:4B50  00 00 00 00 00 08 00 00 
     156.  00:4B58                          DB $00,$20,$00,$00,$00,$00,$00,$00
     156.  00:4B58  00 20 00 00 00 00 00 00 
     157.  00:4B60                      
     158.  00:4B60                          ; P1 - DOWN 2 
     159.  00:4B60                          ; mask 0 - 0Ch
     160.  00:4B60                          DB $03,$0F,$00,$0A,$0E,$0D,$07,$03
     160.  00:4B60  03 0F 00 0A 0E 0D 07 03 
     161.  00:4B68                          DB $7E,$1B,$60,$00,$03,$07,$0E,$00
     161.  00:4B68  7E 1B 60 00 03 07 0E 00 
     162.  00:4B70                          DB $E0,$F0,$A0,$90,$70,$B0,$E0,$C0
     162.  00:4B70  E0 F0 A0 90 70 B0 E0 C0 
     163.  00:4B78                          DB $7C,$DE,$06,$06,$C0,$C0,$E0,$70
     163.  00:4B78  7C DE 06 06 C0 C0 E0 70 
     164.  00:4B80                          ; mask 1 - 10h
     165.  00:4B80                          DB $00,$00,$1F,$15,$11,$32,$18,$0C
     165.  00:4B80  00 00 1F 15 11 32 18 0C 
     166.  00:4B88                          DB $01,$60,$03,$03,$01,$01,$00,$00
     166.  00:4B88  01 60 03 03 01 01 00 00 
     167.  00:4B90                          DB $00,$00,$58,$68,$8C,$48,$1C,$30
     167.  00:4B90  00 00 58 68 8C 48 1C 30 
     168.  00:4B98                          DB $80,$00,$C0,$C0,$80,$80,$80,$00
     168.  00:4B98  80 00 C0 C0 80 80 80 00 
     169.  00:4BA0                          ; mask 2 - 14h
     170.  00:4BA0                          DB $00,$00,$00,$00,$00,$30,$00,$00
     170.  00:4BA0  00 00 00 00 00 30 00 00 
     171.  00:4BA8                          DB $00,$04,$00,$00,$00,$00,$00,$00
     171.  00:4BA8  00 04 00 00 00 00 00 00 
     172.  00:4BB0                          DB $00,$00,$00,$00,$00,$08,$00,$00
     172.  00:4BB0  00 00 00 00 00 08 00 00 
     173.  00:4BB8                          DB $00,$20,$00,$00,$00,$00,$00,$00
     173.  00:4BB8  00 20 00 00 00 00 00 00 
     174.  00:4BC0                          
     175.  00:4BC0                          ;Ghost 1 Left - 18H
     176.  00:4BC0                          DB 00h,01h,07h,0fh,1fh,3fh,7fh,01h
     176.  00:4BC0  00 01 07 0F 1F 3F 7F 01 
     177.  00:4BC8                          DB $15,$14,$7f,$3f,$3f,$3f,$3f,$7f
     177.  00:4BC8  15 14 7F 3F 3F 3F 3F 7F 
     178.  00:4BD0                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     178.  00:4BD0  00 E0 80 00 00 80 80 C0 
     179.  00:4BD8                          DB $c0,$e0,$f0,$f8,$fc,$fc,$fe,$ff  
     179.  00:4BD8  C0 E0 F0 F8 FC FC FE FF 
     180.  00:4BE0                          
     181.  00:4BE0                          ; Ghost 2 Left - 1Ch
     182.  00:4BE0                          DB $00,$01,$07,$0f,$1f,$3f,$7f,$01
     182.  00:4BE0  00 01 07 0F 1F 3F 7F 01 
     183.  00:4BE8                          DB $15,$14,$7f,$3f,$3f,$7f,$7f,$83
     183.  00:4BE8  15 14 7F 3F 3F 7F 7F 83 
     184.  00:4BF0                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     184.  00:4BF0  00 E0 80 00 00 80 80 C0 
     185.  00:4BF8                          DB $c0,$e0,$e0,$f0,$f8,$fc,$fe,$ff      
     185.  00:4BF8  C0 E0 E0 F0 F8 FC FE FF 
     186.  00:4C00                      
     187.  00:4C00                          ; Ghost 1 Right - 20h
     188.  00:4C00                          DB $00,$07,$01,$00,$00,$01,$01,$03
     188.  00:4C00  00 07 01 00 00 01 01 03 
     189.  00:4C08                          DB $03,$07,$07,$0f,$1f,$3f,$7f,$ff
     189.  00:4C08  03 07 07 0F 1F 3F 7F FF 
     190.  00:4C10                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     190.  00:4C10  00 80 E0 F0 F8 FC FE 80 
     191.  00:4C18                          DB $a8,$28,$fe,$fc,$fc,$fe,$fe,$c1
     191.  00:4C18  A8 28 FE FC FC FE FE C1 
     192.  00:4C20                          
     193.  00:4C20                          ; Ghost 2 Right - 24h
     194.  00:4C20                          DB $00,$07,$01,$00,$00,$01,$01,$03
     194.  00:4C20  00 07 01 00 00 01 01 03 
     195.  00:4C28                          DB $03,$07,$0f,$1f,$3f,$3f,$7f,$ff
     195.  00:4C28  03 07 0F 1F 3F 3F 7F FF 
     196.  00:4C30                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     196.  00:4C30  00 80 E0 F0 F8 FC FE 80 
     197.  00:4C38                          DB $a8,$28,$fe,$fc,$fc,$fc,$fc,$fe  
     197.  00:4C38  A8 28 FE FC FC FC FC FE 
     198.  00:4C40                      
     199.  00:4C40                          ; Antichrist - RIGHT
     200.  00:4C40                          ; mask 0 - 28h
     201.  00:4C40                          ;DB $00,$00,$00,$03,$07,$0F,$1E,$1E
     202.  00:4C40                          ;DB $1E,$1C,$1E,$0F,$07,$03,$00,$00
     203.  00:4C40                          ;DB $00,$00,$00,$00,$80,$C0,$E0,$F0
     204.  00:4C40                          ;DB $F8,$70,$E0,$C0,$80,$00,$00,$00
     205.  00:4C40                          DB $00,$00,$00,$01,$01,$01,$01,$01
     205.  00:4C40  00 00 00 01 01 01 01 01 
     206.  00:4C48                          DB $01,$01,$07,$07,$01,$01,$00,$00
     206.  00:4C48  01 01 07 07 01 01 00 00 
     207.  00:4C50                          DB $00,$00,$00,$80,$80,$80,$80,$80
     207.  00:4C50  00 00 00 80 80 80 80 80 
     208.  00:4C58                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     208.  00:4C58  80 80 E0 E0 80 80 00 00 
     209.  00:4C60                      
     210.  00:4C60                          ; Esqueleto Left - 1
     211.  00:4C60                          ; mask 0 - 2Ch
     212.  00:4C60                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     212.  00:4C60  1F 1B 2E 24 3F 1F 1F 00 
     213.  00:4C68                          DB $03,$05,$09,$04,$01,$02,$02,$04
     213.  00:4C68  03 05 09 04 01 02 02 04 
     214.  00:4C70                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     214.  00:4C70  80 C0 C0 C0 80 00 00 80 
     215.  00:4C78                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     215.  00:4C78  E0 D0 C8 C4 C0 20 20 40 
     216.  00:4C80                          ; mask 1 - 30h
     217.  00:4C80                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     217.  00:4C80  1F 1F 3F 3F 3F 1E 0A 00 
     218.  00:4C88                          DB $03,$05,$09,$04,$01,$00,$00,$00
     218.  00:4C88  03 05 09 04 01 00 00 00 
     219.  00:4C90                          DB $00,$80,$80,$80,$00,$00,$00,$00
     219.  00:4C90  00 80 80 80 00 00 00 00 
     220.  00:4C98                          DB $80,$10,$88,$84,$80,$00,$00,$00
     220.  00:4C98  80 10 88 84 80 00 00 00 
     221.  00:4CA0                      
     222.  00:4CA0                          ; Esqueleto Left - 2
     223.  00:4CA0                          ; mask 0 - 34h
     224.  00:4CA0                          ; mask 0
     225.  00:4CA0                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     225.  00:4CA0  0F 0D 17 12 1F 0F 0F 00 
     226.  00:4CA8                          DB $03,$05,$09,$10,$01,$06,$08,$00
     226.  00:4CA8  03 05 09 10 01 06 08 00 
     227.  00:4CB0                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     227.  00:4CB0  C0 E0 60 60 C0 80 80 80 
     228.  00:4CB8                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     228.  00:4CB8  E0 D0 C8 D0 C0 20 20 50 
     229.  00:4CC0                          ; mask 1 - 38h
     230.  00:4CC0                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     230.  00:4CC0  0F 0F 1F 1F 1F 0F 05 00 
     231.  00:4CC8                          DB $03,$05,$09,$10,$01,$00,$00,$00
     231.  00:4CC8  03 05 09 10 01 00 00 00 
     232.  00:4CD0                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     232.  00:4CD0  80 C0 C0 C0 80 00 00 00 
     233.  00:4CD8                          DB $80,$10,$88,$90,$80,$00,$20,$40
     233.  00:4CD8  80 10 88 90 80 00 20 40 
     234.  00:4CE0                          
     235.  00:4CE0                          ; Esqueleto Right - 1
     236.  00:4CE0                          ; mask 0 - 3Ch
     237.  00:4CE0                          DB $01,$03,$03,$03,$01,$00,$00,$01
     237.  00:4CE0  01 03 03 03 01 00 00 01 
     238.  00:4CE8                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     238.  00:4CE8  07 0B 13 23 03 04 04 02 
     239.  00:4CF0                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     239.  00:4CF0  F8 D8 74 24 FC F8 F8 00 
     240.  00:4CF8                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     240.  00:4CF8  C0 A0 90 20 80 40 40 20 
     241.  00:4D00                          ; mask 1 - 40h
     242.  00:4D00                          DB $00,$01,$01,$01,$00,$00,$00,$00
     242.  00:4D00  00 01 01 01 00 00 00 00 
     243.  00:4D08                          DB $01,$08,$11,$21,$01,$00,$00,$00
     243.  00:4D08  01 08 11 21 01 00 00 00 
     244.  00:4D10                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     244.  00:4D10  F8 F8 FC FC FC 78 50 00 
     245.  00:4D18                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     245.  00:4D18  C0 A0 90 20 80 00 00 00 
     246.  00:4D20                          
     247.  00:4D20                          ; Esqueleto Right - 2
     248.  00:4D20                          ; mask 0 - 44h
     249.  00:4D20                          DB $03,$07,$06,$06,$03,$01,$01,$01
     249.  00:4D20  03 07 06 06 03 01 01 01 
     250.  00:4D28                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     250.  00:4D28  07 0B 13 0B 03 04 04 0A 
     251.  00:4D30                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     251.  00:4D30  F0 B0 E8 48 F8 F0 F0 00 
     252.  00:4D38                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     252.  00:4D38  C0 A0 90 08 80 60 10 00 
     253.  00:4D40                          ; mask 1 - 48h
     254.  00:4D40                          DB $01,$03,$03,$03,$01,$00,$00,$00
     254.  00:4D40  01 03 03 03 01 00 00 00 
     255.  00:4D48                          DB $01,$08,$11,$09,$01,$00,$04,$02
     255.  00:4D48  01 08 11 09 01 00 04 02 
     256.  00:4D50                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     256.  00:4D50  F0 F0 F8 F8 F8 F0 A0 00 
     257.  00:4D58                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     257.  00:4D58  C0 A0 90 08 80 00 00 00 
     258.  00:4D60                      
     259.  00:4D60                      
     260.  00:4D60                      SPRITE_COLOR_TABLE:       
     261.  00:4D60                           ;P1 - DOWN 1
     262.  00:4D60                          ; attr 0
     263.  00:4D60                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     263.  00:4D60  06 06 0B 0B 0B 0B 0B 0B 
     264.  00:4D68                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     264.  00:4D68  0C 0C 0B 0B 04 04 04 04 
     265.  00:4D70                          ; attr 1
     266.  00:4D70                          DB $00,$00,$46,$46,$46,$44,$46,$46
     266.  00:4D70  00 00 46 46 46 44 46 46 
     267.  00:4D78                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     267.  00:4D78  4B 4B 44 44 42 42 42 00 
     268.  00:4D80                          ; attr 2
     269.  00:4D80                          DB $00,$00,$00,$00,$00,$42,$00,$00
     269.  00:4D80  00 00 00 00 00 42 00 00 
     270.  00:4D88                          DB $00,$46,$00,$00,$00,$00,$00,$00
     270.  00:4D88  00 46 00 00 00 00 00 00 
     271.  00:4D90                               
     272.  00:4D90                          ; Cada posición ha de corresponder con la tabla de atributos    
     273.  00:4D90                      
     274.  00:4D90                          ; Fantasma
     275.  00:4D90                          DB $08,$08,$08,$08,$08,$08,$08,$08
     275.  00:4D90  08 08 08 08 08 08 08 08 
     276.  00:4D98                          DB $08,$08,$08,$08,$08,$08,$08,$08
     276.  00:4D98  08 08 08 08 08 08 08 08 
     277.  00:4DA0                          ; Fantasma
     278.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     279.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     280.  00:4DA0                          ; Fantasma
     281.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     282.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     283.  00:4DA0                          ; Fantasma
     284.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     285.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08    
     286.  00:4DA0                          ; Me ahorro los colores del fantasma, la 4a posicion del array de atributos será para el disparo
     287.  00:4DA0                          ; Boomerang
     288.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     289.  00:4DA0                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     290.  00:4DA0                          DB $00,$00,$00,$0F,$0F,$0F,$0F,$0F
     290.  00:4DA0  00 00 00 0F 0F 0F 0F 0F 
     291.  00:4DA8                          DB $0F,$0F,$0F,$0F,$0F,$0F,$00,$00
     291.  00:4DA8  0F 0F 0F 0F 0F 0F 00 00 
     292.  00:4DB0                          
     293.  00:4DB0                          ; Esqueleto Left 1
     294.  00:4DB0                          ; attr 0
     295.  00:4DB0                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     295.  00:4DB0  0E 0E 0E 0E 0E 0E 0E 0E 
     296.  00:4DB8                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     296.  00:4DB8  0E 0E 0E 0E 0E 0F 0F 0F 
     297.  00:4DC0                          ; attr 1
     298.  00:4DC0                          DB $41,$49,$49,$49,$41,$41,$41,$00
     298.  00:4DC0  41 49 49 49 41 41 41 00 
     299.  00:4DC8                          DB $41,$41,$41,$41,$41,$00,$00,$00
     299.  00:4DC8  41 41 41 41 41 00 00 00 
     300.  00:4DD0                          ; Esqueleto Left 2
     301.  00:4DD0                          ; attr 0
     302.  00:4DD0                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     302.  00:4DD0  0E 0E 0E 0E 0E 0E 0E 0E 
     303.  00:4DD8                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0E
     303.  00:4DD8  0E 0E 0E 0E 0E 0F 0E 0E 
     304.  00:4DE0                          ; attr 1
     305.  00:4DE0                          DB $41,$49,$49,$49,$41,$41,$41,$00
     305.  00:4DE0  41 49 49 49 41 41 41 00 
     306.  00:4DE8                          DB $41,$41,$41,$41,$41,$00,$41,$41
     306.  00:4DE8  41 41 41 41 41 00 41 41 
     307.  00:4DF0                      
     308.  00:4DF0                          ; Esqueleto Right 1
     309.  00:4DF0                          ; attr 0
     310.  00:4DF0                          ;DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     311.  00:4DF0                          ;DB $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0E    
     312.  00:4DF0                          ; attr 1
     313.  00:4DF0                          ;DB $41,$49,$49,$49,$41,$41,$41,$41
     314.  00:4DF0                          ;DB $41,$41,$41,$41,$41,$00,$41,$41
     315.  00:4DF0                          ; Esqueleto Right 2
     316.  00:4DF0                          ; attr 0
     317.  00:4DF0                          ;DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     318.  00:4DF0                          ;DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     319.  00:4DF0                          ; attr 1
     320.  00:4DF0                          ;DB $41,$49,$49,$49,$41,$41,$41,$41
     321.  00:4DF0                          ;DB $41,$41,$41,$41,$41,$00,$00,$00
     322.  00:4DF0                      
     323.  00:4DF0                      SPRITE_COLOR_P1_UP:
     324.  00:4DF0                          ;UP 1
     325.  00:4DF0                          ; attr 0
     326.  00:4DF0                          DB $06,$06,$06,$06,$06,$06,$06,$06
     326.  00:4DF0  06 06 06 06 06 06 06 06 
     327.  00:4DF8                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     327.  00:4DF8  0C 0C 0B 0B 04 04 04 04 
     328.  00:4E00                          ; attr 1
     329.  00:4E00                          DB $00,$00,$00,$00,$00,$00,$00,$00
     329.  00:4E00  00 00 00 00 00 00 00 00 
     330.  00:4E08                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     330.  00:4E08  46 4B 44 44 42 42 42 00 
     331.  00:4E10                          ; attr 2
     332.  00:4E10                          DB $00,$00,$00,$00,$00,$00,$00,$00
     332.  00:4E10  00 00 00 00 00 00 00 00 
     333.  00:4E18                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     333.  00:4E18  00 46 42 42 00 00 00 00 
     334.  00:4E20                          
     335.  00:4E20                          ;SPRITE_COLOR_P1_UP2:
     336.  00:4E20                          ;UP 1
     337.  00:4E20                          ; attr 0
     338.  00:4E20                          DB $06,$06,$06,$06,$06,$06,$06,$06
     338.  00:4E20  06 06 06 06 06 06 06 06 
     339.  00:4E28                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     339.  00:4E28  0C 0C 0B 0B 04 04 04 04 
     340.  00:4E30                          ; attr 1
     341.  00:4E30                          DB $00,$00,$00,$00,$00,$00,$00,$00
     341.  00:4E30  00 00 00 00 00 00 00 00 
     342.  00:4E38                          DB $46,$4B,$44,$44,$42,$42,$42,$00
     342.  00:4E38  46 4B 44 44 42 42 42 00 
     343.  00:4E40                          ; attr 2
     344.  00:4E40                          DB $00,$00,$00,$00,$00,$00,$00,$00
     344.  00:4E40  00 00 00 00 00 00 00 00 
     345.  00:4E48                          DB $00,$46,$42,$42,$00,$00,$00,$00   
     345.  00:4E48  00 46 42 42 00 00 00 00 
     346.  00:4E50                      
     347.  00:4E50                      SPRITE_COLOR_P1_DOWN:
     348.  00:4E50                          ;DOWN 1
     349.  00:4E50                          ; attr 0
     350.  00:4E50                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     350.  00:4E50  06 06 0B 0B 0B 0B 0B 0B 
     351.  00:4E58                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     351.  00:4E58  0C 0C 0B 0B 04 04 04 04 
     352.  00:4E60                          ; attr 1
     353.  00:4E60                          DB $00,$00,$46,$46,$46,$44,$46,$46
     353.  00:4E60  00 00 46 46 46 44 46 46 
     354.  00:4E68                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     354.  00:4E68  4B 4B 44 44 42 42 42 00 
     355.  00:4E70                          ; attr 2
     356.  00:4E70                          DB $00,$00,$00,$00,$00,$42,$00,$00
     356.  00:4E70  00 00 00 00 00 42 00 00 
     357.  00:4E78                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     357.  00:4E78  00 46 00 00 00 00 00 00 
     358.  00:4E80                      
     359.  00:4E80                          ;SPRITE_COLOR_P1_DOWN2:
     360.  00:4E80                          ;DOWN 1
     361.  00:4E80                          ; attr 0
     362.  00:4E80                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     362.  00:4E80  06 06 0B 0B 0B 0B 0B 0B 
     363.  00:4E88                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     363.  00:4E88  0C 0C 0B 0B 04 04 04 04 
     364.  00:4E90                          ; attr 1
     365.  00:4E90                          DB $00,$00,$46,$46,$46,$44,$46,$46
     365.  00:4E90  00 00 46 46 46 44 46 46 
     366.  00:4E98                          DB $4B,$4B,$44,$44,$42,$42,$42,$00
     366.  00:4E98  4B 4B 44 44 42 42 42 00 
     367.  00:4EA0                          ; attr 2
     368.  00:4EA0                          DB $00,$00,$00,$00,$00,$42,$00,$00
     368.  00:4EA0  00 00 00 00 00 42 00 00 
     369.  00:4EA8                          DB $00,$46,$00,$00,$00,$00,$00,$00        
     369.  00:4EA8  00 46 00 00 00 00 00 00 
     370.  00:4EB0                      
     371.  00:4EB0                      SPRITE_COLOR_P1_RIGHT:
     372.  00:4EB0                          ; attr 0
     373.  00:4EB0                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     373.  00:4EB0  06 06 0B 0B 0B 0B 0B 0B 
     374.  00:4EB8                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     374.  00:4EB8  0C 0C 0B 0B 04 04 04 04 
     375.  00:4EC0                          ; attr 1
     376.  00:4EC0                          DB $00,$00,$46,$46,$44,$46,$46,$46
     376.  00:4EC0  00 00 46 46 44 46 46 46 
     377.  00:4EC8                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     377.  00:4EC8  4B 46 4C 44 42 42 00 00 
     378.  00:4ED0                          ; attr 2
     379.  00:4ED0                          DB $00,$00,$00,$00,$42,$00,$00,$00
     379.  00:4ED0  00 00 00 00 42 00 00 00 
     380.  00:4ED8                          DB $46,$00,$46,$42,$00,$00,$00,$00
     380.  00:4ED8  46 00 46 42 00 00 00 00 
     381.  00:4EE0                          ; attr 0
     382.  00:4EE0                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     382.  00:4EE0  06 06 0B 0B 0B 0B 0B 0B 
     383.  00:4EE8                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     383.  00:4EE8  0C 0C 06 04 04 04 04 04 
     384.  00:4EF0                          ; attr 1
     385.  00:4EF0                          DB $00,$00,$46,$46,$44,$46,$46,$46
     385.  00:4EF0  00 00 46 46 44 46 46 46 
     386.  00:4EF8                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     386.  00:4EF8  4B 4B 4A 42 42 42 00 00 
     387.  00:4F00                          ; attr 2
     388.  00:4F00                          DB $00,$00,$00,$00,$42,$00,$00,$00
     388.  00:4F00  00 00 00 00 42 00 00 00 
     389.  00:4F08                          DB $46,$46,$41,$00,$00,$00,$00,$00
     389.  00:4F08  46 46 41 00 00 00 00 00 
     390.  00:4F10                      
     391.  00:4F10                      mapa1:
     392.  00:4F10                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     392.  00:4F10  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     392.  00:4F20  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     393.  00:4F30                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     393.  00:4F30  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     393.  00:4F40  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     394.  00:4F50                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:4F50  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:4F60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:4F70                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:4F70  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     395.  00:4F80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:4F90                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  00:4F90  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     396.  00:4FA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  00:4FB0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     397.  00:4FB0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     397.  00:4FC0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     398.  00:4FD0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  00:4FD0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     398.  00:4FE0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  00:4FF0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  00:4FF0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     399.  00:5000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  00:5010                          
     401.  00:5010                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     401.  00:5010  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     401.  00:5020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     402.  00:5030                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     402.  00:5030  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     402.  00:5040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     403.  00:5050                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     403.  00:5050  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     403.  00:5060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     404.  00:5070                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     404.  00:5070  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     404.  00:5080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     405.  00:5090                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  00:5090  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     405.  00:50A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  00:50B0                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     406.  00:50B0  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     406.  00:50C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     407.  00:50D0                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  00:50D0  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     407.  00:50E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  00:50F0                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  00:50F0  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     408.  00:5100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  00:5110                      
     410.  00:5110                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  00:5110  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     410.  00:5120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  00:5130                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     411.  00:5130  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     411.  00:5140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     412.  00:5150                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     412.  00:5150  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     412.  00:5160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     413.  00:5170                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     413.  00:5170  01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     413.  00:5180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 
     414.  00:5190                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     414.  00:5190  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:51A0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:51B0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     415.  00:51B0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:51C0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:51D0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:51D0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:51E0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:51F0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  00:51F0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:5200  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:5210                      
     419.  00:5210                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:5210  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:5220  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:5230                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  00:5230  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:5240  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:5250                      
     422.  00:5250                      mapa2:
     423.  00:5250                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:5250  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:5260  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:5270                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     424.  00:5270  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     424.  00:5280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     425.  00:5290                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     425.  00:5290  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     425.  00:52A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     426.  00:52B0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     426.  00:52B0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     426.  00:52C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     427.  00:52D0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     427.  00:52D0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     427.  00:52E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     428.  00:52F0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     428.  00:52F0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     428.  00:5300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     429.  00:5310                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     429.  00:5310  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     429.  00:5320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     430.  00:5330                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     430.  00:5330  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     430.  00:5340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     431.  00:5350                            
     432.  00:5350                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     432.  00:5350  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     432.  00:5360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     433.  00:5370                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     433.  00:5370  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     433.  00:5380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     434.  00:5390                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     434.  00:5390  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     434.  00:53A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     435.  00:53B0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     435.  00:53B0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     435.  00:53C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     436.  00:53D0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     436.  00:53D0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     436.  00:53E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     437.  00:53F0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     437.  00:53F0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     437.  00:5400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     438.  00:5410                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     438.  00:5410  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     438.  00:5420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     439.  00:5430                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     439.  00:5430  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     439.  00:5440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     440.  00:5450                      
     441.  00:5450                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     441.  00:5450  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     441.  00:5460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     442.  00:5470                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     442.  00:5470  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     442.  00:5480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     443.  00:5490                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     443.  00:5490  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     443.  00:54A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     444.  00:54B0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     444.  00:54B0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     444.  00:54C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     445.  00:54D0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     445.  00:54D0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     445.  00:54E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     446.  00:54F0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     446.  00:54F0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     446.  00:5500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     447.  00:5510                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     447.  00:5510  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     447.  00:5520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     448.  00:5530                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     448.  00:5530  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     448.  00:5540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     449.  00:5550                            
     450.  00:5550                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01              
     450.  00:5550  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     450.  00:5560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     451.  00:5570                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     451.  00:5570  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     451.  00:5580  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     452.  00:5590                      
     453.  00:5590                      
     454.  00:5590                      mapa0:      
     455.  00:5590                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     455.  00:5590  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     455.  00:55A0  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     456.  00:55B0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     456.  00:55B0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     456.  00:55C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     457.  00:55D0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:55D0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:55E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:55F0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:55F0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:5600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:5610                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:5610  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     459.  00:5620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:5630                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     460.  00:5630  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     460.  00:5640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:5650                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     461.  00:5650  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:5660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:5670                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     462.  00:5670  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     462.  00:5680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     463.  00:5690                            
     464.  00:5690                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     464.  00:5690  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:56A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:56B0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     465.  00:56B0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     465.  00:56C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     466.  00:56D0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     466.  00:56D0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     466.  00:56E0  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     467.  00:56F0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#01        
     467.  00:56F0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  00:5700  00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 01 
     468.  00:5710                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     468.  00:5710  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  00:5720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     469.  00:5730                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     469.  00:5730  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  00:5740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     470.  00:5750                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     470.  00:5750  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  00:5760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     471.  00:5770                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     471.  00:5770  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     471.  00:5780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     472.  00:5790                      
     473.  00:5790                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     473.  00:5790  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     473.  00:57A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     474.  00:57B0                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     474.  00:57B0  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     474.  00:57C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     475.  00:57D0                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     475.  00:57D0  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     475.  00:57E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     476.  00:57F0                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     476.  00:57F0  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     476.  00:5800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     477.  00:5810                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     477.  00:5810  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  00:5820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     478.  00:5830                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     478.  00:5830  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  00:5840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     479.  00:5850                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     479.  00:5850  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  00:5860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     480.  00:5870                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     480.  00:5870  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     480.  00:5880  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     481.  00:5890                            
     482.  00:5890                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     482.  00:5890  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     482.  00:58A0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     483.  00:58B0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     483.  00:58B0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     483.  00:58C0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     484.  00:58D0                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     484.  00:58D0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     484.  00:58E0  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     485.  00:58F0                          
     486.  00:58F0                      
     487.  00:58F0                      SPRITE_COLOR_P1_LEFT:
     488.  00:58F0                          ; attr 0
     489.  00:58F0                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     489.  00:58F0  06 06 0B 0B 0B 0B 0B 0B 
     490.  00:58F8                          DB $0C,$0C,$0B,$0B,$04,$04,$04,$04
     490.  00:58F8  0C 0C 0B 0B 04 04 04 04 
     491.  00:5900                          ; attr 1
     492.  00:5900                          DB $00,$00,$46,$46,$44,$46,$46,$46
     492.  00:5900  00 00 46 46 44 46 46 46 
     493.  00:5908                          DB $4B,$46,$4C,$44,$42,$42,$00,$00
     493.  00:5908  4B 46 4C 44 42 42 00 00 
     494.  00:5910                          ; attr 2
     495.  00:5910                          DB $00,$00,$00,$00,$42,$00,$00,$00
     495.  00:5910  00 00 00 00 42 00 00 00 
     496.  00:5918                          DB $46,$00,$46,$42,$00,$00,$00,$00
     496.  00:5918  46 00 46 42 00 00 00 00 
     497.  00:5920                          
     498.  00:5920                          ;SPRITE_COLOR_P1_LEFT2:
     499.  00:5920                          ; attr 0
     500.  00:5920                          DB $06,$06,$0B,$0B,$0B,$0B,$0B,$0B
     500.  00:5920  06 06 0B 0B 0B 0B 0B 0B 
     501.  00:5928                          DB $0C,$0C,$06,$04,$04,$04,$04,$04
     501.  00:5928  0C 0C 06 04 04 04 04 04 
     502.  00:5930                          ; attr 1
     503.  00:5930                          DB $00,$00,$46,$46,$44,$46,$46,$46
     503.  00:5930  00 00 46 46 44 46 46 46 
     504.  00:5938                          DB $4B,$4B,$4A,$42,$42,$42,$00,$00
     504.  00:5938  4B 4B 4A 42 42 42 00 00 
     505.  00:5940                          ; attr 2
     506.  00:5940                          DB $00,$00,$00,$00,$42,$00,$00,$00
     506.  00:5940  00 00 00 00 42 00 00 00 
     507.  00:5948                          DB $46,$46,$41,$00,$00,$00,$00,$00
     507.  00:5948  46 46 41 00 00 00 00 00 
     445   00:5950                      
     446   00:5950  (01)                 PAGE 1
     447   01:8000                      ; CODE O NO
     448   01:8000                      
     449   01:8000  (02)                 PAGE 2
     450   02:8000                      
     451   02:8000  (03)                 PAGE 3
     452   03:8000                      
     453   03:8000  (04)                 PAGE 4
     454   04:8000  (05)                 PAGE 5
     455   05:8000  (06)                 PAGE 6
     456   06:8000                      FONT:
     457   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     458   06:87F7  (07)                 PAGE 7
     459   07:8000                      CEMENTER1
     460   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     461   07:C000  (08)                 PAGE 8
     462   08:8000  (2A00)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     463   08:AA00  (09)                 PAGE 9
     464   09:8000                      GRAPHIC
     465   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     466   09:C000  (0A)                 PAGE 10
     467   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     468   0A:C000                      
     469   0A:C000  (0B)                 PAGE 11
     470   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     471   0B:C000                      
     472   0B:C000  (0C)                 PAGE 12
     473   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     474   0C:9400                      
     475   0C:9400  (0D)                 PAGE 13
     476   0D:8000                      CEMENTER2
     477   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     478   0D:C000  (0E)                 PAGE 14
     479   0E:8000  (2A00)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     480   0E:AA00  (0F)                 PAGE 15
     481   0F:C000                      ;---------------------------------------------------------
     482   0F:C000                      ; Variables
     483   0F:C000                      ;---------------------------------------------------------
     484   0F:C000                      	
     485   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     486   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     487   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     488   0F:C000                      ;ETC
     489   0F:C000                      ;
     490   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000  (0F:0008)           FONT_HEIGHT EQU 8
       2.  0F:C000  (0F:0008)           FONT_WIDTH  EQU 8
       3.  0F:C000  00 (2)              CHR_ACR DS 2
       4.  0F:C002  00 (1)              PTR_STR_DX DS 1
       5.  0F:C003  00 (1)              PTR_STR_DY DS 1
       6.  0F:C004                      
       7.  0F:C004  00 (1)              LAST_KEY_PRESSED DS 1
       8.  0F:C005  00 (1)              OLD_KEY_PRESSED DS 1
       9.  0F:C006  00                  JIFFY_TEMP DB $00
      10.  0F:C007  00                  CHAR_SPEED_X DB $00
      11.  0F:C008  00                  CHAR_SPEED_Y DB $00
      12.  0F:C009  00                  CHAR_SPEED_X_GHOST DB $00
      13.  0F:C00A  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      14.  0F:C00B  00 (1)              CHAR_GHOST_DEAD DS 1
      15.  0F:C00C  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      16.  0F:C00D  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      17.  0F:C00E  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      18.  0F:C00F  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      19.  0F:C010  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      20.  0F:C011  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      21.  0F:C012  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      22.  0F:C013  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      23.  0F:C014  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      24.  0F:C015  00 (1)              CHAR_SPEED_SHOOT DS 1
      25.  0F:C016                      SPRITE_ATTRS:
      26.  0F:C016  00 (128)                DS 128
      27.  0F:C096                      SLOTBIOS:
      28.  0F:C096  00 (1)                  DS 1
      29.  0F:C097                      SLOTGAME:
      30.  0F:C097  00 (1)                  DS 1
      31.  0F:C098                      SLOTRAM:
      32.  0F:C098  00 (1)                  DS 1
      33.  0F:C099                      SPRITE_PTR_REPLACE:
      34.  0F:C099  00 (2)                  DS 2
      35.  0F:C09B                      SPRITE_COLOR_REPLACE:
      36.  0F:C09B  00 (2)                  DS 2
      37.  0F:C09D                      SPRITE_COLOR_REPLACE2:
      38.  0F:C09D  00 (2)                  DS 2
      39.  0F:C09F                      MAPA:
      40.  0F:C09F  00 (2)                  DS 2
      41.  0F:C0A1                      BITMAP:
      42.  0F:C0A1  00 (2)                  DS 2
     491   0F:C0A3  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000041   DISSCR
00:00000044   ENASCR
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000004   MAX_CHAR_STEPS
00:00000006   MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:00004010 X intro_strings
00:00004014   string01
00:00004025   string05
00:00004085 X mensaje
00:0000408A   check_spr_collision
00:00004097   check_spr_collision.no_collision
00:0000409A   get_bloque_en_X_Y
00:000040BB   SetVdp_Write
00:000040D7   Set212Lines
00:000040E3   ClearVram_MSX2
00:000040ED   ClearVram_MSX2.loop_2
00:000040EF   ClearVram_MSX2.loop_1
00:000040F1   ClearVram_MSX2.loop
00:000040FE X opening_screen
00:00004121   load_screen
00:00004143   _vdpsetvramwr
00:00004154 X _vdpsetvramwr14
00:0000415D   GETSLOT
00:00004174   EXIT
00:00004176   SETPAGES32K
00:0000417B   NOPRET
00:00004189   SET_SCREEN5_MODE
00:000041AB   DUMP_SPR_ALL
00:000041D0   DUMP_SPR_ATTS
00:000041EA X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:000041EB   DUMP_SPR_P1
00:00004208   move_up
00:0000423F   move_down
00:00004277   move_right
00:000042C5   move_left
00:00004313   CHECK_DIRECTION_MAIN
00:00004335   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:0000434A   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:0000435F   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:00004374   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:00004389   CHECK_DIRECTION_MAIN.FINISH
00:000043A0   UPDATE_MOVEMENT
00:000043EE   UPDATE_MOVEMENT.SET_SPR_1P_2
00:00004405   UPDATE_MOVEMENT.NO_CHAR_PATTERN_CHANGE
00:0000440B   NO_MOVEMENT
00:0000440C   MOVE_SHOOT
00:00004424   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:0000442C   MOVE_SHOOT.MOVE_SHOOT_UP
00:00004434   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:0000443C   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:00004441   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:00004456   MOVE_SHOOT.ADD_SHOOT_Y
00:00004460   MOVE_SHOOT.ADD_DISTANCE
00:0000446B X MOVE_SHOOT.HIDE_SHOOT
00:00004477   print_string
00:0000447D   print_string.loop_str
00:00004498   print_string.first_line_font
00:000044B1   print_char
00:000044E8   START
00:00004505   INIT_CHARS_VARS
00:00004576   STAGE1
00:00004596   MAIN_LOOP
00:000045C0   MAIN_LOOP.CHANGE_DIR_RIGHT
00:000045CD   MAIN_LOOP.CHANGE_DIR_LEFT
00:000045D6   MAIN_LOOP.check_pattern
00:000045ED   MAIN_LOOP.change_pattern_L
00:000045F4   MAIN_LOOP.check_pattern_RIGHT
00:00004603   MAIN_LOOP.change_pattern_R
00:00004607   MAIN_LOOP.continue
00:0000460A X MAIN_LOOP.CHECK_GHOST
00:00004626 X MAIN_LOOP.KILL_GHOST
00:0000462F   MAIN_LOOP.check_KB
00:00004651 X no_arrows
00:00004659   SHOOT_MAIN_CHAR
00:00004693   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000046A2   SHOOT_MAIN_CHAR.SHOOT_UP
00:000046B5   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:000046C5   SHOOT_MAIN_CHAR.CONTINUE
00:000046C9   STAGE2
00:0000471F   MAIN_LOOP2
00:00004740   MAIN_LOOP2.GHOST_DEAD
00:0000474B   MAIN_LOOP2.no_screen_change
00:0000477D   MAIN_LOOP2.CHANGE_DIR_RIGHT
00:0000478A   MAIN_LOOP2.CHANGE_DIR_LEFT
00:00004793   MAIN_LOOP2.check_pattern
00:000047B2   MAIN_LOOP2.change_pattern_L
00:000047BD   MAIN_LOOP2.check_pattern_RIGHT
00:000047D0   MAIN_LOOP2.change_pattern_R
00:000047D8   MAIN_LOOP2.continue
00:00004800   SPRITE_P1_UP
00:000048C0   SPRITE_P1_DOWN
00:00004980   SPRITE_P1_LEFT
00:00004A40   SPRITE_P1_RIGHT
00:00004B00   SPRITE_PATTERN
00:00004D60   SPRITE_COLOR_TABLE
00:00004DF0   SPRITE_COLOR_P1_UP
00:00004E50   SPRITE_COLOR_P1_DOWN
00:00004EB0   SPRITE_COLOR_P1_RIGHT
00:00004F10   mapa1
00:00005250   mapa2
00:00005590 X mapa0
00:000058F0   SPRITE_COLOR_P1_LEFT
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C000   CHR_ACR
0F:0000C002 X PTR_STR_DX
0F:0000C003 X PTR_STR_DY
0F:0000C004 X LAST_KEY_PRESSED
0F:0000C005   OLD_KEY_PRESSED
0F:0000C006   JIFFY_TEMP
0F:0000C007   CHAR_SPEED_X
0F:0000C008   CHAR_SPEED_Y
0F:0000C009   CHAR_SPEED_X_GHOST
0F:0000C00A   CHAR_SPEED_X_GHOST_STG2
0F:0000C00B   CHAR_GHOST_DEAD
0F:0000C00C   CHAR_GHOST_DEAD_STG2
0F:0000C00D   CHAR_MIN_STEP_STG2
0F:0000C00E   CHAR_DIR_GHOST1
0F:0000C00F   CHAR_DIR_GHOST_STG2
0F:0000C010   CHAR_DIR_MAIN
0F:0000C011   CHAR_NEW_DIR_MAIN
0F:0000C012   CHAR_MAIN_SHOOT
0F:0000C013   CHAR_MIN_STEP
0F:0000C014   CHAR_DISTANCE_SHOOT
0F:0000C015   CHAR_SPEED_SHOOT
0F:0000C016   SPRITE_ATTRS
0F:0000C096 X SLOTBIOS
0F:0000C097 X SLOTGAME
0F:0000C098 X SLOTRAM
0F:0000C099   SPRITE_PTR_REPLACE
0F:0000C09B   SPRITE_COLOR_REPLACE
0F:0000C09D   SPRITE_COLOR_REPLACE2
0F:0000C09F   MAPA
0F:0000C0A1   BITMAP


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00001956

   Address   Length Align   Label
   00004000    6480         intro_strings
   00005950       6         
   00005956    9898       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000000A3

   Address   Length Align   Label
   0000C000     163         CHR_ACR
   0000C0A3   16221       <empty>
