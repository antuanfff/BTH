Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.06.23 - 13:53:09]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:67D8                      
       3   00:67D8                      ;ROM ASCII16
       4   00:67D8                      		defpage	0,0x4000, 0x4000
       5   00:67D8                      		defpage	1,0x8000, 0x4000        
       6   00:67D8                      		defpage	2..14 ;Here it is determined rom size        
       7   00:67D8                              defpage	15,0xC000, 0x4000
       8   00:67D8                      
       9   00:67D8  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:67D8  (00:6000)           _bank1	equ	6000h
      11   00:67D8  (00:7000)           _bank2	equ	7000h
      12   00:67D8  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:67DE  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 31 61 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:0069)           CLRSPR                  equ #0069
       2.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       3.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       4.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       5.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       6.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       7.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       8.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       9.  00:4010  (00:0141)           SNSMAT					equ #0141
      10.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      11.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      12.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      13.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      14.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      15.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      16.  00:4010  (00:0062)           CHGCLR                  equ #0062   ; #F3E9 (Foreground color), #F3EA (Foreground color) #F3EB (border color). 
      19   00:4010                      ;Constantes
      20   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ;counter
       2.  00:4010  (00:006F)           counter_stg1_solved_max equ #6F
       3.  00:4010  (00:005F)           counter_stg2_solved_max equ #5F
       4.  00:4010  (00:005F)           counter_P1_flickering_max equ #5F
       5.  00:4010                      
       6.  00:4010                      ; pages for DATA
       7.  00:4010                      
       8.  00:4010  (00:0001)           SPR_DATA_PAGE    equ 1
       9.  00:4010  (00:0002)           TILES_PAGE  equ 2
      10.  00:4010                      
      11.  00:4010  (00:0009)           ENTITY_SIZE: EQU 9
      12.  00:4010                      
      13.  00:4010                      ; Sprite Collision
      14.  00:4010                      
      15.  00:4010  (00:000F)           PLAYER_COLLISION_OFFSET_X      equ 15
      16.  00:4010  (00:0010)           PLAYER_COLLISION_OFFSET_Y      equ 16
      17.  00:4010  (00:000E)           PLAYER_WIDTH                   equ 14
      18.  00:4010  (00:0010)           PLAYER_HEIGHT                  equ 16
      19.  00:4010                      
      20.  00:4010                      ; Offset Entity struct
      21.  00:4010  (00:0001)           ENEMY_X                         equ 1
      22.  00:4010  (00:0002)           ENEMY_Y                         equ 2
      23.  00:4010  (00:0003)           ENTITY_ENERGY                   equ 3
      24.  00:4010  (00:0004)           ENEMY_COLLISION_OFFSET_X        equ 4
      25.  00:4010  (00:0005)           ENEMY_COLLISION_OFFSET_Y        equ 5
      26.  00:4010  (00:0006)           ENEMY_COLLISION_WIDTH           equ 6
      27.  00:4010  (00:0007)           ENEMY_COLLISION_HEIGHT          equ 7
      28.  00:4010  (00:0008)           SPRITENUMBER_SPAT               equ 8
      29.  00:4010  (00:0009)           damage                          equ 9
      30.  00:4010                      
      31.  00:4010                      ; Notes Black Sabbath stg2
      32.  00:4010  (00:0078)           STG2_TILE1_XH    equ 120
      33.  00:4010  (00:0070)           STG2_TILE1_XL    equ 112
      34.  00:4010  (00:0070)           STG2_TILE1_YH    equ 112
      35.  00:4010  (00:0060)           STG2_TILE1_YL    equ 96
      36.  00:4010                      
      37.  00:4010  (00:0081)           STG2_TILE2_XH    equ STG2_TILE3_XH
      38.  00:4010  (00:0079)           STG2_TILE2_XL    equ STG2_TILE3_XL
      39.  00:4010  (00:0070)           STG2_TILE2_YH    equ STG2_TILE1_YH
      40.  00:4010  (00:0060)           STG2_TILE2_YL    equ STG2_TILE1_YL
      41.  00:4010                      
      42.  00:4010  (00:0081)           STG2_TILE3_XH    equ 129
      43.  00:4010  (00:0079)           STG2_TILE3_XL    equ 121
      44.  00:4010  (00:0090)           STG2_TILE3_YH    equ 144
      45.  00:4010  (00:0080)           STG2_TILE3_YL    equ 128
      46.  00:4010                      
      47.  00:4010  (00:0071)           STG2_MURRAY_X     equ 113
      48.  00:4010  (00:00AC)           STG2_MURRAY_YH    equ 172
      49.  00:4010  (00:009C)           STG2_MURRAY_YL    equ 156
      50.  00:4010  (00:0005)           STG2_DELAY_CYCLES   equ 5
      51.  00:4010                      
      52.  00:4010                      ; VDP Const
      53.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
      54.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
      55.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
      56.  00:4010                      
      57.  00:4010                      ; Energy             lv1, lv2, lv3, lv4, lv5, lv6
      58.  00:4010  18 20 28 30 38 40   ANDY_MAX_ENERGY:  db  24, 32, 40, 48, 56, 64
      59.  00:4016                      
      60.  00:4016  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
      61.  00:4016  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
      62.  00:4016  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
      63.  00:4016                      
      64.  00:4016  (00:00C2)           FIRST_LINE_DLG_BOX_v2   equ 194
      65.  00:4016  (00:00CA)           SEC_LINE_DLG_BOX_v2   equ 202
      66.  00:4016                      
      67.  00:4016  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      68.  00:4016  (00:0007)           KB_RIGHT 				equ 7
      69.  00:4016  (00:0006)           KB_DOWN 				equ 6
      70.  00:4016  (00:0005)           KB_UP 					equ	5        
      71.  00:4016  (00:0004)           KB_LEFT 				equ	4
      72.  00:4016  (00:0003)           KB_DEL 					equ	3
      73.  00:4016  (00:0000)           KB_SPACE				equ	0
      74.  00:4016                      
      75.  00:4016  (00:0001)           MOV_SPEED				equ 1
      76.  00:4016  (00:0001)           MOV_SPEED_GHOST			equ 1
      77.  00:4016  (00:0003)           MOV_SPEED_SHOOT         equ 3
      78.  00:4016  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      79.  00:4016  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      80.  00:4016  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      81.  00:4016  (00:FFE8)           REG9SAV                 equ #FFE8
      82.  00:4016  (00:0098)           PORT_0                  equ 0x98
      83.  00:4016  (00:0099)           PORT_1                  equ 0x99
      84.  00:4016  (00:009A)           PORT_2                  equ 0x9a
      85.  00:4016  (00:009B)           PORT_3                  equ 0x9b
      86.  00:4016                      
      87.  00:4016  (00:F3E0)           RG15AV  equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      88.  00:4016  (00:F3E9)           FORCLR  equ $F3E9 ; Foreground colour
      89.  00:4016  (00:F3EA)           BAKCLR  equ $f3ea ; Background colour
      90.  00:4016  (00:F3EB)           BDRCLR  equ $f3eb ; Border colour
      91.  00:4016                      
      92.  00:4016  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      93.  00:4016  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      94.  00:4016  (00:0049)           GUS_TOMB_STG1_X             equ 73
      95.  00:4016  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      96.  00:4016  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      97.  00:4016  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      98.  00:4016  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      99.  00:4016                      
     100.  00:4016  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
     101.  00:4016  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
     102.  00:4016  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
     103.  00:4016  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
     104.  00:4016  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
     105.  00:4016  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
     106.  00:4016  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
     107.  00:4016                      
     108.  00:4016  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
     109.  00:4016  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
     110.  00:4016  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
     111.  00:4016  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
     112.  00:4016  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
     113.  00:4016                      
      21   00:4016                          include "include\BTH_strings.asm"
       1.  00:4016  1C 40 38 40 54 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:401C                      ; Caben 23 caracteres en cada línea
       3.  00:401C                      string01M: db 'MIKE:                      ',0
       3.  00:401C  4D 49 4B 45 3A 20 20 20 20 20 20 20 20 20 20 20 
       3.  00:402C  20 20 20 20 20 20 20 20 20 20 20 00 
       4.  00:4038                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:4038  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:4048  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4054  00                  string03M: db 0
       6.  00:4055                      
       7.  00:4055  5B 40 76 40 91 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:405B                      ; Caben 23 caracteres en cada línea
       9.  00:405B                      string01J: db 'JOHN:                     ',0
       9.  00:405B  4A 4F 48 4E 3A 20 20 20 20 20 20 20 20 20 20 20 
       9.  00:406B  20 20 20 20 20 20 20 20 20 20 00 
      10.  00:4076                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4076  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4086  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:4091  00                  string03J: db 0
      12.  00:4092                      
      13.  00:4092  98 40 B5 40 D2 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4098                      ; Caben 23 caracteres en cada línea
      15.  00:4098                      string01G: db 'GUS:                        ',0
      15.  00:4098  47 55 53 3A 20 20 20 20 20 20 20 20 20 20 20 20 
      15.  00:40A8  20 20 20 20 20 20 20 20 20 20 20 20 00 
      16.  00:40B5                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:40B5  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:40C5  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:40D2  00                  string03G: db  0
      18.  00:40D3                      
      19.  00:40D3  D9 40 F4 40 0F 41   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:40D9                      ; Caben 23 caracteres en cada línea
      21.  00:40D9                      string01Sk: db 'MURRAY:                   ',0
      21.  00:40D9  4D 55 52 52 41 59 3A 20 20 20 20 20 20 20 20 20 
      21.  00:40E9  20 20 20 20 20 20 20 20 20 20 00 
      22.  00:40F4                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:40F4  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:4104  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:410F  00                  string03Sk: db 0
      24.  00:4110                      
      25.  00:4110  16 41 2F 41 48 41   stg1_puzzle_solved_strings: dw string01P, string02P, string03P
      26.  00:4116                      ; Caben 23 caracteres en cada línea
      27.  00:4116                      string01P: db 'ANDY:                   ',0
      27.  00:4116  41 4E 44 59 3A 20 20 20 20 20 20 20 20 20 20 20 
      27.  00:4126  20 20 20 20 20 20 20 20 00 
      28.  00:412F                      string02P: db 'LA PUERTA SE HA ABIERTO!',0
      28.  00:412F  4C 41 20 50 55 45 52 54 41 20 53 45 20 48 41 20 
      28.  00:413F  41 42 49 45 52 54 4F 21 00 
      29.  00:4148  00                  string03P: db 0
      30.  00:4149                      
      31.  00:4149  4F 41 61 41 6C 41   game_over_strings: dw string01GO, string02GO, string03GO
      32.  00:414F                      ; Caben 23 caracteres en cada línea
      33.  00:414F                      string01GO: db 'AAAAHHHHHHHHHH!!!',0
      33.  00:414F  41 41 41 41 48 48 48 48 48 48 48 48 48 48 21 21 
      33.  00:415F  21 00 
      34.  00:4161                      string02GO: db 'GAME OVER!',0
      34.  00:4161  47 41 4D 45 20 4F 56 45 52 21 00 
      35.  00:416C  00                  string03GO: db '',0
      36.  00:416D                      
      37.  00:416D  73 41 8D 41 A7 41   stg2_skull_strings: dw string01Sk2, string02Sk2, string03Sk2
      38.  00:4173                      ; Caben 23 caracteres en cada línea
      39.  00:4173                      string01Sk2: db 'MURRAY: BLACK SABBATH    ',0
      39.  00:4173  4D 55 52 52 41 59 3A 20 42 4C 41 43 4B 20 53 41 
      39.  00:4183  42 42 41 54 48 20 20 20 20 00 
      40.  00:418D                      string02Sk2: db 'TE MOSTRARA EL CAMINO    ',0
      40.  00:418D  54 45 20 4D 4F 53 54 52 41 52 41 20 45 4C 20 43 
      40.  00:419D  41 4D 49 4E 4F 20 20 20 20 00 
      41.  00:41A7  00                  string03Sk2: db '',0
      22   00:41A8                      ; Funciones auxiliares
      23   00:41A8                      	include "include\BTH_func.asm"
       1.  00:41A8                      ;
       2.  00:41A8                      ; EnemyCollisionCheck
       3.  00:41A8                      ;
       4.  00:41A8                      ;   Calculates whether a collision occurs between the player
       5.  00:41A8                      ;   and an enemy
       6.  00:41A8                      ;
       7.  00:41A8                      ; IN: iy - pointer to enemy data record
       8.  00:41A8                      ; OUT: Carry set if collision
       9.  00:41A8                      ; CHANGES: A, B, C, E
      10.  00:41A8                      ;
      11.  00:41A8                      EnemyCollisionCheck:
      12.  00:41A8  DD 7E 01                    ld      a,(ix+1)                     ; read player x-coordinate          [14]
      13.  00:41AB  C6 0F                       add     PLAYER_COLLISION_OFFSET_X       ; add offset for smaller rectangle  [8]
      14.  00:41AD  47                          ld      b,a                             ;                                   [5]
      15.  00:41AE  0E 0E                       ld      c,PLAYER_WIDTH                  ; set the width of the player       [8]
      16.  00:41B0                              
      17.  00:41B0  FD 7E 01                    ld      a,(iy+ENEMY_X)                  ; read enemy x-coordinate           [21]
      18.  00:41B3  FD 86 04                    add     (iy+ENEMY_COLLISION_OFFSET_X)   ; add offset for smaller rectangle  [21]
      19.  00:41B6  FD 5E 06                    ld      e,(iy+ENEMY_COLLISION_WIDTH)    ; set the width of the enemy        [21]
      20.  00:41B9                      
      21.  00:41B9  CD CE 41                    call    .check                          ;                                   [18]
      22.  00:41BC  D0                          ret     nc                              ;                                   [12/6]
      23.  00:41BD                      
      24.  00:41BD  3A 07 C0                    ld      a,(ENTITY_PLAYER_POINTER+ENEMY_Y)                     ; read player y-coordinate          [14]
      25.  00:41C0  C6 10                       add     PLAYER_COLLISION_OFFSET_Y       ; add offset for smaller rectangle  [8]
      26.  00:41C2  47                          ld      b,a                             ;                                   [5]
      27.  00:41C3  0E 10                       ld      c,PLAYER_HEIGHT                 ; set the height of the player      [8]
      28.  00:41C5                              
      29.  00:41C5  FD 7E 02                    ld      a,(iy+ENEMY_Y)                  ; read enemy y-coordinate           [21]
      30.  00:41C8  FD 86 05                    add     (iy+ENEMY_COLLISION_OFFSET_Y)   ; add offset for smaller rectangle  [21]
      31.  00:41CB  FD 5E 07                    ld      e,(iy+ENEMY_COLLISION_HEIGHT)    ; set the height of the enemy      [21]
      32.  00:41CE                      
      33.  00:41CE                      .check:
      34.  00:41CE  90                          sub     b               ; calculate x2-x1              [5]
      35.  00:41CF  30 04                       jr      nc,.other       ; don't jump if x2<x1          [13/8]
      36.  00:41D1  ED 44                       neg                     ; use negative value           [10]
      37.  00:41D3  93                          sub     e               ; compare with size 1          [5]
      38.  00:41D4  C9                          ret                     ; return result                [11]
      39.  00:41D5                      .other:
      40.  00:41D5  91                          sub     c               ; compare with size 1          [5]
      41.  00:41D6  C9                          ret                     ; return result                [11]
      42.  00:41D7                      
      43.  00:41D7                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
      44.  00:41D7                      ;Entrada:
      45.  00:41D7                      ;   B - Y SPR1
      46.  00:41D7                      ;   C - X SPR1
      47.  00:41D7                      
      48.  00:41D7                      ;   D - Y SPR2
      49.  00:41D7                      ;   E - X SPR2
      50.  00:41D7                      ;Salida:
      51.  00:41D7                      ;   A - colision
      52.  00:41D7                      ;Modifica:
      53.  00:41D7                      ;   A
      54.  00:41D7                      check_spr_collision:        
      55.  00:41D7  78                          LD A,B          ; a = Y SPR1
      56.  00:41D8  BA                          CP D
      57.  00:41D9  C2 E4 41                    JP NZ,.no_collision
      58.  00:41DC                      
      59.  00:41DC  79                          LD A,C          ; a = X SPR1
      60.  00:41DD  BB                          CP E
      61.  00:41DE  C2 E4 41                    JP NZ,.no_collision
      62.  00:41E1                      
      63.  00:41E1  3E 01                       LD A,1
      64.  00:41E3  C9                          RET
      65.  00:41E4                      .no_collision
      66.  00:41E4  3E 00                   LD A,0
      67.  00:41E6  C9                      RET
      68.  00:41E7                      
      69.  00:41E7                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      70.  00:41E7                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      71.  00:41E7                      ;Entrada:
      72.  00:41E7                      ;   d - X
      73.  00:41E7                      ;   e - y
      74.  00:41E7                      ;Salida:
      75.  00:41E7                      ;   a - bloque
      76.  00:41E7                      ;Modifica:
      77.  00:41E7                      ;   a, hl, de
      78.  00:41E7                      get_bloque_en_X_Y:
      79.  00:41E7                              ;(y/8)*32+(x/8)
      80.  00:41E7  7B                          ld a,e      ;a=y
      81.  00:41E8  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      82.  00:41EE  26 00                       ld h,0
      83.  00:41F0  6F                          ld l,a      ;hl=y/8
      84.  00:41F1  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      85.  00:41F6                      
      86.  00:41F6  7A                          ld a,d      ;a=x
      87.  00:41F7  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      88.  00:41FD  16 00                       ld d,0
      89.  00:41FF  5F                          ld e,a      ;de=x/8
      90.  00:4200  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      91.  00:4201                      
      92.  00:4201  ED 5B 05 C1                 ld de,(MAPA)
      93.  00:4205  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      94.  00:4206                      
      95.  00:4206  7E                          ld a,[hl]
      96.  00:4207  C9                          ret
      97.  00:4208                      
      98.  00:4208                      ; SCREEN 8
      99.  00:4208                      SetVdp_Write:
     100.  00:4208                      
     101.  00:4208                      	; transform address from 
     102.  00:4208                      	;
     103.  00:4208                      	; |           Register A            |           Register H            |           Register L            |
     104.  00:4208                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     105.  00:4208                      	;
     106.  00:4208                      	; to
     107.  00:4208                      	;
     108.  00:4208                      	; |           Register A            |           Register H            |           Register L            |
     109.  00:4208                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     110.  00:4208  CB 04                   rlc     h
     111.  00:420A  17                      rla
     112.  00:420B  CB 04                   rlc     h
     113.  00:420D  17                      rla
     114.  00:420E  CB 3C                   srl     h
     115.  00:4210  CB 3C                   srl     h
     116.  00:4212                      
     117.  00:4212  F3                      di
     118.  00:4213                      	    ; write bits a14-16 of address to R#14
     119.  00:4213  D3 99               	    out     (PORT_1), a
     120.  00:4215  3E 8E               	    ld      a, 14 + 128
     121.  00:4217  D3 99               	    out     (PORT_1), a
     122.  00:4219                      
     123.  00:4219                      	    ; write the other address bits to VDP PORT_1
     124.  00:4219  7D                  	    ld      a, l
     125.  00:421A  00                  	    nop
     126.  00:421B  D3 99               	    out     (PORT_1), a
     127.  00:421D  7C                  	    ld      a, h
     128.  00:421E  F6 40               	    or      64
     129.  00:4220  FB                      ei
     130.  00:4221  D3 99                   out     (PORT_1),a
     131.  00:4223  C9                      ret
     132.  00:4224                      
     133.  00:4224                      Set212Lines:
     134.  00:4224                              ; set LN (bit 7) of R#9 to 1
     135.  00:4224  3A E8 FF                    ld      a, (REG9SAV)
     136.  00:4227  F6 80                       or      10000000b
     137.  00:4229  47                          ld      b, a
     138.  00:422A  0E 09                       ld      c, 9            ; register #
     139.  00:422C  CD 47 00                    call    WRTVDP
     140.  00:422F  C9                          ret
     141.  00:4230                      
     142.  00:4230                      ClearVram_MSX2:
     143.  00:4230  AF                          xor     a           ; set vram write base address
     144.  00:4231  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     145.  00:4234  CD 08 42                    call    SetVdp_Write
     146.  00:4237  AF                          xor		a
     147.  00:4238                      
     148.  00:4238                          ; TODO: 
     149.  00:4238                          ;   use VDP command (currently is taking almost 1 second)
     150.  00:4238                          ;   disable screen/sprites (should I ??)
     151.  00:4238                      
     152.  00:4238                          ; clear all 128kb of VRAM
     153.  00:4238  16 02               	ld		d, 2		; 2 repetitions
     154.  00:423A                      .loop_2:
     155.  00:423A  0E 00               	ld		c, 0		; 256 repetitions
     156.  00:423C                      .loop_1:
     157.  00:423C  06 00               	ld		b, 0		; 256 repetitions
     158.  00:423E                      .loop:
     159.  00:423E  D3 98               	out		(PORT_0), a
     160.  00:4240  10 FC               	djnz	.loop
     161.  00:4242  0D                  	dec		c
     162.  00:4243  C2 3C 42            	jp		nz, .loop_1
     163.  00:4246  15                  	dec		d
     164.  00:4247  C2 3A 42            	jp		nz, .loop_2
     165.  00:424A                      
     166.  00:424A  C9                  	ret
     167.  00:424B                      
     168.  00:424B                      ; MEGAROM
     169.  00:424B                      
     170.  00:424B                      opening_screen		
     171.  00:424B  0E 00               		ld		c,0
     172.  00:424D  11 00 00            		ld		de,0
     173.  00:4250  CD 90 42            		call	_vdpsetvramwr
     174.  00:4253  1E 04               		ld	e,4
     175.  00:4255  3E 09               		ld	a, :GRAPHIC
     176.  00:4257  57                  		ld	d,a
     177.  00:4258  32 00 70            2:		ld	(_bank2),a
     178.  00:425B  21 00 80            		ld	hl,GRAPHIC
     179.  00:425E  01 98 00            		ld	bc,0x98
     180.  00:4261  3E 40               		ld	a,32*2
     181.  00:4263  ED B3               1:		otir
     182.  00:4265  3D                  		dec	a
     183.  00:4266  20 FB               		jr	nz,1b
     184.  00:4268  14                  		inc	d
     185.  00:4269  7A                  		ld	a,d
     186.  00:426A  1D                  		dec	e
     187.  00:426B  20 EB               		jr	nz,2b
     188.  00:426D  C9                  		ret 
     189.  00:426E                      
     190.  00:426E                      load_screen
     191.  00:426E  0E 00               		ld		c,0
     192.  00:4270  11 00 00            		ld		de,0
     193.  00:4273  CD 90 42            		call	_vdpsetvramwr
     194.  00:4276  1E 02               		ld	e,2					; #pages
     195.  00:4278  78                  		ld	a, b			; 1st page bitmap
     196.  00:4279  57                  		ld	d,a
     197.  00:427A  32 00 70            2:		ld	(_bank2),a
     198.  00:427D  2A 07 C1            		ld	hl,(BITMAP)		; Bitmap address
     199.  00:4280  01 98 00            		ld	bc,0x98
     200.  00:4283  3E 40               		ld	a,64
     201.  00:4285  ED B3               1:		otir
     202.  00:4287  3D                  		dec	a
     203.  00:4288  20 FB               		jr	nz,1b
     204.  00:428A  14                  		inc	d
     205.  00:428B  7A                  		ld	a,d
     206.  00:428C  1D                  		dec	e
     207.  00:428D  20 EB               		jr	nz,2b
     208.  00:428F  C9                  		ret 
     209.  00:4290                      
     210.  00:4290                      ;Set VDP for writing at address CDE (17-bit) 
     211.  00:4290                      
     212.  00:4290                      _vdpsetvramwr:
     213.  00:4290  79                  	ld a,c
     214.  00:4291  CB 02               	rlc d
     215.  00:4293  17                  	rla
     216.  00:4294  CB 02               	rlc d
     217.  00:4296  17                  	rla
     218.  00:4297  CB 3A               	srl d ; primo shift, il secondo dopo la out
     219.  00:4299                      
     220.  00:4299  D3 99               	out (0x99),a ;set bits 14-16
     221.  00:429B  3E 8E               	ld a,14+128
     222.  00:429D  D3 99               	out (0x99),a
     223.  00:429F  CB 3A               	srl d ; secondo shift.     
     224.  00:42A1                      _vdpsetvramwr14
     225.  00:42A1  7B                  	ld a,e ;set bits 0-7
     226.  00:42A2  D3 99               	out (0x99),a
     227.  00:42A4  7A                  	ld a,d ;set bits 8-13
     228.  00:42A5  F6 40               	or 0x40 ; + write access
     229.  00:42A7  D3 99               	out (0x99),a
     230.  00:42A9  C9                  	ret
     231.  00:42AA                      
     232.  00:42AA                      
     233.  00:42AA                      
     234.  00:42AA                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     235.  00:42AA                      		; -----------------------------------------------------
     236.  00:42AA                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     237.  00:42AA                      		; -----------------------------------------------------
     238.  00:42AA                      
     239.  00:42AA                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     240.  00:42AA                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     241.  00:42AA                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     242.  00:42AA                      
     243.  00:42AA                      		; --- VARIABLES EN RAM NECESARIAS ---
     244.  00:42AA                      		; NINGUNA
     245.  00:42AA                      
     246.  00:42AA                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     247.  00:42AA                      		; --- Entrada: a = SLOT                                           ---
     248.  00:42AA                      		; --- Salida: a = valor para ENASLT                               ---
     249.  00:42AA                      		; --- AUTOR: Konamiman                                            ---
     250.  00:42AA  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     251.  00:42AC  4F                  		ld	c,a				; c = slot de la pagina
     252.  00:42AD  06 00               		ld	b,0				; bc = slot de la pagina
     253.  00:42AF  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     254.  00:42B2  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     255.  00:42B3  7E                  		ld	a,(hl)				; Tomamos el valor
     256.  00:42B4  E6 80               		and	$80				; Si el bit mas alto es cero...
     257.  00:42B6  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     258.  00:42B8                      		; --- El slot esta expandido ---
     259.  00:42B8  B1                  		or	c				; Slot basico en el lugar adecuado
     260.  00:42B9  4F                  		ld	c,a				; Guardamos el valor en c
     261.  00:42BA  23                  		inc	hl				; Incrementamos hl una...
     262.  00:42BB  23                  		inc	hl				; ...dos...
     263.  00:42BC  23                  		inc	hl				; ...tres...
     264.  00:42BD  23                  		inc	hl				; ...cuatro veces
     265.  00:42BE  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     266.  00:42BF  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     267.  00:42C1  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     268.  00:42C2  C9                  		ret					; Volvemos
     269.  00:42C3                      
     270.  00:42C3                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     271.  00:42C3  3E C9               		ld	a,$C9				; Codigo de RET
     272.  00:42C5  32 C8 42            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     273.  00:42C8  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     274.  00:42C9                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     275.  00:42C9  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     276.  00:42CC  0F                  		rrca					; Rotamos a la derecha...
     277.  00:42CD  0F                  		rrca					; ...dos veces
     278.  00:42CE  CD AA 42            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     279.  00:42D1  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     280.  00:42D3  C3 24 00            		jp	ENASLT ;ENASLT
     281.  00:42D6                      
     282.  00:42D6                      SET_SCREEN5_MODE:
     283.  00:42D6                           ;Cambiamos el modo de pantalla
     284.  00:42D6                          ; BASIC: COLOR 15,1,1
     285.  00:42D6                          ; Establecer los colores
     286.  00:42D6  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     287.  00:42D9  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     288.  00:42DB  23                  	inc hl ; FORCLR+1
     289.  00:42DC  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     290.  00:42DE  23                  	inc hl ; FORCLR+2
     291.  00:42DF  36 0F               	ld [hl],15 ; Color del borde 1=negro
     292.  00:42E1                      
     293.  00:42E1  3E 05                   ld  a,5     
     294.  00:42E3  CD 5F 00                call CHGMOD 
     295.  00:42E6  CD 69 00            	call CLRSPR
     296.  00:42E9                      
     297.  00:42E9  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     298.  00:42EC                          ;En or 0+0=0, 0+1=1, 1+1=1
     299.  00:42EC                          ;En and 0+0=0, 0+1=0, 1+1=1
     300.  00:42EC                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     301.  00:42EC                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     302.  00:42EC                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     303.  00:42EC  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     304.  00:42EE                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     305.  00:42EE  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     306.  00:42F0                      
     307.  00:42F0  47                      ld b,a ;carga en b el valor de a
     308.  00:42F1  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     309.  00:42F3  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     310.  00:42F6  AF                      xor a ; ld a,0
     311.  00:42F7  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     312.  00:42FA  C9                      ret
     313.  00:42FB                      
     314.  00:42FB                      DUMP_SPR_ALL:
     315.  00:42FB                      	;ld	a, BTH_DATA			; page 
     316.  00:42FB                      	;ld	(_bank2),a
     317.  00:42FB                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:42FB                      
     319.  00:42FB  21 00 83                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:42FE  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:4301  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     322.  00:4304  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     323.  00:4307                      
     324.  00:4307                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     325.  00:4307                      
     326.  00:4307  21 7C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     327.  00:430A  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     328.  00:430D  01 80 00                ld bc,128; 4 x #Sprites
     329.  00:4310  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     330.  00:4313                      
     331.  00:4313                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     332.  00:4313                      
     333.  00:4313  21 E0 85                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     334.  00:4316  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     335.  00:4319  01 70 01                ld bc,16*23; 16 x #Sprites
     336.  00:431C  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     337.  00:431F  C9                      ret
     338.  00:4320                      	
     339.  00:4320                      load_tiles_vdp
     340.  00:4320                          
     341.  00:4320                      	;ld hl, TILES1
     342.  00:4320  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente la dirección de inicio de la VRAM          
     343.  00:4323  01 00 38                ld bc,128*16*7; 128*16*(#lineas)
     344.  00:4326  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     345.  00:4329  C9                  	ret 
     346.  00:432A                      
     347.  00:432A                      load_font_vdp    
     348.  00:432A  21 BC 8E            	ld hl, FONT
     349.  00:432D  11 00 6A                ld de, 0x6A00; la rutina necesita haber cargado previamente la dirección de inicio de la VRAM          
     350.  00:4330  01 00 08                ld bc,128*16; 32 lineas
     351.  00:4333  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     352.  00:4336  C9                  	ret 
     353.  00:4337                      
     354.  00:4337                      DUMP_SPR_ATTS:
     355.  00:4337                      
     356.  00:4337                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------	
     357.  00:4337                      
     358.  00:4337  21 7C C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     359.  00:433A  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     360.  00:433D  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     361.  00:4340  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     362.  00:4343                      
     363.  00:4343                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     364.  00:4343                      ;	JP Z,.DUMP_SPR_ATTS_END
     365.  00:4343  2A 03 C1            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     366.  00:4346  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     367.  00:4349  C5                      PUSH BC
     368.  00:434A  01 30 00            	ld bc,16*3; 16 x #Sprites
     369.  00:434D  CD 5C 00                call  LDIRVM 
     370.  00:4350  C1                  	POP BC
     371.  00:4351                      
     372.  00:4351                      .DUMP_SPR_ATTS_END:
     373.  00:4351  C9                      ret
     374.  00:4352                      
     375.  00:4352                      DUMP_SPR_P1:    
     376.  00:4352                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------	
     377.  00:4352  2A FF C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     378.  00:4355  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     379.  00:4358  C5                      PUSH BC
     380.  00:4359  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     381.  00:435C  CD 5C 00                call  LDIRVM 
     382.  00:435F  C1                  	POP BC
     383.  00:4360                      
     384.  00:4360                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     385.  00:4360                      
     386.  00:4360  2A 01 C1                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     387.  00:4363  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     388.  00:4366  C5                      PUSH BC
     389.  00:4367  01 30 00            	ld bc,16*3; 16 x #Sprites
     390.  00:436A  CD 5C 00                call  LDIRVM 
     391.  00:436D  C1                  	POP BC
     392.  00:436E                      	
     393.  00:436E                      
     394.  00:436E                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     395.  00:436E                      ;    xor a
     396.  00:436E                      ;	di			; set VRAM address to 1800h
     397.  00:436E                      ;	out (99h),a		; lower byte 00
     398.  00:436E                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     399.  00:436E                      ;	ei
     400.  00:436E                      ;	out (99h),a		; note that this is protected by the ei instruction
     401.  00:436E                      ;   push BC
     402.  00:436E                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     403.  00:436E                      ;	ld hl,(SPRITE_PTR_REPLACE)
     404.  00:436E                      
     405.  00:436E                      ;.loop1:
     406.  00:436E                      ;	outi			; send the data (HL) to port 98h 
     407.  00:436E                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     408.  00:436E                      ;   POP BC
     409.  00:436E                      
     410.  00:436E                          ; Replace 2 entries in sprite color table
     411.  00:436E                      ;    xor a
     412.  00:436E                      ;	di			; set VRAM address to 1800h
     413.  00:436E                      ;	out (99h),a		; lower byte 00
     414.  00:436E                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     415.  00:436E                      ;	ei
     416.  00:436E                      ;	out (99h),a		; note that this is protected by the ei instruction
     417.  00:436E                       ;   push BC
     418.  00:436E                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     419.  00:436E                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     420.  00:436E                      	
     421.  00:436E                      ;.loop2:
     422.  00:436E                      ;	outi			; send the data (HL) to port 98h 
     423.  00:436E                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     424.  00:436E                       ;   POP BC
     425.  00:436E                      
     426.  00:436E  C9                      ret
     427.  00:436F                      
     428.  00:436F                      SetPalette:
     429.  00:436F  AF                  	xor a
     430.  00:4370  F3                  	di
     431.  00:4371  D3 99               	out ($99),a
     432.  00:4373  3E 90               	ld a,16+128
     433.  00:4375  D3 99               	out ($99),a
     434.  00:4377  01 9A 20            	ld bc,$209A
     435.  00:437A  ED B3               	otir
     436.  00:437C  FB                  	ei
     437.  00:437D  C9                  	ret
      24   00:437E                          include "include\BTH_animate.asm"
       1.  00:437E                      ; Movimiento P1
       2.  00:437E                      move_up:
       3.  00:437E  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:437F                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:437F  AF                      XOR A
       6.  00:4380  32 77 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:4383  CD B1 44                CALL CHECK_DIRECTION_MAIN
       8.  00:4386                      
       9.  00:4386  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y); obtenemos el valor actual de la posicion y
      10.  00:4389  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:438B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:438C  DD 7E 01                ld a,(ix+1)
      13.  00:438F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:4390  CD E7 41                call get_bloque_en_X_Y
      15.  00:4393  FE 01                   cp 1
      16.  00:4395  CA B9 45                jp z,NO_MOVEMENT
      17.  00:4398                      
      18.  00:4398  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y); obtenemos el valor actual de la posicion y
      19.  00:439B  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:439D  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:439E  DD 7E 01                ld a,(ix+1)
      22.  00:43A1  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:43A3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:43A4  CD E7 41                call get_bloque_en_X_Y
      25.  00:43A7  FE 01                   cp 1
      26.  00:43A9  CA B9 45                jp z,NO_MOVEMENT
      27.  00:43AC                            
      28.  00:43AC  3E FF               	LD A, -MOV_SPEED
      29.  00:43AE  32 6E C0            	LD (CHAR_SPEED_Y), A
      30.  00:43B1  CD 3E 45                call UPDATE_MOVEMENT   
      31.  00:43B4  CD 75 45                call ANIMATE_P1
      32.  00:43B7                          ;JP no_arrows
      33.  00:43B7  C9                      ret
      34.  00:43B8                      
      35.  00:43B8                      move_down:
      36.  00:43B8  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:43B9                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:43B9  3E 01                   LD A,$01
      39.  00:43BB  32 77 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:43BE  CD B1 44                CALL CHECK_DIRECTION_MAIN
      41.  00:43C1                      
      42.  00:43C1  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y); obtenemos el valor actual de la posicion y
      43.  00:43C4  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:43C6  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:43C7  DD 7E 01                ld a,(ix+1)
      46.  00:43CA  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:43CB  CD E7 41                call get_bloque_en_X_Y
      48.  00:43CE  FE 01                   cp 1
      49.  00:43D0  CA B9 45                jp z,NO_MOVEMENT
      50.  00:43D3                      
      51.  00:43D3  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y); obtenemos el valor actual de la posicion y
      52.  00:43D6  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:43D8  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:43D9  DD 7E 01                ld a,(ix+1)
      55.  00:43DC  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:43DE  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:43DF  CD E7 41                call get_bloque_en_X_Y
      58.  00:43E2  FE 01                   cp 1
      59.  00:43E4  CA B9 45                jp z,NO_MOVEMENT
      60.  00:43E7                          
      61.  00:43E7  3E 01                   LD A, MOV_SPEED
      62.  00:43E9  32 6E C0            	LD (CHAR_SPEED_Y), A
      63.  00:43EC  CD 3E 45                call UPDATE_MOVEMENT    
      64.  00:43EF  CD 75 45                call ANIMATE_P1
      65.  00:43F2                          ;JP no_arrows
      66.  00:43F2  C9                      ret
      67.  00:43F3                      
      68.  00:43F3                      move_right:
      69.  00:43F3  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:43F4                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:43F4  CB 69                   BIT KB_UP, C
      72.  00:43F6  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:43F8  CB 71                   BIT KB_DOWN, C
      74.  00:43FA  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:43FC  3E 03                   LD A,$03
      76.  00:43FE  32 77 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:4401  CD B1 44                CALL CHECK_DIRECTION_MAIN
      78.  00:4404                      
      79.  00:4404                      .KB_UPDOWN_PRESSED:
      80.  00:4404  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:4407  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:4409  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:440A  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y)   ;obtenemos el valor actual de la posicion Y
      84.  00:440D  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:440F  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:4410  CD E7 41                call get_bloque_en_X_Y
      87.  00:4413  FE 01                   cp 1
      88.  00:4415  CA B9 45                jp z,NO_MOVEMENT
      89.  00:4418                      
      90.  00:4418                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:4418  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:441B  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:441D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:441E  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y) ;obtenemos el valor actual de la posicion y
      95.  00:4421  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:4423  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:4424  CD E7 41                call get_bloque_en_X_Y
      98.  00:4427  FE 01                   cp 1
      99.  00:4429  CA B9 45                jp z,NO_MOVEMENT
     100.  00:442C                      
     101.  00:442C                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:442C  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:442F  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:4431  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:4432  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y) ;obtenemos el valor actual de la posicion y
     106.  00:4435  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:4437  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:4438  CD E7 41                call get_bloque_en_X_Y
     109.  00:443B  FE 01                   cp 1
     110.  00:443D  CA B9 45                jp z,NO_MOVEMENT    
     111.  00:4440                          
     112.  00:4440  3E 01                   LD A, MOV_SPEED
     113.  00:4442  32 6D C0            	LD (CHAR_SPEED_X), A
     114.  00:4445  CD 3E 45                call UPDATE_MOVEMENT
     115.  00:4448  CB 69                   BIT KB_UP, C
     116.  00:444A  C8                      ret z
     117.  00:444B  CB 71                   BIT KB_DOWN, C
     118.  00:444D  C8                      ret z
     119.  00:444E  CD 75 45                call ANIMATE_P1    
     120.  00:4451  C9                      ret
     121.  00:4452                      
     122.  00:4452                      move_left:
     123.  00:4452  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:4453                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:4453  CB 69                   BIT KB_UP, C
     126.  00:4455  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:4457  CB 71                   BIT KB_DOWN, C
     128.  00:4459  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:445B  3E 02                   LD A,$02
     130.  00:445D  32 77 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:4460  CD B1 44                CALL CHECK_DIRECTION_MAIN
     132.  00:4463                      .KB_UPDOWN_PRESSED:
     133.  00:4463  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:4466  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:4468  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:4469  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y)   ;obtenemos el valor actual de la posicion Y
     137.  00:446C  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:446E  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:446F  CD E7 41                call get_bloque_en_X_Y
     140.  00:4472  FE 01                   cp 1
     141.  00:4474  CA B9 45                jp z,NO_MOVEMENT
     142.  00:4477                      
     143.  00:4477                          ;Miramos el tile inferior parte central del personaje
     144.  00:4477  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:447A  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:447C  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:447D  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y)   ;obtenemos el valor actual de la posicion Y
     148.  00:4480  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:4482  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:4483  CD E7 41                call get_bloque_en_X_Y
     151.  00:4486  FE 01                   cp 1
     152.  00:4488  CA B9 45                jp z,NO_MOVEMENT
     153.  00:448B                      
     154.  00:448B                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:448B  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:448E  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:4490  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:4491  3A 07 C0                ld a,(ENTITY_PLAYER_POINTER+ENEMY_Y)   ;obtenemos el valor actual de la posicion Y
     159.  00:4494  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:4496  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:4497  CD E7 41                call get_bloque_en_X_Y
     162.  00:449A  FE 01                   cp 1
     163.  00:449C  CA B9 45                jp z,NO_MOVEMENT
     164.  00:449F                      
     165.  00:449F  3E FF                   LD A, -MOV_SPEED
     166.  00:44A1  32 6D C0            	LD (CHAR_SPEED_X), A
     167.  00:44A4  CD 3E 45                call UPDATE_MOVEMENT     
     168.  00:44A7  CB 69                   BIT KB_UP, C
     169.  00:44A9  C8                      ret z
     170.  00:44AA  CB 71                   BIT KB_DOWN, C
     171.  00:44AC  C8                      ret z
     172.  00:44AD  CD 75 45                call ANIMATE_P1    
     173.  00:44B0  C9                      ret
     174.  00:44B1                      
     175.  00:44B1                      CHECK_DIRECTION_MAIN:
     176.  00:44B1  3A 76 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:44B4  2A 77 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:44B7  BD                  	CP L		            	                ;Son iguales?
     179.  00:44B8  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:44B9  3A 77 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:44BC  FE 01                   CP $01
     182.  00:44BE  CA D3 44                JP Z,.SET_DIR_DOWN
     183.  00:44C1  FE 00                   CP $00
     184.  00:44C3  CA E8 44                JP Z,.SET_DIR_UP
     185.  00:44C6  FE 03                   CP $03
     186.  00:44C8  CA 12 45                JP Z,.SET_DIR_RIGHT
     187.  00:44CB  FE 02                   CP $02
     188.  00:44CD  CA FD 44                JP Z,.SET_DIR_LEFT
     189.  00:44D0  C3 27 45                JP .FINISH
     190.  00:44D3                          
     191.  00:44D3                      .SET_DIR_DOWN:    
     192.  00:44D3  21 C0 80                ld hl, SPRITE_P1_DOWN
     193.  00:44D6  22 FF C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:44D9                          
     195.  00:44D9  21 C0 86                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:44DC  22 01 C1                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:44DF  22 03 C1                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:44E2  CD 52 43                CALL DUMP_SPR_P1    
     199.  00:44E5                      
     200.  00:44E5  C3 27 45                JP .FINISH
     201.  00:44E8                      
     202.  00:44E8                      .SET_DIR_UP:
     203.  00:44E8  21 00 80                ld hl, SPRITE_P1_UP
     204.  00:44EB  22 FF C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:44EE                          
     206.  00:44EE  21 60 86                ld hl, SPRITE_COLOR_P1_UP
     207.  00:44F1  22 01 C1                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:44F4  22 03 C1                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:44F7  CD 52 43                CALL DUMP_SPR_P1
     210.  00:44FA  C3 27 45                JP .FINISH
     211.  00:44FD                      
     212.  00:44FD                      .SET_DIR_LEFT:    
     213.  00:44FD  21 80 81                ld hl, SPRITE_P1_LEFT
     214.  00:4500  22 FF C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:4503                          
     216.  00:4503  21 BC 8D                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:4506  22 01 C1                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:4509  22 03 C1                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:450C  CD 52 43                CALL DUMP_SPR_P1   
     220.  00:450F  C3 27 45                JP .FINISH
     221.  00:4512                      
     222.  00:4512                      .SET_DIR_RIGHT:
     223.  00:4512  21 40 82                ld hl, SPRITE_P1_RIGHT
     224.  00:4515  22 FF C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:4518                          
     226.  00:4518  21 20 87                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:451B  22 01 C1                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:451E  22 03 C1                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:4521                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:4521  CD 52 43                CALL DUMP_SPR_P1
     231.  00:4524  C3 27 45                JP .FINISH
     232.  00:4527                      
     233.  00:4527                      .FINISH:
     234.  00:4527  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:4528  32 79 C0                LD (CHAR_MIN_STEP), A   
     236.  00:452B  3A 77 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:452E  32 76 C0                LD (CHAR_DIR_MAIN),A    
     238.  00:4531                      
     239.  00:4531                          ; ponemos el primer frame del sprite
     240.  00:4531  DD 36 02 00             LD (ix+2), $00
     241.  00:4535  DD 36 06 04             LD (ix+6), $04
     242.  00:4539  DD 36 0A 08             LD (ix+10), $08
     243.  00:453D                          ;CALL DUMP_SPR_ATTS
     244.  00:453D  C9                      RET
     245.  00:453E                      
     246.  00:453E                      UPDATE_MOVEMENT:
     247.  00:453E  3A 07 C0            	LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)          ;cargamos la Y			
     248.  00:4541  2A 6E C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:4544  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:4545                          
     251.  00:4545                      	;LD (ix), A
     252.  00:4545                          ;LD (ix+4), A
     253.  00:4545                          ;LD (ix+8), A
     254.  00:4545  32 07 C0                LD (ENTITY_PLAYER_POINTER+ENEMY_Y), A
     255.  00:4548                      	
     256.  00:4548  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     257.  00:454B  2A 6D C0            	LD HL, (CHAR_SPEED_X)
     258.  00:454E  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     259.  00:454F                          
     260.  00:454F  DD 77 01            	LD (ix+1), A
     261.  00:4552  DD 77 05                LD (ix+5), A
     262.  00:4555  DD 77 09                LD (ix+9), A	
     263.  00:4558  32 06 C0                LD (ENTITY_PLAYER_POINTER+ENEMY_X), A
     264.  00:455B                      
     265.  00:455B  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     266.  00:455C  32 6D C0                LD (CHAR_SPEED_X),A
     267.  00:455F  32 6E C0                LD (CHAR_SPEED_Y),A	
     268.  00:4562                      
     269.  00:4562  3A 20 C0                LD A, (P1_flickering_state)
     270.  00:4565  FE 01                   CP 1
     271.  00:4567  C8                      RET Z   ; si está parpadeando no imprime el SPRITE en pantalla
     272.  00:4568                          
     273.  00:4568                          ;LD A, (ENTITY_PLAYER_POINTER+ENEMY_X)
     274.  00:4568                          ;LD (ix+1), A
     275.  00:4568                          ;LD (ix+5), A
     276.  00:4568                          ;LD (ix+9), A	
     277.  00:4568                          
     278.  00:4568  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     279.  00:456B  DD 77 00                LD (ix), A
     280.  00:456E  DD 77 04                LD (ix+4), A
     281.  00:4571  DD 77 08                LD (ix+8), A
     282.  00:4574                      
     283.  00:4574  C9                      RET
     284.  00:4575                      
     285.  00:4575                      ANIMATE_P1:
     286.  00:4575                          ; Animación/pasos de personaje	
     287.  00:4575  3A 79 C0                LD A, (CHAR_MIN_STEP)
     288.  00:4578  FE 05                   CP MAX_CHAR_STEPS
     289.  00:457A  C2 B3 45                JP NZ,.NO_CHAR_PATTERN_CHANGE
     290.  00:457D                          
     291.  00:457D  AF                      XOR A
     292.  00:457E  32 79 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     293.  00:4581  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     294.  00:4584  FE 00                   CP $00
     295.  00:4586  CA 9C 45                JP Z,.SET_SPR_1P_2
     296.  00:4589  DD 36 02 00             LD (ix+2), $00
     297.  00:458D  DD 36 06 04             LD (ix+6), $04
     298.  00:4591  DD 36 0A 08             LD (ix+10), $08
     299.  00:4595  2A 01 C1                ld hl, (SPRITE_COLOR_REPLACE)
     300.  00:4598  22 03 C1                ld (SPRITE_COLOR_REPLACE2), HL
     301.  00:459B  C9                      ret
     302.  00:459C                      
     303.  00:459C                      .SET_SPR_1P_2:
     304.  00:459C  DD 36 02 0C             LD (ix+2), $0C
     305.  00:45A0  DD 36 06 10             LD (ix+6), $10
     306.  00:45A4  DD 36 0A 14             LD (ix+10), $14
     307.  00:45A8                              
     308.  00:45A8  2A 01 C1                ld HL, (SPRITE_COLOR_REPLACE)
     309.  00:45AB  11 30 00                ld DE,48
     310.  00:45AE  19                      ADD HL, DE
     311.  00:45AF  22 03 C1                ld (SPRITE_COLOR_REPLACE2), HL
     312.  00:45B2                          ;ld a, 0
     313.  00:45B2  C9                  	ret
     314.  00:45B3                      
     315.  00:45B3                      .NO_CHAR_PATTERN_CHANGE    
     316.  00:45B3  C6 01                   ADD 1
     317.  00:45B5  32 79 C0                LD (CHAR_MIN_STEP), A    
     318.  00:45B8  C9                      ret
     319.  00:45B9                      
     320.  00:45B9                      NO_MOVEMENT:    
     321.  00:45B9  C9                      ret
     322.  00:45BA                      
     323.  00:45BA                      MOVE_SHOOT:
     324.  00:45BA  3A 78 C0                LD A,(CHAR_MAIN_SHOOT)    
     325.  00:45BD  FE 01                   CP $01
     326.  00:45BF  CA EA 45                JP Z,.MOVE_SHOOT_LEFT
     327.  00:45C2  FE 02                   CP $02
     328.  00:45C4  CA D2 45                JP Z,.MOVE_SHOOT_RIGHT
     329.  00:45C7  FE 03                   CP $03
     330.  00:45C9  CA DA 45                JP Z,.MOVE_SHOOT_UP    
     331.  00:45CC  FE 04                   CP $04
     332.  00:45CE  CA E2 45                JP Z,.MOVE_SHOOT_DOWN
     333.  00:45D1  C9                      RET
     334.  00:45D2                      
     335.  00:45D2                      .MOVE_SHOOT_RIGHT:        
     336.  00:45D2  3E 03                   LD A, MOV_SPEED_SHOOT
     337.  00:45D4  32 7B C0            	LD (CHAR_SPEED_SHOOT), A    
     338.  00:45D7  C3 EF 45                JP .CHECK_SHOOT_DISTANCE
     339.  00:45DA                      
     340.  00:45DA                      .MOVE_SHOOT_UP:        
     341.  00:45DA  3E FD                   LD A, -MOV_SPEED_SHOOT
     342.  00:45DC  32 7B C0            	LD (CHAR_SPEED_SHOOT), A    
     343.  00:45DF  C3 EF 45                JP .CHECK_SHOOT_DISTANCE
     344.  00:45E2                      
     345.  00:45E2                      .MOVE_SHOOT_DOWN:
     346.  00:45E2  3E 03                   LD A, MOV_SPEED_SHOOT
     347.  00:45E4  32 7B C0            	LD (CHAR_SPEED_SHOOT), A    
     348.  00:45E7  C3 EF 45                JP .CHECK_SHOOT_DISTANCE
     349.  00:45EA                      
     350.  00:45EA                      .MOVE_SHOOT_LEFT:    
     351.  00:45EA  3E FD                   LD A, -MOV_SPEED_SHOOT
     352.  00:45EC  32 7B C0            	LD (CHAR_SPEED_SHOOT), A    
     353.  00:45EF                      
     354.  00:45EF                      .CHECK_SHOOT_DISTANCE:
     355.  00:45EF                          ; Miramos si va a izq o der
     356.  00:45EF  3A 78 C0                LD A,(CHAR_MAIN_SHOOT)    
     357.  00:45F2  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     358.  00:45F4  D2 04 46                JP NC,.ADD_SHOOT_Y
     359.  00:45F7                          ; Movemos el disparo
     360.  00:45F7  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     361.  00:45FA  2A 7B C0            	LD HL, (CHAR_SPEED_SHOOT)
     362.  00:45FD  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     363.  00:45FE  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     364.  00:4601  C3 0E 46                JP .ADD_DISTANCE
     365.  00:4604                      .ADD_SHOOT_Y
     366.  00:4604                          ; Movemos el disparo
     367.  00:4604  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     368.  00:4607  2A 7B C0            	LD HL, (CHAR_SPEED_SHOOT)
     369.  00:460A  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     370.  00:460B  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     371.  00:460E                      
     372.  00:460E                      .ADD_DISTANCE:
     373.  00:460E  3A 7A C0                LD A,(CHAR_DISTANCE_SHOOT)
     374.  00:4611  C6 03                   ADD MOV_SPEED_SHOOT
     375.  00:4613  32 7A C0                LD (CHAR_DISTANCE_SHOOT),A    
     376.  00:4616  FE 30                   CP MAX_DISTANCE_SHOOT
     377.  00:4618  C0                      RET NZ
     378.  00:4619                      
     379.  00:4619                      .HIDE_SHOOT:
     380.  00:4619  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     381.  00:461D  AF                      XOR A
     382.  00:461E  32 78 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     383.  00:4621  32 7A C0                LD (CHAR_DISTANCE_SHOOT),A
     384.  00:4624  C9                      RET
     385.  00:4625                      
     386.  00:4625                      SHOOT_MAIN_CHAR:    
     387.  00:4625  3A 78 C0                LD A, (CHAR_MAIN_SHOOT)
     388.  00:4628  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     389.  00:462A  C8                      RET Z;,MAIN_LOOP
     390.  00:462B  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     391.  00:462D  C8                      RET Z;,MAIN_LOOP
     392.  00:462E  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     393.  00:4630  C8                      RET Z;,MAIN_LOOP
     394.  00:4631  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     395.  00:4633  C8                      RET Z;,MAIN_LOOP
     396.  00:4634                      
     397.  00:4634  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     398.  00:4638                      
     399.  00:4638  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)          
     400.  00:463B  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     401.  00:463E                      
     402.  00:463E  3A 76 C0                LD A, (CHAR_DIR_MAIN)
     403.  00:4641  FE 03                   CP $03
     404.  00:4643  CA 5F 46                JP Z,.SHOOT_RIGHT
     405.  00:4646  FE 00                   CP $00
     406.  00:4648  CA 6E 46                JP Z,.SHOOT_UP
     407.  00:464B  FE 01                   CP $01
     408.  00:464D  CA 81 46                JP Z,.SHOOT_DOWN
     409.  00:4650                          ; SHOOT LEFT
     410.  00:4650  3E 01                   LD A,$01                ; SHOOT LEFT
     411.  00:4652  32 78 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     412.  00:4655  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     413.  00:4658  21 F4 FF            	LD HL, -12
     414.  00:465B  85                  	ADD L
     415.  00:465C                          
     416.  00:465C  C3 91 46                JP .CONTINUE
     417.  00:465F                      
     418.  00:465F                      .SHOOT_RIGHT:    
     419.  00:465F  3E 02                   LD A,$02
     420.  00:4661  32 78 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     421.  00:4664                          
     422.  00:4664  DD 7E 01                LD A, (ix+1)			;cargamos la X
     423.  00:4667  21 0C 00            	LD HL, 12
     424.  00:466A  85                  	ADD L
     425.  00:466B  C3 91 46                JP .CONTINUE
     426.  00:466E                      
     427.  00:466E                      .SHOOT_UP:
     428.  00:466E  3E 03                   LD A,$03
     429.  00:4670  32 78 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     430.  00:4673                          
     431.  00:4673                          ; Sumamos el desplazamiento a la Y
     432.  00:4673  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     433.  00:4676  D6 10                   SUB 16
     434.  00:4678  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     435.  00:467B                          ;LD (ix+17), D
     436.  00:467B  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     437.  00:467E  C3 91 46                JP .CONTINUE
     438.  00:4681                      
     439.  00:4681                      .SHOOT_DOWN
     440.  00:4681  3E 04               	LD A,$04
     441.  00:4683  32 78 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     442.  00:4686                          
     443.  00:4686                          ; Sumamos el desplazamiento a la Y
     444.  00:4686  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     445.  00:4689  C6 10                   ADD 16
     446.  00:468B  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     447.  00:468E                          ;LD (ix+17), D
     448.  00:468E  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     449.  00:4691                      
     450.  00:4691                      .CONTINUE:
     451.  00:4691                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     452.  00:4691  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     453.  00:4694                          ;jp MAIN_LOOP
     454.  00:4694  C9                      ret
     455.  00:4695                      
     456.  00:4695                      BOUNCE_ANDY:    
     457.  00:4695                          ;ld hl, SPRITE_COLOR_P1_RED
     458.  00:4695                          ;ld (SPRITE_COLOR_REPLACE), HL
     459.  00:4695                          ;ld (SPRITE_COLOR_REPLACE2), HL
     460.  00:4695                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     461.  00:4695                          ;CALL DUMP_SPR_P1
     462.  00:4695                      
     463.  00:4695  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     464.  00:4698  C6 10                   ADD 16
     465.  00:469A  32 07 C0                LD (ENTITY_PLAYER_POINTER+ENEMY_Y), A
     466.  00:469D  DD 77 00                LD (ix), A
     467.  00:46A0  DD 77 04                LD (ix+4), A
     468.  00:46A3  DD 77 08                LD (ix+8), A
     469.  00:46A6                      
     470.  00:46A6  C9                      ret
      25   00:46A7                      	include "include\VDP.asm"
       1.  00:46A7                      ; Offset commands registers
       2.  00:46A7  (00:0000)           VDP_SX		 EQU 0
       3.  00:46A7  (00:0002)           VDP_SY		 EQU 2
       4.  00:46A7  (00:0004)           VDP_DX		 EQU 4
       5.  00:46A7  (00:0006)           VDP_DY		 EQU 6
       6.  00:46A7  (00:0008)           VDP_NX		 EQU 8
       7.  00:46A7  (00:000A)           VDP_NY		 EQU 10
       8.  00:46A7  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:46A7  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:46A7  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:46A7                      
      12.  00:46A7                      ; Offset for sprite commands from memory
      13.  00:46A7                      
      14.  00:46A7                      ; VDP Commands
      15.  00:46A7  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:46A7  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:46A7  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:46A7  (00:0098)           CMD_LMMM	equ	$98
      19.  00:46A7  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:46A7  (00:0080)           CMD_LMMV    equ $80
      21.  00:46A7                      
      22.  00:46A7                      ; Logical operations
      23.  00:46A7  (00:0000)           VDP_IMP		equ	%0000
      24.  00:46A7  (00:0001)           VDP_AND		equ	%0001
      25.  00:46A7  (00:0002)           VDP_OR		equ	%0010
      26.  00:46A7  (00:0003)           VDP_XOR		equ	%0011
      27.  00:46A7  (00:0004)           VDP_NOT		equ	%0100
      28.  00:46A7  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:46A7  (00:0009)           VDP_TAND	equ	%1001
      30.  00:46A7  (00:000A)           VDP_TOR		equ	%1010
      31.  00:46A7  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:46A7  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:46A7                      
      34.  00:46A7                      ; Tile
      35.  00:46A7  (00:0010)           ENERGY_WIDTH		equ	16		; Blood drops
      36.  00:46A7  (00:0020)           TILE_WIDTH			equ	32
      37.  00:46A7  (00:0010)           TILE_HEIGHT			equ	16
      38.  00:46A7  (00:0001)           TILES_VDP_PAGE			equ	1		; Page where tiles are stored
      39.  00:46A7  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      40.  00:46A7  (00:0002)           BACK_BUFFER			equ 2		; we will draw to page 1
      41.  00:46A7  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      42.  00:46A7                      
      43.  00:46A7                      ; Tile Map
      44.  00:46A7  (00:0000)           TILENUM_OFFSET	equ 0
      45.  00:46A7  (00:0001)           DX_OFFSET	equ 1
      46.  00:46A7  (00:0002)           DY_OFFSET	equ 2
      47.  00:46A7  (00:0003)           REPS_OFFSET	equ 3
      48.  00:46A7  (00:0004)           TILEMAP_SIZE	equ 4
      49.  00:46A7                      
      50.  00:46A7                      ; Metatiles
      51.  00:46A7  (00:0000)           METATILE_SX		equ 0
      52.  00:46A7  (00:0001)           METATILE_SY		equ 1
      53.  00:46A7  (00:0002)           METATILE_NX		equ 2
      54.  00:46A7  (00:0003)           METATILE_NY		equ 3
      55.  00:46A7  (00:0004)           METATILE_SIZE	equ 4
      56.  00:46A7                      
      57.  00:46A7                      ; Font
      58.  00:46A7  (00:0008)           FONT_HEIGHT			equ 8
      59.  00:46A7  (00:0008)           FONT_WIDTH			equ 8
      60.  00:46A7  (00:00D4)           FONT_Y_OFFSET_1L	equ 212
      61.  00:46A7  (00:00DC)           FONT_Y_OFFSET_2L	equ 220
      62.  00:46A7                      
      63.  00:46A7                      ; Dialog Box
      64.  00:46A7  (00:0014)           DIAGBOX_HEIGHT	equ 20
      65.  00:46A7  (00:00FF)           DIAGBOX_WIDTH	equ 255
      66.  00:46A7                      
      67.  00:46A7                      ;---------------------------------------------------------------------------
      68.  00:46A7                      ; Init the RAM buffers used to draw a tile, energy and entities
      69.  00:46A7                      ;---------------------------------------------------------------------------
      70.  00:46A7                      initVDPBuffers:
      71.  00:46A7  21 3C 4A            		ld	hl,charDatROM
      72.  00:46AA  11 23 C0            		ld	de,charDat
      73.  00:46AD  01 0F 00            		ld	bc,15
      74.  00:46B0  ED B0               		ldir
      75.  00:46B2                      
      76.  00:46B2  21 4B 4A            		ld	hl,tileDatROM
      77.  00:46B5  11 32 C0            		ld	de,tileDat
      78.  00:46B8  01 0F 00            		ld	bc,15
      79.  00:46BB  ED B0               		ldir
      80.  00:46BD                      		
      81.  00:46BD  21 5A 4A            		ld	hl,tileDatTransROM
      82.  00:46C0  11 41 C0            		ld	de,tileDatTrans
      83.  00:46C3  01 0F 00            		ld	bc,15
      84.  00:46C6  ED B0               		ldir	
      85.  00:46C8                      
      86.  00:46C8  21 69 4A            		ld	hl,energyDatROM
      87.  00:46CB  11 50 C0            		ld	de,energyDat
      88.  00:46CE  01 0F 00            		ld	bc,15
      89.  00:46D1  ED B0               		ldir	
      90.  00:46D3                      
      91.  00:46D3  21 1F 61            		ld 	hl, init_playerDAT
      92.  00:46D6  11 05 C0            		ld de, ENTITY_PLAYER_POINTER
      93.  00:46D9  01 09 00            		ld bc,ENTITY_SIZE
      94.  00:46DC  ED B0               		ldir
      95.  00:46DE                      
      96.  00:46DE  21 28 61            		ld 	hl, enemy1_stg1DAT
      97.  00:46E1                      		;add hl, 9			; ENTITY_SIZE
      98.  00:46E1  11 0E C0            		ld de, ENTITY_ENEMY1_POINTER
      99.  00:46E4  01 09 00            		ld bc,ENTITY_SIZE
     100.  00:46E7  ED B0               		ldir
     101.  00:46E9                      
     102.  00:46E9  C9                  		ret
     103.  00:46EA                      
     104.  00:46EA                      print_strings_dialog_box:		
     105.  00:46EA                      
     106.  00:46EA  FD 66 01            	LD H, (IY+1)
     107.  00:46ED  FD 6E 00            	LD L, (IY)
     108.  00:46F0  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
     109.  00:46F3  FD E5               	PUSH IY
     110.  00:46F5  CD 17 47                call print_string 
     111.  00:46F8  FD E1                   POP IY
     112.  00:46FA                      
     113.  00:46FA  FD 66 03            	LD H, (IY+3)
     114.  00:46FD  FD 6E 02            	LD L, (IY+2)
     115.  00:4700  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
     116.  00:4703  FD E5               	PUSH IY
     117.  00:4705  CD 17 47                call print_string 
     118.  00:4708  FD E1               	POP IY
     119.  00:470A                      
     120.  00:470A  FD 66 05                LD H, (IY+5)
     121.  00:470D  FD 6E 04            	LD L, (IY+4)
     122.  00:4710  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
     123.  00:4713  CD 17 47                call print_string 
     124.  00:4716  C9                  	RET
     125.  00:4717                      
     126.  00:4717                      print_string:       
     127.  00:4717                      	
     128.  00:4717                      	;LD HL, string01
     129.  00:4717                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
     130.  00:4717                      .loop_str:
     131.  00:4717  7E                  	LD A, (HL)
     132.  00:4718  A7                  	AND A
     133.  00:4719  C8                  	RET Z
     134.  00:471A                      
     135.  00:471A  D6 20               	SUB 32
     136.  00:471C  CB 07               	RLC A
     137.  00:471E  CB 07               	RLC A	
     138.  00:4720                          
     139.  00:4720  06 00               	LD B, 0
     140.  00:4722  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
     141.  00:4723                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
     142.  00:4723                      				; Si #ASCII > 63 -> 2ª línea
     143.  00:4723                      				; segunda línea - ((#ASCII -32)*4)+1024
     144.  00:4723                      	
     145.  00:4723  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
     146.  00:4724  E5                  	PUSH HL
     147.  00:4725  21 BC 8E            	LD HL, FONT
     148.  00:4728  09                  	ADD HL, BC
     149.  00:4729  FE 40               	CP 64
     150.  00:472B  DA 32 47            	JP C, .first_line_font
     151.  00:472E  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     152.  00:4731  09                  	ADD HL, BC
     153.  00:4732                      
     154.  00:4732                      .first_line_font:
     155.  00:4732  22 07 C1                LD (BITMAP), HL
     156.  00:4735                          
     157.  00:4735  06 01               	LD B, :FONT
     158.  00:4737  D5                  	PUSH DE
     159.  00:4738  CD 4B 47                call print_char
     160.  00:473B  D1                      POP DE
     161.  00:473C                      	
     162.  00:473C  FD 21 04 00         	LD IY, 4
     163.  00:4740  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     164.  00:4742  FD 54               	LD D, IYH
     165.  00:4744  FD 5D               	LD E, IYL
     166.  00:4746                      	
     167.  00:4746                      
     168.  00:4746  E1                  	POP HL
     169.  00:4747  23                  	INC HL
     170.  00:4748  18 CD               	JR .loop_str
     171.  00:474A                          
     172.  00:474A  C9                      RET
     173.  00:474B                      
     174.  00:474B                      print_char
     175.  00:474B  AF                  		XOR A		
     176.  00:474C  0E 00               		ld		c,0
     177.  00:474E                      		;ld		de,0
     178.  00:474E  ED 53 6A C0         		LD (CHR_ACR), DE
     179.  00:4752  CD 90 42                	call	_vdpsetvramwr		
     180.  00:4755  78                  		ld	a, b			; 1st page bitmap
     181.  00:4756                      		;ld	d,a
     182.  00:4756                      		;ld	(_bank2),a
     183.  00:4756  2A 07 C1            		ld	hl,(BITMAP)		; Bitmap address
     184.  00:4759  3E 08               		ld	a, 8			; #lineas del caracter
     185.  00:475B  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     186.  00:475E  ED B3                       otir
     187.  00:4760  01 7C 00                    LD BC, 124
     188.  00:4763  09                          ADD HL, BC
     189.  00:4764  F5                  		PUSH AF
     190.  00:4765                      
     191.  00:4765  FD 2A 6A C0         		LD IY, (CHR_ACR)
     192.  00:4769  01 80 00            		LD BC, 128
     193.  00:476C  FD 09               		ADD IY, BC
     194.  00:476E  FD 54               		LD D, IYH
     195.  00:4770  FD 5D               		LD E, IYL
     196.  00:4772  A9                  		XOR C
     197.  00:4773  ED 53 6A C0         		LD (CHR_ACR), DE
     198.  00:4777  CD 90 42            		call	_vdpsetvramwr		
     199.  00:477A  F1                  		POP AF		
     200.  00:477B                      
     201.  00:477B  3D                  		dec	a
     202.  00:477C  20 DD               		jr	nz,1b		
     203.  00:477E  C9                  		ret 
     204.  00:477F                      
     205.  00:477F                      CLEAR_DIALOG_BOX_v1:		
     206.  00:477F  0E 00               		LD C,0
     207.  00:4781  11 28 5C            		LD DE, 5C28H
     208.  00:4784  ED 53 6A C0         		LD (CHR_ACR), DE
     209.  00:4788  CD 90 42            		call _vdpsetvramwr
     210.  00:478B  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     211.  00:478D  21 1C 8E            1:		LD HL, BLANK_DATA
     212.  00:4790  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     213.  00:4793  ED B3               		OTIR
     214.  00:4795                      
     215.  00:4795  F5                  		PUSH AF
     216.  00:4796  FD 2A 6A C0         		LD IY, (CHR_ACR)
     217.  00:479A  01 80 00            		LD BC, 128
     218.  00:479D  FD 09               		ADD IY, BC
     219.  00:479F  FD 54               		LD D, IYH
     220.  00:47A1  FD 5D               		LD E, IYL
     221.  00:47A3  0E 00               		LD C,0
     222.  00:47A5  ED 53 6A C0         		LD (CHR_ACR), DE
     223.  00:47A9  CD 90 42            		call	_vdpsetvramwr		
     224.  00:47AC  F1                  		POP AF		
     225.  00:47AD                      
     226.  00:47AD  3D                  		DEC a
     227.  00:47AE  20 DD               		JR NZ,1b
     228.  00:47B0  C9                  		RET
     229.  00:47B1                      
     230.  00:47B1                      CLEAR_DIALOG_BOX_v2:
     231.  00:47B1  0E 00               		LD C,0
     232.  00:47B3  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     233.  00:47B6  ED 53 6A C0         		LD (CHR_ACR), DE
     234.  00:47BA  CD 90 42            		call _vdpsetvramwr
     235.  00:47BD  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     236.  00:47BF  21 1C 8E            1:		LD HL, BLANK_DATA
     237.  00:47C2  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     238.  00:47C5  ED B3               		OTIR
     239.  00:47C7                      
     240.  00:47C7  F5                  		PUSH AF
     241.  00:47C8  FD 2A 6A C0         		LD IY, (CHR_ACR)
     242.  00:47CC  01 80 00            		LD BC, 128
     243.  00:47CF  FD 09               		ADD IY, BC
     244.  00:47D1  FD 54               		LD D, IYH
     245.  00:47D3  FD 5D               		LD E, IYL
     246.  00:47D5  0E 00               		LD C,0
     247.  00:47D7  ED 53 6A C0         		LD (CHR_ACR), DE
     248.  00:47DB  CD 90 42            		call	_vdpsetvramwr		
     249.  00:47DE  F1                  		POP AF		
     250.  00:47DF                      
     251.  00:47DF  3D                  		DEC a
     252.  00:47E0  20 DD               		JR NZ,1b
     253.  00:47E2  C9                  		RET
     254.  00:47E3                      	
     255.  00:47E3                      CLEAR_DIALOG_BOX:
     256.  00:47E3  21 87 4A            		LD HL, DiagBoxToFrontkBufROM
     257.  00:47E6  CD 2C 48            		CALL VDPCMD
     258.  00:47E9  C9                  		RET
     259.  00:47EA                      
     260.  00:47EA                      
     261.  00:47EA                      ; -----------------------------------------------------------------------------------
     262.  00:47EA                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     263.  00:47EA                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     264.  00:47EA                      ; -----------------------------------------------------------------------------------
     265.  00:47EA  (00:F3E0)           VDP_01: EQU   $F3E0
     266.  00:47EA  (00:FFE7)           VDP_08: EQU   $FFE7
     267.  00:47EA  (00:FFE8)           VDP_09: EQU   $FFE8
     268.  00:47EA                      
     269.  00:47EA                      SETPAG:				; SETPAG [A]
     270.  00:47EA  0F                  	RRCA
     271.  00:47EB  0F                  	RRCA
     272.  00:47EC  0F                  	RRCA
     273.  00:47ED  F6 1F               	OR	%00011111
     274.  00:47EF  F3                  	DI
     275.  00:47F0  D3 99               	OUT	($99),A
     276.  00:47F2  3E 82               	LD	A,$80+2
     277.  00:47F4  FB                  	EI
     278.  00:47F5  D3 99               	OUT	($99),A
     279.  00:47F7  C9                  	RET
     280.  00:47F8                      
     281.  00:47F8                      SET_WR:				; SET_WR [AHL]
     282.  00:47F8  CB 04               	RLC	H
     283.  00:47FA  17                  	RLA
     284.  00:47FB  CB 04               	RLC	H
     285.  00:47FD  17                  	RLA
     286.  00:47FE  CB 3C               	SRL	H
     287.  00:4800  CB 3C               	SRL	H
     288.  00:4802  F3                  	DI
     289.  00:4803  D3 99               	OUT	($99),A
     290.  00:4805  3E 8E               	LD	A,$80+14
     291.  00:4807  D3 99               	OUT	($99),A
     292.  00:4809  7D                  	LD	A,L
     293.  00:480A                      ;	NOP				; MSX2+
     294.  00:480A  D3 99               	OUT	($99),A
     295.  00:480C  7C                  	LD	A,H
     296.  00:480D  F6 40               	OR	64
     297.  00:480F  D3 99               	OUT	($99),A
     298.  00:4811  FB                  	EI
     299.  00:4812  C9                  	RET
     300.  00:4813                      
     301.  00:4813                      SET_RD:				; SET_RD [AHL]
     302.  00:4813  CB 04               	RLC	H
     303.  00:4815  17                  	RLA
     304.  00:4816  CB 04               	RLC	H
     305.  00:4818  17                  	RLA
     306.  00:4819  CB 3C               	SRL	H
     307.  00:481B  CB 3C               	SRL	H
     308.  00:481D  F3                  	DI
     309.  00:481E  D3 99               	OUT	($99),A
     310.  00:4820  3E 8E               	LD	A,$80+14
     311.  00:4822  D3 99               	OUT	($99),A
     312.  00:4824  7D                  	LD	A,L
     313.  00:4825                      ;	NOP				; MSX2+
     314.  00:4825  D3 99               	OUT	($99),A
     315.  00:4827  7C                  	LD	A,H
     316.  00:4828                      ;	NOP				; MSX2+
     317.  00:4828  D3 99               	OUT	($99),A
     318.  00:482A  FB                  	EI
     319.  00:482B  C9                  	RET
     320.  00:482C                      
     321.  00:482C                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     322.  00:482C  CD 3F 48            	CALL	WAITCE
     323.  00:482F  F3                  	DI
     324.  00:4830  3E 20               	LD	A,$20
     325.  00:4832  D3 99               	OUT	($99),A
     326.  00:4834  3E 91               	LD	A,$80+17
     327.  00:4836  D3 99               	OUT	($99),A
     328.  00:4838  FB                  	EI
     329.  00:4839  01 9B 0F            	LD	BC,$0F9B
     330.  00:483C  ED B3               	OTIR
     331.  00:483E  C9                  	RET
     332.  00:483F                      
     333.  00:483F                      WAITCE:				; WAITCE
     334.  00:483F  3E 02               	LD	A,$02
     335.  00:4841  F3                  	DI
     336.  00:4842  D3 99               	OUT	($99),A
     337.  00:4844  3E 8F               	LD	A,$80+15
     338.  00:4846  D3 99               	OUT	($99),A
     339.  00:4848  DB 99               	IN	A,($99)
     340.  00:484A  1F                  	RRA
     341.  00:484B  3E 00               	LD	A,$00
     342.  00:484D  D3 99               	OUT	($99),A
     343.  00:484F  3E 8F               	LD	A,$80+15
     344.  00:4851  FB                  	EI
     345.  00:4852  D3 99               	OUT	($99),A
     346.  00:4854  38 E9               	JR	C,WAITCE
     347.  00:4856  C9                  	RET
     348.  00:4857                      
     349.  00:4857                      ENASCR:				; Enable Screen
     350.  00:4857  3A E0 F3            	LD	A,(VDP_01)
     351.  00:485A  F6 40               	OR	%01000000
     352.  00:485C  18 05               	JR	DISSCR.OUT
     353.  00:485E                      
     354.  00:485E                      DISSCR:				; Disable Screen
     355.  00:485E  3A E0 F3            	LD	A,(VDP_01)
     356.  00:4861  E6 BF               	AND	%10111111
     357.  00:4863  32 E0 F3            .OUT:	LD	(VDP_01),A
     358.  00:4866  F3                  	DI
     359.  00:4867  D3 99               	OUT	($99),A
     360.  00:4869  3E 81               	LD	A,$80+1
     361.  00:486B  FB                  	EI
     362.  00:486C  D3 99               	OUT	($99),A
     363.  00:486E  C9                  	RET
     364.  00:486F                      
     365.  00:486F                      ENASPR:				; Enable Sprites
     366.  00:486F  3A E7 FF            	LD	A,(VDP_08)
     367.  00:4872  E6 FD               	AND	%11111101
     368.  00:4874  18 05               	JR	DISSPR.OUT
     369.  00:4876                      
     370.  00:4876                      DISSPR:				; Disable Sprites
     371.  00:4876  3A E7 FF            	LD	A,(VDP_08)
     372.  00:4879  F6 02               	OR	%00000010
     373.  00:487B  32 E7 FF            .OUT:	LD	(VDP_08),A
     374.  00:487E  F3                  	DI
     375.  00:487F  D3 99               	OUT	($99),A
     376.  00:4881  3E 88               	LD	A,$80+8
     377.  00:4883  FB                  	EI
     378.  00:4884  D3 99               	OUT	($99),A
     379.  00:4886  C9                  	RET
     380.  00:4887                      
     381.  00:4887                      LIN192:				; Set 192 lines
     382.  00:4887  3A E8 FF            	LD	A,(VDP_09)
     383.  00:488A  F6 80               	OR	%10000000
     384.  00:488C  18 05               	JR	LIN212.OUT
     385.  00:488E                      
     386.  00:488E                      LIN212:				; Set 212 lines
     387.  00:488E  3A E8 FF            	LD	A,(VDP_09)
     388.  00:4891  E6 7F               	AND	%01111111
     389.  00:4893  32 E8 FF            .OUT:	LD	(VDP_09),A
     390.  00:4896  F3                  	DI
     391.  00:4897  D3 99               	OUT	($99),A
     392.  00:4899  3E 89               	LD	A,$80+9
     393.  00:489B  FB                  	EI
     394.  00:489C  D3 99               	OUT	($99),A
     395.  00:489E  C9                  	RET
     396.  00:489F                      ;
     397.  00:489F                      ; This lil' routine waits until the VDP is done copying.
     398.  00:489F                      ;
     399.  00:489F                      VDP_Ready:
     400.  00:489F  3E 02                   ld a,2
     401.  00:48A1  F3                      di
     402.  00:48A2  D3 99                   out (#99),a     ; select s#2
     403.  00:48A4  3E 8F                   ld a,15+128
     404.  00:48A6  D3 99                   out (#99),a
     405.  00:48A8  DB 99                   in a,(#99)
     406.  00:48AA  1F                      rra
     407.  00:48AB  3E 00                   ld a,0          ; back to s#0, enable ints
     408.  00:48AD  D3 99                   out (#99),a
     409.  00:48AF  3E 8F                   ld a,15+128
     410.  00:48B1  FB                      ei
     411.  00:48B2  D3 99                   out (#99),a     ; loop if vdp not ready (CE)
     412.  00:48B4  DA 9F 48                jp c,VDP_Ready
     413.  00:48B7  C9                      ret
     414.  00:48B8                      
     415.  00:48B8                      ;INPUT: A - ANDY'S MAX ENERGY
     416.  00:48B8                      DRAW_ANDY_ENERGY:		
     417.  00:48B8  11 00 00            	LD DE, 0
     418.  00:48BB  FD 21 50 C0         	LD IY, energyDat
     419.  00:48BF                          ;LD (IY + VDP_SX), 128      ; SXL - Tile 4
     420.  00:48BF                          ;LD (IY+VDP_SY), 0      ; SYL	
     421.  00:48BF                          ;LD (IY + VDP_DX), A     ; DXL    
     422.  00:48BF  FD 36 06 C2             LD (IY + VDP_DY), 194      ; DYL    
     423.  00:48C3  3A 08 C0            	LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)		; cargamos la energia de Andy
     424.  00:48C6  FE 00               	CP 0
     425.  00:48C8  28 32               	JR Z, .draw_empty_drops
     426.  00:48CA                      	;LD A, 24  ; TESTS	
     427.  00:48CA                      
     428.  00:48CA                      .check_next_drop
     429.  00:48CA  FE 04               	CP 4
     430.  00:48CC  CA EA 48            	JP Z, .draw_half_drop	
     431.  00:48CF  FD 36 00 80         	LD (IY + VDP_SX), 128      ; SXL - Tile 4
     432.  00:48D3  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     433.  00:48D6  F5                  	PUSH AF
     434.  00:48D7  7A                  	LD A, D
     435.  00:48D8  C6 10               	ADD A, 16
     436.  00:48DA  57                  	LD D, A 	
     437.  00:48DB  21 50 C0            	LD HL, energyDat
     438.  00:48DE  CD 2C 48                CALL VDPCMD
     439.  00:48E1  1C                  	INC E
     440.  00:48E2  F1                  	POP AF
     441.  00:48E3  D6 08               	SUB 8
     442.  00:48E5  C2 CA 48            	JP NZ, .check_next_drop
     443.  00:48E8                      	;ret
     444.  00:48E8  18 12               	JR .draw_empty_drops
     445.  00:48EA                      
     446.  00:48EA                      .draw_half_drop		
     447.  00:48EA  FD 36 00 90         	LD (IY + VDP_SX), 144      ; SXL - Tile 5
     448.  00:48EE  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     449.  00:48F1  7A                  	LD A, D
     450.  00:48F2  C6 10               	ADD A, 16
     451.  00:48F4  57                  	LD D, A 	
     452.  00:48F5  21 50 C0                LD HL, energyDat
     453.  00:48F8  CD 2C 48                CALL VDPCMD
     454.  00:48FB  1C                  	INC E
     455.  00:48FC                      	;ret
     456.  00:48FC                      
     457.  00:48FC                      .draw_empty_drops
     458.  00:48FC  21 10 40            		LD HL, ANDY_MAX_ENERGY
     459.  00:48FF  ED 4B 22 C0         		LD BC, (current_level)
     460.  00:4903  06 00               		LD B,0
     461.  00:4905  09                  		ADD HL, BC
     462.  00:4906                      		;INC HL
     463.  00:4906  7E                  		LD A, (HL)
     464.  00:4907                      		;LD A, 24
     465.  00:4907  CB 3F CB 3F CB 3F   [3]     srl a       ;a/8
     466.  00:490D  93                  		sub e
     467.  00:490E  C8                  		ret Z		; si es cero volvemos, full energy
     468.  00:490F                      .loop
     469.  00:490F  FD 36 00 A0         		LD (IY + VDP_SX), 160      ; SXL - Tile 6
     470.  00:4913  FD 72 04            		LD (IY + VDP_DX), D     ; DXL    
     471.  00:4916  21 50 C0                	LD HL, energyDat
     472.  00:4919  F5                  		PUSH AF
     473.  00:491A  7A                  		LD A, D
     474.  00:491B  C6 10               		ADD A, 16
     475.  00:491D  57                  		LD D, A 			
     476.  00:491E  CD 2C 48                	CALL VDPCMD
     477.  00:4921  F1                  		pop AF
     478.  00:4922  3D                  		dec a
     479.  00:4923  C2 0F 49            		jp nz, .loop
     480.  00:4926  C9                  		ret
     481.  00:4927                      		;ld a, (ENTITY_PLAYER_POINTER+3)	; Andy's energy
     482.  00:4927                      
     483.  00:4927                      ; Draw a background tile - Background
     484.  00:4927                      ; Input:
     485.  00:4927                      ; A - Number of tile
     486.  00:4927                      ; D - X
     487.  00:4927                      ; E - Y
     488.  00:4927                      draw_tile:
     489.  00:4927  FD 21 32 C0         	LD IY, tileDat
     490.  00:492B  C3 32 49            	JP draw_tile_common
     491.  00:492E                      
     492.  00:492E                      ; Draw a background tile - Transparent
     493.  00:492E                      ; Input:
     494.  00:492E                      ; A - Number of tile
     495.  00:492E                      ; D - X
     496.  00:492E                      ; E - Y
     497.  00:492E                      draw_tile_trans:
     498.  00:492E  FD 21 41 C0         	LD IY, tileDatTrans
     499.  00:4932                      	
     500.  00:4932                      draw_tile_common:
     501.  00:4932  21 06 9A            	LD HL, metatiles_data
     502.  00:4935  87                  	ADD A,A
     503.  00:4936  87                  	ADD A,A ; A*4 (size of metatiles data)
     504.  00:4937  06 00               	LD B, 0
     505.  00:4939  4F                  	LD C, A
     506.  00:493A  09                  	ADD HL, BC
     507.  00:493B                      	;LD IY, tileDat
     508.  00:493B  7E                  	LD A, (HL)
     509.  00:493C  FD 77 00            	LD (IY + VDP_SX), A
     510.  00:493F  23                  	INC HL
     511.  00:4940  7E                  	LD A, (HL)
     512.  00:4941  FD 77 02            	LD (IY + VDP_SY), A
     513.  00:4944  23                  	INC HL
     514.  00:4945  7E                  	LD A, (HL)
     515.  00:4946  FD 77 08            	LD (IY + VDP_NX), A
     516.  00:4949  23                  	INC HL
     517.  00:494A  7E                  	LD A, (HL)
     518.  00:494B  FD 77 0A            	LD (IY + VDP_NY), A
     519.  00:494E  FD 72 04            	LD (IY + VDP_DX), D
     520.  00:4951  FD 73 06            	LD (IY + VDP_DY), E
     521.  00:4954  FD E5               	PUSH IY
     522.  00:4956  E1                  	POP HL
     523.  00:4957  CD 2C 48            	CALL VDPCMD
     524.  00:495A  C9                  	ret
     525.  00:495B                      
     526.  00:495B                      print_strings_dialog_box_v2:
     527.  00:495B                      
     528.  00:495B  FD 66 01            	LD H, (IY+1)
     529.  00:495E  FD 6E 00            	LD L, (IY)
     530.  00:4961  3E C2               	LD A, FIRST_LINE_DLG_BOX_v2	; Aquí irá el offset de la memoria del VDP en base a X, Y
     531.  00:4963  FD E5               	PUSH IY
     532.  00:4965  CD 76 49                call print_string_v2
     533.  00:4968  FD E1                   POP IY
     534.  00:496A                      
     535.  00:496A  FD 66 03            	LD H, (IY+3)
     536.  00:496D  FD 6E 02            	LD L, (IY+2)
     537.  00:4970  3E CA                   LD A, SEC_LINE_DLG_BOX_v2	; Aquí irá el offset de la memoria del VDP en base a X, Y    
     538.  00:4972                      	;PUSH IY
     539.  00:4972  CD 76 49                call print_string_v2
     540.  00:4975                      	;POP IY
     541.  00:4975                      
     542.  00:4975  C9                  	RET
     543.  00:4976                      
     544.  00:4976                      print_string_v2:	
     545.  00:4976                      	
     546.  00:4976  FD 21 23 C0         	LD IY, charDat
     547.  00:497A  FD 77 06            	LD (IY+VDP_DY), A
     548.  00:497D  16 00               	LD D, 0		; acumulador de la DX
     549.  00:497F                      .loop_str:
     550.  00:497F                      	
     551.  00:497F  7E                  	LD A, (HL)
     552.  00:4980  A7                  	AND A		; if A = 0 -> RET
     553.  00:4981  C8                  	RET Z	
     554.  00:4982  FE 40               	CP 64		 ; Si #ASCII > 63 -> 2ª línea
     555.  00:4984  DA 8D 49            	JP C, .first_line_font
     556.  00:4987  FD 36 02 DC         	LD (IY+VDP_SY), FONT_Y_OFFSET_2L		; Cargamos la SY	
     557.  00:498B  18 04               	JR .continue
     558.  00:498D                      
     559.  00:498D                      .first_line_font:
     560.  00:498D  FD 36 02 D4             LD (IY+VDP_SY), FONT_Y_OFFSET_1L		; Cargamos la SY	
     561.  00:4991                          
     562.  00:4991                      .continue:
     563.  00:4991  D6 20               	SUB 32
     564.  00:4993  CB 07               	RLC A
     565.  00:4995  CB 07               	RLC A	
     566.  00:4997  CB 07               	RLC A		; numero 0: ASCII #48 - 32 = 16 * 8 = SX número 0, Y = 0	
     567.  00:4999                      	
     568.  00:4999  FD 77 00            	LD (IY+VDP_SX), A		; Cargamos la SX
     569.  00:499C  FD 72 04            	LD (IY+VDP_DX), D		; Cargamos la DX
     570.  00:499F                      	
     571.  00:499F  E5                  	PUSH HL
     572.  00:49A0  21 23 C0            	LD HL, charDat
     573.  00:49A3  CD 2C 48            	CALL VDPCMD	
     574.  00:49A6                      	
     575.  00:49A6  7A                  	LD A, D
     576.  00:49A7  C6 08               	ADD FONT_WIDTH	; Le sumo 8 para que empiece a escribir el next char 8 pixels a la derecha 
     577.  00:49A9  57                  	LD D, A	
     578.  00:49AA                      
     579.  00:49AA  E1                  	POP HL
     580.  00:49AB  23                  	INC HL
     581.  00:49AC  18 D1               	JR .loop_str
     582.  00:49AE                          
     583.  00:49AE  C9                      RET
     584.  00:49AF                      
     585.  00:49AF                      ; Loads the screen image using the tile map
     586.  00:49AF                      
     587.  00:49AF                      load_screen_v2:	
     588.  00:49AF  FD 2A 01 C0         	LD IY, (stg_map_ptr_back)
     589.  00:49B3                      
     590.  00:49B3                      .map_element	
     591.  00:49B3  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)
     592.  00:49B6  21 06 9A            	LD HL, metatiles_data
     593.  00:49B9  87                  	ADD A,A
     594.  00:49BA  87                  	ADD A,A ; A*4 (size of metatiles data)
     595.  00:49BB  C6 02               	ADD A, METATILE_NX
     596.  00:49BD  06 00               	LD B, 0
     597.  00:49BF  4F                  	LD C, A
     598.  00:49C0  09                  	ADD HL, BC
     599.  00:49C1                      	
     600.  00:49C1  4E                  	LD C, (HL)	; Guardamos el ancho de la tile
     601.  00:49C2                      	
     602.  00:49C2  FD 56 01            	LD D, (IY+DX_OFFSET)
     603.  00:49C5  FD 46 03            	LD B, (IY+REPS_OFFSET)
     604.  00:49C8                      	
     605.  00:49C8                      .loop1	
     606.  00:49C8  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)	
     607.  00:49CB  FD 5E 02            	LD E, (IY+DY_OFFSET)	
     608.  00:49CE                      	
     609.  00:49CE  C5                  	PUSH BC
     610.  00:49CF  FD E5               	PUSH IY	
     611.  00:49D1  CD 27 49            	call draw_tile
     612.  00:49D4  FD E1               	POP IY
     613.  00:49D6  C1                  	POP BC
     614.  00:49D7  7A                  	LD A, D
     615.  00:49D8  81                  	ADD C
     616.  00:49D9  57                  	LD D, a		; We add the tile width
     617.  00:49DA                      
     618.  00:49DA  78                  	LD A, B
     619.  00:49DB  3D                  	DEC A
     620.  00:49DC  47                  	LD B, A
     621.  00:49DD  20 E9               	JR NZ, .loop1	 
     622.  00:49DF                      
     623.  00:49DF  7A                  	LD A, D
     624.  00:49E0  FE FF               	CP 255
     625.  00:49E2  20 02               	JR NZ, .next_element
     626.  00:49E4  AF                  	XOR a
     627.  00:49E5  57                  	LD D, A
     628.  00:49E6                      
     629.  00:49E6                      .next_element
     630.  00:49E6                      [4]	INC IY		; TILEMAP_SIZE
     630.  00:49E6  FD 23 FD 23 FD 23 FD 23 
     631.  00:49EE  FD 7E 00            	LD A, (IY)
     632.  00:49F1  FE FF               	CP 255
     633.  00:49F3  20 BE               	JR NZ, .map_element
     634.  00:49F5                      
     635.  00:49F5                      	; Transparent Tiles
     636.  00:49F5  FD 2A 03 C0         	LD IY, (stg_map_ptr_front)
     637.  00:49F9                      
     638.  00:49F9                      .map_element_trans
     639.  00:49F9  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)
     640.  00:49FC  21 06 9A            	LD HL, metatiles_data
     641.  00:49FF  87                  	ADD A,A
     642.  00:4A00  87                  	ADD A,A ; A*4 (size of metatiles data)
     643.  00:4A01  C6 02               	ADD A, METATILE_NX
     644.  00:4A03  06 00               	LD B, 0
     645.  00:4A05  4F                  	LD C, A
     646.  00:4A06  09                  	ADD HL, BC
     647.  00:4A07                      	
     648.  00:4A07  4E                  	LD C, (HL)	; Guardamos el ancho de la tile
     649.  00:4A08                      	
     650.  00:4A08  FD 56 01            	LD D, (IY+DX_OFFSET)
     651.  00:4A0B  FD 46 03            	LD B, (IY+REPS_OFFSET)
     652.  00:4A0E                      	
     653.  00:4A0E                      .loop1_trans
     654.  00:4A0E  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)	
     655.  00:4A11  FD 5E 02            	LD E, (IY+DY_OFFSET)	
     656.  00:4A14                      	
     657.  00:4A14  C5                  	PUSH BC
     658.  00:4A15  FD E5               	PUSH IY	
     659.  00:4A17  CD 2E 49            	call draw_tile_trans
     660.  00:4A1A  FD E1               	POP IY
     661.  00:4A1C  C1                  	POP BC
     662.  00:4A1D  7A                  	LD A, D
     663.  00:4A1E  81                  	ADD C
     664.  00:4A1F  57                  	LD D, a		; We add the tile width
     665.  00:4A20                      
     666.  00:4A20  78                  	LD A, B
     667.  00:4A21  3D                  	DEC A
     668.  00:4A22  47                  	LD B, A
     669.  00:4A23  20 E9               	JR NZ, .loop1_trans 
     670.  00:4A25                      
     671.  00:4A25  7A                  	LD A, D
     672.  00:4A26  FE FF               	CP 255
     673.  00:4A28  20 02               	JR NZ, .next_element_trans
     674.  00:4A2A  AF                  	XOR a
     675.  00:4A2B  57                  	LD D, A
     676.  00:4A2C                      
     677.  00:4A2C                      .next_element_trans
     678.  00:4A2C                      [4]	INC IY		; TILEMAP_SIZE
     678.  00:4A2C  FD 23 FD 23 FD 23 FD 23 
     679.  00:4A34  FD 7E 00            	LD A, (IY)
     680.  00:4A37  FE FF               	CP 255
     681.  00:4A39  20 BE               	JR NZ, .map_element_trans
     682.  00:4A3B  C9                  	ret
      26   00:4A3C                          include "include\VDP_Data.asm"
       1.  00:4A3C                      ; VDP COMMAND PARAMETER
       2.  00:4A3C                      ;                               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:4A3C                      charDatROM:                 db	0, 0, 0, FRONT_BUFFER, 0, 0, 0, FRONT_BUFFER, FONT_WIDTH, 0, FONT_HEIGHT, 0, 0, 0, CMD_HMMM
       3.  00:4A3C  00 00 00 00 00 00 00 00 08 00 08 00 00 00 D0 
       4.  00:4A4B                      tileDatROM:                 db	0, 0, 0, TILES_VDP_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       4.  00:4A4B  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D0 
       5.  00:4A5A                      tileDatTransROM:			db	0, 0, 0, TILES_VDP_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_LMMM | VDP_TIMP;CMD_LMMM;CMD_HMMM
       5.  00:4A5A  00 00 00 01 00 00 00 00 20 00 10 00 00 00 98 
       6.  00:4A69                      energyDatROM:               db	0, 0, 0, TILES_VDP_PAGE, 0, 0, 0, FRONT_BUFFER, ENERGY_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       6.  00:4A69  00 00 00 01 00 00 00 00 10 00 10 00 00 00 D0 
       7.  00:4A78                      DiagBoxToBackBufROM:        db	0, 0, 192, FRONT_BUFFER, 0, 0, 192, BACK_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       7.  00:4A78  00 00 C0 00 00 00 C0 02 FF 00 14 00 00 00 D0 
       8.  00:4A87                      DiagBoxToFrontkBufROM:      db	0, 0, 192, BACK_BUFFER, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       8.  00:4A87  00 00 C0 02 00 00 C0 00 FF 00 14 00 00 00 D0 
       9.  00:4A96                      DiagBoxClearROM:            db	0, 0, 192, TILES_VDP_PAGE, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       9.  00:4A96  00 00 C0 01 00 00 C0 00 FF 00 14 00 00 00 D0 
      27   00:4AA5                      ; SFX
      28   00:4AA5                          include	"include\PT3_player.s"
       1.  00:4AA5                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:4AA5                      		; --- Can be assembled with asMSX ---
       3.  00:4AA5                      		; --- ROM version: MSX-KUN        ---
       4.  00:4AA5                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:4AA5                      
       6.  00:4AA5                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:4AA5                      ;
       8.  00:4AA5                      ; This version of the replayer can be used with any note table
       9.  00:4AA5                      ; This version also allows the use of PT3 commands
      10.  00:4AA5                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:4AA5                      ;
      12.  00:4AA5                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:4AA5                      ;
      14.  00:4AA5                      ; ROM LENGTH: 1549 bytes
      15.  00:4AA5                      ; RAM LENGTH:  576 bytes
      16.  00:4AA5                      
      17.  00:4AA5                      
      18.  00:4AA5                      
      19.  00:4AA5                      ;SJASM version by BTV 2016
      20.  00:4AA5                      
      21.  00:4AA5                      
      22.  00:4AA5                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:4AA5                      
      24.  00:4AA5                      ;ChannelsVars
      25.  00:4AA5                      ;struc	CHNPRM
      26.  00:4AA5                      ;reset group
      27.  00:4AA5  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:4AA5  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:4AA5  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:4AA5  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:4AA5  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:4AA5  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:4AA5  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:4AA5  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:4AA5  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:4AA5                      ;reset group
      37.  00:4AA5                      
      38.  00:4AA5  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:4AA5                      
      40.  00:4AA5                      ;IX for PTDECOD here [+12]
      41.  00:4AA5  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:4AA5  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:4AA5  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:4AA5  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:4AA5  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:4AA5  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:4AA5  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:4AA5  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:4AA5                       ;Enabled - 0,SimpleGliss - 2
      50.  00:4AA5  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:4AA5  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:4AA5  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:4AA5  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:4AA5  (00:0017)           CHNPRM_Volume	equ 23	;RESB 1
      55.  00:4AA5  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:4AA5                      ;endstruc
      57.  00:4AA5                      
      58.  00:4AA5                      ;struc	AR
      59.  00:4AA5  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:4AA5  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:4AA5  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:4AA5  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:4AA5  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:4AA5  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:4AA5  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:4AA5  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:4AA5  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:4AA5  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:4AA5                      ;endstruc
      70.  00:4AA5                      
      71.  00:4AA5                      		; --- CODE STARTS HERE ---
      72.  00:4AA5                      
      73.  00:4AA5  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:4AA8  CB FE               		SET	7,[HL]
      75.  00:4AAA  CB 46               		BIT	0,[HL]
      76.  00:4AAC  C8                  		RET	Z
      77.  00:4AAD  E1                  		POP	HL
      78.  00:4AAE  21 79 F0            		LD	HL,DelyCnt
      79.  00:4AB1  34                  		INC	[HL]
      80.  00:4AB2  21 3D F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:4AB5  34                  		INC	[HL]
      82.  00:4AB6  AF                  PT3_MUTE:	XOR	A
      83.  00:4AB7  67                  		LD	H,A
      84.  00:4AB8  6F                  		LD	L,A
      85.  00:4AB9  32 47 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:4ABC  22 48 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:4ABF  C3 08 50            		JP	ROUT_A0
      88.  00:4AC2                      
      89.  00:4AC2                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:4AC2  22 00 F0            		LD [PT3_MODADDR],HL
      91.  00:4AC5  E5                  		PUSH HL
      92.  00:4AC6  11 64 00            		LD DE,100
      93.  00:4AC9  19                  		ADD HL,DE
      94.  00:4ACA  7E                  		LD A,[HL]
      95.  00:4ACB  32 1B F0            		LD [PT3_Delay],A
      96.  00:4ACE  E5                  		PUSH HL
      97.  00:4ACF  DD E1               		POP IX
      98.  00:4AD1  19                  		ADD HL,DE
      99.  00:4AD2  22 02 F0            		LD [PT3_CrPsPtr],HL
     100.  00:4AD5  DD 5E 02            		LD E,[IX+102-100]
     101.  00:4AD8  19                  		ADD HL,DE
     102.  00:4AD9  23                  		INC HL
     103.  00:4ADA  22 17 F0            		LD [PT3_LPosPtr],HL
     104.  00:4ADD  D1                  		POP DE
     105.  00:4ADE  DD 6E 03            		LD L,[IX+103-100]
     106.  00:4AE1  DD 66 04            		LD H,[IX+104-100]
     107.  00:4AE4  19                  		ADD HL,DE
     108.  00:4AE5  22 19 F0            		LD [PT3_PatsPtr],HL
     109.  00:4AE8  21 A9 00            		LD HL,169
     110.  00:4AEB  19                  		ADD HL,DE
     111.  00:4AEC  22 06 F0            		LD [PT3_OrnPtrs],HL
     112.  00:4AEF  21 69 00            		LD HL,105
     113.  00:4AF2  19                  		ADD HL,DE
     114.  00:4AF3  22 04 F0            		LD [PT3_SAMPTRS],HL
     115.  00:4AF6  21 00 F0            		LD HL,PT3_SETUP
     116.  00:4AF9  CB BE               		RES 7,[HL]
     117.  00:4AFB                      
     118.  00:4AFB                      		; --- note table data depacker ---
     119.  00:4AFB                      		; Depacks first 12 tones of each tone table
     120.  00:4AFB                      
     121.  00:4AFB  11 7C 50            		LD DE,T_PACK
     122.  00:4AFE  01 B0 F1            		LD BC,T1_+(2*49)-1
     123.  00:4B01  1A                  .TP_0:		LD A,[DE]
     124.  00:4B02  13                  		INC DE
     125.  00:4B03  FE 1E               		CP 15*2
     126.  00:4B05  30 06               		JR NC,.TP_1
     127.  00:4B07  67                  		LD H,A
     128.  00:4B08  1A                  		LD A,[DE]
     129.  00:4B09  6F                  		LD L,A
     130.  00:4B0A  13                  		INC DE
     131.  00:4B0B  18 07               		JR .TP_2
     132.  00:4B0D  D5                  .TP_1:		PUSH DE
     133.  00:4B0E  16 00               		LD D,0
     134.  00:4B10  5F                  		LD E,A
     135.  00:4B11  19                  		ADD HL,DE
     136.  00:4B12  19                  		ADD HL,DE
     137.  00:4B13  D1                  		POP DE
     138.  00:4B14  7C                  .TP_2:		LD A,H
     139.  00:4B15  02                  		LD [BC],A
     140.  00:4B16  0B                  		DEC BC
     141.  00:4B17  7D                  		LD A,L
     142.  00:4B18  02                  		LD [BC],A
     143.  00:4B19  0B                  		DEC BC
     144.  00:4B1A  D6 F0               		SUB $F0
     145.  00:4B1C  20 E3               		JR NZ,.TP_0
     146.  00:4B1E                      
     147.  00:4B1E                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:4B1E  21 22 F0            		LD HL,VARS
     149.  00:4B21  77                  		LD [HL],A
     150.  00:4B22  11 23 F0            		LD DE,VARS+1
     151.  00:4B25  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:4B28  ED B0               		LDIR
     153.  00:4B2A                      
     154.  00:4B2A  3C                  		INC A
     155.  00:4B2B  32 79 F0            		LD [DelyCnt],A
     156.  00:4B2E  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:4B31  22 3D F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:4B34  22 5A F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4B37  22 77 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:4B3A                      
     161.  00:4B3A  21 78 50            		LD HL,EMPTYSAMORN
     162.  00:4B3D  22 11 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:4B40  22 2F F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:4B43  22 4C F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:4B46  22 69 F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:4B49                      
     167.  00:4B49  22 31 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:4B4C  22 4E F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:4B4F  22 6B F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:4B52                      					    ;also EMPTYSAMORN comment
     171.  00:4B52                      
     172.  00:4B52                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:4B52  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:4B55  17                  		RLA
     175.  00:4B56  E6 07               		AND 7
     176.  00:4B58  21 28 50            		LD HL,NT_DATA
     177.  00:4B5B  D5                  		PUSH DE
     178.  00:4B5C  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:4B5D  87                  		ADD A,A
     180.  00:4B5E  5F                  		LD E,A
     181.  00:4B5F  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:4B60  5E                  		LD E,[HL]
     183.  00:4B61  23                  		INC HL
     184.  00:4B62  CB 3B               		SRL E
     185.  00:4B64  9F                  		SBC A,A
     186.  00:4B65  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:4B67  32 20 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:4B6A  3E C9               		LD A,$C9		; RET CODE
     189.  00:4B6C  32 21 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:4B6F  EB                  		EX DE,HL
     191.  00:4B70  C1                  		POP BC ;BC=T1_
     192.  00:4B71  09                  		ADD HL,BC
     193.  00:4B72                      
     194.  00:4B72  1A                  		LD A,[DE]                           
     195.  00:4B73                      
     196.  00:4B73  01 38 50            		LD BC,T_
     197.  00:4B76  81                  		ADD A,C
     198.  00:4B77  4F                  		LD C,A
     199.  00:4B78  88                  		ADC A,B
     200.  00:4B79                      
     201.  00:4B79  91                  		SUB C
     202.  00:4B7A  47                  		LD B,A
     203.  00:4B7B  C5                  		PUSH BC
     204.  00:4B7C  11 7F F0            		LD DE,NT_
     205.  00:4B7F  D5                  		PUSH DE
     206.  00:4B80                      
     207.  00:4B80  06 0C               		LD B,12
     208.  00:4B82  C5                  .L1:		PUSH BC
     209.  00:4B83  4E                  		LD C,[HL]
     210.  00:4B84  23                  		INC HL
     211.  00:4B85  E5                  		PUSH HL
     212.  00:4B86  46                  		LD B,[HL]
     213.  00:4B87                      
     214.  00:4B87  D5                  		PUSH DE
     215.  00:4B88  EB                  		EX DE,HL
     216.  00:4B89  11 17 00            		LD DE,23
     217.  00:4B8C  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:4B8F                      
     219.  00:4B8F  CB 38               .L2:		SRL B
     220.  00:4B91  CB 19               		RR C
     221.  00:4B93  CD 20 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:4B96  79                  		LD A,C
     223.  00:4B97  8A                  		ADC A,D	;=ADC 0
     224.  00:4B98  77                  		LD [HL],A
     225.  00:4B99  23                  		INC HL
     226.  00:4B9A  78                  		LD A,B
     227.  00:4B9B  8A                  		ADC A,D
     228.  00:4B9C  77                  		LD [HL],A
     229.  00:4B9D  19                  		ADD HL,DE
     230.  00:4B9E  DD 25               		db $DD,$25	;DEC XH
     231.  00:4BA0  20 ED               		JR NZ,.L2
     232.  00:4BA2                      
     233.  00:4BA2  D1                  		POP DE
     234.  00:4BA3  13                  		INC DE
     235.  00:4BA4  13                  		INC DE
     236.  00:4BA5  E1                  		POP HL
     237.  00:4BA6  23                  		INC HL
     238.  00:4BA7  C1                  		POP BC
     239.  00:4BA8  10 D8               		DJNZ .L1
     240.  00:4BAA                      
     241.  00:4BAA  E1                  		POP HL
     242.  00:4BAB  D1                  		POP DE
     243.  00:4BAC                      
     244.  00:4BAC  7B                  		LD A,E
     245.  00:4BAD  D5                  		PUSH DE
     246.  00:4BAE  11 44 50            		LD DE,TCOLD_1
     247.  00:4BB1  BB                  		CP E
     248.  00:4BB2  D1                  		POP DE
     249.  00:4BB3  20 05               		JR NZ,.CORR_1
     250.  00:4BB5  3E FD               		LD A,$FD
     251.  00:4BB7  32 AD F0            		LD [NT_+$2E],A
     252.  00:4BBA                      
     253.  00:4BBA  1A                  .CORR_1:	LD A,[DE]
     254.  00:4BBB  A7                  		AND A
     255.  00:4BBC  28 11               		JR Z,.TC_EXIT
     256.  00:4BBE  1F                  		RRA
     257.  00:4BBF  F5                  		PUSH AF
     258.  00:4BC0  87                  		ADD A,A
     259.  00:4BC1  4F                  		LD C,A
     260.  00:4BC2  09                  		ADD HL,BC
     261.  00:4BC3  F1                  		POP AF
     262.  00:4BC4  30 02               		JR NC,.CORR_2
     263.  00:4BC6  35                  		DEC [HL]
     264.  00:4BC7  35                  		DEC [HL]
     265.  00:4BC8  34                  .CORR_2:	INC [HL]
     266.  00:4BC9  A7                  		AND A
     267.  00:4BCA  ED 42               		SBC HL,BC
     268.  00:4BCC  13                  		INC DE
     269.  00:4BCD  18 EB               		JR .CORR_1
     270.  00:4BCF                      
     271.  00:4BCF                      .TC_EXIT:	;POP AF
     272.  00:4BCF                      
     273.  00:4BCF                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:4BCF  21 11 00            		ld	hl,$11
     275.  00:4BD2  54                  		ld	d,h
     276.  00:4BD3  5C                  		ld	e,h
     277.  00:4BD4  DD 21 4F F1         		ld	IX,VT_+16
     278.  00:4BD8  06 0F               		ld	b,15
     279.  00:4BDA  E5                  .INITV1:	push	hl
     280.  00:4BDB  19                  		add	hl,de
     281.  00:4BDC  EB                  		ex	de,hl
     282.  00:4BDD  ED 62               		sbc	hl,hl
     283.  00:4BDF  48                  		ld	c,b
     284.  00:4BE0  06 10               		ld	b,16
     285.  00:4BE2  7D                  .INITV2:	ld	a,l
     286.  00:4BE3  17                  		rla
     287.  00:4BE4  7C                  		ld	a,h
     288.  00:4BE5  CE 00               		adc	a,0
     289.  00:4BE7  DD 77 00            		ld	[ix],a
     290.  00:4BEA  DD 23               		inc	ix
     291.  00:4BEC  19                  		add	hl,de
     292.  00:4BED  10 F3               		djnz	.INITV2
     293.  00:4BEF  E1                  		pop	hl
     294.  00:4BF0  7B                  		ld	a,e
     295.  00:4BF1  FE 77               		cp	$77
     296.  00:4BF3  20 01               		jr	nz,.INITV3
     297.  00:4BF5  1C                  		inc	e
     298.  00:4BF6  41                  .INITV3:	ld	b,c
     299.  00:4BF7  10 E1               		djnz	.INITV1
     300.  00:4BF9                      
     301.  00:4BF9  C9                  		RET
     302.  00:4BFA                      
     303.  00:4BFA                      		;pattern decoder
     304.  00:4BFA  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:4BFE  CD 84 4D            		CALL SETORN
     306.  00:4C01  0A                  		LD A,[BC]
     307.  00:4C02  03                  		INC BC
     308.  00:4C03  0F                  		RRCA
     309.  00:4C04                      
     310.  00:4C04  87                  PD_SAM:		ADD A,A
     311.  00:4C05  5F                  PD_SAM_:	LD E,A
     312.  00:4C06  16 00               		LD D,0
     313.  00:4C08  2A 04 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:4C0B  19                  		ADD HL,DE
     315.  00:4C0C  5E                  		LD E,[HL]
     316.  00:4C0D  23                  		INC HL
     317.  00:4C0E  56                  		LD D,[HL]
     318.  00:4C0F  2A 00 F0            		LD HL,[PT3_MODADDR]
     319.  00:4C12  19                  		ADD HL,DE
     320.  00:4C13  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:4C16  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:4C19  18 41               		JR PD_LOOP
     323.  00:4C1B                      
     324.  00:4C1B  07                  PD_VOL:		RLCA
     325.  00:4C1C  07                  		RLCA
     326.  00:4C1D  07                  		RLCA
     327.  00:4C1E  07                  		RLCA
     328.  00:4C1F  DD 77 0B            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:4C22  18 3B               		JR PD_LP2
     330.  00:4C24                      	
     331.  00:4C24  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:4C27  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:4C2A  18 33               		JR PD_LP2
     334.  00:4C2C                      
     335.  00:4C2C  3D                  PD_SorE:	DEC A
     336.  00:4C2D  20 07               		JR NZ,PD_ENV
     337.  00:4C2F  0A                  		LD A,[BC]
     338.  00:4C30  03                  		INC BC
     339.  00:4C31  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:4C34  18 29               		JR PD_LP2
     341.  00:4C36                      
     342.  00:4C36  CD 68 4D            PD_ENV:		CALL SETENV
     343.  00:4C39  18 24               		JR PD_LP2
     344.  00:4C3B                      
     345.  00:4C3B  CD 84 4D            PD_ORN:		CALL SETORN
     346.  00:4C3E  18 1C               		JR PD_LOOP
     347.  00:4C40                             
     348.  00:4C40  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:4C43  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4C46  C4 68 4D            		CALL NZ,SETENV
     351.  00:4C49  0A                  		LD A,[BC]
     352.  00:4C4A  03                  		INC BC
     353.  00:4C4B  18 B8               		JR PD_SAM_
     354.  00:4C4D                      
     355.  00:4C4D  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:4C50  32 0E F0            		LD [PT3_PrNote],A
     357.  00:4C53  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4C56  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4C59  22 0F F0            		LD [PT3_PrSlide],HL
     360.  00:4C5C                      
     361.  00:4C5C  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:4C5F  0A                  PD_LP2:		LD A,[BC]
     363.  00:4C60  03                  		INC BC
     364.  00:4C61  83                  		ADD A,E
     365.  00:4C62  38 96               		JR C,PD_OrSm
     366.  00:4C64  82                  		ADD A,D
     367.  00:4C65  28 4A               		JR Z,PD_FIN
     368.  00:4C67  38 9B               		JR C,PD_SAM
     369.  00:4C69  83                  		ADD A,E
     370.  00:4C6A  28 25               		JR Z,PD_REL
     371.  00:4C6C  38 AD               		JR C,PD_VOL
     372.  00:4C6E  83                  		ADD A,E
     373.  00:4C6F  28 B3               		JR Z,PD_EOff
     374.  00:4C71  38 B9               		JR C,PD_SorE
     375.  00:4C73  C6 60               		ADD A,96
     376.  00:4C75  38 20               		JR C,PD_NOTE
     377.  00:4C77  83                  		ADD A,E
     378.  00:4C78  38 C1               		JR C,PD_ORN
     379.  00:4C7A  82                  		ADD A,D
     380.  00:4C7B  38 0F               		JR C,PD_NOIS
     381.  00:4C7D  83                  		ADD A,E
     382.  00:4C7E  38 C0               		JR C,PD_ESAM
     383.  00:4C80  87                  		ADD A,A
     384.  00:4C81  5F                  		LD E,A
     385.  00:4C82  21 BD 2C            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:4C85  19                  		ADD HL,DE
     387.  00:4C86  5E                  		LD E,[HL]
     388.  00:4C87  23                  		INC HL
     389.  00:4C88  56                  		LD D,[HL]
     390.  00:4C89  D5                  		PUSH DE
     391.  00:4C8A  18 D0               		JR PD_LOOP
     392.  00:4C8C                      
     393.  00:4C8C  32 7D F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:4C8F  18 CE               		JR PD_LP2
     395.  00:4C91                      
     396.  00:4C91  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:4C95  18 08               		JR PD_RES
     398.  00:4C97                      	
     399.  00:4C97  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:4C9A  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:4C9E  AF                  		XOR A
     402.  00:4C9F                      
     403.  00:4C9F  ED 73 08 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:4CA3  DD F9               		LD SP,IX
     405.  00:4CA5  67                  		LD H,A
     406.  00:4CA6  6F                  		LD L,A
     407.  00:4CA7  E5                  		PUSH HL
     408.  00:4CA8  E5                  		PUSH HL
     409.  00:4CA9  E5                  		PUSH HL
     410.  00:4CAA  E5                  		PUSH HL
     411.  00:4CAB  E5                  		PUSH HL
     412.  00:4CAC  E5                  		PUSH HL
     413.  00:4CAD  ED 7B 08 F0         		LD SP,[PT3_PDSP]
     414.  00:4CB1                      
     415.  00:4CB1  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:4CB4  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:4CB7  C9                  		RET
     418.  00:4CB8                      
     419.  00:4CB8  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:4CBC  0A                  		LD A,[BC]
     421.  00:4CBD  03                  		INC BC
     422.  00:4CBE                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:4CBE                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:4CBE  03                  		INC BC
     425.  00:4CBF  03                  		INC BC
     426.  00:4CC0  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:4CC3  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:4CC6  11 7F F0            		LD DE,NT_
     429.  00:4CC9  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:4CCC  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:4CCF  87                  		ADD A,A
     432.  00:4CD0  6F                  		LD L,A
     433.  00:4CD1  26 00               		LD H,0
     434.  00:4CD3  19                  		ADD HL,DE
     435.  00:4CD4  7E                  		LD A,[HL]
     436.  00:4CD5  23                  		INC HL
     437.  00:4CD6  66                  		LD H,[HL]
     438.  00:4CD7  6F                  		LD L,A
     439.  00:4CD8  E5                  		PUSH HL
     440.  00:4CD9  3A 0E F0            		LD A,[PT3_PrNote]
     441.  00:4CDC  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:4CDF  87                  		ADD A,A
     443.  00:4CE0  6F                  		LD L,A
     444.  00:4CE1  26 00               		LD H,0
     445.  00:4CE3  19                  		ADD HL,DE
     446.  00:4CE4  5E                  		LD E,[HL]
     447.  00:4CE5  23                  		INC HL
     448.  00:4CE6  56                  		LD D,[HL]
     449.  00:4CE7  E1                  		POP HL
     450.  00:4CE8  ED 52               		SBC HL,DE
     451.  00:4CEA  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:4CED  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:4CF0  ED 5B 0F F0         		LD DE,[PT3_PrSlide]
     454.  00:4CF4  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4CF7  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4CFA  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4CFB  03                  		INC BC
     458.  00:4CFC  08                  		EX AF,AF'
     459.  00:4CFD  0A                  		LD A,[BC]
     460.  00:4CFE  03                  		INC BC
     461.  00:4CFF  A7                  		AND A
     462.  00:4D00  28 01               		JR Z,.NOSIG
     463.  00:4D02  EB                  		EX DE,HL
     464.  00:4D03  ED 52               .NOSIG:	SBC HL,DE
     465.  00:4D05  F2 0D 4D            		JP P,SET_STP
     466.  00:4D08  2F                  		CPL
     467.  00:4D09  08                  		EX AF,AF'
     468.  00:4D0A  ED 44               		NEG
     469.  00:4D0C  08                  		EX AF,AF'
     470.  00:4D0D  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:4D10  08                  		EX AF,AF'
     472.  00:4D11  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:4D14  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4D18  C9                  		RET
     475.  00:4D19                      
     476.  00:4D19  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4D1D  0A                  		LD A,[BC]
     478.  00:4D1E  03                  		INC BC
     479.  00:4D1F  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:4D22  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:4D25  0A                  		LD A,[BC]
     482.  00:4D26  03                  		INC BC
     483.  00:4D27  08                  		EX AF,AF'
     484.  00:4D28  0A                  		LD A,[BC]
     485.  00:4D29  03                  		INC BC
     486.  00:4D2A  18 E1               		JR SET_STP
     487.  00:4D2C                      
     488.  00:4D2C  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4D2D  03                  		INC BC
     490.  00:4D2E  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:4D31  C9                  		RET
     492.  00:4D32                      
     493.  00:4D32  0A                  C_ORPOS:	LD A,[BC]
     494.  00:4D33  03                  		INC BC
     495.  00:4D34  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4D37  C9                  		RET
     497.  00:4D38                      
     498.  00:4D38  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4D39  03                  		INC BC
     500.  00:4D3A  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4D3D  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:4D40  0A                  		LD A,[BC]
     503.  00:4D41  03                  		INC BC
     504.  00:4D42  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:4D45  AF                  		XOR A
     506.  00:4D46  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4D49  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4D4C  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4D4F  C9                  		RET
     510.  00:4D50                      
     511.  00:4D50  0A                  C_ENGLS:	LD A,[BC]
     512.  00:4D51  03                  		INC BC
     513.  00:4D52  32 1D F0            		LD [PT3_Env_Del],A
     514.  00:4D55  32 7C F0            		LD [CurEDel],A
     515.  00:4D58  0A                  		LD A,[BC]
     516.  00:4D59  03                  		INC BC
     517.  00:4D5A  6F                  		LD L,A
     518.  00:4D5B  0A                  		LD A,[BC]
     519.  00:4D5C  03                  		INC BC
     520.  00:4D5D  67                  		LD H,A
     521.  00:4D5E  22 1E F0            		LD [PT3_ESldAdd],HL
     522.  00:4D61  C9                  		RET
     523.  00:4D62                      
     524.  00:4D62  0A                  C_DELAY:	LD A,[BC]
     525.  00:4D63  03                  		INC BC
     526.  00:4D64  32 1B F0            		LD [PT3_Delay],A
     527.  00:4D67  C9                  		RET
     528.  00:4D68                      	
     529.  00:4D68  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4D6B  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:4D6E  0A                  		LD A,[BC]
     532.  00:4D6F  03                  		INC BC
     533.  00:4D70  67                  		LD H,A
     534.  00:4D71  0A                  		LD A,[BC]
     535.  00:4D72  03                  		INC BC
     536.  00:4D73  6F                  		LD L,A
     537.  00:4D74  22 4D F1            		LD [EnvBase],HL
     538.  00:4D77  AF                  		XOR A
     539.  00:4D78  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4D7B  32 7C F0            		LD [CurEDel],A
     541.  00:4D7E  67                  		LD H,A
     542.  00:4D7F  6F                  		LD L,A
     543.  00:4D80  22 7A F0            		LD [CurESld],HL
     544.  00:4D83  C9                  C_NOP:		RET
     545.  00:4D84                      
     546.  00:4D84  87                  SETORN:		ADD A,A
     547.  00:4D85  5F                  		LD E,A
     548.  00:4D86  16 00               		LD D,0
     549.  00:4D88  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4D8B  2A 06 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:4D8E  19                  		ADD HL,DE
     552.  00:4D8F  5E                  		LD E,[HL]
     553.  00:4D90  23                  		INC HL
     554.  00:4D91  56                  		LD D,[HL]
     555.  00:4D92  2A 00 F0            		LD HL,[PT3_MODADDR]
     556.  00:4D95  19                  		ADD HL,DE
     557.  00:4D96  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:4D99  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:4D9C  C9                  		RET
     560.  00:4D9D                      
     561.  00:4D9D                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:4D9D  83 4D               SPCCOMS:	dw C_NOP
     563.  00:4D9F  19 4D               		dw C_GLISS
     564.  00:4DA1  B8 4C               		dw C_PORTM
     565.  00:4DA3  2C 4D               		dw C_SMPOS
     566.  00:4DA5  32 4D               		dw C_ORPOS
     567.  00:4DA7  38 4D               		dw C_VIBRT
     568.  00:4DA9  83 4D               		dw C_NOP
     569.  00:4DAB  83 4D               		dw C_NOP
     570.  00:4DAD  50 4D               		dw C_ENGLS
     571.  00:4DAF  62 4D               		dw C_DELAY
     572.  00:4DB1  83 4D               		dw C_NOP
     573.  00:4DB3  83 4D               		dw C_NOP
     574.  00:4DB5  83 4D               		dw C_NOP
     575.  00:4DB7  83 4D               		dw C_NOP
     576.  00:4DB9  83 4D               		dw C_NOP
     577.  00:4DBB  83 4D               		dw C_NOP
     578.  00:4DBD                      
     579.  00:4DBD  AF                  CHREGS:		XOR A
     580.  00:4DBE  32 49 F1            		LD [AYREGS+AR_AmplC],A
     581.  00:4DC1  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:4DC5  E5                  		PUSH HL
     583.  00:4DC6  CA EC 4E            		JP Z,.CH_EXIT
     584.  00:4DC9  ED 73 0A F0         		LD [PT3_CSP],SP
     585.  00:4DCD  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:4DD0  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:4DD3  F9                  		LD SP,HL
     588.  00:4DD4  D1                  		POP DE
     589.  00:4DD5  67                  		LD H,A
     590.  00:4DD6  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:4DD9  6F                  		LD L,A
     592.  00:4DDA  39                  		ADD HL,SP
     593.  00:4DDB  3C                  		INC A
     594.  00:4DDC  BA                  		CP D
     595.  00:4DDD  38 01               		JR C,.CH_ORPS
     596.  00:4DDF  7B                  		LD A,E
     597.  00:4DE0  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:4DE3  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:4DE6  86                  		ADD A,[HL]
     600.  00:4DE7  F2 EB 4D            		JP P,.CH_NTP
     601.  00:4DEA  AF                  		XOR A
     602.  00:4DEB  FE 60               .CH_NTP:	CP 96
     603.  00:4DED  38 02               		JR C,.CH_NOK
     604.  00:4DEF  3E 5F               		LD A,95
     605.  00:4DF1  87                  .CH_NOK:	ADD A,A
     606.  00:4DF2  08                  		EX AF,AF'
     607.  00:4DF3  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4DF6  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4DF9  F9                  		LD SP,HL
     610.  00:4DFA  D1                  		POP DE
     611.  00:4DFB  26 00               		LD H,0
     612.  00:4DFD  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4E00  47                  		LD B,A
     614.  00:4E01  87                  		ADD A,A
     615.  00:4E02  87                  		ADD A,A
     616.  00:4E03  6F                  		LD L,A
     617.  00:4E04  39                  		ADD HL,SP
     618.  00:4E05  F9                  		LD SP,HL
     619.  00:4E06  78                  		LD A,B
     620.  00:4E07  3C                  		INC A
     621.  00:4E08  BA                  		CP D
     622.  00:4E09  38 01               		JR C,.CH_SMPS
     623.  00:4E0B  7B                  		LD A,E
     624.  00:4E0C  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4E0F  C1                  		POP BC
     626.  00:4E10  E1                  		POP HL
     627.  00:4E11  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4E14  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4E17  19                  		ADD HL,DE
     630.  00:4E18  CB 70               		BIT 6,B
     631.  00:4E1A  28 06               		JR Z,.CH_NOAC
     632.  00:4E1C  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4E1F  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4E22  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4E23  08                  		EX AF,AF'
     636.  00:4E24  6F                  		LD L,A
     637.  00:4E25  26 00               		LD H,0
     638.  00:4E27  31 7F F0            		LD SP,NT_
     639.  00:4E2A  39                  		ADD HL,SP
     640.  00:4E2B  F9                  		LD SP,HL
     641.  00:4E2C  E1                  		POP HL
     642.  00:4E2D  19                  		ADD HL,DE
     643.  00:4E2E  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4E31  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4E34  19                  		ADD HL,DE
     646.  00:4E35  ED 7B 0A F0         		LD SP,[PT3_CSP]
     647.  00:4E39  E3                  		EX [SP],HL
     648.  00:4E3A  AF                  		XOR A
     649.  00:4E3B  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4E3E  28 3E               		JR Z,.CH_AMP
     651.  00:4E40  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4E43  20 39               		JR NZ,.CH_AMP
     653.  00:4E45  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4E48  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4E4B  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4E4E  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4E51  7C                  		LD A,H
     658.  00:4E52  19                  		ADD HL,DE
     659.  00:4E53  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4E56  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4E59  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4E5D  20 1F               		JR NZ,.CH_AMP
     663.  00:4E5F  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4E62  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4E65  A7                  		AND A
     666.  00:4E66  28 01               		JR Z,.CH_STPP
     667.  00:4E68  EB                  		EX DE,HL
     668.  00:4E69  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4E6B  FA 7E 4E            		JP M,.CH_AMP
     670.  00:4E6E  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4E71  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4E74  AF                  		XOR A
     673.  00:4E75  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4E78  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4E7B  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4E7E  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4E81  CB 79               		BIT 7,C
     678.  00:4E83  28 13               		JR Z,.CH_NOAM
     679.  00:4E85  CB 71               		BIT 6,C
     680.  00:4E87  28 07               		JR Z,.CH_AMIN
     681.  00:4E89  FE 0F               		CP 15
     682.  00:4E8B  28 0B               		JR Z,.CH_NOAM
     683.  00:4E8D  3C                  		INC A
     684.  00:4E8E  18 05               		JR .CH_SVAM
     685.  00:4E90  FE F1               .CH_AMIN:	CP -15
     686.  00:4E92  28 04               		JR Z,.CH_NOAM
     687.  00:4E94  3D                  		DEC A
     688.  00:4E95  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4E98  6F                  .CH_NOAM:	LD L,A
     690.  00:4E99  78                  		LD A,B
     691.  00:4E9A  E6 0F               		AND 15
     692.  00:4E9C  85                  		ADD A,L
     693.  00:4E9D  F2 A1 4E            		JP P,.CH_APOS
     694.  00:4EA0  AF                  		XOR A
     695.  00:4EA1  FE 10               .CH_APOS:	CP 16
     696.  00:4EA3  38 02               		JR C,.CH_VOL
     697.  00:4EA5  3E 0F               		LD A,15
     698.  00:4EA7  DD B6 17            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4EAA  6F                  		LD L,A
     700.  00:4EAB  26 00               		LD H,0
     701.  00:4EAD  11 3F F1            		LD DE,VT_
     702.  00:4EB0  19                  		ADD HL,DE
     703.  00:4EB1  7E                  		LD A,[HL]
     704.  00:4EB2  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4EB4  20 03               		JR NZ,.CH_NOEN
     706.  00:4EB6  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4EB9  32 49 F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4EBC  CB 78               		BIT 7,B
     709.  00:4EBE  79                  		LD A,C
     710.  00:4EBF  28 19               		JR Z,.NO_ENSL
     711.  00:4EC1  17                  		RLA
     712.  00:4EC2  17                  		RLA
     713.  00:4EC3  CB 2F               		SRA A
     714.  00:4EC5  CB 2F               		SRA A
     715.  00:4EC7  CB 2F               		SRA A
     716.  00:4EC9  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4ECC  CB 68               		BIT 5,B
     718.  00:4ECE  28 03               		JR Z,.NO_ENAC
     719.  00:4ED0  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4ED3  21 1C F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4ED6  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4ED7                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4ED7  77                  		LD [HL],A
     724.  00:4ED8  18 0E               		JR .CH_MIX
     725.  00:4EDA  1F                  .NO_ENSL:	RRA
     726.  00:4EDB  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4EDE  32 7E F0            		LD [AddToNs],A
     728.  00:4EE1  CB 68               		BIT 5,B
     729.  00:4EE3  28 03               		JR Z,.CH_MIX
     730.  00:4EE5  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4EE8  78                  .CH_MIX:	LD A,B
     732.  00:4EE9  1F                  		RRA
     733.  00:4EEA  E6 48               		AND $48
     734.  00:4EEC  21 46 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4EEF  B6                  		OR [HL]
     736.  00:4EF0  0F                  		RRCA
     737.  00:4EF1  77                  		LD [HL],A
     738.  00:4EF2  E1                  		POP HL
     739.  00:4EF3  AF                  		XOR A
     740.  00:4EF4  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4EF7  C8                  		RET Z
     742.  00:4EF8  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4EFB  C0                  		RET NZ
     744.  00:4EFC  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4EFF  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4F02  1F                  		RRA
     747.  00:4F03  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4F06  38 03               		JR C,.CH_ONDL
     749.  00:4F08  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4F0B  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4F0E  C9                  		RET
     752.  00:4F0F                      
     753.  00:4F0F  AF                  PT3_PLAY:	XOR A
     754.  00:4F10  32 1C F0            		LD [PT3_AddToEn],A
     755.  00:4F13  32 46 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:4F16  3D                  		DEC A
     757.  00:4F17  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:4F1A  21 79 F0            		LD HL,DelyCnt
     759.  00:4F1D  35                  		DEC [HL]
     760.  00:4F1E  C2 A5 4F            		JP NZ,.PL2
     761.  00:4F21  21 3D F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4F24  35                  		DEC [HL]
     763.  00:4F25  20 4E               		JR NZ,.PL1B
     764.  00:4F27  ED 4B 11 F0         		LD BC,[PT3_AdInPtA]
     765.  00:4F2B  0A                  		LD A,[BC]
     766.  00:4F2C  A7                  		AND A
     767.  00:4F2D  20 3B               		JR NZ,.PL1A
     768.  00:4F2F  57                  		LD D,A
     769.  00:4F30  32 7D F0            		LD [Ns_Base],A
     770.  00:4F33  2A 02 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:4F36  23                  		INC HL
     772.  00:4F37  7E                  		LD A,[HL]
     773.  00:4F38  3C                  		INC A
     774.  00:4F39  20 08               		JR NZ,.PLNLP
     775.  00:4F3B  CD A5 4A            		CALL CHECKLP
     776.  00:4F3E  2A 17 F0            		LD HL,[PT3_LPosPtr]
     777.  00:4F41  7E                  		LD A,[HL]
     778.  00:4F42  3C                  		INC A
     779.  00:4F43  22 02 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4F46  3D                  		DEC A
     781.  00:4F47  87                  		ADD A,A
     782.  00:4F48  5F                  		LD E,A
     783.  00:4F49  CB 12               		RL D
     784.  00:4F4B  2A 19 F0            		LD HL,[PT3_PatsPtr]
     785.  00:4F4E  19                  		ADD HL,DE
     786.  00:4F4F  ED 5B 00 F0         		LD DE,[PT3_MODADDR]
     787.  00:4F53  ED 73 0C F0         		LD [PT3_PSP],SP
     788.  00:4F57  F9                  		LD SP,HL
     789.  00:4F58  E1                  		POP HL
     790.  00:4F59  19                  		ADD HL,DE
     791.  00:4F5A  44                  		LD B,H
     792.  00:4F5B  4D                  		LD C,L
     793.  00:4F5C  E1                  		POP HL
     794.  00:4F5D  19                  		ADD HL,DE
     795.  00:4F5E  22 13 F0            		LD [PT3_AdInPtB],HL
     796.  00:4F61  E1                  		POP HL
     797.  00:4F62  19                  		ADD HL,DE
     798.  00:4F63  22 15 F0            		LD [PT3_AdInPtC],HL
     799.  00:4F66  ED 7B 0C F0         		LD SP,[PT3_PSP]
     800.  00:4F6A                      
     801.  00:4F6A  DD 21 2E F0         .PL1A:		LD IX,ChanA+12
     802.  00:4F6E  CD 4D 4C            		CALL PTDECOD
     803.  00:4F71  ED 43 11 F0         		LD [PT3_AdInPtA],BC
     804.  00:4F75                      
     805.  00:4F75  21 5A F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4F78  35                  		DEC [HL]
     807.  00:4F79  20 0F               		JR NZ,.PL1C
     808.  00:4F7B  DD 21 4B F0         		LD IX,ChanB+12
     809.  00:4F7F  ED 4B 13 F0         		LD BC,[PT3_AdInPtB]
     810.  00:4F83  CD 4D 4C            		CALL PTDECOD
     811.  00:4F86  ED 43 13 F0         		LD [PT3_AdInPtB],BC
     812.  00:4F8A                      
     813.  00:4F8A  21 77 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4F8D  35                  		DEC [HL]
     815.  00:4F8E  20 0F               		JR NZ,.PL1D
     816.  00:4F90  DD 21 68 F0         		LD IX,ChanC+12
     817.  00:4F94  ED 4B 15 F0         		LD BC,[PT3_AdInPtC]
     818.  00:4F98  CD 4D 4C            		CALL PTDECOD
     819.  00:4F9B  ED 43 15 F0         		LD [PT3_AdInPtC],BC
     820.  00:4F9F                      
     821.  00:4F9F  3A 1B F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:4FA2  32 79 F0            		LD [DelyCnt],A
     823.  00:4FA5                      
     824.  00:4FA5  DD 21 22 F0         .PL2:		LD IX,ChanA
     825.  00:4FA9  2A 3F F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:4FAC  CD BD 4D            		CALL CHREGS
     827.  00:4FAF  22 3F F1            		LD [AYREGS+AR_TonA],HL
     828.  00:4FB2  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:4FB5  32 47 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:4FB8  DD 21 3F F0         		LD IX,ChanB
     831.  00:4FBC  2A 41 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:4FBF  CD BD 4D            		CALL CHREGS
     833.  00:4FC2  22 41 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:4FC5  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:4FC8  32 48 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:4FCB  DD 21 5C F0         		LD IX,ChanC
     837.  00:4FCF  2A 43 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:4FD2  CD BD 4D            		CALL CHREGS
     839.  00:4FD5  22 43 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:4FD8                      
     841.  00:4FD8  2A 7D F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:4FDB  7C                  		LD A,H
     843.  00:4FDC  85                  		ADD A,L
     844.  00:4FDD  32 45 F1            		LD [AYREGS+AR_Noise],A
     845.  00:4FE0                      
     846.  00:4FE0  3A 1C F0            		LD A,[PT3_AddToEn]
     847.  00:4FE3  5F                  		LD E,A
     848.  00:4FE4  87                  		ADD A,A
     849.  00:4FE5  9F                  		SBC A,A
     850.  00:4FE6  57                  		LD D,A
     851.  00:4FE7  2A 4D F1            		LD HL,[EnvBase]
     852.  00:4FEA  19                  		ADD HL,DE
     853.  00:4FEB  ED 5B 7A F0         		LD DE,[CurESld]
     854.  00:4FEF  19                  		ADD HL,DE
     855.  00:4FF0  22 4A F1            		LD [AYREGS+AR_Env],HL
     856.  00:4FF3                      
     857.  00:4FF3  AF                  		XOR A
     858.  00:4FF4  21 7C F0            		LD HL,CurEDel
     859.  00:4FF7  B6                  		OR [HL]
     860.  00:4FF8  C8                  		RET Z
     861.  00:4FF9  35                  		DEC [HL]
     862.  00:4FFA  C0                  		RET NZ
     863.  00:4FFB  3A 1D F0            		LD A,[PT3_Env_Del]
     864.  00:4FFE  77                  		LD [HL],A
     865.  00:4FFF  2A 1E F0            		LD HL,[PT3_ESldAdd]
     866.  00:5002  19                  		ADD HL,DE
     867.  00:5003  22 7A F0            		LD [CurESld],HL
     868.  00:5006  C9                  		RET
     869.  00:5007                      
     870.  00:5007  AF                  PT3_ROUT:	XOR A
     871.  00:5008                      	
     872.  00:5008                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:5008  21 46 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:500B  CB FE               		set	7,[hl]
     875.  00:500D  CB B6               		res	6,[hl]
     876.  00:500F                      
     877.  00:500F  0E A0               		LD C,$A0
     878.  00:5011  21 3F F1            		LD HL,AYREGS
     879.  00:5014  ED 79               .LOUT:		OUT [C],A
     880.  00:5016  0C                  		INC C
     881.  00:5017  ED A3               		OUTI 
     882.  00:5019  0D                  		DEC C
     883.  00:501A  3C                  		INC A
     884.  00:501B  FE 0D               		CP 13
     885.  00:501D  20 F5               		JR NZ,.LOUT
     886.  00:501F  ED 79               		OUT [C],A
     887.  00:5021  7E                  		LD A,[HL]
     888.  00:5022  A7                  		AND A
     889.  00:5023  F8                  		RET M
     890.  00:5024  0C                  		INC C
     891.  00:5025  ED 79               		OUT [C],A
     892.  00:5027  C9                  		RET
     893.  00:5028                      
     894.  00:5028  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:5029  2A                  		db TCNEW_0-T_
     896.  00:502A  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:502B  00                  		db TCOLD_0-T_
     898.  00:502C  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:502D  0C                  		db TCNEW_1-T_
     900.  00:502E  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:502F  0C                  		db TCOLD_1-T_
     902.  00:5030  94                  		db (T_NEW_2-T1_)*2
     903.  00:5031  35                  		db TCNEW_2-T_
     904.  00:5032  30                  		db (T_OLD_2-T1_)*2
     905.  00:5033  0E                  		db TCOLD_2-T_
     906.  00:5034  60                  		db (T_NEW_3-T1_)*2
     907.  00:5035  20                  		db TCNEW_3-T_
     908.  00:5036  60                  		db (T_OLD_3-T1_)*2
     909.  00:5037  21                  		db TCOLD_3-T_
     910.  00:5038                      
     911.  00:5038                      T_:
     912.  00:5038                      
     913.  00:5038                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:5038  01 05 09 0B 0D 0F 13 15 
     914.  00:5040  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:5044                      TCNEW_1:	
     916.  00:5044  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:5046                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:5046  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:504F                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:504F  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:5058  57                  TCNEW_3:	db $56+1
     920.  00:5059                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:5059  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:5062                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:5062  1D 21 23 27 2B 2D 31 55 
     922.  00:506A  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:506D                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:506D  1B 21 25 29 2B 3B 4D 5F 
     924.  00:5075  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:5078                      
     926.  00:5078  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:507C                      
     928.  00:507C                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:507C  0D                  		db ($06EC*2)/256
     930.  00:507D  D8                  		db #d8
     931.  00:507E  69                  		db $0755-$06EC
     932.  00:507F  70                  		db $07C5-$0755
     933.  00:5080  76                  		db $083B-$07C5
     934.  00:5081  7D                  		db $08B8-$083B
     935.  00:5082  85                  		db $093D-$08B8
     936.  00:5083  8D                  		db $09CA-$093D
     937.  00:5084  95                  		db $0A5F-$09CA
     938.  00:5085  9D                  		db $0AFC-$0A5F
     939.  00:5086  A8                  		db $0BA4-$0AFC
     940.  00:5087  B1                  		db $0C55-$0BA4
     941.  00:5088  BB                  		db $0D10-$0C55
     942.  00:5089  0C                  		db ($066D*2)/256
     943.  00:508A  DA                  		db #da
     944.  00:508B  62                  		db $06CF-$066D
     945.  00:508C  68                  		db $0737-$06CF
     946.  00:508D  6D                  		db $07A4-$0737
     947.  00:508E  75                  		db $0819-$07A4
     948.  00:508F  7B                  		db $0894-$0819
     949.  00:5090  83                  		db $0917-$0894
     950.  00:5091  8A                  		db $09A1-$0917
     951.  00:5092  92                  		db $0A33-$09A1
     952.  00:5093  9C                  		db $0ACF-$0A33
     953.  00:5094  A4                  		db $0B73-$0ACF
     954.  00:5095  AF                  		db $0C22-$0B73
     955.  00:5096  B8                  		db $0CDA-$0C22
     956.  00:5097  0E                  		db ($0704*2)/256
     957.  00:5098  08                  		db #08
     958.  00:5099  6A                  		db $076E-$0704
     959.  00:509A  72                  		db $07E0-$076E
     960.  00:509B  78                  		db $0858-$07E0
     961.  00:509C  7E                  		db $08D6-$0858
     962.  00:509D  86                  		db $095C-$08D6
     963.  00:509E  90                  		db $09EC-$095C
     964.  00:509F  96                  		db $0A82-$09EC
     965.  00:50A0  A0                  		db $0B22-$0A82
     966.  00:50A1  AA                  		db $0BCC-$0B22
     967.  00:50A2  B4                  		db $0C80-$0BCC
     968.  00:50A3  BE                  		db $0D3E-$0C80
     969.  00:50A4  0F                  		db ($07E0*2)/256
     970.  00:50A5  C0                  		db #c0
     971.  00:50A6  78                  		db $0858-$07E0
     972.  00:50A7  88                  		db $08E0-$0858
     973.  00:50A8  80                  		db $0960-$08E0
     974.  00:50A9  90                  		db $09F0-$0960
     975.  00:50AA  98                  		db $0A88-$09F0
     976.  00:50AB  A0                  		db $0B28-$0A88
     977.  00:50AC  B0                  		db $0BD8-$0B28
     978.  00:50AD  A8                  		db $0C80-$0BD8
     979.  00:50AE  E0                  		db $0D60-$0C80
     980.  00:50AF  B0                  		db $0E10-$0D60
     981.  00:50B0  E8                  		db $0EF8-$0E10
     982.  00:50B1                      
     983.  00:50B1                      
     984.  00:50B1                      	;Variables del replayer... las coloco desde aqui.
     985.  00:50B1                      	;mirar que hace la directiva MAP del SJASM
     986.  00:50B1  (F000)              	map		#F000
     987.  00:50B1                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     988.  00:50B1  (00:F000)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
     989.  00:50B1                                          ;bit7 is set each time, when loop point is passed
     990.  00:50B1  (00:F000)           PT3_MODADDR:	#2
     991.  00:50B1  (00:F002)           PT3_CrPsPtr:		#2
     992.  00:50B1  (00:F004)           PT3_SAMPTRS:		#2
     993.  00:50B1  (00:F006)           PT3_OrnPtrs:		#2
     994.  00:50B1  (00:F008)           PT3_PDSP:		#2
     995.  00:50B1  (00:F00A)           PT3_CSP:		#2 
     996.  00:50B1  (00:F00C)           PT3_PSP:		#2
     997.  00:50B1  (00:F00E)           PT3_PrNote:		#1
     998.  00:50B1  (00:F00F)           PT3_PrSlide:		#2
     999.  00:50B1  (00:F011)           PT3_AdInPtA:		#2
    1000.  00:50B1  (00:F013)           PT3_AdInPtB:		#2
    1001.  00:50B1  (00:F015)           PT3_AdInPtC:		#2
    1002.  00:50B1  (00:F017)           PT3_LPosPtr:		#2
    1003.  00:50B1  (00:F019)           PT3_PatsPtr:		#2
    1004.  00:50B1  (00:F01B)           PT3_Delay:		#1
    1005.  00:50B1  (00:F01C)           PT3_AddToEn:		#1
    1006.  00:50B1  (00:F01D)           PT3_Env_Del:		#1
    1007.  00:50B1  (00:F01E)           PT3_ESldAdd:		#2
    1008.  00:50B1  (00:F020)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1009.  00:50B1                      
    1010.  00:50B1  (00:F022)           VARS:			#0
    1011.  00:50B1                      
    1012.  00:50B1  (00:F022)           ChanA:			#29			;CHNPRM_Size
    1013.  00:50B1  (00:F03F)           ChanB:			#29			;CHNPRM_Size
    1014.  00:50B1  (00:F05C)           ChanC:			#29			;CHNPRM_Size
    1015.  00:50B1                      
    1016.  00:50B1                      ;GlobalVars
    1017.  00:50B1  (00:F079)           DelyCnt:		#1
    1018.  00:50B1  (00:F07A)           CurESld:		#2
    1019.  00:50B1  (00:F07C)           CurEDel:		#1
    1020.  00:50B1  (00:F07D)           Ns_Base_AddToNs:	#0
    1021.  00:50B1  (00:F07D)           Ns_Base:		#1
    1022.  00:50B1  (00:F07E)           AddToNs:		#1
    1023.  00:50B1                      
    1024.  00:50B1  (00:F07F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1025.  00:50B1                      
    1026.  00:50B1  (00:F13F)           AYREGS:			#0
    1027.  00:50B1  (00:F13F)           VT_:			#14
    1028.  00:50B1  (00:F14D)           EnvBase:		#2
    1029.  00:50B1  (00:F14F)           VAR0END:		#0
    1030.  00:50B1                      
    1031.  00:50B1  (00:F14F)           T1_:			#0		
    1032.  00:50B1  (00:F14F)           T_NEW_1:		#0
    1033.  00:50B1  (00:F14F)           T_OLD_1:		#24
    1034.  00:50B1  (00:F167)           T_OLD_2:		#24
    1035.  00:50B1  (00:F17F)           T_NEW_3:		#0
    1036.  00:50B1  (00:F17F)           T_OLD_3:		#2
    1037.  00:50B1  (00:F181)           T_OLD_0:		#0
    1038.  00:50B1  (00:F181)           T_NEW_0:		#24
    1039.  00:50B1  (00:F199)           T_NEW_2:		#166
    1040.  00:50B1                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
    1041.  00:50B1  (0000)                  ENDMAP
      29   00:50B1                      SONG:
      30   00:50B1  (0F92)                  incbin "sfx\Nostalgy_sincabecera.pt3"
      31   00:6043                      
      32   00:6043                      ; AFX
      33   00:6043                          include "include\ayFX-ROM.ASM"
       1.  00:6043                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:6043                      
       3.  00:6043                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:6043                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:6043                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:6043                      		; --- v1.2f/r	ayFX bank support
       7.  00:6043                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:6043                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:6043                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:6043                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:6043                      		; --- v1.0	Initial release
      12.  00:6043                      
      13.  00:6043                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:6043                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:6043  (00:0000)           AYFXRELATIVE: 	equ 0
      16.  00:6043                      
      17.  00:6043                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:6043                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:6043  22 EA C3            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:6046  AF                  		xor	a				; a:=0
      21.  00:6047  32 E9 C3            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:604A  3C                  		inc	a				; Starting channel (=1)
      23.  00:604B  32 F3 C3            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:604E                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:604E  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:6050  32 EC C3            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:6053  C9                  		ret					; Return
      28.  00:6054                      
      29.  00:6054                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:6054                      		; --- INPUT: A -> sound to be played ---
      31.  00:6054                      		; ---        C -> sound priority     ---
      32.  00:6054  C5                  		push	bc				; Store bc in stack
      33.  00:6055  D5                  		push	de				; Store de in stack
      34.  00:6056  E5                  		push	hl				; Store hl in stack
      35.  00:6057                      		; --- Check if the index is in the bank ---
      36.  00:6057  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:6058  2A EA C3            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:605B  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:605C  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:605D  28 06               		jr	z,.CHECK_PRI			; ...goto @@CHECK_PRI
      41.  00:605F                      		; The bank has less than 256 samples
      42.  00:605F  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:6060  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:6061  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:6063  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:6065                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:6065                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:6065  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:6066  3A EC C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:6069  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:606A  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:606C  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:606E                      		; --- Set new priority ---
      54.  00:606E  79                  		ld	a,c				; a:=New priority
      55.  00:606F  E6 0F               		and	$0F				; We mask the priority
      56.  00:6071  32 EC C3            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:6074                      
      58.  00:6074                      		IF ( AYFXRELATIVE == 1 )
      59.  00:6074                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:6074                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:6074                    ~ 			ld	a,15				; a:=15
      62.  00:6074                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:6074                    ~ 			jr	z,@@INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:6074                    ~ 			add	a,a				; a:=a*2
      65.  00:6074                    ~ 			add	a,a				; a:=a*4
      66.  00:6074                    ~ 			add	a,a				; a:=a*8
      67.  00:6074                    ~ 			add	a,a				; a:=a*16
      68.  00:6074                    ~ 			ld	e,a				; e:=a
      69.  00:6074                    ~ 			ld	d,0				; de:=a
      70.  00:6074                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:6074                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:6074                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:6074                    ~ 		ENDIF
      74.  00:6074                      
      75.  00:6074                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:6074  ED 5B EA C3         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:6078  13                  		inc	de				; de points to the increments table of the bank
      78.  00:6079  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:607A  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:607C  29                  		add	hl,hl				; hl:=hl*2
      81.  00:607D  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:607E  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:607F  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:6080  56                  		ld	d,[hl]				; de:=increment
      85.  00:6081  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:6082  22 ED C3            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:6085  AF                  		xor	a				; a:=0 (no errors)
      88.  00:6086  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:6087  D1                  		pop	de				; Retrieve de from stack
      90.  00:6088  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:6089  C9                  		ret					; Return
      92.  00:608A                      
      93.  00:608A                      		IF ( AYFXRELATIVE == 1 )
      94.  00:608A                    ~ 	.INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:608A                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:608A                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:608A                    ~ 			jr	.INIT_END			; Jumps to @@INIT_END
      98.  00:608A                    ~ 		ENDIF
      99.  00:608A                      
     100.  00:608A                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:608A  3A EC C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:608D  B7                  		or	a				; If priority has bit 7 on...
     103.  00:608E  F8                  		ret	m				; ...return
     104.  00:608F                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:608F  3A E9 C3            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:6092  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:6094  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:6096  21 F3 C3            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:6099  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:609A  20 02               		jr	nz,.TAKECB			; If not zero jump to @@TAKECB
     111.  00:609C  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:609E                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:609E  2A ED C3            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:60A1  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:60A2  23                  		inc	hl				; Increment pointer
     116.  00:60A3                      		; --- Check if there's new tone on stream ---
     117.  00:60A3  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:60A5  28 08               		jr	z,.CHECK_NN			; ...jump to @@CHECK_NN (no new tone)
     119.  00:60A7                      		; --- Extract new tone from stream ---
     120.  00:60A7  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:60A8  23                  		inc	hl				; Increment pointer
     122.  00:60A9  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:60AA  23                  		inc	hl				; Increment pointer
     124.  00:60AB  ED 53 EF C3         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:60AF                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:60AF  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:60B1  28 09               		jr	z,.SETPOINTER			; ...jump to @@SETPOINTER (no new noise)
     128.  00:60B3                      		; --- Extract new noise from stream ---
     129.  00:60B3  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:60B4  23                  		inc	hl				; Increment pointer
     131.  00:60B5  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:60B7  28 95               		jr	z,ayFX_END			; ...jump to ayFX_END
     133.  00:60B9  32 F1 C3            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:60BC                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:60BC  22 ED C3            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:60BF                      		; --- Extract volume ---
     137.  00:60BF  79                  		ld	a,c				; a:=Control byte
     138.  00:60C0  E6 0F               		and	$0F				; lower nibble
     139.  00:60C2                      
     140.  00:60C2                      		IF ( AYFXRELATIVE == 1 )
     141.  00:60C2                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:60C2                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:60C2                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:60C2                    ~ 			ld	d,0				; d:=0
     145.  00:60C2                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:60C2                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:60C2                    ~ 			or	a				; If relative volume is zero...
     148.  00:60C2                    ~ 		ENDIF
     149.  00:60C2                      
     150.  00:60C2  32 F2 C3            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:60C5  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:60C6                      		; -------------------------------------
     153.  00:60C6                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:60C6                      		; -------------------------------------
     155.  00:60C6                      		; --- Set noise channel ---
     156.  00:60C6  CB 79               		bit	7,c				; If noise is off...
     157.  00:60C8  20 06               		jr	nz,.SETMASKS			; ...jump to @@SETMASKS
     158.  00:60CA  3A F1 C3            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:60CD  32 45 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:60D0                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:60D0  79                  		ld	a,c				; a:=Control byte
     162.  00:60D1  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:60D3  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:60D5  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:60D6                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:60D6  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:60D7  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:60D8  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:60DA                      		; --- Dump to correct channel ---
     170.  00:60DA  21 F3 C3            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:60DD  46                  		ld	b,[hl]				; Channel counter
     172.  00:60DE                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:60DE  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:60E0                      .LAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:60E0  CD 0F 61            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:60E3  32 49 F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:60E6  CB 51               		bit	2,c				; If tone is off...
     178.  00:60E8  C0                  		ret	nz				; ...return
     179.  00:60E9  22 43 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:60EC  C9                  		ret					; Return
     181.  00:60ED                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:60ED  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:60EF  0F                  		rrca					; Rotate right OR mask
     184.  00:60F0  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:60F2                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:60F2  CD 0F 61            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:60F5  32 48 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:60F8  CB 49               		bit	1,c				; If tone is off...
     189.  00:60FA  C0                  		ret	nz				; ...return
     190.  00:60FB  22 41 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:60FE  C9                  		ret					; Return
     192.  00:60FF                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:60FF  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:6101  0F                  		rrca					; Rotate right OR mask
     195.  00:6102                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:6102  CD 0F 61            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:6105  32 47 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:6108  CB 41               		bit	0,c				; If tone is off...
     199.  00:610A  C0                  		ret	nz				; ...return
     200.  00:610B  22 3F F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:610E  C9                  		ret					; Return
     202.  00:610F                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:610F  4F                  		ld	c,a				; c:=OR mask
     204.  00:6110  3A 46 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:6113  A2                  		and	d				; AND mask
     206.  00:6114  B1                  		or	c				; OR mask
     207.  00:6115  32 46 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:6118  3A F2 C3            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:611B  2A EF C3            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:611E  C9                  		ret					; Return
     211.  00:611F                      
     212.  00:611F                      		IF ( AYFXRELATIVE == 1 )
     213.  00:611F                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:611F                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:611F                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:611F                    ~ 		ENDIF
      34   00:611F                      ; entities
      35   00:611F                          include "include\entities.asm"
       1.  00:611F                      ; Entities struct
       2.  00:611F                      ; 0 - on/off
       3.  00:611F                      ; 1 - x
       4.  00:611F                      ; 2 - y
       5.  00:611F                      ; 3 - energy
       6.  00:611F                      ; 4 - ENEMY_COLLISION_OFFSET_X
       7.  00:611F                      ; 5 - ENEMY_COLLISION_OFFSET_Y
       8.  00:611F                      ; 6 - ENEMY_COLLISION_WIDTH
       9.  00:611F                      ; 7 - ENEMY_COLLISION_HEIGHT
      10.  00:611F                      ; 8 - spritenumber in spat
      11.  00:611F                      ; 9 - damage
      12.  00:611F                      
      13.  00:611F                      init_playerDAT: db 1,$7F,$69,24,12,12,15,15,0
      13.  00:611F  01 7F 69 18 0C 0C 0F 0F 00 
      14.  00:6128                      enemy1_stg1DAT: db 1,$AF,$0F,4,16,16,16,16,4
      14.  00:6128  01 AF 0F 04 10 10 10 10 04 
      15.  00:6131                      
      36   00:6131                      START
      37   00:6131                      	; CODE
      38   00:6131  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      39   00:6134  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      40   00:6136  23                  	inc hl ; FORCLR+1
      41   00:6137  36 00               	ld [hl],0 ; Color de fondo 1=negro
      42   00:6139  23                  	inc hl ; FORCLR+2
      43   00:613A  36 00               	ld [hl],0 ; Color del borde 1=negro
      44   00:613C  3E 08               	LD A,8
      45   00:613E                      	;CALL CHGMOD    	
      46   00:613E  CD C3 42                CALL SETPAGES32K
      47   00:6141                      	;CALL opening_screen
      48   00:6141                      	
      49   00:6141                      	;CALL CHGET
      50   00:6141                      	; Empieza el juego    
      51   00:6141  CD 30 42            	call ClearVram_MSX2		
      52   00:6144  CD D6 42            	call SET_SCREEN5_MODE    
      53   00:6147  CD 24 42                call Set212Lines
      54   00:614A  3E 01                   ld	a, SPR_DATA_PAGE			; page 
      55   00:614C  32 00 70            	ld	(_bank2),a
      56   00:614F                      
      57   00:614F                          ; init sfx
      58   00:614F  F3                      di	
      59   00:6150  21 4E 50            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
      60   00:6153                          ;PUSH IX
      61   00:6153  CD C2 4A                call	PT3_INIT			; Inicia el reproductor de PT3
      62   00:6156  21 B3 96            	ld hl, AFX
      63   00:6159  CD 43 60                call ayFX_SETUP
      64   00:615C                          ;POP IX
      65   00:615C  FB                      ei
      66   00:615D                      
      67   00:615D  CD 75 61                call INIT_CHARS_VARS
      68   00:6160  CD A7 46                call initVDPBuffers    
      69   00:6163                      
      70   00:6163  3E FF                   LD A, -MOV_SPEED_GHOST
      71   00:6165  32 6F C0            	LD (CHAR_SPEED_X_GHOST), A
      72   00:6168  21 9C 8E                LD HL, PaletteData
      73   00:616B  CD 6F 43                CALL SetPalette
      74   00:616E                          
      75   00:616E                              
      76   00:616E                          ; Load Data to VDP and init entities
      77   00:616E  CD 19 62                CALL PRE_STAGE1
      78   00:6171                          ; Start STG1    
      79   00:6171  CD 34 62                CALL STAGE1
      80   00:6174                      
      81   00:6174                          ;call MAIN_LOOP
      82   00:6174                          ;CALL CHGET
      83   00:6174  C9                  	ret
      84   00:6175                      
      85   00:6175                      INIT_CHARS_VARS:    
      86   00:6175  DD 21 7C C0             ld ix, SPRITE_ATTRS           
      87   00:6179                          
      88   00:6179  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      89   00:617D  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      90   00:6181  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      91   00:6185                      
      92   00:6185  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      93   00:6189  DD 36 05 7F             ld (ix+5), 7Fh
      94   00:618D  DD 36 06 04             ld (ix+6), 04h        
      95   00:6191                      
      96   00:6191  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      97   00:6195  DD 36 09 7F             ld (ix+9), 7Fh
      98   00:6199  DD 36 0A 08             ld (ix+10), 08h        
      99   00:619D                      
     100   00:619D  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
     101   00:61A1  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
     102   00:61A5  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
     103   00:61A9                          
     104   00:61A9  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
     105   00:61AD  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
     106   00:61B1  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
     107   00:61B5                          
     108   00:61B5  AF                      XOR A
     109   00:61B6  32 22 C0                LD (current_level), A
     110   00:61B9  32 6C C0                LD (JIFFY_TEMP),A
     111   00:61BC  32 6D C0                LD (CHAR_SPEED_X),A
     112   00:61BF  32 6E C0                LD (CHAR_SPEED_Y),A
     113   00:61C2  32 6F C0                LD (CHAR_SPEED_X_GHOST),A
     114   00:61C5  32 74 C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
     115   00:61C8  32 77 C0                LD (CHAR_NEW_DIR_MAIN),A    
     116   00:61CB  32 78 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
     117   00:61CE  32 7A C0                LD (CHAR_DISTANCE_SHOOT),A
     118   00:61D1  32 7B C0                LD (CHAR_SPEED_SHOOT),A
     119   00:61D4  32 71 C0                LD (CHAR_GHOST_DEAD),A
     120   00:61D7  32 79 C0                LD (CHAR_MIN_STEP), A
     121   00:61DA  32 03 C1                LD (SPRITE_COLOR_REPLACE2), A
     122   00:61DD  32 63 C0                LD (SHOWING_GUS_DIALOG), A
     123   00:61E0  32 62 C0                LD (SHOWING_JOHN_DIALOG), A
     124   00:61E3  32 61 C0                LD (SHOWING_MIKE_DIALOG), A
     125   00:61E6  32 60 C0                LD (SHOWING_SKULL_STG1_DIALOG), A    
     126   00:61E9  32 5F C0                LD (stg1_puzzle_solved), A
     127   00:61EC  32 64 C0                LD (stg2_puzzle_solved), A
     128   00:61EF  32 66 C0                LD (PLAYING_NOTE1_STG2), A
     129   00:61F2  32 67 C0                LD (PLAYING_NOTE2_STG2), A
     130   00:61F5  32 68 C0                LD (PLAYING_NOTE3_STG2), A
     131   00:61F8  32 69 C0                LD (SHOWING_MURRAY_STG2), A
     132   00:61FB  32 21 C0                LD (P1_flickering_counter), A
     133   00:61FE  32 20 C0                LD (P1_flickering_state), A
     134   00:6201                      
     135   00:6201                         ; LD A,$FF
     136   00:6201                          ;LD (OLD_KEY_PRESSED), A
     137   00:6201  32 00 C0                LD (counter_stg_solved), A
     138   00:6204  3E 01                   LD A,$01
     139   00:6206  32 76 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     140   00:6209                      
     141   00:6209  21 C0 80                ld hl, SPRITE_P1_DOWN
     142   00:620C  22 FF C0                ld (SPRITE_PTR_REPLACE), HL    
     143   00:620F  21 C0 86                ld hl, SPRITE_COLOR_P1_DOWN
     144   00:6212  22 01 C1                ld (SPRITE_COLOR_REPLACE), HL
     145   00:6215  22 03 C1                LD (SPRITE_COLOR_REPLACE2), HL
     146   00:6218                      
     147   00:6218                          
     148   00:6218  C9                      ret
     149   00:6219                      PRE_STAGE1
     150   00:6219                          ; Switch segment to TILES_PAGE
     151   00:6219  3E 02                   ld	a, TILES_PAGE			; page 
     152   00:621B  32 00 70            	ld	(_bank2),a
     153   00:621E                          
     154   00:621E                          ;We load the tiles on page 1 of VDP
     155   00:621E  21 00 80                LD HL, TILES1    
     156   00:6221  CD 20 43                call load_tiles_vdp
     157   00:6224                      
     158   00:6224                          ; Switch segment to SPR_DATA_PAGE
     159   00:6224  3E 01                   ld	a, SPR_DATA_PAGE			; page 
     160   00:6226  32 00 70            	ld	(_bank2),a
     161   00:6229                      
     162   00:6229                          ;We load the font on page 1 of VDP
     163   00:6229  CD 2A 43                call load_font_vdp
     164   00:622C                      
     165   00:622C                          ; set energy
     166   00:622C  21 10 40                LD HL, ANDY_MAX_ENERGY
     167   00:622F                          ;ADD HL, current_level
     168   00:622F  7E                      LD A, (HL)  ; no offset for level 1
     169   00:6230                          ;LD A, 0
     170   00:6230  32 08 C0                LD (ENTITY_PLAYER_POINTER+3), A
     171   00:6233                      
     172   00:6233  C9                      RET
     173   00:6234                      
     174   00:6234                      STAGE1:
     175   00:6234  CD 5E 48                CALL DISSCR
     176   00:6237                          ;LD HL, CEMENTER1
     177   00:6237                          ;LD (BITMAP), HL
     178   00:6237                          ;LD B, :CEMENTER1
     179   00:6237                          ;call load_screen
     180   00:6237                          
     181   00:6237                          ; Draw screen using map and metatiles
     182   00:6237  21 4E 9A                LD HL, stg1_map_back
     183   00:623A  22 01 C0                LD (stg_map_ptr_back), HL
     184   00:623D                          
     185   00:623D  21 D7 9A                LD HL, stg1_map_front
     186   00:6240  22 03 C0                LD (stg_map_ptr_front), HL
     187   00:6243                           
     188   00:6243  CD AF 49                call load_screen_v2    
     189   00:6246                          
     190   00:6246  CD FB 42                call DUMP_SPR_ALL
     191   00:6249  CD 52 43                CALL DUMP_SPR_P1
     192   00:624C                          
     193   00:624C  21 8C 87                LD HL, mapa1
     194   00:624F  11 09 C1                LD DE, MAP_RAM
     195   00:6252  01 E0 02                LD BC, 736
     196   00:6255  ED B0                   LDIR
     197   00:6257                          
     198   00:6257  21 09 C1                LD HL, MAP_RAM
     199   00:625A  22 05 C1                LD (MAPA), HL    
     200   00:625D                              
     201   00:625D  CD B8 48                CALL DRAW_ANDY_ENERGY
     202   00:6260                      
     203   00:6260  3A 5F C0                LD A, (stg1_puzzle_solved)
     204   00:6263  FE 04                   CP 4
     205   00:6265  20 1F                   JR NZ, .nobackfromstg2
     206   00:6267                              ; Open the gate!
     207   00:6267  3E 03                   LD A, 3
     208   00:6269  16 70                   LD D, 112
     209   00:626B  1E 00                   LD E, 0
     210   00:626D  CD 27 49                CALL draw_tile
     211   00:6270                      
     212   00:6270                          ; Modify MAP
     213   00:6270  21 80 87                LD HL,stg1_gate
     214   00:6273  11 17 C1                LD DE, MAP_RAM+14
     215   00:6276  01 04 00                LD BC, 4
     216   00:6279  ED B0                   LDIR
     217   00:627B                      
     218   00:627B  21 80 87                LD HL,stg1_gate
     219   00:627E  11 37 C1                LD DE, MAP_RAM+46
     220   00:6281  01 04 00                LD BC, 4
     221   00:6284  ED B0                   LDIR
     222   00:6286                          
     223   00:6286                      .nobackfromstg2
     224   00:6286                              ; Copy the energy bar to back buffer
     225   00:6286  21 78 4A                LD HL, DiagBoxToBackBufROM
     226   00:6289  CD 2C 48            	call VDPCMD
     227   00:628C                      ;	call VDP_Ready
     228   00:628C  CD 57 48                CALL ENASCR    
     229   00:628F                        
     230   00:628F                      MAIN_LOOP:
     231   00:628F                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     232   00:628F                          
     233   00:628F  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)  ; Cargamos la Y
     234   00:6292  FE 00                   CP $00
     235   00:6294  CA 5E 65                JP Z, STAGE2
     236   00:6297  CD 37 43                call DUMP_SPR_ATTS    
     237   00:629A                      
     238   00:629A                      .check_tombs:
     239   00:629A                      
     240   00:629A  3A 5F C0                LD A, (stg1_puzzle_solved)
     241   00:629D  FE 03                   CP 3
     242   00:629F  CA EC 63                JP Z, .check_counter_puzzle_solved
     243   00:62A2  FE 04                   CP 4
     244   00:62A4  CA 03 64                JP Z, .animate_ghost
     245   00:62A7                      
     246   00:62A7  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     247   00:62AA  FE C8                   CP MIKE_TOMB_STG1_X
     248   00:62AC  20 62                   JR NZ, .check_john_tomb    
     249   00:62AE                          
     250   00:62AE  3A 5F C0                LD A, (stg1_puzzle_solved)
     251   00:62B1  FE 02                   CP 2
     252   00:62B3  C2 EA 62                JP NZ, .puzzle_wrong_order
     253   00:62B6  3C                      INC A
     254   00:62B7  32 5F C0                LD (stg1_puzzle_solved), A
     255   00:62BA                          ; Open the gate!    
     256   00:62BA  3E 03                   LD A, 3
     257   00:62BC  16 70                   LD D, 112
     258   00:62BE  1E 00                   LD E, 0
     259   00:62C0  CD 27 49                CALL draw_tile
     260   00:62C3                      
     261   00:62C3  FD 21 10 41             LD IY, stg1_puzzle_solved_strings
     262   00:62C7  CD 5B 49                CALL print_strings_dialog_box_v2
     263   00:62CA                      
     264   00:62CA                          ; Modify MAP
     265   00:62CA  21 80 87                LD HL,stg1_gate
     266   00:62CD  11 17 C1                LD DE, MAP_RAM+14
     267   00:62D0  01 04 00                LD BC, 4
     268   00:62D3  ED B0                   LDIR
     269   00:62D5                      
     270   00:62D5  21 80 87                LD HL,stg1_gate
     271   00:62D8  11 37 C1                LD DE, MAP_RAM+46
     272   00:62DB  01 04 00                LD BC, 4
     273   00:62DE  ED B0                   LDIR
     274   00:62E0                          ; afx
     275   00:62E0  3E 02                   LD A,2
     276   00:62E2  0E 00                   LD C, 0
     277   00:62E4  CD 54 60                CALL ayFX_INIT
     278   00:62E7                      
     279   00:62E7  C3 03 64                JP .animate_ghost
     280   00:62EA                      
     281   00:62EA                      .puzzle_wrong_order
     282   00:62EA  3A 61 C0                LD A, (SHOWING_MIKE_DIALOG)
     283   00:62ED  FE 01                   CP 1
     284   00:62EF  CA 03 64                JP Z, .animate_ghost    
     285   00:62F2  FD 21 16 40             LD IY, mike_tomb_strings
     286   00:62F6  CD 5B 49                CALL print_strings_dialog_box_v2
     287   00:62F9  3E 01                   LD A,1
     288   00:62FB  32 61 C0                LD (SHOWING_MIKE_DIALOG), A
     289   00:62FE  AF                      XOR A
     290   00:62FF  32 5F C0                LD (stg1_puzzle_solved), A
     291   00:6302                      
     292   00:6302  21 86 87                LD HL,stg1_gate_blocked
     293   00:6305  11 36 C1                LD DE, MAP_RAM+45
     294   00:6308  01 06 00                LD BC, 6
     295   00:630B  ED B0                   LDIR
     296   00:630D                      
     297   00:630D  C3 03 64                JP .animate_ghost
     298   00:6310                      
     299   00:6310                      .check_john_tomb:
     300   00:6310  FE 29                   CP JOHN_TOMB_STG1_X
     301   00:6312  20 33                   jr nz, .check_gus_tomb
     302   00:6314  3A 62 C0                LD A, (SHOWING_JOHN_DIALOG)
     303   00:6317  FE 01                   CP 1
     304   00:6319  CA 03 64                JP Z, .animate_ghost
     305   00:631C  FD 21 55 40             LD IY, john_tomb_strings
     306   00:6320  CD 5B 49                CALL print_strings_dialog_box_v2
     307   00:6323  3E 01                   LD A,1
     308   00:6325  32 62 C0                LD (SHOWING_JOHN_DIALOG), A
     309   00:6328  3A 5F C0                LD A, (stg1_puzzle_solved)
     310   00:632B  FE 01                   CP 1
     311   00:632D  C2 03 64                JP NZ, .animate_ghost
     312   00:6330  3C                      INC A
     313   00:6331  32 5F C0                LD (stg1_puzzle_solved), A
     314   00:6334                          ; Half open gate
     315   00:6334  3E 02                   LD A, 2
     316   00:6336  16 70                   LD D, 112
     317   00:6338  1E 00                   LD E, 0
     318   00:633A  CD 27 49                CALL draw_tile
     319   00:633D                      
     320   00:633D                          ; afx
     321   00:633D  3E 00                   LD A,0
     322   00:633F  0E 00                   LD C, 0
     323   00:6341  CD 54 60                CALL ayFX_INIT
     324   00:6344                      
     325   00:6344  C3 03 64                JP .animate_ghost
     326   00:6347                      
     327   00:6347                      .check_gus_tomb:
     328   00:6347  FE 49                   CP GUS_TOMB_STG1_X
     329   00:6349  C2 88 63                JP nz, .check_skull_hint
     330   00:634C  3A 63 C0                LD A, (SHOWING_GUS_DIALOG)
     331   00:634F  FE 01                   CP 1
     332   00:6351  CA 03 64                JP Z, .animate_ghost
     333   00:6354  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     334   00:6357  FE 78                   CP GUS_TOMB_STG1_Y
     335   00:6359  DA 03 64                jp c, .animate_ghost
     336   00:635C  FD 21 92 40             LD IY, gus_tomb_strings
     337   00:6360  CD 5B 49                CALL print_strings_dialog_box_v2
     338   00:6363  3E 01                   LD A,1
     339   00:6365  32 63 C0                LD (SHOWING_GUS_DIALOG), A
     340   00:6368  32 5F C0                LD (stg1_puzzle_solved), A
     341   00:636B                          ; Remove the lockpad    
     342   00:636B  3E 01                   LD A, 1
     343   00:636D  16 70                   LD D, 112
     344   00:636F  1E 00                   LD E, 0
     345   00:6371  CD 27 49                call draw_tile
     346   00:6374                      
     347   00:6374  21 80 87                LD HL,stg1_gate
     348   00:6377  11 38 C1                LD DE, MAP_RAM+47
     349   00:637A  01 02 00                LD BC, 2
     350   00:637D  ED B0                   LDIR
     351   00:637F                      
     352   00:637F                          ; afx
     353   00:637F  3E 01                   LD A,1
     354   00:6381  0E 00                   LD C, 0
     355   00:6383  CD 54 60                CALL ayFX_INIT
     356   00:6386                      
     357   00:6386  18 7B                   JR .animate_ghost
     358   00:6388                      
     359   00:6388                      .check_skull_hint:
     360   00:6388  FE 69                   CP SKULL_TOMB_STG1_X
     361   00:638A  20 20                   jr nz, .check_mike_dialog_box
     362   00:638C                              
     363   00:638C  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     364   00:638F  FE 5A                   CP SKULL_TOMB_STG1_Y1
     365   00:6391  38 19                   jr c, .check_mike_dialog_box
     366   00:6393  FE 64                   CP SKULL_TOMB_STG1_Y2
     367   00:6395  30 15                   jr nc, .check_mike_dialog_box
     368   00:6397                      
     369   00:6397  3A 60 C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     370   00:639A  FE 01                   CP 1
     371   00:639C  28 65                   JR Z, .animate_ghost
     372   00:639E  FD 21 D3 40             LD IY, stg1_skull_strings
     373   00:63A2  CD 5B 49                CALL print_strings_dialog_box_v2
     374   00:63A5  3E 01                   LD A,1
     375   00:63A7  32 60 C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     376   00:63AA  18 57                   JR .animate_ghost
     377   00:63AC                      
     378   00:63AC                      .check_mike_dialog_box
     379   00:63AC  3A 61 C0                LD A, (SHOWING_MIKE_DIALOG)
     380   00:63AF  FE 01                   CP 1
     381   00:63B1  20 09                   JR nz, .check_gus_dialog
     382   00:63B3  CD E3 47                CALL CLEAR_DIALOG_BOX
     383   00:63B6  AF                      XOR A
     384   00:63B7  32 61 C0                LD (SHOWING_MIKE_DIALOG), A
     385   00:63BA  18 47                   JR .animate_ghost
     386   00:63BC                      
     387   00:63BC                      .check_gus_dialog
     388   00:63BC  3A 63 C0                LD A, (SHOWING_GUS_DIALOG)
     389   00:63BF  FE 01                   CP 1
     390   00:63C1  20 09                   JR nz, .check_john_dialog
     391   00:63C3  CD E3 47                CALL CLEAR_DIALOG_BOX
     392   00:63C6  AF                      XOR A
     393   00:63C7  32 63 C0                LD (SHOWING_GUS_DIALOG), A
     394   00:63CA  18 37                   JR .animate_ghost
     395   00:63CC                      
     396   00:63CC                      .check_john_dialog
     397   00:63CC  3A 62 C0                LD A, (SHOWING_JOHN_DIALOG)
     398   00:63CF  FE 01                   CP 1
     399   00:63D1  20 09                   JR nz, .check_skull_dialog
     400   00:63D3  CD E3 47                CALL CLEAR_DIALOG_BOX
     401   00:63D6  AF                      XOR A
     402   00:63D7  32 62 C0                LD (SHOWING_JOHN_DIALOG), A
     403   00:63DA  18 27                   JR .animate_ghost
     404   00:63DC                      
     405   00:63DC                      .check_skull_dialog
     406   00:63DC  3A 60 C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     407   00:63DF  FE 01                   CP 1
     408   00:63E1  20 20                   JR nz, .animate_ghost
     409   00:63E3  CD E3 47                CALL CLEAR_DIALOG_BOX
     410   00:63E6  AF                      XOR A
     411   00:63E7  32 60 C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     412   00:63EA  18 17                   JR .animate_ghost    
     413   00:63EC                      
     414   00:63EC                      .check_counter_puzzle_solved
     415   00:63EC  3A 00 C0                LD A, (counter_stg_solved)
     416   00:63EF  FE 6F                   CP counter_stg1_solved_max
     417   00:63F1  30 06                   JR nc, .hide_dialog_puzzle_solved
     418   00:63F3  3C                      INC A
     419   00:63F4  32 00 C0                LD (counter_stg_solved), A
     420   00:63F7  18 0A                   jr .animate_ghost
     421   00:63F9                      
     422   00:63F9                      .hide_dialog_puzzle_solved
     423   00:63F9  3A 5F C0                LD A, (stg1_puzzle_solved)
     424   00:63FC  3C                      INC a
     425   00:63FD  32 5F C0                LD (stg1_puzzle_solved), A
     426   00:6400  CD E3 47                call CLEAR_DIALOG_BOX    
     427   00:6403                      
     428   00:6403                      .animate_ghost    
     429   00:6403  3A 71 C0                LD A,(CHAR_GHOST_DEAD)
     430   00:6406  FE 01                   CP $01
     431   00:6408  CA 7C 64                JP Z,.continue
     432   00:640B  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     433   00:640E  2A 6F C0            	LD HL, (CHAR_SPEED_X_GHOST)
     434   00:6411  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     435   00:6412                          
     436   00:6412  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     437   00:6415  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     438   00:6418  FE 50                   CP $50
     439   00:641A  CA 25 64                JP Z,.CHANGE_DIR_RIGHT
     440   00:641D  FE AF                   CP $AF
     441   00:641F  CA 32 64                JP Z,.CHANGE_DIR_LEFT
     442   00:6422                          		
     443   00:6422  C3 3B 64                JP .check_pattern
     444   00:6425                      
     445   00:6425                      .CHANGE_DIR_RIGHT:
     446   00:6425  3E 01                   LD A, MOV_SPEED_GHOST
     447   00:6427  32 6F C0            	LD (CHAR_SPEED_X_GHOST), A
     448   00:642A  3E FF                   LD A,$FF
     449   00:642C  32 74 C0                LD (CHAR_DIR_GHOST1),A
     450   00:642F  C3 3B 64                JP .check_pattern
     451   00:6432                      
     452   00:6432                      .CHANGE_DIR_LEFT:
     453   00:6432  3E FF                   LD A, -MOV_SPEED_GHOST
     454   00:6434  32 6F C0            	LD (CHAR_SPEED_X_GHOST), A
     455   00:6437  AF                      XOR A   ; Pone A a 0
     456   00:6438  32 74 C0                LD (CHAR_DIR_GHOST1),A
     457   00:643B                      
     458   00:643B                      .check_pattern:
     459   00:643B  3A 74 C0                LD A,(CHAR_DIR_GHOST1)
     460   00:643E  FE FF                   CP $FF
     461   00:6440  CA 61 64                JP Z,.check_pattern_RIGHT
     462   00:6443  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     463   00:6446  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     464   00:6448  CA 56 64                jp z,.change_pattern_L
     465   00:644B  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     466   00:644F  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     467   00:6453  C3 7C 64                jp .continue
     468   00:6456                      .change_pattern_L:
     469   00:6456  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     470   00:645A  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     471   00:645E  C3 7C 64                jp .continue
     472   00:6461                      
     473   00:6461                      .check_pattern_RIGHT
     474   00:6461  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     475   00:6464  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     476   00:6466  CA 74 64                jp z,.change_pattern_R
     477   00:6469  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     478   00:646D  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     479   00:6471  C3 7C 64                jp .continue
     480   00:6474                      .change_pattern_R:
     481   00:6474  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     482   00:6478  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     483   00:647C                      
     484   00:647C                      .continue:    
     485   00:647C  3A 20 C0                LD A, (P1_flickering_state)
     486   00:647F  FE 01                   CP 1
     487   00:6481  28 40                   JR Z, .p1_flickering
     488   00:6483                      
     489   00:6483  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)     ; Cargamos la X
     490   00:6486  32 0F C0                LD (ENTITY_ENEMY1_POINTER+1), A
     491   00:6489  DD 7E 10                LD A, (ix+SPR_GHOST_STG1)           ; Cargamos la Y
     492   00:648C  32 10 C0                LD (ENTITY_ENEMY1_POINTER+2), A
     493   00:648F                          
     494   00:648F  FD 21 0E C0             LD IY, ENTITY_ENEMY1_POINTER
     495   00:6493  CD A8 41                CALL EnemyCollisionCheck
     496   00:6496  30 3A                   JR NC, .move_shoot
     497   00:6498                          ; Collision
     498   00:6498  3A 08 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     499   00:649B  D6 04                   SUB 4    
     500   00:649D  32 08 C0                LD (ENTITY_PLAYER_POINTER+ENTITY_ENERGY), A
     501   00:64A0  3E 07                   LD A, 7
     502   00:64A2  0E 00                   LD C, 0
     503   00:64A4  CD 54 60                CALL ayFX_INIT  
     504   00:64A7  CD B8 48                call DRAW_ANDY_ENERGY
     505   00:64AA                          ; Copiamos al buffer parte inferior de pantalla
     506   00:64AA  21 78 4A                LD HL, DiagBoxToBackBufROM
     507   00:64AD  CD 2C 48            	call VDPCMD
     508   00:64B0                          ;set the flickering state
     509   00:64B0  3E 01                   LD A, 1
     510   00:64B2  32 20 C0                LD (P1_flickering_state), A
     511   00:64B5  AF                      XOR A
     512   00:64B6  32 21 C0                LD (P1_flickering_counter), A
     513   00:64B9                      
     514   00:64B9                          ;call BOUNCE_ANDY
     515   00:64B9  3A 08 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     516   00:64BC  FE 00                   CP 0
     517   00:64BE  CA C0 67                JP Z, game_over
     518   00:64C1  18 0F                   JR .move_shoot
     519   00:64C3                      
     520   00:64C3                      .p1_flickering
     521   00:64C3  3A 21 C0                LD A, (P1_flickering_counter)
     522   00:64C6  3C                      INC A
     523   00:64C7  32 21 C0                LD (P1_flickering_counter),a
     524   00:64CA  FE 5F                   CP counter_P1_flickering_max
     525   00:64CC  20 04                   JR NZ, .move_shoot
     526   00:64CE  AF                      XOR A
     527   00:64CF  32 20 C0                LD (P1_flickering_state), A
     528   00:64D2                      
     529   00:64D2                      .move_shoot:
     530   00:64D2  CD BA 45                CALL MOVE_SHOOT
     531   00:64D5                      .CHECK_GHOST:
     532   00:64D5                          ; Comprobamos si hay colision con el fantasma
     533   00:64D5  3A 71 C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     534   00:64D8  FE 01                   CP $01
     535   00:64DA  CA FE 64                JP Z,.check_KB
     536   00:64DD                      
     537   00:64DD  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     538   00:64E0  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     539   00:64E3  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     540   00:64E6  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     541   00:64E9  CD D7 41                call check_spr_collision
     542   00:64EC  FE 01                   CP 1
     543   00:64EE  C2 FE 64                JP NZ,.check_KB
     544   00:64F1                      
     545   00:64F1                      .KILL_GHOST:
     546   00:64F1  3E 01                   LD A,1
     547   00:64F3  32 71 C0                LD (CHAR_GHOST_DEAD),A
     548   00:64F6  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     549   00:64FA  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     550   00:64FE                      
     551   00:64FE                      .check_KB:
     552   00:64FE  76                      halt    	
     553   00:64FF  F3                  	di       
     554   00:6500  DD E5                   PUSH IX
     555   00:6502  CD 07 50            	call	PT3_ROUT			;envia datos a al PSG 	   
     556   00:6505  CD 0F 4F            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     557   00:6508  CD 8A 60            	call ayFX_PLAY
     558   00:650B  DD E1                   POP IX
     559   00:650D  FB                      ei
     560   00:650E                      
     561   00:650E  3E 08                   ld a, 8
     562   00:6510  CD 41 01            	call SNSMAT   
     563   00:6513                          
     564   00:6513  4F                      LD C,A    
     565   00:6514                          
     566   00:6514  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     567   00:6516  CC F3 43                call z, move_right
     568   00:6519                          
     569   00:6519  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     570   00:651B  CC 52 44                call z, move_left
     571   00:651E                      
     572   00:651E  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     573   00:6520  CC 7E 43                call z, move_up
     574   00:6523                      
     575   00:6523  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     576   00:6525  CC B8 43                call z, move_down
     577   00:6528                      
     578   00:6528                      no_arrows:
     579   00:6528  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     580   00:652A  CC 25 46                call z,SHOOT_MAIN_CHAR
     581   00:652D                      
     582   00:652D                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     583   00:652D                          ;ret z
     584   00:652D                          
     585   00:652D                      .flick_P1:
     586   00:652D  3A 20 C0                LD A, (P1_flickering_state)
     587   00:6530  FE 01                   CP 1
     588   00:6532  20 27                   JR NZ, .jp_main_loop
     589   00:6534  3A 21 C0                LD A, (P1_flickering_counter)
     590   00:6537  E6 0F                   AND $0F
     591   00:6539  FE 0A                   CP $A
     592   00:653B  28 12                   JR Z, .hide_p1
     593   00:653D                      
     594   00:653D  FE 0E                   CP $E
     595   00:653F  20 1A                   JR NZ, .jp_main_loop
     596   00:6541  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     597   00:6544  DD 77 00                LD (ix), A      ; mask 0
     598   00:6547  DD 77 04                LD (ix+4), A    ; mask 1
     599   00:654A  DD 77 08                LD (ix+8), A    ; mask 2
     600   00:654D  18 0C                   jr .jp_main_loop
     601   00:654F                      
     602   00:654F                      .hide_p1
     603   00:654F                          ; Hide P1
     604   00:654F  DD 36 00 D9             LD (ix), 217      ; mask 0
     605   00:6553  DD 36 04 D9             LD (ix+4), 217    ; mask 1
     606   00:6557  DD 36 08 D9             LD (ix+8), 217    ; mask 2
     607   00:655B                      
     608   00:655B                      .jp_main_loop
     609   00:655B  C3 8F 62                jp MAIN_LOOP
     610   00:655E                      
     611   00:655E                      
     612   00:655E                      STAGE2:
     613   00:655E  CD 5E 48                CALL DISSCR
     614   00:6561  76                      halt
     615   00:6562  F3                  	di       
     616   00:6563  DD E5                   PUSH IX	
     617   00:6565  CD 07 50                call	PT3_ROUT			;envia datos a al PSG 	   
     618   00:6568  CD 0F 4F            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     619   00:656B  DD E1               	POP IX
     620   00:656D  FB                      ei
     621   00:656E                          ;LD HL, CEMENTER2
     622   00:656E                          ;LD (BITMAP), HL
     623   00:656E                          ;LD B, :CEMENTER2
     624   00:656E                      
     625   00:656E                          ;call load_screen
     626   00:656E                          
     627   00:656E                          ; Draw screen using map and metatiles
     628   00:656E  21 F0 9A                LD HL, stg2_map_back
     629   00:6571  22 01 C0                LD (stg_map_ptr_back), HL
     630   00:6574                          
     631   00:6574  21 51 9B                LD HL, stg2_map_front
     632   00:6577  22 03 C0                LD (stg_map_ptr_front), HL
     633   00:657A                           
     634   00:657A  CD AF 49                call load_screen_v2    
     635   00:657D                      
     636   00:657D  21 6C 8A                LD HL, mapa2
     637   00:6580  22 05 C1                LD (MAPA), HL
     638   00:6583                      
     639   00:6583  3E 01                   ld	a, SPR_DATA_PAGE			; page 
     640   00:6585  32 00 70            	ld	(_bank2),a
     641   00:6588                       
     642   00:6588                          ; Ponemos el P1 por encima del marco
     643   00:6588  3E AF                   LD A, 175
     644   00:658A  32 07 C0                LD (ENTITY_PLAYER_POINTER+ENEMY_Y), A      ; mask 0
     645   00:658D  DD 77 00                LD (ix), A      ; mask 0
     646   00:6590  DD 77 04                LD (ix+4), A    ; mask 1
     647   00:6593  DD 77 08                LD (ix+8), A    ; mask 2
     648   00:6596                          
     649   00:6596  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     650   00:659A  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     651   00:659E                          
     652   00:659E  CD FB 42                CALL DUMP_SPR_ALL
     653   00:65A1  CD 52 43                CALL DUMP_SPR_P1        
     654   00:65A4                          
     655   00:65A4                          ;LD HL, ANDY_MAX_ENERGY
     656   00:65A4                          ;LD A, (HL)  
     657   00:65A4                          ;INC A           ; level 1
     658   00:65A4                          ;LD (ENTITY_PLAYER_POINTER+3), A
     659   00:65A4                      
     660   00:65A4                          ;XOR a
     661   00:65A4                          ;LD (current_level), A
     662   00:65A4  CD E3 47                CALL CLEAR_DIALOG_BOX
     663   00:65A7  CD B8 48                CALL DRAW_ANDY_ENERGY
     664   00:65AA                          ; Miramos si el puzzle está resuelto para abrir la puerta de la gárgola
     665   00:65AA  3A 64 C0                LD A, (stg2_puzzle_solved)
     666   00:65AD  FE 04                   CP 4
     667   00:65AF  20 09                   JR NZ, .stg2_puzzle_not_solved
     668   00:65B1                          ; Open gargoyle Tile
     669   00:65B1  3E 11                   LD A, 17
     670   00:65B3  16 78                   LD D, 120
     671   00:65B5  1E 50                   LD E, 80
     672   00:65B7  CD 27 49                call draw_tile
     673   00:65BA                      
     674   00:65BA                      .stg2_puzzle_not_solved
     675   00:65BA  CD 57 48                CALL ENASCR
     676   00:65BD                          
     677   00:65BD                      MAIN_LOOP2:
     678   00:65BD                          ;halt    
     679   00:65BD  76                      halt
     680   00:65BE  F3                  	di       
     681   00:65BF  DD E5                   PUSH IX
     682   00:65C1  CD 07 50            	call	PT3_ROUT			;envia datos a al PSG 	   
     683   00:65C4  CD 0F 4F            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     684   00:65C7  CD 8A 60            	call ayFX_PLAY
     685   00:65CA  DD E1                   POP IX
     686   00:65CC  FB                      ei
     687   00:65CD  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)    
     688   00:65D0  FE B0                   CP 176      ; Miramos si la Y es 160 para pasar a stg1
     689   00:65D2  C2 F9 65                JP NZ, .no_screen_change
     690   00:65D5                          ; Ponemos el P1 al principio de la pantalla 1
     691   00:65D5  3E 01                   LD A, 1
     692   00:65D7  32 07 C0                LD (ENTITY_PLAYER_POINTER+ENEMY_Y), A
     693   00:65DA  DD 36 00 01             LD (ix), 1          ; P1.Y = 1
     694   00:65DE  DD 36 04 01             LD (ix+4), 1
     695   00:65E2  DD 36 08 01             LD (ix+8), 1
     696   00:65E6                      
     697   00:65E6  3A 71 C0                LD A, (CHAR_GHOST_DEAD)
     698   00:65E9  FE 01                   CP $01
     699   00:65EB  CA F6 65                JP Z, .GHOST_DEAD
     700   00:65EE  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     701   00:65F2  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     702   00:65F6                      .GHOST_DEAD:    
     703   00:65F6  CD 34 62                CALL STAGE1
     704   00:65F9                      
     705   00:65F9                      .no_screen_change:
     706   00:65F9                          ; Check if the puzzle is solved, then don't check tiles
     707   00:65F9  3A 64 C0                LD A, (stg2_puzzle_solved)
     708   00:65FC  FE 04                   CP 4
     709   00:65FE  CA 95 67                JP Z, .continue
     710   00:6601  FE 03                   CP 3
     711   00:6603  20 5A                   JR NZ, .check_murray_tile
     712   00:6605                      
     713   00:6605  3A 00 C0                LD A, (counter_stg_solved)
     714   00:6608  FE 5F                   CP counter_stg2_solved_max
     715   00:660A  30 34                   JR nc, .open_gargoyle_gate
     716   00:660C  3C                      INC A
     717   00:660D  32 00 C0                LD (counter_stg_solved), A
     718   00:6610                      
     719   00:6610  3A 65 C0                LD A, (stg2_delay_border_change)
     720   00:6613  FE 05                   CP STG2_DELAY_CYCLES
     721   00:6615  C2 39 66                JP NZ, .inc_stg2_delay_border_change
     722   00:6618  AF                      XOR A
     723   00:6619  32 65 C0                LD (stg2_delay_border_change), A
     724   00:661C  3A EB F3                LD A, (BDRCLR)
     725   00:661F  FE 0F                   CP 15
     726   00:6621  28 0B                   JR Z, .change_bdr_clr
     727   00:6623                          ; change border color to black
     728   00:6623  21 EB F3                ld hl,BDRCLR
     729   00:6626  36 0F                   ld (HL), 15
     730   00:6628  CD 62 00                call CHGCLR    
     731   00:662B  C3 95 67                JP .continue
     732   00:662E                      
     733   00:662E                      .change_bdr_clr
     734   00:662E                          ; change border color to red
     735   00:662E  21 EB F3                ld HL,BDRCLR
     736   00:6631  36 01                   ld (HL), 1
     737   00:6633  CD 62 00                call CHGCLR
     738   00:6636  C3 95 67                JP .continue
     739   00:6639                      
     740   00:6639                      .inc_stg2_delay_border_change
     741   00:6639  3C                      INC A
     742   00:663A  32 65 C0                LD (stg2_delay_border_change), A
     743   00:663D  C3 95 67                JP .continue
     744   00:6640                      
     745   00:6640                      .open_gargoyle_gate
     746   00:6640                          ; Open gargoyle Tile
     747   00:6640  3E 11                   LD A, 17
     748   00:6642  16 78                   LD D, 120
     749   00:6644  1E 50                   LD E, 80
     750   00:6646  CD 27 49                call draw_tile
     751   00:6649                          ; Change border color
     752   00:6649  21 EB F3                ld hl,BDRCLR
     753   00:664C  36 0F                   ld (HL), 15
     754   00:664E  CD 62 00                call CHGCLR
     755   00:6651  3A 64 C0                LD A, (stg2_puzzle_solved)
     756   00:6654  3C                      INC A
     757   00:6655  32 64 C0                LD (stg2_puzzle_solved), A
     758   00:6658                              ; afx
     759   00:6658  3E 00                   LD A,0
     760   00:665A  0E 00                   LD C, 0
     761   00:665C  CD 54 60                CALL ayFX_INIT
     762   00:665F                      
     763   00:665F                      .check_murray_tile
     764   00:665F                          ; Check murray coords
     765   00:665F  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     766   00:6662  FE AC                   CP STG2_MURRAY_YH
     767   00:6664  30 29                   JR NC, .check_tile1
     768   00:6666  FE 9C                   CP STG2_MURRAY_YL
     769   00:6668  38 25                   JR C, .check_tile1
     770   00:666A                          ; XH > X > XL
     771   00:666A  DD 7E 01                LD A, (ix+1)
     772   00:666D  FE 71                   CP STG2_MURRAY_X
     773   00:666F  20 1E                   JR NZ, .check_tile1    
     774   00:6671                          ; Check if the dialog is showing
     775   00:6671  3A 69 C0                LD A, (SHOWING_MURRAY_STG2)
     776   00:6674  FE 01                   CP 1
     777   00:6676  CA 95 67                jp z, .continue
     778   00:6679                      
     779   00:6679                          ; Showing dialog
     780   00:6679  3E 01                   LD A, 1
     781   00:667B  32 69 C0                LD (SHOWING_MURRAY_STG2), A
     782   00:667E  FD 21 6D 41             LD IY, stg2_skull_strings
     783   00:6682  CD 5B 49                CALL print_strings_dialog_box_v2
     784   00:6685  3E 06                   LD A, 6
     785   00:6687  0E 00                   LD C, 0
     786   00:6689  CD 54 60                CALL ayFX_INIT  
     787   00:668C  C3 95 67                jp .continue
     788   00:668F                      
     789   00:668F                      .check_tile1:
     790   00:668F                          ; check X,Y to play Black Sabbath
     791   00:668F                          ; Ya tenemos en A la Y
     792   00:668F                          ; YH > y > YL
     793   00:668F  3A 07 C0                LD A, (ENTITY_PLAYER_POINTER+ENEMY_Y)
     794   00:6692  FE 70                   CP STG2_TILE1_YH
     795   00:6694  30 65                   JR NC, .check_tile3
     796   00:6696  FE 60                   CP STG2_TILE1_YL
     797   00:6698  38 61                   JR C, .check_tile3
     798   00:669A                          ; XH > X > XL    
     799   00:669A  DD 7E 01                LD A, (ix+1)
     800   00:669D  FE 78                   CP STG2_TILE1_XH
     801   00:669F  30 27                   JR NC, .check_next_tile
     802   00:66A1  FE 70                   CP STG2_TILE1_XL
     803   00:66A3  38 23                   JR C, .check_next_tile
     804   00:66A5                          ; Check if the tile is pressed
     805   00:66A5  3A 66 C0                LD A, (PLAYING_NOTE1_STG2)
     806   00:66A8  FE 01                   CP 1
     807   00:66AA  CA 95 67                jp z, .continue
     808   00:66AD                          
     809   00:66AD                          ; Playing note
     810   00:66AD  3E 01                   LD A, 1
     811   00:66AF  32 66 C0                LD (PLAYING_NOTE1_STG2), A
     812   00:66B2                          ;We set the puzzle to 1
     813   00:66B2  32 64 C0                LD (stg2_puzzle_solved), A
     814   00:66B5                      
     815   00:66B5  3E 03                   LD A, 3
     816   00:66B7  0E 00                   LD C, 0
     817   00:66B9  CD 54 60                CALL ayFX_INIT    
     818   00:66BC                          
     819   00:66BC  3E 08                   LD A, 8
     820   00:66BE  16 70                   LD D, 112
     821   00:66C0  1E 70                   LD E, 112
     822   00:66C2  CD 27 49                CALL draw_tile
     823   00:66C5  C3 95 67                jp .continue
     824   00:66C8                      
     825   00:66C8                      .check_next_tile:
     826   00:66C8  FE 81                   CP STG2_TILE2_XH
     827   00:66CA  30 2F                   JR NC, .check_tile3
     828   00:66CC  FE 79                   CP STG2_TILE2_XL
     829   00:66CE  38 2B                   JR C, .check_tile3
     830   00:66D0                          ; Check if the tile is pressed
     831   00:66D0  3A 67 C0                LD A, (PLAYING_NOTE2_STG2)
     832   00:66D3  FE 01                   CP 1
     833   00:66D5  CA 95 67                jp z, .continue
     834   00:66D8                          
     835   00:66D8                          ; Playing note
     836   00:66D8  3E 01                   LD A, 1
     837   00:66DA  32 67 C0                LD (PLAYING_NOTE2_STG2), A
     838   00:66DD                          
     839   00:66DD  3E 04                   LD A, 4
     840   00:66DF  0E 00                   LD C, 0
     841   00:66E1  CD 54 60                CALL ayFX_INIT    
     842   00:66E4                          ; Draw pressed tile
     843   00:66E4  3E 08                   LD A, 8
     844   00:66E6  16 80                   LD D, 128
     845   00:66E8  1E 70                   LD E, 112
     846   00:66EA  CD 27 49                CALL draw_tile
     847   00:66ED                          ; Check puzzle
     848   00:66ED  3A 64 C0                LD A, (stg2_puzzle_solved)
     849   00:66F0  FE 01                   CP 1
     850   00:66F2  20 04                   JR NZ, .wrong_order
     851   00:66F4  3C                      INC A
     852   00:66F5  32 64 C0                LD (stg2_puzzle_solved), A
     853   00:66F8                          
     854   00:66F8                      .wrong_order    
     855   00:66F8                      
     856   00:66F8  C3 95 67                JP .continue
     857   00:66FB                      
     858   00:66FB                      .check_tile3:
     859   00:66FB                          ; YH > y > YL
     860   00:66FB  FE 90                   CP STG2_TILE3_YH
     861   00:66FD  30 46                   JR NC, .check_walk_on_tile3
     862   00:66FF  FE 80                   CP STG2_TILE3_YL
     863   00:6701  38 42                   JR C, .check_walk_on_tile3
     864   00:6703                          ; XH > X > XL
     865   00:6703  DD 7E 01                LD A, (ix+1)
     866   00:6706  FE 81                   CP STG2_TILE3_XH
     867   00:6708  30 3B                   JR NC, .check_walk_on_tile3
     868   00:670A  FE 79                   CP STG2_TILE3_XL
     869   00:670C  38 37                   JR C, .check_walk_on_tile3
     870   00:670E                             
     871   00:670E                          ; Check if the tile is pressed
     872   00:670E  3A 68 C0                LD A, (PLAYING_NOTE3_STG2)
     873   00:6711  FE 01                   CP 1
     874   00:6713  CA 95 67                jp z, .continue
     875   00:6716                              
     876   00:6716                          ; Playing note
     877   00:6716  3E 01                   LD A, 1
     878   00:6718  32 68 C0                LD (PLAYING_NOTE3_STG2), A
     879   00:671B                      
     880   00:671B  3E 05                   LD A, 5
     881   00:671D  0E 00                   LD C, 0
     882   00:671F  CD 54 60                CALL ayFX_INIT    
     883   00:6722                      
     884   00:6722  3E 08                   LD A, 8
     885   00:6724  16 80                   LD D, 128
     886   00:6726  1E 90                   LD E, 144
     887   00:6728  CD 27 49                CALL draw_tile
     888   00:672B                          ; Check puzzle
     889   00:672B  3A 64 C0                LD A, (stg2_puzzle_solved)
     890   00:672E  FE 02                   CP 2
     891   00:6730  20 0D                   JR NZ, .wrong_order_tile3
     892   00:6732  3C                      INC A
     893   00:6733  32 64 C0                LD (stg2_puzzle_solved), A    
     894   00:6736                          ; reset the counter to wait until the note is played
     895   00:6736  AF                      XOR A
     896   00:6737  32 00 C0                LD (counter_stg_solved), A
     897   00:673A  32 65 C0                LD (stg2_delay_border_change), A
     898   00:673D  18 56                   JR .continue
     899   00:673F                      
     900   00:673F                      .wrong_order_tile3
     901   00:673F                          ;reset the counter
     902   00:673F  AF                      XOR A
     903   00:6740  32 64 C0                LD (stg2_puzzle_solved), A    
     904   00:6743  18 50                   JR .continue
     905   00:6745                      
     906   00:6745                      .check_walk_on_tile3
     907   00:6745  3A 68 C0                LD A, (PLAYING_NOTE3_STG2)
     908   00:6748  FE 01                   CP 1
     909   00:674A  20 0F                   JR NZ, .check_walk_on_tile2
     910   00:674C  3E 07                   LD A, 7
     911   00:674E  16 80                   LD D, 128
     912   00:6750  1E 90                   LD E, 144
     913   00:6752  CD 27 49                CALL draw_tile
     914   00:6755  AF                      XOR A
     915   00:6756  32 68 C0                LD (PLAYING_NOTE3_STG2), A
     916   00:6759  18 3A                   jr .continue
     917   00:675B                      
     918   00:675B                      .check_walk_on_tile2
     919   00:675B  3A 67 C0                LD A, (PLAYING_NOTE2_STG2)
     920   00:675E  FE 01                   CP 1
     921   00:6760  20 0F                   JR NZ, .check_walk_on_tile1
     922   00:6762  3E 07                   LD A, 7
     923   00:6764  16 80                   LD D, 128
     924   00:6766  1E 70                   LD E, 112
     925   00:6768  CD 27 49                CALL draw_tile
     926   00:676B  AF                      XOR A
     927   00:676C  32 67 C0                LD (PLAYING_NOTE2_STG2), A
     928   00:676F  18 24                   jr .continue
     929   00:6771                      
     930   00:6771                      .check_walk_on_tile1
     931   00:6771  3A 66 C0                LD A, (PLAYING_NOTE1_STG2)
     932   00:6774  FE 01                   CP 1
     933   00:6776  20 0F                   JR NZ, .check_murray_dialog
     934   00:6778  3E 07                   LD A, 7
     935   00:677A  16 70                   LD D, 112
     936   00:677C  1E 70                   LD E, 112
     937   00:677E  CD 27 49                CALL draw_tile
     938   00:6781  AF                      XOR A
     939   00:6782  32 66 C0                LD (PLAYING_NOTE1_STG2), A
     940   00:6785  18 0E                   jr .continue
     941   00:6787                      
     942   00:6787                      .check_murray_dialog
     943   00:6787  3A 69 C0                LD A, (SHOWING_MURRAY_STG2)
     944   00:678A  FE 01                   CP 1
     945   00:678C  20 07                   JR NZ, .continue
     946   00:678E  AF                      XOR a
     947   00:678F  32 69 C0                LD (SHOWING_MURRAY_STG2), A
     948   00:6792  CD E3 47                call CLEAR_DIALOG_BOX
     949   00:6795                      
     950   00:6795                      .continue:
     951   00:6795  CD 37 43                call DUMP_SPR_ATTS      
     952   00:6798  CD BA 45                CALL MOVE_SHOOT    
     953   00:679B                      
     954   00:679B  3E 08                   ld a, 8
     955   00:679D  CD 41 01            	call SNSMAT   
     956   00:67A0  4F                      LD C,A    
     957   00:67A1                              
     958   00:67A1  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     959   00:67A3  CC F3 43                call z, move_right
     960   00:67A6                          
     961   00:67A6  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     962   00:67A8  CC 52 44                call z, move_left
     963   00:67AB                      
     964   00:67AB  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     965   00:67AD  CC 7E 43                call z, move_up
     966   00:67B0                      
     967   00:67B0  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     968   00:67B2  CC B8 43                call z, move_down
     969   00:67B5                      
     970   00:67B5  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     971   00:67B7  CC 25 46                call z,SHOOT_MAIN_CHAR
     972   00:67BA                      
     973   00:67BA  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     974   00:67BC  C8                      ret z
     975   00:67BD                      
     976   00:67BD  C3 BD 65                jp MAIN_LOOP2
     977   00:67C0                      
     978   00:67C0                      game_over:
     979   00:67C0  FD 21 49 41             LD IY, game_over_strings
     980   00:67C4  CD 5B 49                call print_strings_dialog_box_v2    
     981   00:67C7  CD B6 4A                call PT3_MUTE
     982   00:67CA                      
     983   00:67CA                      .loop1   
     984   00:67CA  76                      halt
     985   00:67CB  3E 08                   ld a, 8
     986   00:67CD  CD 41 01            	call SNSMAT   
     987   00:67D0  4F                      LD C,A    
     988   00:67D1                              
     989   00:67D1  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     990   00:67D3  CA 31 61                JP z,START
     991   00:67D6                      
     992   00:67D6  18 F2                   JR .loop1
     993   00:67D8                      
     994   00:67D8  (01)                 PAGE 1
     995   01:8000                      ; CODE O NO
     996   01:8000                          include "include\BTH_data.asm"    
       1.  01:8000                      SPRITE_P1_UP:
       2.  01:8000                          ; UP 1        
       3.  01:8000                          ; mask 0
       4.  01:8000                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  01:8000  07 0F 05 1F 1F 3F 3F 7F 
       5.  01:8008                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  01:8008  00 4F 70 38 0C 0E 07 04 
       6.  01:8010                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  01:8010  E0 F0 A0 F8 F8 F8 FC FE 
       7.  01:8018                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  01:8018  06 F2 1E 3C 30 70 C0 00 
       8.  01:8020                          ; mask 1
       9.  01:8020                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  01:8020  00 00 18 00 1F 00 00 00 
      10.  01:8028                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  01:8028  7F 50 4F 3F 0F 0F 07 02 
      11.  01:8030                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  01:8030  00 00 10 00 FC 00 00 00 
      12.  01:8038                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  01:8038  F2 0E FE FC F0 F0 A0 00 
      13.  01:8040                          ; mask 2
      14.  01:8040                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  01:8040  00 00 1A 00 00 00 00 00 
      15.  01:8048                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  01:8048  7F 60 00 00 00 00 07 00 
      16.  01:8050                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  01:8050  00 00 50 00 00 00 00 00 
      17.  01:8058                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  01:8058  FA 0E 00 00 00 00 80 00 
      18.  01:8060                          
      19.  01:8060                          ; UP 2
      20.  01:8060                          ; mask 0
      21.  01:8060                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  01:8060  07 0F 05 1F 1F 3F 3F 7F 
      22.  01:8068                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  01:8068  10 4F 70 38 0C 0E 05 00 
      23.  01:8070                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  01:8070  E0 F0 A0 F8 F8 F8 FC FE 
      24.  01:8078                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  01:8078  02 F2 1E 3C 30 70 E0 40 
      25.  01:8080                          ; mask 1
      26.  01:8080                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  01:8080  00 00 18 00 1F 00 00 00 
      27.  01:8088                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  01:8088  4F 70 7F 3F 0F 0F 03 00 
      28.  01:8090                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  01:8090  00 00 10 00 FC 00 00 00 
      29.  01:8098                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  01:8098  FE 06 F2 FC F0 F0 E0 20 
      30.  01:80A0                          ; mask 2
      31.  01:80A0                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  01:80A0  00 00 1A 00 00 00 00 00 
      32.  01:80A8                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  01:80A8  6F 70 00 00 00 00 01 00 
      33.  01:80B0                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  01:80B0  00 00 50 00 00 00 00 00 
      34.  01:80B8                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  01:80B8  FE 0A 00 00 00 00 E0 00 
      35.  01:80C0                          
      36.  01:80C0                      SPRITE_P1_DOWN:
      37.  01:80C0                          ; DOWN 1 - 00h
      38.  01:80C0                          ; mask 0
      39.  01:80C0                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  01:80C0  07 0F 04 06 0F 07 1F 3F 
      40.  01:80C8                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  01:80C8  4C 4E 4E 3C 0C 0E 0F 08 
      41.  01:80D0                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  01:80D0  E0 F0 20 20 70 E0 F8 FC 
      42.  01:80D8                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  01:80D8  32 72 7E 7C 70 F0 C0 00 
      43.  01:80E0                          ; mask 1
      44.  01:80E0                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  01:80E0  00 00 19 19 10 3A 3A 78 
      45.  01:80E8                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  01:80E8  5F 5E 7E 3C 0C 0E 0F 04 
      46.  01:80F0                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  01:80F0  00 00 90 D8 88 58 5C 1E 
      47.  01:80F8                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  01:80F8  F6 FE FE 3C 30 70 A0 00 
      48.  01:8100                          ; mask 2
      49.  01:8100                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  01:8100  00 00 1B 00 10 00 00 00 
      50.  01:8108                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  01:8108  6F 6F 7F 3F 0F 0F 0F 00 
      51.  01:8110                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  01:8110  00 00 D0 00 8C 00 00 00 
      52.  01:8118                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  01:8118  FA 7E 7E BC B0 70 80 00 
      53.  01:8120                          
      54.  01:8120                          ; DOWN 2
      55.  01:8120                          ; mask 0 - 0Ch    
      56.  01:8120                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  01:8120  07 0F 04 06 0F 07 1F 3F 
      57.  01:8128                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  01:8128  4C 4E 7E 3C 0C 0E 05 00 
      58.  01:8130                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  01:8130  E0 F0 20 20 70 E0 F8 FC 
      59.  01:8138                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  01:8138  32 72 72 7C 70 F0 E0 40 
      60.  01:8140                          ; mask 1
      61.  01:8140                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  01:8140  00 00 19 19 10 3A 3A 78 
      62.  01:8148                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  01:8148  5F 7E 7E 3C 0C 0E 03 00 
      63.  01:8150                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  01:8150  00 00 90 D8 88 58 5C 1E 
      64.  01:8158                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  01:8158  F6 F6 FE 3C 30 70 E0 20 
      65.  01:8160                          ; mask 2
      66.  01:8160                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  01:8160  00 00 1B 00 10 00 00 00 
      67.  01:8168                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  01:8168  6F 7F 7F 3F 0F 0F 01 00 
      68.  01:8170                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  01:8170  00 00 D0 00 8C 00 00 00 
      69.  01:8178                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  01:8178  FA 7A 7E BC B0 70 E0 00 
      70.  01:8180                      
      71.  01:8180                      SPRITE_P1_LEFT:         
      72.  01:8180                          ; --- Slot 3
      73.  01:8180                          ; mask 0
      74.  01:8180                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  01:8180  07 0F 02 05 07 07 0F 0F 
      75.  01:8188                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  01:8188  07 03 03 03 01 03 03 04 
      76.  01:8190                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  01:8190  E0 F0 80 00 A0 E0 C0 C0 
      77.  01:8198                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  01:8198  E0 B0 70 F0 F0 F0 C0 00 
      78.  01:81A0                          ; mask 1
      79.  01:81A0                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  01:81A0  00 00 18 1A 08 0A 12 10 
      80.  01:81A8                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  01:81A8  08 03 02 02 01 03 03 03 
      81.  01:81B0                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  01:81B0  00 00 78 F8 5C 1C 7E 7E 
      82.  01:81B8                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  01:81B8  FE 3E 7E 7C F8 F8 B0 00 
      83.  01:81C0                          ; mask 2
      84.  01:81C0                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  01:81C0  00 00 1D 00 28 00 00 00 
      85.  01:81C8                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  01:81C8  00 07 06 06 07 07 03 00 
      86.  01:81D0                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  01:81D0  00 00 78 00 5C 00 00 00 
      87.  01:81D8                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  01:81D8  00 7E FE 7C F8 F8 80 00 
      88.  01:81E0                          ; --- Slot 4
      89.  01:81E0                          ; mask 0
      90.  01:81E0                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  01:81E0  07 0F 02 05 07 07 0F 0F 
      91.  01:81E8                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  01:81E8  07 03 03 03 01 03 04 00 
      92.  01:81F0                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  01:81F0  E0 F0 80 00 A0 E0 C0 C0 
      93.  01:81F8                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  01:81F8  E0 B0 D0 D0 F0 F0 E0 40 
      94.  01:8200                          ; mask 1
      95.  01:8200                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  01:8200  00 00 18 1A 08 0A 12 10 
      96.  01:8208                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  01:8208  08 03 03 03 01 03 03 00 
      97.  01:8210                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  01:8210  00 00 78 F8 5C 1C 7E 7E 
      98.  01:8218                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  01:8218  FE 3E 9E 9C 98 F8 E0 30 
      99.  01:8220                          ; mask 2
     100.  01:8220                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  01:8220  00 00 1D 00 28 00 00 00 
     101.  01:8228                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  01:8228  00 07 07 07 07 07 00 00 
     102.  01:8230                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  01:8230  00 00 78 00 5C 00 00 00 
     103.  01:8238                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  01:8238  00 7E BE BC 98 F8 E0 00 
     104.  01:8240                      
     105.  01:8240                      SPRITE_P1_RIGHT:
     106.  01:8240                          ; --- Slot 0
     107.  01:8240                          ; mask 0
     108.  01:8240                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  01:8240  07 0F 01 00 05 07 03 03 
     109.  01:8248                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  01:8248  07 0D 0E 0F 0F 0F 03 00 
     110.  01:8250                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  01:8250  E0 F0 40 A0 E0 E0 F0 F0 
     111.  01:8258                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  01:8258  E0 C0 C0 C0 80 C0 C0 20 
     112.  01:8260                          ; mask 1
     113.  01:8260                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  01:8260  00 00 1E 1F 3A 38 7E 7E 
     114.  01:8268                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  01:8268  7F 7C 7E 3E 1F 1F 0D 00 
     115.  01:8270                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  01:8270  00 00 18 58 10 50 48 08 
     116.  01:8278                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  01:8278  10 C0 40 40 80 C0 C0 C0 
     117.  01:8280                          ; mask 2
     118.  01:8280                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  01:8280  00 00 1E 00 3A 00 00 00 
     119.  01:8288                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  01:8288  00 7E 7F 3E 1F 1F 01 00 
     120.  01:8290                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  01:8290  00 00 B8 00 14 00 00 00 
     121.  01:8298                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  01:8298  00 E0 60 60 E0 E0 C0 00 
     122.  01:82A0                          
     123.  01:82A0                          ; --- Slot 2
     124.  01:82A0                         ; mask 0
     125.  01:82A0                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  01:82A0  07 0F 01 00 05 07 03 03 
     126.  01:82A8                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  01:82A8  07 0D 0B 0B 0F 0F 07 02 
     127.  01:82B0                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  01:82B0  E0 F0 40 A0 E0 E0 F0 F0 
     128.  01:82B8                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  01:82B8  E0 C0 C0 C0 80 C0 20 00 
     129.  01:82C0                          ; mask 1
     130.  01:82C0                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  01:82C0  00 00 1E 1F 3A 38 7E 7E 
     131.  01:82C8                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  01:82C8  7F 7C 79 39 19 1F 07 0C 
     132.  01:82D0                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  01:82D0  00 00 18 58 10 50 48 08 
     133.  01:82D8                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  01:82D8  10 C0 C0 C0 80 C0 C0 00 
     134.  01:82E0                              ; mask 2
     135.  01:82E0                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  01:82E0  00 00 1E 00 3A 00 00 00 
     136.  01:82E8                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  01:82E8  00 7E 7D 3D 19 1F 07 00 
     137.  01:82F0                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  01:82F0  00 00 B8 00 14 00 00 00 
     138.  01:82F8                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  01:82F8  00 E0 E0 E0 E0 E0 00 00 
     139.  01:8300                          
     140.  01:8300                      SPRITE_PATTERN:    
     141.  01:8300                          ; P1 - DOWN 1 
     142.  01:8300                          ; DOWN 1 - 00h
     143.  01:8300                          ; mask 0
     144.  01:8300                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  01:8300  07 0F 04 06 0F 07 1F 3F 
     145.  01:8308                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  01:8308  4C 4E 4E 3C 0C 0E 0F 08 
     146.  01:8310                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  01:8310  E0 F0 20 20 70 E0 F8 FC 
     147.  01:8318                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  01:8318  32 72 7E 7C 70 F0 C0 00 
     148.  01:8320                          ; mask 1
     149.  01:8320                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  01:8320  00 00 19 19 10 3A 3A 78 
     150.  01:8328                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  01:8328  5F 5E 7E 3C 0C 0E 0F 04 
     151.  01:8330                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  01:8330  00 00 90 D8 88 58 5C 1E 
     152.  01:8338                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  01:8338  F6 FE FE 3C 30 70 A0 00 
     153.  01:8340                          ; mask 2
     154.  01:8340                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  01:8340  00 00 1B 00 10 00 00 00 
     155.  01:8348                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  01:8348  6F 6F 7F 3F 0F 0F 0F 00 
     156.  01:8350                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  01:8350  00 00 D0 00 8C 00 00 00 
     157.  01:8358                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  01:8358  FA 7E 7E BC B0 70 80 00 
     158.  01:8360                          
     159.  01:8360                          ; DOWN 2
     160.  01:8360                          ; mask 0 - 0Ch    
     161.  01:8360                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  01:8360  07 0F 04 06 0F 07 1F 3F 
     162.  01:8368                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  01:8368  4C 4E 7E 3C 0C 0E 05 00 
     163.  01:8370                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  01:8370  E0 F0 20 20 70 E0 F8 FC 
     164.  01:8378                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  01:8378  32 72 72 7C 70 F0 E0 40 
     165.  01:8380                          ; mask 1
     166.  01:8380                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  01:8380  00 00 19 19 10 3A 3A 78 
     167.  01:8388                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  01:8388  5F 7E 7E 3C 0C 0E 03 00 
     168.  01:8390                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  01:8390  00 00 90 D8 88 58 5C 1E 
     169.  01:8398                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  01:8398  F6 F6 FE 3C 30 70 E0 20 
     170.  01:83A0                          ; mask 2
     171.  01:83A0                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  01:83A0  00 00 1B 00 10 00 00 00 
     172.  01:83A8                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  01:83A8  6F 7F 7F 3F 0F 0F 01 00 
     173.  01:83B0                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  01:83B0  00 00 D0 00 8C 00 00 00 
     174.  01:83B8                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  01:83B8  FA 7A 7E BC B0 70 E0 00 
     175.  01:83C0                          
     176.  01:83C0                          ; Antichrist - RIGHT
     177.  01:83C0                          ; mask 0 - 18h    
     178.  01:83C0                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  01:83C0  00 00 00 01 01 01 01 01 
     179.  01:83C8                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  01:83C8  01 01 07 07 01 01 00 00 
     180.  01:83D0                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  01:83D0  00 00 00 80 80 80 80 80 
     181.  01:83D8                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  01:83D8  80 80 E0 E0 80 80 00 00 
     182.  01:83E0                      
     183.  01:83E0                          ;Ghost 1 Left - 1CH
     184.  01:83E0                          ; mask 0
     185.  01:83E0                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  01:83E0  03 04 08 68 B5 90 50 40 
     186.  01:83E8                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  01:83E8  22 20 10 10 08 06 03 00 
     187.  01:83F0                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  01:83F0  C0 E0 70 36 BB 33 26 06 
     188.  01:83F8                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  01:83F8  0C 18 3E 19 07 0C F8 E0 
     189.  01:8400                          ; mask 1    20h
     190.  01:8400                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  01:8400  00 07 0F 6F DF FF 6F 7F 
     191.  01:8408                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  01:8408  3F 3F 1F 1F 0F 05 03 00 
     192.  01:8410                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  01:8410  00 20 90 D6 DD DD DA FA 
     193.  01:8418                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  01:8418  F4 E8 CE EF FB F4 18 00 
     194.  01:8420                          
     195.  01:8420                          ; Ghost 2 Left - 24h
     196.  01:8420                          ; mask 0    24-h
     197.  01:8420                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  01:8420  03 04 08 08 65 B0 90 40 
     198.  01:8428                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  01:8428  22 20 10 10 08 06 01 00 
     199.  01:8430                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  01:8430  C0 E0 70 30 B6 3B 27 06 
     200.  01:8438                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  01:8438  0C 18 3C 1A 06 0C F0 C0 
     201.  01:8440                          ; mask 1    28h
     202.  01:8440                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  01:8440  00 07 0F 0F 6F DF EF 7F 
     203.  01:8448                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  01:8448  3F 3F 1F 1F 0F 05 01 00 
     204.  01:8450                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  01:8450  00 20 90 D0 D6 DD D9 FA 
     205.  01:8458                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  01:8458  F4 E8 CC EE FA F4 30 00 
     206.  01:8460                      
     207.  01:8460                          ; Ghost 1 Right - 2Ch
     208.  01:8460                          ; mask 0
     209.  01:8460                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  01:8460  03 07 0E 6C DD CC 64 60 
     210.  01:8468                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  01:8468  30 18 7C 98 E0 30 1F 07 
     211.  01:8470                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  01:8470  C0 20 10 16 AD 09 0A 02 
     212.  01:8478                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  01:8478  44 04 08 08 10 60 C0 00 
     213.  01:8480                          ; mask 1    - 30h
     214.  01:8480                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  01:8480  00 04 09 6B BB BB 5B 5F 
     215.  01:8488                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  01:8488  2F 17 73 F7 DF 2F 18 00 
     216.  01:8490                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  01:8490  00 E0 F0 F6 FB FF F6 FE 
     217.  01:8498                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  01:8498  FC FC F8 F8 F0 A0 C0 00 
     218.  01:84A0                          
     219.  01:84A0                          ; Ghost 2 Right - 34h
     220.  01:84A0                          ; mask 0
     221.  01:84A0                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  01:84A0  03 07 0E 0C 6D DC E4 60 
     222.  01:84A8                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  01:84A8  30 18 3C 58 60 30 0F 03 
     223.  01:84B0                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  01:84B0  C0 20 10 10 A6 0D 09 02 
     224.  01:84B8                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  01:84B8  44 04 08 08 10 60 80 00 
     225.  01:84C0                          ; mask 1    38h
     226.  01:84C0                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  01:84C0  00 04 09 0B 6B BB 9B 5F 
     227.  01:84C8                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  01:84C8  2F 17 33 77 5F 2F 0C 00 
     228.  01:84D0                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  01:84D0  00 E0 F0 F0 F6 FB F7 FE 
     229.  01:84D8                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  01:84D8  FC FC F8 F8 F0 A0 80 00 
     230.  01:84E0                          
     231.  01:84E0                      
     232.  01:84E0                          ; Esqueleto Left - 1
     233.  01:84E0                          ; mask 0 - 3Ch
     234.  01:84E0                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  01:84E0  1F 1B 2E 24 3F 1F 1F 00 
     235.  01:84E8                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  01:84E8  03 05 09 04 01 02 02 04 
     236.  01:84F0                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  01:84F0  80 C0 C0 C0 80 00 00 80 
     237.  01:84F8                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  01:84F8  E0 D0 C8 C4 C0 20 20 40 
     238.  01:8500                          ; mask 1 - 40h
     239.  01:8500                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  01:8500  1F 1F 3F 3F 3F 1E 0A 00 
     240.  01:8508                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  01:8508  03 05 09 04 01 00 00 00 
     241.  01:8510                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  01:8510  00 80 80 80 00 00 00 00 
     242.  01:8518                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  01:8518  80 10 88 84 80 00 00 00 
     243.  01:8520                      
     244.  01:8520                          ; Esqueleto Left - 2
     245.  01:8520                          ; mask 0 - 44h
     246.  01:8520                          ; mask 0
     247.  01:8520                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  01:8520  0F 0D 17 12 1F 0F 0F 00 
     248.  01:8528                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  01:8528  03 05 09 10 01 06 08 00 
     249.  01:8530                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  01:8530  C0 E0 60 60 C0 80 80 80 
     250.  01:8538                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  01:8538  E0 D0 C8 D0 C0 20 20 50 
     251.  01:8540                          ; mask 1 - 48h
     252.  01:8540                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  01:8540  0F 0F 1F 1F 1F 0F 05 00 
     253.  01:8548                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  01:8548  03 05 09 10 01 00 00 00 
     254.  01:8550                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  01:8550  80 C0 C0 C0 80 00 00 00 
     255.  01:8558                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  01:8558  80 10 88 90 80 00 20 40 
     256.  01:8560                          
     257.  01:8560                          ; Esqueleto Right - 1
     258.  01:8560                          ; mask 0 - 4Ch
     259.  01:8560                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  01:8560  01 03 03 03 01 00 00 01 
     260.  01:8568                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  01:8568  07 0B 13 23 03 04 04 02 
     261.  01:8570                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  01:8570  F8 D8 74 24 FC F8 F8 00 
     262.  01:8578                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  01:8578  C0 A0 90 20 80 40 40 20 
     263.  01:8580                          ; mask 1 - 50h
     264.  01:8580                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  01:8580  00 01 01 01 00 00 00 00 
     265.  01:8588                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  01:8588  01 08 11 21 01 00 00 00 
     266.  01:8590                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  01:8590  F8 F8 FC FC FC 78 50 00 
     267.  01:8598                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  01:8598  C0 A0 90 20 80 00 00 00 
     268.  01:85A0                          
     269.  01:85A0                          ; Esqueleto Right - 2
     270.  01:85A0                          ; mask 0 - 54h
     271.  01:85A0                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  01:85A0  03 07 06 06 03 01 01 01 
     272.  01:85A8                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  01:85A8  07 0B 13 0B 03 04 04 0A 
     273.  01:85B0                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  01:85B0  F0 B0 E8 48 F8 F0 F0 00 
     274.  01:85B8                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  01:85B8  C0 A0 90 08 80 60 10 00 
     275.  01:85C0                          ; mask 1 - 58h
     276.  01:85C0                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  01:85C0  01 03 03 03 01 00 00 00 
     277.  01:85C8                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  01:85C8  01 08 11 09 01 00 04 02 
     278.  01:85D0                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  01:85D0  F0 F0 F8 F8 F8 F0 A0 00 
     279.  01:85D8                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  01:85D8  C0 A0 90 08 80 00 00 00 
     280.  01:85E0                      
     281.  01:85E0                      SPRITE_COLOR_TABLE:       
     282.  01:85E0                           ;P1 - DOWN 1
     283.  01:85E0                          ;DOWN 1
     284.  01:85E0                          ; attr 0
     285.  01:85E0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  01:85E0  05 05 0A 0B 0B 0B 0B 0B 
     286.  01:85E8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  01:85E8  04 04 04 0A 0A 0A 08 08 
     287.  01:85F0                          ; attr 1
     288.  01:85F0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  01:85F0  00 00 44 45 45 45 45 45 
     289.  01:85F8                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  01:85F8  4A 4A 4A 44 44 44 45 45 
     290.  01:8600                          ; attr 2
     291.  01:8600                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  01:8600  00 00 41 00 40 00 00 00 
     292.  01:8608                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  01:8608  41 41 41 41 41 41 42 00 
     293.  01:8610                               
     294.  01:8610                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  01:8610                          ; Disparo - antichrist    
     296.  01:8610                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  01:8610  00 00 00 0A 0A 0A 0A 0A 
     297.  01:8618                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  01:8618  0A 0A 0A 0A 0A 0A 00 00 
     298.  01:8620                          ; Fantasma
     299.  01:8620                          ; attr 0
     300.  01:8620                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  01:8620  0F 08 08 08 08 08 08 08 
     301.  01:8628                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  01:8628  08 08 08 08 08 08 08 0F 
     302.  01:8630                          ; attr 1
     303.  01:8630                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  01:8630  00 47 47 47 47 47 47 47 
     304.  01:8638                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  01:8638  47 47 47 47 47 47 47 00 
     305.  01:8640                          
     306.  01:8640                          
     307.  01:8640                          ; Esqueleto Left 1
     308.  01:8640                          ; attr 0
     309.  01:8640                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  01:8640  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  01:8648                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  01:8648  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  01:8650                          ; attr 1
     312.  01:8650                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  01:8650  41 49 49 49 41 41 41 00 
     313.  01:8658                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  01:8658  41 41 41 41 41 00 00 00 
     314.  01:8660                      
     315.  01:8660                      SPRITE_COLOR_P1_UP:
     316.  01:8660                          ;UP 1
     317.  01:8660                          ; attr 0
     318.  01:8660                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  01:8660  05 05 0A 05 05 05 05 05 
     319.  01:8668                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  01:8668  0A 05 0B 0A 0A 0A 08 08 
     320.  01:8670                          ; attr 1
     321.  01:8670                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  01:8670  00 00 44 00 40 00 00 00 
     322.  01:8678                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  01:8678  44 4A 45 45 45 45 45 45 
     323.  01:8680                          ; attr 2
     324.  01:8680                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  01:8680  00 00 41 00 00 00 00 00 
     325.  01:8688                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  01:8688  41 41 00 00 00 00 42 00 
     326.  01:8690                          
     327.  01:8690                          ;SPRITE_COLOR_P1_UP2:
     328.  01:8690                          ;UP 1
     329.  01:8690                          ; attr 0
     330.  01:8690                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  01:8690  05 05 0A 05 05 05 05 05 
     331.  01:8698                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  01:8698  0A 05 0B 0A 0A 0A 08 08 
     332.  01:86A0                          ; attr 1
     333.  01:86A0                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  01:86A0  00 00 44 00 40 00 00 00 
     334.  01:86A8                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  01:86A8  44 4A 45 45 45 45 45 45 
     335.  01:86B0                          ; attr 2
     336.  01:86B0                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  01:86B0  00 00 41 00 00 00 00 00 
     337.  01:86B8                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  01:86B8  41 41 00 00 00 00 42 00 
     338.  01:86C0                      
     339.  01:86C0                      
     340.  01:86C0                      SPRITE_COLOR_P1_DOWN:
     341.  01:86C0                          ;DOWN 1
     342.  01:86C0                          ; attr 0
     343.  01:86C0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  01:86C0  05 05 0A 0B 0B 0B 0B 0B 
     344.  01:86C8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  01:86C8  04 04 04 0A 0A 0A 08 08 
     345.  01:86D0                          ; attr 1
     346.  01:86D0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  01:86D0  00 00 44 45 45 45 45 45 
     347.  01:86D8                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  01:86D8  4A 4A 4A 44 44 44 45 45 
     348.  01:86E0                          ; attr 2
     349.  01:86E0                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  01:86E0  00 00 41 00 40 00 00 00 
     350.  01:86E8                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  01:86E8  41 41 41 41 41 41 42 00 
     351.  01:86F0                          ;SPRITE_COLOR_P1_DOWN2:
     352.  01:86F0                          ;DOWN 1
     353.  01:86F0                          ; attr 0
     354.  01:86F0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  01:86F0  05 05 0A 0B 0B 0B 0B 0B 
     355.  01:86F8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  01:86F8  04 04 04 0A 0A 0A 08 08 
     356.  01:8700                          ; attr 1
     357.  01:8700                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  01:8700  00 00 44 45 45 45 45 45 
     358.  01:8708                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  01:8708  4A 4A 4A 44 44 44 45 45 
     359.  01:8710                          ; attr 2
     360.  01:8710                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  01:8710  00 00 41 00 40 00 00 00 
     361.  01:8718                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  01:8718  41 41 41 41 41 41 42 00 
     362.  01:8720                      
     363.  01:8720                      SPRITE_COLOR_P1_RIGHT:
     364.  01:8720                          ; attr 0
     365.  01:8720                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  01:8720  05 05 0A 0B 0B 0B 0B 0B 
     366.  01:8728                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  01:8728  0B 0A 0A 0B 0A 0A 08 08 
     367.  01:8730                          ; attr 1
     368.  01:8730                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  01:8730  00 00 44 45 45 45 45 45 
     369.  01:8738                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  01:8738  45 44 44 44 44 44 45 45 
     370.  01:8740                          ; attr 2
     371.  01:8740                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  01:8740  00 00 41 00 40 00 00 00 
     372.  01:8748                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  01:8748  00 41 41 41 41 41 42 00 
     373.  01:8750                             
     374.  01:8750                          ; attr 0
     375.  01:8750                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  01:8750  05 05 0A 0B 0B 0B 0B 0B 
     376.  01:8758                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  01:8758  0B 0A 0A 0A 0B 0A 08 08 
     377.  01:8760                          ; attr 1
     378.  01:8760                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  01:8760  00 00 44 45 45 45 45 45 
     379.  01:8768                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  01:8768  45 44 44 44 44 44 45 45 
     380.  01:8770                          ; attr 2
     381.  01:8770                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  01:8770  00 00 41 00 40 00 00 00 
     382.  01:8778                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  01:8778  00 41 41 41 41 41 42 00 
     383.  01:8780                      
     384.  01:8780                      stg1_gate:
     385.  01:8780  00 00 00 00 00 00       DB #00,#00,#00,#00,#00,#00
     386.  01:8786                      stg1_gate_blocked:
     387.  01:8786  01 01 01 01 01 01       DB #01,#01,#01,#01,#01,#01
     388.  01:878C                      mapa1:
     389.  01:878C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     389.  01:878C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     389.  01:879C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  01:87AC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     390.  01:87AC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  01:87BC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     391.  01:87CC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  01:87CC  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  01:87DC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  01:87EC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  01:87EC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  01:87FC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  01:880C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  01:880C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     393.  01:881C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  01:882C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  01:882C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     394.  01:883C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  01:884C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  01:884C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     395.  01:885C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  01:886C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  01:886C  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  01:887C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  01:888C                          
     398.  01:888C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  01:888C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  01:889C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  01:88AC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  01:88AC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  01:88BC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  01:88CC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  01:88CC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  01:88DC  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  01:88EC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     401.  01:88EC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  01:88FC  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     402.  01:890C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     402.  01:890C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  01:891C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     403.  01:892C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  01:892C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  01:893C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  01:894C                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     404.  01:894C  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     404.  01:895C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     405.  01:896C                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  01:896C  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     405.  01:897C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  01:898C                      
     407.  01:898C                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  01:898C  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     407.  01:899C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  01:89AC                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  01:89AC  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     408.  01:89BC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  01:89CC                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  01:89CC  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     409.  01:89DC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  01:89EC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  01:89EC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     410.  01:89FC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  01:8A0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     411.  01:8A0C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  01:8A1C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  01:8A2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  01:8A2C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     412.  01:8A3C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  01:8A4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     413.  01:8A4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  01:8A5C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  01:8A6C                      
     415.  01:8A6C                      mapa2:
     416.  01:8A6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  01:8A6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  01:8A7C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  01:8A8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  01:8A8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  01:8A9C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  01:8AAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  01:8AAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  01:8ABC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  01:8ACC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  01:8ACC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  01:8ADC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  01:8AEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  01:8AEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  01:8AFC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  01:8B0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  01:8B0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  01:8B1C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  01:8B2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  01:8B2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  01:8B3C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  01:8B4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  01:8B4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  01:8B5C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  01:8B6C                            
     425.  01:8B6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  01:8B6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  01:8B7C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  01:8B8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  01:8B8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  01:8B9C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  01:8BAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  01:8BAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  01:8BBC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  01:8BCC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  01:8BCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     428.  01:8BDC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  01:8BEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  01:8BEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     429.  01:8BFC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  01:8C0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  01:8C0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  01:8C1C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  01:8C2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  01:8C2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  01:8C3C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  01:8C4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  01:8C4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  01:8C5C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  01:8C6C                            
     434.  01:8C6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  01:8C6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  01:8C7C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  01:8C8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  01:8C8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  01:8C9C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  01:8CAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  01:8CAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  01:8CBC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  01:8CCC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  01:8CCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     437.  01:8CDC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  01:8CEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  01:8CEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     438.  01:8CFC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  01:8D0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  01:8D0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     439.  01:8D1C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  01:8D2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  01:8D2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     440.  01:8D3C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  01:8D4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  01:8D4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     441.  01:8D5C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  01:8D6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  01:8D6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     442.  01:8D7C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  01:8D8C                      
     444.  01:8D8C                      SPRITE_COLOR_P1_RED:
     445.  01:8D8C                          DB $0A,$0F,$0A,$0F,$0A,$0F,$0A,$0F
     445.  01:8D8C  0A 0F 0A 0F 0A 0F 0A 0F 
     446.  01:8D94                          DB $0A,$0F,$0A,$0F,$0A,$0F,$0A,$0F
     446.  01:8D94  0A 0F 0A 0F 0A 0F 0A 0F 
     447.  01:8D9C                      
     448.  01:8D9C                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     448.  01:8D9C  0A 0A 0A 0A 0A 0A 0A 0A 
     449.  01:8DA4                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     449.  01:8DA4  0A 0A 0A 0A 0A 0A 0A 0A 
     450.  01:8DAC                      
     451.  01:8DAC                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     451.  01:8DAC  0A 0A 0A 0A 0A 0A 0A 0A 
     452.  01:8DB4                          DB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
     452.  01:8DB4  0A 0A 0A 0A 0A 0A 0A 0A 
     453.  01:8DBC                      
     454.  01:8DBC                      SPRITE_COLOR_P1_LEFT:
     455.  01:8DBC                          ; attr 0
     456.  01:8DBC                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     456.  01:8DBC  05 05 0A 0B 0B 0B 0B 0B 
     457.  01:8DC4                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     457.  01:8DC4  0B 0A 0A 0B 0A 0A 08 08 
     458.  01:8DCC                          ; attr 1
     459.  01:8DCC                          DB $00,$00,$44,$45,$45,$45,$45,$45
     459.  01:8DCC  00 00 44 45 45 45 45 45 
     460.  01:8DD4                          DB $45,$44,$44,$44,$44,$44,$45,$45
     460.  01:8DD4  45 44 44 44 44 44 45 45 
     461.  01:8DDC                          ; attr 2
     462.  01:8DDC                          DB $00,$00,$41,$00,$40,$00,$00,$00
     462.  01:8DDC  00 00 41 00 40 00 00 00 
     463.  01:8DE4                          DB $00,$41,$41,$41,$41,$41,$42,$00
     463.  01:8DE4  00 41 41 41 41 41 42 00 
     464.  01:8DEC                          ;SPRITE_COLOR_P1_LEFT2:    
     465.  01:8DEC                          ; attr 0
     466.  01:8DEC                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     466.  01:8DEC  05 05 0A 0B 0B 0B 0B 0B 
     467.  01:8DF4                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     467.  01:8DF4  0B 0A 0A 0A 0B 0A 08 08 
     468.  01:8DFC                          ; attr 1
     469.  01:8DFC                          DB $00,$00,$44,$45,$45,$45,$45,$45
     469.  01:8DFC  00 00 44 45 45 45 45 45 
     470.  01:8E04                          DB $45,$44,$44,$44,$44,$44,$45,$45
     470.  01:8E04  45 44 44 44 44 44 45 45 
     471.  01:8E0C                          ; attr 2
     472.  01:8E0C                          DB $00,$00,$41,$00,$40,$00,$00,$00
     472.  01:8E0C  00 00 41 00 40 00 00 00 
     473.  01:8E14                          DB $00,$41,$41,$41,$41,$41,$42,$00
     473.  01:8E14  00 41 41 41 41 41 42 00 
     474.  01:8E1C                      
     475.  01:8E1C                      BLANK_DATA:
     476.  01:8E1C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     476.  01:8E1C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     476.  01:8E2C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  01:8E3C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     477.  01:8E3C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  01:8E4C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  01:8E5C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     478.  01:8E5C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  01:8E6C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  01:8E7C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     479.  01:8E7C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  01:8E8C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     480.  01:8E9C                      
     481.  01:8E9C                          
     482.  01:8E9C                      PaletteData:
     483.  01:8E9C                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     484.  01:8E9C  02 00                   db 0x02, 0x00 ; Color index 0
     485.  01:8E9E  30 00                   db 0x30, 0x00 ; Color index 1
     486.  01:8EA0  70 06                   db 0x70, 0x06 ; Color index 2
     487.  01:8EA2  50 00                   db 0x50, 0x00 ; Color index 3
     488.  01:8EA4  11 01                   db 0x11, 0x01 ; Color index 4
     489.  01:8EA6  22 02                   db 0x22, 0x02 ; Color index 5
     490.  01:8EA8  06 02                   db 0x06, 0x02 ; Color index 6
     491.  01:8EAA  77 07                   db 0x77, 0x07 ; Color index 7
     492.  01:8EAC  33 03                   db 0x33, 0x03 ; Color index 8
     493.  01:8EAE  66 06                   db 0x66, 0x06 ; Color index 9
     494.  01:8EB0  70 00                   db 0x70, 0x00 ; Color index 10
     495.  01:8EB2  64 05                   db 0x64, 0x05 ; Color index 11
     496.  01:8EB4  50 03                   db 0x50, 0x03 ; Color index 12
     497.  01:8EB6  02 04                   db 0x02, 0x04 ; Color index 13
     498.  01:8EB8  01 02                   db 0x01, 0x02 ; Color index 14
     499.  01:8EBA  00 00                   db 0x00, 0x00 ; Color index 15
     997   01:8EBC                      FONT:
     998   01:8EBC  (07F7)               INCBIN "gfx\FONT.SC5",#7
     999   01:96B3                      AFX:
    1000   01:96B3  (0353)                  incbin "sfx\cementer_sounds.afb"
    1001   01:9A06                          ;incbin "sfx\test.pt3"
    1002   01:9A06                          ;incbin "sfx\G-6sin_cabecera.pt3"
    1003   01:9A06                      ; GFX
    1004   01:9A06                          include "include\metatiles.asm"
       1.  01:9A06                      metatiles_data:
       2.  01:9A06                          ; SX, SY, NX, NY
       3.  01:9A06  00 00 20 10             db 0, 0, 32, 16   ; 0 - gate lockpad
       4.  01:9A0A  20 00 20 10             db 32, 0, 32, 16  ; 1 - gate closed
       5.  01:9A0E  40 00 20 10             db 64, 0, 32, 16  ; 2 - gate half opened
       6.  01:9A12  60 00 20 10             db 96, 0, 32, 16  ; 3 - gate opened
       7.  01:9A16                      
       8.  01:9A16  80 00 10 10             db 128, 0, 16, 16  ; 4 - blood drop full
       9.  01:9A1A  90 00 10 10             db 144, 0, 16, 16  ; 5 - blood drop half
      10.  01:9A1E  A0 00 10 10             db 160, 0, 16, 16  ; 6 - blood drop empty
      11.  01:9A22                      
      12.  01:9A22  B0 00 10 10             db 176, 0, 16, 16  ; 7 - Tile
      13.  01:9A26  C0 00 10 10             db 192, 0, 16, 16  ; 8 - Pressed tile
      14.  01:9A2A                      
      15.  01:9A2A  D0 00 10 10             db 208, 0, 16, 16  ; 9 - Gress
      16.  01:9A2E  E0 00 10 10             db 224, 0, 16, 16  ; 10 - Skull
      17.  01:9A32  F0 00 10 10             db 240, 0, 16, 16  ; 11 - Tree
      18.  01:9A36                      
      19.  01:9A36  00 10 10 10             db 0, 16, 16, 16  ; 12 - Tomb Antich
      20.  01:9A3A  10 10 10 10             db 16, 16, 16, 16  ; 13 - Tomb RIP
      21.  01:9A3E  20 10 10 10             db 32, 16, 16, 16  ; 14 - Tomb Christ
      22.  01:9A42                      
      23.  01:9A42  30 10 40 50             db 48, 16, 64, 80  ; 15 - Gargoyle
      24.  01:9A46  70 10 30 60             db 112, 16, 48, 96  ; 16 - Cross
      25.  01:9A4A  00 20 10 10             db 0, 32, 16, 16  ; 17 - Gargoyle Door 
    1005   01:9A4E                          include "gfx\stg1_map.asm"
       1.  01:9A4E                      stg1_map_back:
       2.  01:9A4E                      ; Background Tiles - #Tile, X, Y, #reps
       3.  01:9A4E  09 00 00 07         	db 9, 0, 0, 7	
       4.  01:9A52  00 70 00 01         	db 0, 112, 0, 1	
       5.  01:9A56  09 90 00 07         	db 9, 144, 0, 7	
       6.  01:9A5A                      
       7.  01:9A5A  09 00 10 07         	db 9, 0, 16, 7
       8.  01:9A5E  07 70 10 02         	db 7, 112, 16, 2
       9.  01:9A62  09 90 10 07         	db 9, 144, 16, 7
      10.  01:9A66                      
      11.  01:9A66  09 00 20 03         	db 9, 0, 32, 3
      12.  01:9A6A  07 30 20 06         	db 7, 48, 32, 6
      13.  01:9A6E  09 90 20 07         	db 9, 144, 32, 7
      14.  01:9A72                      
      15.  01:9A72  09 00 30 07         	db 9, 0, 48, 7
      16.  01:9A76  07 70 30 02         	db 7, 112, 48, 2
      17.  01:9A7A  09 90 30 07         	db 9, 144, 48, 7
      18.  01:9A7E                      
      19.  01:9A7E  09 00 40 07         	db 9, 0, 64, 7
      20.  01:9A82  07 70 40 02         	db 7, 112, 64, 2
      21.  01:9A86  09 90 40 07         	db 9, 144, 64, 7
      22.  01:9A8A                      
      23.  01:9A8A  09 00 50 07         	db 9, 0, 80, 7
      24.  01:9A8E  07 70 50 02         	db 7, 112, 80, 2
      25.  01:9A92  09 90 50 07         	db 9, 144, 80, 7
      26.  01:9A96                      
      27.  01:9A96  09 00 60 07         	db 9, 0, 96, 7
      28.  01:9A9A  07 70 60 06         	db 7, 112, 96, 6
      29.  01:9A9E  09 D0 60 03         	db 9, 208, 96, 3
      30.  01:9AA2                      
      31.  01:9AA2  09 00 70 07         	db 9, 0, 112, 7
      32.  01:9AA6  07 70 70 02         	db 7, 112, 112, 2
      33.  01:9AAA  09 90 70 07         	db 9, 144, 112, 7
      34.  01:9AAE                      
      35.  01:9AAE  09 00 80 05         	db 9, 0, 128, 5
      36.  01:9AB2  07 50 80 04         	db 7, 80, 128, 4
      37.  01:9AB6  09 90 80 07         	db 9, 144, 128, 7
      38.  01:9ABA                      
      39.  01:9ABA  09 00 90 07         	db 9, 0, 144, 7
      40.  01:9ABE  07 70 90 02         	db 7, 112, 144, 2
      41.  01:9AC2  09 90 90 07         	db 9, 144, 144, 7
      42.  01:9AC6                      
      43.  01:9AC6  09 00 A0 07         	db 9, 0, 160, 7
      44.  01:9ACA  07 70 A0 02         	db 7, 112, 160, 2
      45.  01:9ACE  09 90 A0 07         	db 9, 144, 160, 7
      46.  01:9AD2                      
      47.  01:9AD2  09 00 B0 10         	db 9, 0, 176, 16
      48.  01:9AD6                      
      49.  01:9AD6  FF                  	db 255		; fin
      50.  01:9AD7                      	
      51.  01:9AD7                      stg1_map_front:
      52.  01:9AD7                      	; Transparent Tiles
      53.  01:9AD7  0A 60 60 01         	db 10, 96, 96, 1	; Skull
      54.  01:9ADB  0D 20 20 01         	db 13, 32, 32, 1	; RIP
      55.  01:9ADF  0C 40 80 01         	db 12, 64, 128, 1	; Antichrist
      56.  01:9AE3  0E D0 60 01         	db 14, 208, 96, 1	; Christ
      57.  01:9AE7                      
      58.  01:9AE7  0B 9E 34 01         	db 11, 158, 52, 1	; Tree 1
      59.  01:9AEB  0B AC 34 01         	db 11, 172, 52, 1	; Tree 1
      60.  01:9AEF  FF                  	db 255	; fin
      61.  01:9AF0                      
    1006   01:9AF0                          include "gfx\stg2_map.asm"
       1.  01:9AF0                      stg2_map_back:
       2.  01:9AF0                      ; Background Tiles - #Tile, X, Y, #reps
       3.  01:9AF0  09 00 00 10         	db 9, 0, 0, 16    		
       4.  01:9AF4  09 00 10 10         	db 9, 0, 16, 16
       5.  01:9AF8  09 00 20 10         	db 9, 0, 32, 16	
       6.  01:9AFC  09 00 30 10         	db 9, 0, 48, 16
       7.  01:9B00  09 00 40 10         	db 9, 0, 64, 16
       8.  01:9B04  09 00 50 10         	db 9, 0, 80, 16
       9.  01:9B08                      
      10.  01:9B08  09 00 60 07         	db 9, 0, 96, 7	
      11.  01:9B0C  07 70 60 02         	db 7, 112, 96, 2
      12.  01:9B10  09 90 60 07         	db 9, 144, 96, 7
      13.  01:9B14                      
      14.  01:9B14  09 00 70 07             db 9, 0, 112, 7	
      15.  01:9B18  07 70 70 02         	db 7, 112, 112, 2
      16.  01:9B1C  09 90 70 07         	db 9, 144, 112, 7
      17.  01:9B20                      
      18.  01:9B20  09 00 80 07             db 9, 0, 128, 7	
      19.  01:9B24  07 70 80 02         	db 7, 112, 128, 2
      20.  01:9B28  09 90 80 07         	db 9, 144, 128, 7
      21.  01:9B2C                      
      22.  01:9B2C  09 00 90 07             db 9, 0, 144, 7	
      23.  01:9B30  07 70 90 02         	db 7, 112, 144, 2
      24.  01:9B34  09 90 90 07         	db 9, 144, 144, 7
      25.  01:9B38                      
      26.  01:9B38  09 00 A0 07             db 9, 0, 160, 7	
      27.  01:9B3C  07 70 A0 02         	db 7, 112, 160, 2
      28.  01:9B40  09 90 A0 07         	db 9, 144, 160, 7
      29.  01:9B44                      
      30.  01:9B44  09 00 B0 07             db 9, 0, 176, 7	
      31.  01:9B48  07 70 B0 02         	db 7, 112, 176, 2
      32.  01:9B4C  09 90 B0 07         	db 9, 144, 176, 7
      33.  01:9B50                      	
      34.  01:9B50  FF                  	db 255		; fin
      35.  01:9B51                      	
      36.  01:9B51                      stg2_map_front:
      37.  01:9B51                      	; Transparent Tiles
      38.  01:9B51  0A 60 A0 01         	db 10, 96, 160, 1	; Skull	
      39.  01:9B55                      
      40.  01:9B55  0B 10 70 01         	db 11, 16, 112, 1	; Tree 1
      41.  01:9B59  0B E0 70 01         	db 11, 224, 112, 1	; Tree 2
      42.  01:9B5D  0B 50 90 01             db 11, 80, 144, 1	; Tree 3
      43.  01:9B61  0B A0 90 01         	db 11, 160, 144, 1	; Tree 4
      44.  01:9B65                      
      45.  01:9B65  0F 60 10 01         	db 15, 96, 16, 1	; Gargoyle
      46.  01:9B69  10 18 08 01         	db 16, 24, 8, 1	; Cross 1
      47.  01:9B6D  10 B8 08 01             db 16, 184, 8, 1	; Cross 2
      48.  01:9B71  FF                  	db 255	; fin
      49.  01:9B72                      
    1007   01:9B72  (02)                 PAGE 2
    1008   02:8000                      TILES1:
    1009   02:8000  (3801)               INCBIN "gfx\tiles1.sc5",#7
    1010   02:B801                      
    1011   02:B801  (03)                 PAGE 3
    1012   03:8000                      
    1013   03:8000  (04)                 PAGE 4
    1014   04:8000  (05)                 PAGE 5
    1015   05:8000  (06)                 PAGE 6
    1016   06:8000  (07)                 PAGE 7
    1017   07:8000                      CEMENTER1
    1018   07:8000                       ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
    1019   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
    1020   07:C000  (08)                 PAGE 8
    1021   08:8000  (200D)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
    1022   08:A00D  (09)                 PAGE 9
    1023   09:8000                      GRAPHIC
    1024   09:8000                      ; INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
    1025   09:8000  (0A)                 PAGE 10
    1026   0A:8000                      ; INCBIN "gfx\BTH.SR8",#4007,#4000
    1027   0A:8000                      
    1028   0A:8000  (0B)                 PAGE 11
    1029   0B:8000                      ; INCBIN "gfx\BTH.SR8",#8007,#4000
    1030   0B:8000                      
    1031   0B:8000  (0C)                 PAGE 12
    1032   0C:8000                      ; INCBIN "gfx\BTH.SR8",#C007
    1033   0C:8000                      
    1034   0C:8000  (0D)                 PAGE 13
    1035   0D:8000                      CEMENTER2
    1036   0D:8000                      ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
    1037   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
    1038   0D:C000  (0E)                 PAGE 14
    1039   0E:8000  (200E)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
    1040   0E:A00E  (0F)                 PAGE 15
    1041   0F:C000                      ;---------------------------------------------------------
    1042   0F:C000                      ; Variables
    1043   0F:C000                      ;---------------------------------------------------------
    1044   0F:C000                      	
    1045   0F:C000  (C000)              	MAP #C000  ;Ram page 3
    1046   0F:C000                      ;	MAP #E5FF  ;Ram page 3
    1047   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
    1048   0F:C000                      ;ETC
    1049   0F:C000                      ;
    1050   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ; Counter stage1 puzzle solved
       2.  0F:C000  00 (1)              counter_stg_solved ds 1
       3.  0F:C001                      
       4.  0F:C001                      ; Stage Map Pointer
       5.  0F:C001  00 (2)              stg_map_ptr_back ds 2
       6.  0F:C003  00 (2)              stg_map_ptr_front ds 2
       7.  0F:C005                      
       8.  0F:C005                      ;entities data
       9.  0F:C005  00 (27)             ENTITY_DATA: ds 27 ;  10 bytes, 3 entities
      10.  0F:C020  (0F:C005)           ENTITY_PLAYER_POINTER:  EQU ENTITY_DATA
      11.  0F:C020  (0F:C00E)           ENTITY_ENEMY1_POINTER:  EQU ENTITY_DATA+9
      12.  0F:C020  (0F:C017)           ENTITY_ENEMY2_POINTER:  EQU ENTITY_DATA+18
      13.  0F:C020  00 (1)              P1_flickering_state ds 1
      14.  0F:C021  00 (1)              P1_flickering_counter   ds 1
      15.  0F:C022  00 (1)              current_level: 	ds 1
      16.  0F:C023                      
      17.  0F:C023                      ; VDP variables
      18.  0F:C023  00 (15)             charDat: ds 15
      19.  0F:C032  00 (15)             tileDat: ds 15
      20.  0F:C041  00 (15)             tileDatTrans: ds 15
      21.  0F:C050  00 (15)             energyDat: ds 15
      22.  0F:C05F                      
      23.  0F:C05F                      ; puzzle 1st stage
      24.  0F:C05F  00 (1)              stg1_puzzle_solved DS 1
      25.  0F:C060                      
      26.  0F:C060  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
      27.  0F:C061  00 (1)              SHOWING_MIKE_DIALOG  DS 1
      28.  0F:C062  00 (1)              SHOWING_JOHN_DIALOG  DS 1
      29.  0F:C063  00 (1)              SHOWING_GUS_DIALOG  DS 1
      30.  0F:C064                      
      31.  0F:C064                      ; puzzle 2nd stage
      32.  0F:C064  00 (1)              stg2_puzzle_solved DS 1
      33.  0F:C065  00 (1)              stg2_delay_border_change DS 1
      34.  0F:C066                      
      35.  0F:C066  00 (1)              PLAYING_NOTE1_STG2  DS 1
      36.  0F:C067  00 (1)              PLAYING_NOTE2_STG2  DS 1
      37.  0F:C068  00 (1)              PLAYING_NOTE3_STG2  DS 1
      38.  0F:C069  00 (1)              SHOWING_MURRAY_STG2  DS 1
      39.  0F:C06A                      
      40.  0F:C06A  00 (2)              CHR_ACR DS 2
      41.  0F:C06C                      ;PTR_STR_DX DS 1
      42.  0F:C06C                      ;PTR_STR_DY DS 1
      43.  0F:C06C                      
      44.  0F:C06C                      ;LAST_KEY_PRESSED DS 1
      45.  0F:C06C                      ;OLD_KEY_PRESSED DS 1
      46.  0F:C06C  00                  JIFFY_TEMP DB $00
      47.  0F:C06D  00                  CHAR_SPEED_X DB $00
      48.  0F:C06E  00                  CHAR_SPEED_Y DB $00
      49.  0F:C06F  00                  CHAR_SPEED_X_GHOST DB $00
      50.  0F:C070  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      51.  0F:C071  00 (1)              CHAR_GHOST_DEAD DS 1
      52.  0F:C072  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      53.  0F:C073  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      54.  0F:C074  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      55.  0F:C075  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      56.  0F:C076  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      57.  0F:C077  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      58.  0F:C078  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      59.  0F:C079  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      60.  0F:C07A  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      61.  0F:C07B  00 (1)              CHAR_SPEED_SHOOT DS 1
      62.  0F:C07C                      SPRITE_ATTRS:
      63.  0F:C07C  00 (128)                DS 128
      64.  0F:C0FC                      SLOTBIOS:
      65.  0F:C0FC  00 (1)                  DS 1
      66.  0F:C0FD                      SLOTGAME:
      67.  0F:C0FD  00 (1)                  DS 1
      68.  0F:C0FE                      SLOTRAM:
      69.  0F:C0FE  00 (1)                  DS 1
      70.  0F:C0FF                      SPRITE_PTR_REPLACE:
      71.  0F:C0FF  00 (2)                  DS 2
      72.  0F:C101                      SPRITE_COLOR_REPLACE:
      73.  0F:C101  00 (2)                  DS 2
      74.  0F:C103                      SPRITE_COLOR_REPLACE2:
      75.  0F:C103  00 (2)                  DS 2
      76.  0F:C105                      MAPA:
      77.  0F:C105  00 (2)                  DS 2
      78.  0F:C107                      BITMAP:
      79.  0F:C107  00 (2)                  DS 2
      80.  0F:C109                      MAP_RAM:
      81.  0F:C109  00 (736)                DS 736
    1051   0F:C3E9                          include "include\ayFX-RAM.ASM"
       1.  0F:C3E9                      		; --- ayFX REPLAYER v1.31 ---
       2.  0F:C3E9                      
       3.  0F:C3E9                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  0F:C3E9                      
       5.  0F:C3E9  00 (1)              ayFX_MODE:	ds	1			; ayFX mode
       6.  0F:C3EA  00 (2)              ayFX_BANK:	ds	2			; Current ayFX Bank
       7.  0F:C3EC  00 (1)              ayFX_PRIORITY:	ds	1			; Current ayFX stream priotity
       8.  0F:C3ED  00 (2)              ayFX_POINTER:	ds	2			; Pointer to the current ayFX stream
       9.  0F:C3EF  00 (2)              ayFX_TONE:	ds	2			; Current tone of the ayFX stream
      10.  0F:C3F1  00 (1)              ayFX_NOISE:	ds	1			; Current noise of the ayFX stream
      11.  0F:C3F2  00 (1)              ayFX_VOLUME:	ds	1			; Current volume of the ayFX stream
      12.  0F:C3F3  00 (1)              ayFX_CHANNEL:	ds	1			; PSG channel to play the ayFX stream
      13.  0F:C3F4                      IF ( AYFXRELATIVE == 1 )
      14.  0F:C3F4                    ~ 	ayFX_VT:	sds	2			; ayFX relative volume table pointer
      15.  0F:C3F4                    ~ ENDIF
      16.  0F:C3F4                      
      17.  0F:C3F4                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      18.  0F:C3F4                      ;AYREGS:		.ds	14			; Ram copy of PSG registers
      19.  0F:C3F4                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
    1052   0F:C3F4  (0000)              	ENDMAP
    1053   0F:C3F4                        

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:00000069   CLRSPR
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000062   CHGCLR
00:0000006F   counter_stg1_solved_max
00:0000005F   counter_stg2_solved_max
00:0000005F   counter_P1_flickering_max
00:00000001   SPR_DATA_PAGE
00:00000002   TILES_PAGE
00:00000009   ENTITY_SIZE
00:0000000F   PLAYER_COLLISION_OFFSET_X
00:00000010   PLAYER_COLLISION_OFFSET_Y
00:0000000E   PLAYER_WIDTH
00:00000010   PLAYER_HEIGHT
00:00000001   ENEMY_X
00:00000002   ENEMY_Y
00:00000003   ENTITY_ENERGY
00:00000004   ENEMY_COLLISION_OFFSET_X
00:00000005   ENEMY_COLLISION_OFFSET_Y
00:00000006   ENEMY_COLLISION_WIDTH
00:00000007   ENEMY_COLLISION_HEIGHT
00:00000008 X SPRITENUMBER_SPAT
00:00000009 X damage
00:00000078   STG2_TILE1_XH
00:00000070   STG2_TILE1_XL
00:00000070   STG2_TILE1_YH
00:00000060   STG2_TILE1_YL
00:00000081   STG2_TILE2_XH
00:00000079   STG2_TILE2_XL
00:00000070 X STG2_TILE2_YH
00:00000060 X STG2_TILE2_YL
00:00000081   STG2_TILE3_XH
00:00000079   STG2_TILE3_XL
00:00000090   STG2_TILE3_YH
00:00000080   STG2_TILE3_YL
00:00000071   STG2_MURRAY_X
00:000000AC   STG2_MURRAY_YH
00:0000009C   STG2_MURRAY_YL
00:00000005   STG2_DELAY_CYCLES
00:00004010   ANDY_MAX_ENERGY
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:000000C2   FIRST_LINE_DLG_BOX_v2
00:000000CA   SEC_LINE_DLG_BOX_v2
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006 X MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:0000F3EA X BAKCLR
00:0000F3EB   BDRCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018 X SPR_GHOST_STG2
00:0000003C X SPR_GHOST_STG2_PTRN_L1
00:00000044 X SPR_GHOST_STG2_PTRN_L2
00:0000004C X SPR_GHOST_STG2_PTRN_R1
00:00000054 X SPR_GHOST_STG2_PTRN_R2
00:00004016   mike_tomb_strings
00:0000401C   string01M
00:00004038   string02M
00:00004054   string03M
00:00004055   john_tomb_strings
00:0000405B   string01J
00:00004076   string02J
00:00004091   string03J
00:00004092   gus_tomb_strings
00:00004098   string01G
00:000040B5   string02G
00:000040D2   string03G
00:000040D3   stg1_skull_strings
00:000040D9   string01Sk
00:000040F4   string02Sk
00:0000410F   string03Sk
00:00004110   stg1_puzzle_solved_strings
00:00004116   string01P
00:0000412F   string02P
00:00004148   string03P
00:00004149   game_over_strings
00:0000414F   string01GO
00:00004161   string02GO
00:0000416C   string03GO
00:0000416D   stg2_skull_strings
00:00004173   string01Sk2
00:0000418D   string02Sk2
00:000041A7   string03Sk2
00:000041A8   EnemyCollisionCheck
00:000041CE   EnemyCollisionCheck.check
00:000041D5   EnemyCollisionCheck.other
00:000041D7   check_spr_collision
00:000041E4   check_spr_collision.no_collision
00:000041E7   get_bloque_en_X_Y
00:00004208   SetVdp_Write
00:00004224   Set212Lines
00:00004230   ClearVram_MSX2
00:0000423A   ClearVram_MSX2.loop_2
00:0000423C   ClearVram_MSX2.loop_1
00:0000423E   ClearVram_MSX2.loop
00:0000424B X opening_screen
00:0000426E X load_screen
00:00004290   _vdpsetvramwr
00:000042A1 X _vdpsetvramwr14
00:000042AA   GETSLOT
00:000042C1   EXIT
00:000042C3   SETPAGES32K
00:000042C8   NOPRET
00:000042D6   SET_SCREEN5_MODE
00:000042FB   DUMP_SPR_ALL
00:00004320   load_tiles_vdp
00:0000432A   load_font_vdp
00:00004337   DUMP_SPR_ATTS
00:00004351 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004352   DUMP_SPR_P1
00:0000436F   SetPalette
00:0000437E   move_up
00:000043B8   move_down
00:000043F3   move_right
00:00004404   move_right.KB_UPDOWN_PRESSED
00:00004452   move_left
00:00004463   move_left.KB_UPDOWN_PRESSED
00:000044B1   CHECK_DIRECTION_MAIN
00:000044D3   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000044E8   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:000044FD   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:00004512   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:00004527   CHECK_DIRECTION_MAIN.FINISH
00:0000453E   UPDATE_MOVEMENT
00:00004575   ANIMATE_P1
00:0000459C   ANIMATE_P1.SET_SPR_1P_2
00:000045B3   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:000045B9   NO_MOVEMENT
00:000045BA   MOVE_SHOOT
00:000045D2   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:000045DA   MOVE_SHOOT.MOVE_SHOOT_UP
00:000045E2   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000045EA   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000045EF   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:00004604   MOVE_SHOOT.ADD_SHOOT_Y
00:0000460E   MOVE_SHOOT.ADD_DISTANCE
00:00004619 X MOVE_SHOOT.HIDE_SHOOT
00:00004625   SHOOT_MAIN_CHAR
00:0000465F   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:0000466E   SHOOT_MAIN_CHAR.SHOOT_UP
00:00004681   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:00004691   SHOOT_MAIN_CHAR.CONTINUE
00:00004695 X BOUNCE_ANDY
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008   VDP_NX
00:0000000A   VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098   CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008   VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000010   ENERGY_WIDTH
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_VDP_PAGE
00:00008000 X TILES_START_ADDR
00:00000002   BACK_BUFFER
00:00000000   FRONT_BUFFER
00:00000000   TILENUM_OFFSET
00:00000001   DX_OFFSET
00:00000002   DY_OFFSET
00:00000003   REPS_OFFSET
00:00000004 X TILEMAP_SIZE
00:00000000 X METATILE_SX
00:00000001 X METATILE_SY
00:00000002   METATILE_NX
00:00000003 X METATILE_NY
00:00000004 X METATILE_SIZE
00:00000008   FONT_HEIGHT
00:00000008   FONT_WIDTH
00:000000D4   FONT_Y_OFFSET_1L
00:000000DC   FONT_Y_OFFSET_2L
00:00000014   DIAGBOX_HEIGHT
00:000000FF   DIAGBOX_WIDTH
00:000046A7   initVDPBuffers
00:000046EA X print_strings_dialog_box
00:00004717   print_string
00:00004717   print_string.loop_str
00:00004732   print_string.first_line_font
00:0000474B   print_char
00:0000477F X CLEAR_DIALOG_BOX_v1
00:000047B1 X CLEAR_DIALOG_BOX_v2
00:000047E3   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:000047EA X SETPAG
00:000047F8 X SET_WR
00:00004813 X SET_RD
00:0000482C   VDPCMD
00:0000483F   WAITCE
00:00004857   ENASCR
00:0000485E   DISSCR
00:00004863   DISSCR.OUT
00:0000486F X ENASPR
00:00004876 X DISSPR
00:0000487B   DISSPR.OUT
00:00004887 X LIN192
00:0000488E X LIN212
00:00004893   LIN212.OUT
00:0000489F   VDP_Ready
00:000048B8   DRAW_ANDY_ENERGY
00:000048CA   DRAW_ANDY_ENERGY.check_next_drop
00:000048EA   DRAW_ANDY_ENERGY.draw_half_drop
00:000048FC   DRAW_ANDY_ENERGY.draw_empty_drops
00:0000490F   DRAW_ANDY_ENERGY.loop
00:00004927   draw_tile
00:0000492E   draw_tile_trans
00:00004932   draw_tile_common
00:0000495B   print_strings_dialog_box_v2
00:00004976   print_string_v2
00:0000497F   print_string_v2.loop_str
00:0000498D   print_string_v2.first_line_font
00:00004991   print_string_v2.continue
00:000049AF   load_screen_v2
00:000049B3   load_screen_v2.map_element
00:000049C8   load_screen_v2.loop1
00:000049E6   load_screen_v2.next_element
00:000049F9   load_screen_v2.map_element_trans
00:00004A0E   load_screen_v2.loop1_trans
00:00004A2C   load_screen_v2.next_element_trans
00:00004A3C   charDatROM
00:00004A4B   tileDatROM
00:00004A5A   tileDatTransROM
00:00004A69   energyDatROM
00:00004A78   DiagBoxToBackBufROM
00:00004A87   DiagBoxToFrontkBufROM
00:00004A96 X DiagBoxClearROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:00000017   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:00004AA5   CHECKLP
00:00004AB6   PT3_MUTE
00:00004AC2   PT3_INIT
00:00004B01   PT3_INIT.TP_0
00:00004B0D   PT3_INIT.TP_1
00:00004B14   PT3_INIT.TP_2
00:00004B82   PT3_INIT.L1
00:00004B8F   PT3_INIT.L2
00:00004B93 X PT3_INIT.L3
00:00004BBA   PT3_INIT.CORR_1
00:00004BC8   PT3_INIT.CORR_2
00:00004BCF   PT3_INIT.TC_EXIT
00:00004BDA   PT3_INIT.INITV1
00:00004BE2   PT3_INIT.INITV2
00:00004BF6   PT3_INIT.INITV3
00:00004BFA   PD_OrSm
00:00004C04   PD_SAM
00:00004C05   PD_SAM_
00:00004C1B   PD_VOL
00:00004C24   PD_EOff
00:00004C2C   PD_SorE
00:00004C36   PD_ENV
00:00004C3B   PD_ORN
00:00004C40   PD_ESAM
00:00004C4D   PTDECOD
00:00004C5C   PD_LOOP
00:00004C5F   PD_LP2
00:00004C8C   PD_NOIS
00:00004C91   PD_REL
00:00004C97   PD_NOTE
00:00004C9F   PD_RES
00:00004CB1   PD_FIN
00:00004CB8   C_PORTM
00:00004D03   C_PORTM.NOSIG
00:00004D0D   SET_STP
00:00004D19   C_GLISS
00:00004D2C   C_SMPOS
00:00004D32   C_ORPOS
00:00004D38   C_VIBRT
00:00004D50   C_ENGLS
00:00004D62   C_DELAY
00:00004D68   SETENV
00:00004D83   C_NOP
00:00004D84   SETORN
00:00004D9D   SPCCOMS
00:00004DBD   CHREGS
00:00004DE0   CHREGS.CH_ORPS
00:00004DEB   CHREGS.CH_NTP
00:00004DF1   CHREGS.CH_NOK
00:00004E0C   CHREGS.CH_SMPS
00:00004E22   CHREGS.CH_NOAC
00:00004E69   CHREGS.CH_STPP
00:00004E7E   CHREGS.CH_AMP
00:00004E90   CHREGS.CH_AMIN
00:00004E95   CHREGS.CH_SVAM
00:00004E98   CHREGS.CH_NOAM
00:00004EA1   CHREGS.CH_APOS
00:00004EA7   CHREGS.CH_VOL
00:00004EB2 X CHREGS.CH_ENV
00:00004EB9   CHREGS.CH_NOEN
00:00004ED3   CHREGS.NO_ENAC
00:00004EDA   CHREGS.NO_ENSL
00:00004EE8   CHREGS.CH_MIX
00:00004EEC   CHREGS.CH_EXIT
00:00004F0B   CHREGS.CH_ONDL
00:00004F0F   PT3_PLAY
00:00004F43   PT3_PLAY.PLNLP
00:00004F6A   PT3_PLAY.PL1A
00:00004F75   PT3_PLAY.PL1B
00:00004F8A   PT3_PLAY.PL1C
00:00004F9F   PT3_PLAY.PL1D
00:00004FA5   PT3_PLAY.PL2
00:00005007   PT3_ROUT
00:00005008   ROUT_A0
00:00005014   ROUT_A0.LOUT
00:00005028   NT_DATA
00:00005038   T_
00:00005038   TCOLD_0
00:00005044   TCNEW_1
00:00005044   TCOLD_1
00:00005046   TCOLD_2
00:00005058   TCNEW_3
00:00005059   TCOLD_3
00:00005062   TCNEW_0
00:0000506D   TCNEW_2
00:00005078   EMPTYSAMORN
00:0000507C   T_PACK
00:0000F000   PT3_SETUP
00:0000F000   PT3_MODADDR
00:0000F002   PT3_CrPsPtr
00:0000F004   PT3_SAMPTRS
00:0000F006   PT3_OrnPtrs
00:0000F008   PT3_PDSP
00:0000F00A   PT3_CSP
00:0000F00C   PT3_PSP
00:0000F00E   PT3_PrNote
00:0000F00F   PT3_PrSlide
00:0000F011   PT3_AdInPtA
00:0000F013   PT3_AdInPtB
00:0000F015   PT3_AdInPtC
00:0000F017   PT3_LPosPtr
00:0000F019   PT3_PatsPtr
00:0000F01B   PT3_Delay
00:0000F01C   PT3_AddToEn
00:0000F01D   PT3_Env_Del
00:0000F01E   PT3_ESldAdd
00:0000F020   PT3_NTL3
00:0000F022   VARS
00:0000F022   ChanA
00:0000F03F   ChanB
00:0000F05C   ChanC
00:0000F079   DelyCnt
00:0000F07A   CurESld
00:0000F07C   CurEDel
00:0000F07D   Ns_Base_AddToNs
00:0000F07D   Ns_Base
00:0000F07E   AddToNs
00:0000F07F   NT_
00:0000F13F   AYREGS
00:0000F13F   VT_
00:0000F14D   EnvBase
00:0000F14F   VAR0END
00:0000F14F   T1_
00:0000F14F   T_NEW_1
00:0000F14F   T_OLD_1
00:0000F167   T_OLD_2
00:0000F17F   T_NEW_3
00:0000F17F   T_OLD_3
00:0000F181   T_OLD_0
00:0000F181   T_NEW_0
00:0000F199   T_NEW_2
00:000050B1   SONG
00:00000000 X AYFXRELATIVE
00:00006043   ayFX_SETUP
00:0000604E   ayFX_END
00:00006054   ayFX_INIT
00:00006065   ayFX_INIT.CHECK_PRI
00:00006086   ayFX_INIT.INIT_END
00:0000608A   ayFX_PLAY
00:0000609E   ayFX_PLAY.TAKECB
00:000060AF   ayFX_PLAY.CHECK_NN
00:000060BC   ayFX_PLAY.SETPOINTER
00:000060D0   ayFX_PLAY.SETMASKS
00:000060DE X ayFX_PLAY.CHK1
00:000060E0 X ayFX_PLAY.LAY_C
00:000060ED   ayFX_PLAY.CHK2
00:000060F2 X ayFX_PLAY.PLAY_B
00:000060FF   ayFX_PLAY.CHK3
00:00006102 X ayFX_PLAY.PLAY_A
00:0000610F   ayFX_PLAY.SETMIXER
00:0000611F   init_playerDAT
00:00006128   enemy1_stg1DAT
00:00006131   START
00:00006175   INIT_CHARS_VARS
00:00006219   PRE_STAGE1
00:00006234   STAGE1
00:00006286   STAGE1.nobackfromstg2
00:0000628F   MAIN_LOOP
00:0000629A X MAIN_LOOP.check_tombs
00:000062EA   MAIN_LOOP.puzzle_wrong_order
00:00006310   MAIN_LOOP.check_john_tomb
00:00006347   MAIN_LOOP.check_gus_tomb
00:00006388   MAIN_LOOP.check_skull_hint
00:000063AC   MAIN_LOOP.check_mike_dialog_box
00:000063BC   MAIN_LOOP.check_gus_dialog
00:000063CC   MAIN_LOOP.check_john_dialog
00:000063DC   MAIN_LOOP.check_skull_dialog
00:000063EC   MAIN_LOOP.check_counter_puzzle_solved
00:000063F9   MAIN_LOOP.hide_dialog_puzzle_solved
00:00006403   MAIN_LOOP.animate_ghost
00:00006425   MAIN_LOOP.CHANGE_DIR_RIGHT
00:00006432   MAIN_LOOP.CHANGE_DIR_LEFT
00:0000643B   MAIN_LOOP.check_pattern
00:00006456   MAIN_LOOP.change_pattern_L
00:00006461   MAIN_LOOP.check_pattern_RIGHT
00:00006474   MAIN_LOOP.change_pattern_R
00:0000647C   MAIN_LOOP.continue
00:000064C3   MAIN_LOOP.p1_flickering
00:000064D2   MAIN_LOOP.move_shoot
00:000064D5 X MAIN_LOOP.CHECK_GHOST
00:000064F1 X MAIN_LOOP.KILL_GHOST
00:000064FE   MAIN_LOOP.check_KB
00:00006528 X no_arrows
00:0000652D X no_arrows.flick_P1
00:0000654F   no_arrows.hide_p1
00:0000655B   no_arrows.jp_main_loop
00:0000655E   STAGE2
00:000065BA   STAGE2.stg2_puzzle_not_solved
00:000065BD   MAIN_LOOP2
00:000065F6   MAIN_LOOP2.GHOST_DEAD
00:000065F9   MAIN_LOOP2.no_screen_change
00:0000662E   MAIN_LOOP2.change_bdr_clr
00:00006639   MAIN_LOOP2.inc_stg2_delay_border_change
00:00006640   MAIN_LOOP2.open_gargoyle_gate
00:0000665F   MAIN_LOOP2.check_murray_tile
00:0000668F   MAIN_LOOP2.check_tile1
00:000066C8   MAIN_LOOP2.check_next_tile
00:000066F8   MAIN_LOOP2.wrong_order
00:000066FB   MAIN_LOOP2.check_tile3
00:0000673F   MAIN_LOOP2.wrong_order_tile3
00:00006745   MAIN_LOOP2.check_walk_on_tile3
00:0000675B   MAIN_LOOP2.check_walk_on_tile2
00:00006771   MAIN_LOOP2.check_walk_on_tile1
00:00006787   MAIN_LOOP2.check_murray_dialog
00:00006795   MAIN_LOOP2.continue
00:000067C0   game_over
00:000067CA   game_over.loop1
01:00008000   SPRITE_P1_UP
01:000080C0   SPRITE_P1_DOWN
01:00008180   SPRITE_P1_LEFT
01:00008240   SPRITE_P1_RIGHT
01:00008300   SPRITE_PATTERN
01:000085E0   SPRITE_COLOR_TABLE
01:00008660   SPRITE_COLOR_P1_UP
01:000086C0   SPRITE_COLOR_P1_DOWN
01:00008720   SPRITE_COLOR_P1_RIGHT
01:00008780   stg1_gate
01:00008786   stg1_gate_blocked
01:0000878C   mapa1
01:00008A6C   mapa2
01:00008D8C X SPRITE_COLOR_P1_RED
01:00008DBC   SPRITE_COLOR_P1_LEFT
01:00008E1C   BLANK_DATA
01:00008E9C   PaletteData
01:00008EBC   FONT
01:000096B3   AFX
01:00009A06   metatiles_data
01:00009A4E   stg1_map_back
01:00009AD7   stg1_map_front
01:00009AF0   stg2_map_back
01:00009B51   stg2_map_front
02:00008000   TILES1
07:00008000 X CEMENTER1
09:00008000   GRAPHIC
0D:00008000 X CEMENTER2
0F:0000C000   counter_stg_solved
0F:0000C001   stg_map_ptr_back
0F:0000C003   stg_map_ptr_front
0F:0000C005   ENTITY_DATA
0F:0000C005   ENTITY_PLAYER_POINTER
0F:0000C00E   ENTITY_ENEMY1_POINTER
0F:0000C017 X ENTITY_ENEMY2_POINTER
0F:0000C020   P1_flickering_state
0F:0000C021   P1_flickering_counter
0F:0000C022   current_level
0F:0000C023   charDat
0F:0000C032   tileDat
0F:0000C041   tileDatTrans
0F:0000C050   energyDat
0F:0000C05F   stg1_puzzle_solved
0F:0000C060   SHOWING_SKULL_STG1_DIALOG
0F:0000C061   SHOWING_MIKE_DIALOG
0F:0000C062   SHOWING_JOHN_DIALOG
0F:0000C063   SHOWING_GUS_DIALOG
0F:0000C064   stg2_puzzle_solved
0F:0000C065   stg2_delay_border_change
0F:0000C066   PLAYING_NOTE1_STG2
0F:0000C067   PLAYING_NOTE2_STG2
0F:0000C068   PLAYING_NOTE3_STG2
0F:0000C069   SHOWING_MURRAY_STG2
0F:0000C06A   CHR_ACR
0F:0000C06C   JIFFY_TEMP
0F:0000C06D   CHAR_SPEED_X
0F:0000C06E   CHAR_SPEED_Y
0F:0000C06F   CHAR_SPEED_X_GHOST
0F:0000C070 X CHAR_SPEED_X_GHOST_STG2
0F:0000C071   CHAR_GHOST_DEAD
0F:0000C072 X CHAR_GHOST_DEAD_STG2
0F:0000C073 X CHAR_MIN_STEP_STG2
0F:0000C074   CHAR_DIR_GHOST1
0F:0000C075 X CHAR_DIR_GHOST_STG2
0F:0000C076   CHAR_DIR_MAIN
0F:0000C077   CHAR_NEW_DIR_MAIN
0F:0000C078   CHAR_MAIN_SHOOT
0F:0000C079   CHAR_MIN_STEP
0F:0000C07A   CHAR_DISTANCE_SHOOT
0F:0000C07B   CHAR_SPEED_SHOOT
0F:0000C07C   SPRITE_ATTRS
0F:0000C0FC X SLOTBIOS
0F:0000C0FD X SLOTGAME
0F:0000C0FE X SLOTRAM
0F:0000C0FF   SPRITE_PTR_REPLACE
0F:0000C101   SPRITE_COLOR_REPLACE
0F:0000C103   SPRITE_COLOR_REPLACE2
0F:0000C105   MAPA
0F:0000C107   BITMAP
0F:0000C109   MAP_RAM
0F:0000C3E9   ayFX_MODE
0F:0000C3EA   ayFX_BANK
0F:0000C3EC   ayFX_PRIORITY
0F:0000C3ED   ayFX_POINTER
0F:0000C3EF   ayFX_TONE
0F:0000C3F1   ayFX_NOISE
0F:0000C3F2   ayFX_VOLUME
0F:0000C3F3   ayFX_CHANNEL


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 000027DE

   Address   Length Align   Label
   00004000   10200         ANDY_MAX_ENERGY
   000067D8       6         
   000067DE    6178       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00001B72

   Address   Length Align   Label
   00008000    7026         SPRITE_P1_UP
   00009B72    9358       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003801

   Address   Length Align   Label
   00008000   14337         TILES1
   0000B801    2047       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 0000200D

   Address   Length Align   Label
   00008000    8205         
   0000A00D    8179       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 0000200E

   Address   Length Align   Label
   00008000    8206         
   0000A00E    8178       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000003F4

   Address   Length Align   Label
   0000C000    1012         counter_stg_solved
   0000C3F4   15372       <empty>
