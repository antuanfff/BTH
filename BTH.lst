Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.05.24 - 15:09:05]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:7FDC                      
       3   00:7FDC                      ;ROM ASCII16
       4   00:7FDC                      		defpage	0,0x4000, 0x4000
       5   00:7FDC                      		defpage	1,0x8000, 0x4000        
       6   00:7FDC                      		defpage	2..14 ;Here it is determined rom size        
       7   00:7FDC                              defpage	15,0xC000, 0x4000
       8   00:7FDC                      
       9   00:7FDC  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:7FDC  (00:6000)           _bank1	equ	6000h
      11   00:7FDC  (00:7000)           _bank2	equ	7000h
      12   00:7FDC  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:7FE2  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 FF 4F 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:0069)           CLRSPR                  equ #0069
       2.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       3.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       4.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       5.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       6.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       7.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       8.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       9.  00:4010  (00:0141)           SNSMAT					equ #0141
      10.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      11.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      12.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      13.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      14.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      15.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010  (00:0009)           ENTITY_SIZE: EQU 9
       2.  00:4010                      
       3.  00:4010                      ; Sprite Collision
       4.  00:4010                      
       5.  00:4010  (00:000F)           PLAYER_COLLISION_OFFSET_X      equ 15
       6.  00:4010  (00:0010)           PLAYER_COLLISION_OFFSET_Y      equ 16
       7.  00:4010  (00:000E)           PLAYER_WIDTH                   equ 14
       8.  00:4010  (00:0010)           PLAYER_HEIGHT                  equ 16
       9.  00:4010                      
      10.  00:4010                      ; Offset Entity struct
      11.  00:4010  (00:0001)           ENEMY_X                         equ 1
      12.  00:4010  (00:0002)           ENEMY_Y                         equ 2
      13.  00:4010  (00:0003)           ENTITY_ENERGY                   equ 3
      14.  00:4010  (00:0004)           ENEMY_COLLISION_OFFSET_X        equ 4
      15.  00:4010  (00:0005)           ENEMY_COLLISION_OFFSET_Y        equ 5
      16.  00:4010  (00:0006)           ENEMY_COLLISION_WIDTH           equ 6
      17.  00:4010  (00:0007)           ENEMY_COLLISION_HEIGHT          equ 7
      18.  00:4010  (00:0008)           SPRITENUMBER_SPAT               equ 8
      19.  00:4010  (00:0009)           damage                          equ 9
      20.  00:4010                      
      21.  00:4010                      ; Notes Black Sabbath
      22.  00:4010  (00:0071)           STG2_TILE1_X    equ 113
      23.  00:4010  (00:006E)           STG2_TILE1_Y    equ 110
      24.  00:4010                      
      25.  00:4010  (00:0080)           STG2_TILE2_X    equ 128
      26.  00:4010                      
      27.  00:4010  (00:0080)           STG2_TILE3_X    equ 128
      28.  00:4010  (00:008E)           STG2_TILE3_Y    equ 142
      29.  00:4010                      
      30.  00:4010                      
      31.  00:4010                      ; VDP Const
      32.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
      33.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
      34.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
      35.  00:4010                      
      36.  00:4010                      ; Energy             lv1, lv2, lv3, lv4, lv5, lv6
      37.  00:4010  18 20 28 30 38 40   ANDY_MAX_ENERGY:  db  24, 32, 40, 48, 56, 64
      38.  00:4016                      
      39.  00:4016  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
      40.  00:4016  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
      41.  00:4016  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
      42.  00:4016                      
      43.  00:4016  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      44.  00:4016  (00:0007)           KB_RIGHT 				equ 7
      45.  00:4016  (00:0006)           KB_DOWN 				equ 6
      46.  00:4016  (00:0005)           KB_UP 					equ	5        
      47.  00:4016  (00:0004)           KB_LEFT 				equ	4
      48.  00:4016  (00:0003)           KB_DEL 					equ	3
      49.  00:4016  (00:0000)           KB_SPACE				equ	0
      50.  00:4016                      
      51.  00:4016  (00:0001)           MOV_SPEED				equ 1
      52.  00:4016  (00:0001)           MOV_SPEED_GHOST			equ 1
      53.  00:4016  (00:0003)           MOV_SPEED_SHOOT         equ 3
      54.  00:4016  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      55.  00:4016  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      56.  00:4016  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      57.  00:4016  (00:FFE8)           REG9SAV                 equ #FFE8
      58.  00:4016  (00:0098)           PORT_0                  equ 0x98
      59.  00:4016  (00:0099)           PORT_1                  equ 0x99
      60.  00:4016  (00:009A)           PORT_2                  equ 0x9a
      61.  00:4016  (00:009B)           PORT_3                  equ 0x9b
      62.  00:4016                      
      63.  00:4016  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      64.  00:4016  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      65.  00:4016                      
      66.  00:4016  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      67.  00:4016  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      68.  00:4016  (00:0049)           GUS_TOMB_STG1_X             equ 73
      69.  00:4016  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      70.  00:4016  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      71.  00:4016  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      72.  00:4016  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      73.  00:4016                      
      74.  00:4016  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
      75.  00:4016  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
      76.  00:4016  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
      77.  00:4016  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
      78.  00:4016  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
      79.  00:4016  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
      80.  00:4016  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
      81.  00:4016                      
      82.  00:4016  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
      83.  00:4016  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
      84.  00:4016  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
      85.  00:4016  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
      86.  00:4016  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
      87.  00:4016                      
      22   00:4016                          include "include\BTH_strings.asm"
       1.  00:4016  1C 40 38 40 54 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:401C                      ; Caben 23 caracteres en cada línea
       3.  00:401C                      string01M: db 'MIKE:                      ',0
       3.  00:401C  4D 49 4B 45 3A 20 20 20 20 20 20 20 20 20 20 20 
       3.  00:402C  20 20 20 20 20 20 20 20 20 20 20 00 
       4.  00:4038                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:4038  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:4048  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4054  00                  string03M: db 0
       6.  00:4055                      
       7.  00:4055  5B 40 76 40 91 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:405B                      ; Caben 23 caracteres en cada línea
       9.  00:405B                      string01J: db 'JOHN:                     ',0
       9.  00:405B  4A 4F 48 4E 3A 20 20 20 20 20 20 20 20 20 20 20 
       9.  00:406B  20 20 20 20 20 20 20 20 20 20 00 
      10.  00:4076                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4076  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4086  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:4091  00                  string03J: db 0
      12.  00:4092                      
      13.  00:4092  98 40 B5 40 D2 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4098                      ; Caben 23 caracteres en cada línea
      15.  00:4098                      string01G: db 'GUS:                        ',0
      15.  00:4098  47 55 53 3A 20 20 20 20 20 20 20 20 20 20 20 20 
      15.  00:40A8  20 20 20 20 20 20 20 20 20 20 20 20 00 
      16.  00:40B5                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:40B5  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:40C5  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:40D2  00                  string03G: db  0
      18.  00:40D3                      
      19.  00:40D3  D9 40 F4 40 0F 41   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:40D9                      ; Caben 23 caracteres en cada línea
      21.  00:40D9                      string01Sk: db 'MURRAY:                   ',0
      21.  00:40D9  4D 55 52 52 41 59 3A 20 20 20 20 20 20 20 20 20 
      21.  00:40E9  20 20 20 20 20 20 20 20 20 20 00 
      22.  00:40F4                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:40F4  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:4104  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:410F  00                  string03Sk: db 0
      24.  00:4110                      
      25.  00:4110  16 41 2F 41 48 41   stg1_puzzle_solved_strings: dw string01P, string02P, string03P
      26.  00:4116                      ; Caben 23 caracteres en cada línea
      27.  00:4116                      string01P: db 'ANDY:                   ',0
      27.  00:4116  41 4E 44 59 3A 20 20 20 20 20 20 20 20 20 20 20 
      27.  00:4126  20 20 20 20 20 20 20 20 00 
      28.  00:412F                      string02P: db 'LA PUERTA SE HA ABIERTO!',0
      28.  00:412F  4C 41 20 50 55 45 52 54 41 20 53 45 20 48 41 20 
      28.  00:413F  41 42 49 45 52 54 4F 21 00 
      29.  00:4148  00                  string03P: db 0
      30.  00:4149                      
      31.  00:4149  4F 41 61 41 6C 41   game_over_strings: dw string01GO, string02GO, string03GO
      32.  00:414F                      ; Caben 23 caracteres en cada línea
      33.  00:414F                      string01GO: db 'AAAAHHHHHHHHHH!!!',0
      33.  00:414F  41 41 41 41 48 48 48 48 48 48 48 48 48 48 21 21 
      33.  00:415F  21 00 
      34.  00:4161                      string02GO: db 'GAME OVER!',0
      34.  00:4161  47 41 4D 45 20 4F 56 45 52 21 00 
      35.  00:416C  00                  string03GO: db '',0
      23   00:416D                      ; Funciones auxiliares
      24   00:416D                      	include "include\BTH_func.asm"
       1.  00:416D                      ;
       2.  00:416D                      ; EnemyCollisionCheck
       3.  00:416D                      ;
       4.  00:416D                      ;   Calculates whether a collision occurs between the player
       5.  00:416D                      ;   and an enemy
       6.  00:416D                      ;
       7.  00:416D                      ; IN: iy - pointer to enemy data record
       8.  00:416D                      ; OUT: Carry set if collision
       9.  00:416D                      ; CHANGES: A, B, C, E
      10.  00:416D                      ;
      11.  00:416D                      EnemyCollisionCheck:
      12.  00:416D  DD 7E 01                    ld      a,(ix+1)                     ; read player x-coordinate          [14]
      13.  00:4170  C6 0F                       add     PLAYER_COLLISION_OFFSET_X       ; add offset for smaller rectangle  [8]
      14.  00:4172  47                          ld      b,a                             ;                                   [5]
      15.  00:4173  0E 0E                       ld      c,PLAYER_WIDTH                  ; set the width of the player       [8]
      16.  00:4175                              
      17.  00:4175  FD 7E 01                    ld      a,(iy+ENEMY_X)                  ; read enemy x-coordinate           [21]
      18.  00:4178  FD 86 04                    add     (iy+ENEMY_COLLISION_OFFSET_X)   ; add offset for smaller rectangle  [21]
      19.  00:417B  FD 5E 06                    ld      e,(iy+ENEMY_COLLISION_WIDTH)    ; set the width of the enemy        [21]
      20.  00:417E                      
      21.  00:417E  CD 93 41                    call    .check                          ;                                   [18]
      22.  00:4181  D0                          ret     nc                              ;                                   [12/6]
      23.  00:4182                      
      24.  00:4182  DD 7E 00                    ld      a,(ix)                     ; read player y-coordinate          [14]
      25.  00:4185  C6 10                       add     PLAYER_COLLISION_OFFSET_Y       ; add offset for smaller rectangle  [8]
      26.  00:4187  47                          ld      b,a                             ;                                   [5]
      27.  00:4188  0E 10                       ld      c,PLAYER_HEIGHT                 ; set the height of the player      [8]
      28.  00:418A                              
      29.  00:418A  FD 7E 02                    ld      a,(iy+ENEMY_Y)                  ; read enemy y-coordinate           [21]
      30.  00:418D  FD 86 05                    add     (iy+ENEMY_COLLISION_OFFSET_Y)   ; add offset for smaller rectangle  [21]
      31.  00:4190  FD 5E 07                    ld      e,(iy+ENEMY_COLLISION_HEIGHT)    ; set the height of the enemy      [21]
      32.  00:4193                      
      33.  00:4193                      .check:
      34.  00:4193  90                          sub     b               ; calculate x2-x1              [5]
      35.  00:4194  30 04                       jr      nc,.other       ; don't jump if x2<x1          [13/8]
      36.  00:4196  ED 44                       neg                     ; use negative value           [10]
      37.  00:4198  93                          sub     e               ; compare with size 1          [5]
      38.  00:4199  C9                          ret                     ; return result                [11]
      39.  00:419A                      .other:
      40.  00:419A  91                          sub     c               ; compare with size 1          [5]
      41.  00:419B  C9                          ret                     ; return result                [11]
      42.  00:419C                      
      43.  00:419C                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
      44.  00:419C                      ;Entrada:
      45.  00:419C                      ;   B - Y SPR1
      46.  00:419C                      ;   C - X SPR1
      47.  00:419C                      
      48.  00:419C                      ;   D - Y SPR2
      49.  00:419C                      ;   E - X SPR2
      50.  00:419C                      ;Salida:
      51.  00:419C                      ;   A - colision
      52.  00:419C                      ;Modifica:
      53.  00:419C                      ;   A
      54.  00:419C                      check_spr_collision:        
      55.  00:419C  78                          LD A,B          ; a = Y SPR1
      56.  00:419D  BA                          CP D
      57.  00:419E  C2 A9 41                    JP NZ,.no_collision
      58.  00:41A1                      
      59.  00:41A1  79                          LD A,C          ; a = X SPR1
      60.  00:41A2  BB                          CP E
      61.  00:41A3  C2 A9 41                    JP NZ,.no_collision
      62.  00:41A6                      
      63.  00:41A6  3E 01                       LD A,1
      64.  00:41A8  C9                          RET
      65.  00:41A9                      .no_collision
      66.  00:41A9  3E 00                   LD A,0
      67.  00:41AB  C9                      RET
      68.  00:41AC                      
      69.  00:41AC                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      70.  00:41AC                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      71.  00:41AC                      ;Entrada:
      72.  00:41AC                      ;   d - X
      73.  00:41AC                      ;   e - y
      74.  00:41AC                      ;Salida:
      75.  00:41AC                      ;   a - bloque
      76.  00:41AC                      ;Modifica:
      77.  00:41AC                      ;   a, hl, de
      78.  00:41AC                      get_bloque_en_X_Y:
      79.  00:41AC                              ;(y/8)*32+(x/8)
      80.  00:41AC  7B                          ld a,e      ;a=y
      81.  00:41AD  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      82.  00:41B3  26 00                       ld h,0
      83.  00:41B5  6F                          ld l,a      ;hl=y/8
      84.  00:41B6  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      85.  00:41BB                      
      86.  00:41BB  7A                          ld a,d      ;a=x
      87.  00:41BC  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      88.  00:41C2  16 00                       ld d,0
      89.  00:41C4  5F                          ld e,a      ;de=x/8
      90.  00:41C5  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      91.  00:41C6                      
      92.  00:41C6  ED 5B DE C0                 ld de,(MAPA)
      93.  00:41CA  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      94.  00:41CB                      
      95.  00:41CB  7E                          ld a,[hl]
      96.  00:41CC  C9                          ret
      97.  00:41CD                      
      98.  00:41CD                      ; SCREEN 8
      99.  00:41CD                      SetVdp_Write:
     100.  00:41CD                      
     101.  00:41CD                      	; transform address from 
     102.  00:41CD                      	;
     103.  00:41CD                      	; |           Register A            |           Register H            |           Register L            |
     104.  00:41CD                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     105.  00:41CD                      	;
     106.  00:41CD                      	; to
     107.  00:41CD                      	;
     108.  00:41CD                      	; |           Register A            |           Register H            |           Register L            |
     109.  00:41CD                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     110.  00:41CD  CB 04                   rlc     h
     111.  00:41CF  17                      rla
     112.  00:41D0  CB 04                   rlc     h
     113.  00:41D2  17                      rla
     114.  00:41D3  CB 3C                   srl     h
     115.  00:41D5  CB 3C                   srl     h
     116.  00:41D7                      
     117.  00:41D7  F3                      di
     118.  00:41D8                      	    ; write bits a14-16 of address to R#14
     119.  00:41D8  D3 99               	    out     (PORT_1), a
     120.  00:41DA  3E 8E               	    ld      a, 14 + 128
     121.  00:41DC  D3 99               	    out     (PORT_1), a
     122.  00:41DE                      
     123.  00:41DE                      	    ; write the other address bits to VDP PORT_1
     124.  00:41DE  7D                  	    ld      a, l
     125.  00:41DF  00                  	    nop
     126.  00:41E0  D3 99               	    out     (PORT_1), a
     127.  00:41E2  7C                  	    ld      a, h
     128.  00:41E3  F6 40               	    or      64
     129.  00:41E5  FB                      ei
     130.  00:41E6  D3 99                   out     (PORT_1),a
     131.  00:41E8  C9                      ret
     132.  00:41E9                      
     133.  00:41E9                      Set212Lines:
     134.  00:41E9                              ; set LN (bit 7) of R#9 to 1
     135.  00:41E9  3A E8 FF                    ld      a, (REG9SAV)
     136.  00:41EC  F6 80                       or      10000000b
     137.  00:41EE  47                          ld      b, a
     138.  00:41EF  0E 09                       ld      c, 9            ; register #
     139.  00:41F1  CD 47 00                    call    WRTVDP
     140.  00:41F4  C9                          ret
     141.  00:41F5                      
     142.  00:41F5                      ClearVram_MSX2:
     143.  00:41F5  AF                          xor     a           ; set vram write base address
     144.  00:41F6  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     145.  00:41F9  CD CD 41                    call    SetVdp_Write
     146.  00:41FC  AF                          xor		a
     147.  00:41FD                      
     148.  00:41FD                          ; TODO: 
     149.  00:41FD                          ;   use VDP command (currently is taking almost 1 second)
     150.  00:41FD                          ;   disable screen/sprites (should I ??)
     151.  00:41FD                      
     152.  00:41FD                          ; clear all 128kb of VRAM
     153.  00:41FD  16 02               	ld		d, 2		; 2 repetitions
     154.  00:41FF                      .loop_2:
     155.  00:41FF  0E 00               	ld		c, 0		; 256 repetitions
     156.  00:4201                      .loop_1:
     157.  00:4201  06 00               	ld		b, 0		; 256 repetitions
     158.  00:4203                      .loop:
     159.  00:4203  D3 98               	out		(PORT_0), a
     160.  00:4205  10 FC               	djnz	.loop
     161.  00:4207  0D                  	dec		c
     162.  00:4208  C2 01 42            	jp		nz, .loop_1
     163.  00:420B  15                  	dec		d
     164.  00:420C  C2 FF 41            	jp		nz, .loop_2
     165.  00:420F                      
     166.  00:420F  C9                  	ret
     167.  00:4210                      
     168.  00:4210                      ; MEGAROM
     169.  00:4210                      
     170.  00:4210                      opening_screen		
     171.  00:4210  0E 00               		ld		c,0
     172.  00:4212  11 00 00            		ld		de,0
     173.  00:4215  CD 55 42            		call	_vdpsetvramwr
     174.  00:4218  1E 04               		ld	e,4
     175.  00:421A  3E 09               		ld	a, :GRAPHIC
     176.  00:421C  57                  		ld	d,a
     177.  00:421D  32 00 70            2:		ld	(_bank2),a
     178.  00:4220  21 00 80            		ld	hl,GRAPHIC
     179.  00:4223  01 98 00            		ld	bc,0x98
     180.  00:4226  3E 40               		ld	a,32*2
     181.  00:4228  ED B3               1:		otir
     182.  00:422A  3D                  		dec	a
     183.  00:422B  20 FB               		jr	nz,1b
     184.  00:422D  14                  		inc	d
     185.  00:422E  7A                  		ld	a,d
     186.  00:422F  1D                  		dec	e
     187.  00:4230  20 EB               		jr	nz,2b
     188.  00:4232  C9                  		ret 
     189.  00:4233                      
     190.  00:4233                      load_screen
     191.  00:4233  0E 00               		ld		c,0
     192.  00:4235  11 00 00            		ld		de,0
     193.  00:4238  CD 55 42            		call	_vdpsetvramwr
     194.  00:423B  1E 02               		ld	e,2					; #pages
     195.  00:423D  78                  		ld	a, b			; 1st page bitmap
     196.  00:423E  57                  		ld	d,a
     197.  00:423F  32 00 70            2:		ld	(_bank2),a
     198.  00:4242  2A E0 C0            		ld	hl,(BITMAP)		; Bitmap address
     199.  00:4245  01 98 00            		ld	bc,0x98
     200.  00:4248  3E 40               		ld	a,64
     201.  00:424A  ED B3               1:		otir
     202.  00:424C  3D                  		dec	a
     203.  00:424D  20 FB               		jr	nz,1b
     204.  00:424F  14                  		inc	d
     205.  00:4250  7A                  		ld	a,d
     206.  00:4251  1D                  		dec	e
     207.  00:4252  20 EB               		jr	nz,2b
     208.  00:4254  C9                  		ret 
     209.  00:4255                      
     210.  00:4255                      ;Set VDP for writing at address CDE (17-bit) 
     211.  00:4255                      
     212.  00:4255                      _vdpsetvramwr:
     213.  00:4255  79                  	ld a,c
     214.  00:4256  CB 02               	rlc d
     215.  00:4258  17                  	rla
     216.  00:4259  CB 02               	rlc d
     217.  00:425B  17                  	rla
     218.  00:425C  CB 3A               	srl d ; primo shift, il secondo dopo la out
     219.  00:425E                      
     220.  00:425E  D3 99               	out (0x99),a ;set bits 14-16
     221.  00:4260  3E 8E               	ld a,14+128
     222.  00:4262  D3 99               	out (0x99),a
     223.  00:4264  CB 3A               	srl d ; secondo shift.     
     224.  00:4266                      _vdpsetvramwr14
     225.  00:4266  7B                  	ld a,e ;set bits 0-7
     226.  00:4267  D3 99               	out (0x99),a
     227.  00:4269  7A                  	ld a,d ;set bits 8-13
     228.  00:426A  F6 40               	or 0x40 ; + write access
     229.  00:426C  D3 99               	out (0x99),a
     230.  00:426E  C9                  	ret
     231.  00:426F                      
     232.  00:426F                      
     233.  00:426F                      
     234.  00:426F                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     235.  00:426F                      		; -----------------------------------------------------
     236.  00:426F                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     237.  00:426F                      		; -----------------------------------------------------
     238.  00:426F                      
     239.  00:426F                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     240.  00:426F                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     241.  00:426F                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     242.  00:426F                      
     243.  00:426F                      		; --- VARIABLES EN RAM NECESARIAS ---
     244.  00:426F                      		; NINGUNA
     245.  00:426F                      
     246.  00:426F                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     247.  00:426F                      		; --- Entrada: a = SLOT                                           ---
     248.  00:426F                      		; --- Salida: a = valor para ENASLT                               ---
     249.  00:426F                      		; --- AUTOR: Konamiman                                            ---
     250.  00:426F  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     251.  00:4271  4F                  		ld	c,a				; c = slot de la pagina
     252.  00:4272  06 00               		ld	b,0				; bc = slot de la pagina
     253.  00:4274  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     254.  00:4277  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     255.  00:4278  7E                  		ld	a,(hl)				; Tomamos el valor
     256.  00:4279  E6 80               		and	$80				; Si el bit mas alto es cero...
     257.  00:427B  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     258.  00:427D                      		; --- El slot esta expandido ---
     259.  00:427D  B1                  		or	c				; Slot basico en el lugar adecuado
     260.  00:427E  4F                  		ld	c,a				; Guardamos el valor en c
     261.  00:427F  23                  		inc	hl				; Incrementamos hl una...
     262.  00:4280  23                  		inc	hl				; ...dos...
     263.  00:4281  23                  		inc	hl				; ...tres...
     264.  00:4282  23                  		inc	hl				; ...cuatro veces
     265.  00:4283  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     266.  00:4284  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     267.  00:4286  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     268.  00:4287  C9                  		ret					; Volvemos
     269.  00:4288                      
     270.  00:4288                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     271.  00:4288  3E C9               		ld	a,$C9				; Codigo de RET
     272.  00:428A  32 8D 42            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     273.  00:428D  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     274.  00:428E                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     275.  00:428E  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     276.  00:4291  0F                  		rrca					; Rotamos a la derecha...
     277.  00:4292  0F                  		rrca					; ...dos veces
     278.  00:4293  CD 6F 42            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     279.  00:4296  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     280.  00:4298  C3 24 00            		jp	ENASLT ;ENASLT
     281.  00:429B                      
     282.  00:429B                      SET_SCREEN5_MODE:
     283.  00:429B                           ;Cambiamos el modo de pantalla
     284.  00:429B                          ; BASIC: COLOR 15,1,1
     285.  00:429B                          ; Establecer los colores
     286.  00:429B  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     287.  00:429E  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     288.  00:42A0  23                  	inc hl ; FORCLR+1
     289.  00:42A1  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     290.  00:42A3  23                  	inc hl ; FORCLR+2
     291.  00:42A4  36 0F               	ld [hl],15 ; Color del borde 1=negro
     292.  00:42A6                      
     293.  00:42A6  3E 05                   ld  a,5     
     294.  00:42A8  CD 5F 00                call CHGMOD 
     295.  00:42AB  CD 69 00            	call CLRSPR
     296.  00:42AE                      
     297.  00:42AE  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     298.  00:42B1                          ;En or 0+0=0, 0+1=1, 1+1=1
     299.  00:42B1                          ;En and 0+0=0, 0+1=0, 1+1=1
     300.  00:42B1                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     301.  00:42B1                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     302.  00:42B1                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     303.  00:42B1  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     304.  00:42B3                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     305.  00:42B3  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     306.  00:42B5                      
     307.  00:42B5  47                      ld b,a ;carga en b el valor de a
     308.  00:42B6  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     309.  00:42B8  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     310.  00:42BB  AF                      xor a ; ld a,0
     311.  00:42BC  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     312.  00:42BF  C9                      ret
     313.  00:42C0                      
     314.  00:42C0                      DUMP_SPR_ALL:
     315.  00:42C0                      
     316.  00:42C0                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     317.  00:42C0                      
     318.  00:42C0  21 F7 68                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     319.  00:42C3  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     320.  00:42C6  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     321.  00:42C9  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     322.  00:42CC                      
     323.  00:42CC                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     324.  00:42CC                      
     325.  00:42CC  21 55 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     326.  00:42CF  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     327.  00:42D2  01 80 00                ld bc,128; 4 x #Sprites
     328.  00:42D5  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     329.  00:42D8                      
     330.  00:42D8                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     331.  00:42D8                      
     332.  00:42D8  21 D7 6B                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     333.  00:42DB  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     334.  00:42DE  01 70 01                ld bc,16*23; 16 x #Sprites
     335.  00:42E1  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     336.  00:42E4  C9                      ret
     337.  00:42E5                      	
     338.  00:42E5                      load_tiles_vdp
     339.  00:42E5                          
     340.  00:42E5                      	;ld hl, TILES1
     341.  00:42E5  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     342.  00:42E8  01 00 08                ld bc,128*16; 16 lineas
     343.  00:42EB  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     344.  00:42EE  C9                  	ret 
     345.  00:42EF                      
     346.  00:42EF                      DUMP_SPR_ATTS:
     347.  00:42EF                      
     348.  00:42EF                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     349.  00:42EF                      
     350.  00:42EF  21 55 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     351.  00:42F2  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     352.  00:42F5  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     353.  00:42F8  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     354.  00:42FB                      
     355.  00:42FB                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     356.  00:42FB                      ;	JP Z,.DUMP_SPR_ATTS_END
     357.  00:42FB  2A DC C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     358.  00:42FE  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     359.  00:4301  C5                      PUSH BC
     360.  00:4302  01 30 00            	ld bc,16*3; 16 x #Sprites
     361.  00:4305  CD 5C 00                call  LDIRVM 
     362.  00:4308  C1                  	POP BC
     363.  00:4309                      
     364.  00:4309                      .DUMP_SPR_ATTS_END:
     365.  00:4309  C9                      ret
     366.  00:430A                      
     367.  00:430A                      DUMP_SPR_P1:    
     368.  00:430A                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     369.  00:430A                      
     370.  00:430A  2A D8 C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     371.  00:430D  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     372.  00:4310  C5                      PUSH BC
     373.  00:4311  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     374.  00:4314  CD 5C 00                call  LDIRVM 
     375.  00:4317  C1                  	POP BC
     376.  00:4318                      
     377.  00:4318                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     378.  00:4318                      
     379.  00:4318  2A DA C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     380.  00:431B  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     381.  00:431E  C5                      PUSH BC
     382.  00:431F  01 30 00            	ld bc,16*3; 16 x #Sprites
     383.  00:4322  CD 5C 00                call  LDIRVM 
     384.  00:4325  C1                  	POP BC
     385.  00:4326                      	
     386.  00:4326                      
     387.  00:4326                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     388.  00:4326                      ;    xor a
     389.  00:4326                      ;	di			; set VRAM address to 1800h
     390.  00:4326                      ;	out (99h),a		; lower byte 00
     391.  00:4326                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     392.  00:4326                      ;	ei
     393.  00:4326                      ;	out (99h),a		; note that this is protected by the ei instruction
     394.  00:4326                      ;   push BC
     395.  00:4326                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     396.  00:4326                      ;	ld hl,(SPRITE_PTR_REPLACE)
     397.  00:4326                      
     398.  00:4326                      ;.loop1:
     399.  00:4326                      ;	outi			; send the data (HL) to port 98h 
     400.  00:4326                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     401.  00:4326                      ;   POP BC
     402.  00:4326                      
     403.  00:4326                          ; Replace 2 entries in sprite color table
     404.  00:4326                      ;    xor a
     405.  00:4326                      ;	di			; set VRAM address to 1800h
     406.  00:4326                      ;	out (99h),a		; lower byte 00
     407.  00:4326                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     408.  00:4326                      ;	ei
     409.  00:4326                      ;	out (99h),a		; note that this is protected by the ei instruction
     410.  00:4326                       ;   push BC
     411.  00:4326                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     412.  00:4326                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     413.  00:4326                      	
     414.  00:4326                      ;.loop2:
     415.  00:4326                      ;	outi			; send the data (HL) to port 98h 
     416.  00:4326                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     417.  00:4326                       ;   POP BC
     418.  00:4326                      
     419.  00:4326  C9                      ret
     420.  00:4327                      
     421.  00:4327                      SetPalette:
     422.  00:4327  AF                  	xor a
     423.  00:4328  F3                  	di
     424.  00:4329  D3 99               	out ($99),a
     425.  00:432B  3E 90               	ld a,16+128
     426.  00:432D  D3 99               	out ($99),a
     427.  00:432F  01 9A 20            	ld bc,$209A
     428.  00:4332  ED B3               	otir
     429.  00:4334  FB                  	ei
     430.  00:4335  C9                  	ret
      25   00:4336                          include "include\BTH_animate.asm"
       1.  00:4336                      ; Movimiento P1
       2.  00:4336                      move_up:
       3.  00:4336  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:4337                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:4337  AF                      XOR A
       6.  00:4338  32 50 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:433B  CD 69 44                CALL CHECK_DIRECTION_MAIN
       8.  00:433E                      
       9.  00:433E  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:4341  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:4343  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:4344  DD 7E 01                ld a,(ix+1)
      13.  00:4347  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:4348  CD AC 41                call get_bloque_en_X_Y
      15.  00:434B  FE 01                   cp 1
      16.  00:434D  CA 62 45                jp z,NO_MOVEMENT
      17.  00:4350                      
      18.  00:4350  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:4353  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:4355  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:4356  DD 7E 01                ld a,(ix+1)
      22.  00:4359  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:435B  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:435C  CD AC 41                call get_bloque_en_X_Y
      25.  00:435F  FE 01                   cp 1
      26.  00:4361  CA 62 45                jp z,NO_MOVEMENT
      27.  00:4364                            
      28.  00:4364  3E FF               	LD A, -MOV_SPEED
      29.  00:4366  32 47 C0            	LD (CHAR_SPEED_Y), A
      30.  00:4369  CD F6 44                call UPDATE_MOVEMENT   
      31.  00:436C  CD 1E 45                call ANIMATE_P1
      32.  00:436F                          ;JP no_arrows
      33.  00:436F  C9                      ret
      34.  00:4370                      
      35.  00:4370                      move_down:
      36.  00:4370  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:4371                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:4371  3E 01                   LD A,$01
      39.  00:4373  32 50 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:4376  CD 69 44                CALL CHECK_DIRECTION_MAIN
      41.  00:4379                      
      42.  00:4379  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      43.  00:437C  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:437E  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:437F  DD 7E 01                ld a,(ix+1)
      46.  00:4382  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:4383  CD AC 41                call get_bloque_en_X_Y
      48.  00:4386  FE 01                   cp 1
      49.  00:4388  CA 62 45                jp z,NO_MOVEMENT
      50.  00:438B                      
      51.  00:438B  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      52.  00:438E  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:4390  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:4391  DD 7E 01                ld a,(ix+1)
      55.  00:4394  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:4396  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:4397  CD AC 41                call get_bloque_en_X_Y
      58.  00:439A  FE 01                   cp 1
      59.  00:439C  CA 62 45                jp z,NO_MOVEMENT
      60.  00:439F                          
      61.  00:439F  3E 01                   LD A, MOV_SPEED
      62.  00:43A1  32 47 C0            	LD (CHAR_SPEED_Y), A
      63.  00:43A4  CD F6 44                call UPDATE_MOVEMENT    
      64.  00:43A7  CD 1E 45                call ANIMATE_P1
      65.  00:43AA                          ;JP no_arrows
      66.  00:43AA  C9                      ret
      67.  00:43AB                      
      68.  00:43AB                      move_right:
      69.  00:43AB  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:43AC                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:43AC  CB 69                   BIT KB_UP, C
      72.  00:43AE  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:43B0  CB 71                   BIT KB_DOWN, C
      74.  00:43B2  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:43B4  3E 03                   LD A,$03
      76.  00:43B6  32 50 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:43B9  CD 69 44                CALL CHECK_DIRECTION_MAIN
      78.  00:43BC                      
      79.  00:43BC                      .KB_UPDOWN_PRESSED:
      80.  00:43BC  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:43BF  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:43C1  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:43C2  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      84.  00:43C5  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:43C7  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:43C8  CD AC 41                call get_bloque_en_X_Y
      87.  00:43CB  FE 01                   cp 1
      88.  00:43CD  CA 62 45                jp z,NO_MOVEMENT
      89.  00:43D0                      
      90.  00:43D0                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:43D0  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:43D3  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:43D5  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:43D6  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      95.  00:43D9  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:43DB  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:43DC  CD AC 41                call get_bloque_en_X_Y
      98.  00:43DF  FE 01                   cp 1
      99.  00:43E1  CA 62 45                jp z,NO_MOVEMENT
     100.  00:43E4                      
     101.  00:43E4                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:43E4  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:43E7  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:43E9  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:43EA  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     106.  00:43ED  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:43EF  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:43F0  CD AC 41                call get_bloque_en_X_Y
     109.  00:43F3  FE 01                   cp 1
     110.  00:43F5  CA 62 45                jp z,NO_MOVEMENT    
     111.  00:43F8                          
     112.  00:43F8  3E 01                   LD A, MOV_SPEED
     113.  00:43FA  32 46 C0            	LD (CHAR_SPEED_X), A
     114.  00:43FD  CD F6 44                call UPDATE_MOVEMENT
     115.  00:4400  CB 69                   BIT KB_UP, C
     116.  00:4402  C8                      ret z
     117.  00:4403  CB 71                   BIT KB_DOWN, C
     118.  00:4405  C8                      ret z
     119.  00:4406  CD 1E 45                call ANIMATE_P1    
     120.  00:4409  C9                      ret
     121.  00:440A                      
     122.  00:440A                      move_left:
     123.  00:440A  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:440B                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:440B  CB 69                   BIT KB_UP, C
     126.  00:440D  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:440F  CB 71                   BIT KB_DOWN, C
     128.  00:4411  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:4413  3E 02                   LD A,$02
     130.  00:4415  32 50 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:4418  CD 69 44                CALL CHECK_DIRECTION_MAIN
     132.  00:441B                      .KB_UPDOWN_PRESSED:
     133.  00:441B  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:441E  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:4420  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:4421  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     137.  00:4424  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:4426  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:4427  CD AC 41                call get_bloque_en_X_Y
     140.  00:442A  FE 01                   cp 1
     141.  00:442C  CA 62 45                jp z,NO_MOVEMENT
     142.  00:442F                      
     143.  00:442F                          ;Miramos el tile inferior parte central del personaje
     144.  00:442F  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:4432  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:4434  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:4435  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     148.  00:4438  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:443A  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:443B  CD AC 41                call get_bloque_en_X_Y
     151.  00:443E  FE 01                   cp 1
     152.  00:4440  CA 62 45                jp z,NO_MOVEMENT
     153.  00:4443                      
     154.  00:4443                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:4443  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:4446  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:4448  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:4449  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     159.  00:444C  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:444E  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:444F  CD AC 41                call get_bloque_en_X_Y
     162.  00:4452  FE 01                   cp 1
     163.  00:4454  CA 62 45                jp z,NO_MOVEMENT
     164.  00:4457                      
     165.  00:4457  3E FF                   LD A, -MOV_SPEED
     166.  00:4459  32 46 C0            	LD (CHAR_SPEED_X), A
     167.  00:445C  CD F6 44                call UPDATE_MOVEMENT     
     168.  00:445F  CB 69                   BIT KB_UP, C
     169.  00:4461  C8                      ret z
     170.  00:4462  CB 71                   BIT KB_DOWN, C
     171.  00:4464  C8                      ret z
     172.  00:4465  CD 1E 45                call ANIMATE_P1    
     173.  00:4468  C9                      ret
     174.  00:4469                      
     175.  00:4469                      CHECK_DIRECTION_MAIN:
     176.  00:4469  3A 4F C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:446C  2A 50 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:446F  BD                  	CP L		            	                ;Son iguales?
     179.  00:4470  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:4471  3A 50 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:4474  FE 01                   CP $01
     182.  00:4476  CA 8B 44                JP Z,.SET_DIR_DOWN
     183.  00:4479  FE 00                   CP $00
     184.  00:447B  CA A0 44                JP Z,.SET_DIR_UP
     185.  00:447E  FE 03                   CP $03
     186.  00:4480  CA CA 44                JP Z,.SET_DIR_RIGHT
     187.  00:4483  FE 02                   CP $02
     188.  00:4485  CA B5 44                JP Z,.SET_DIR_LEFT
     189.  00:4488  C3 DF 44                JP .FINISH
     190.  00:448B                          
     191.  00:448B                      .SET_DIR_DOWN:    
     192.  00:448B  21 B7 66                ld hl, SPRITE_P1_DOWN
     193.  00:448E  22 D8 C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:4491                          
     195.  00:4491  21 B7 6C                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:4494  22 DA C0                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:4497  22 DC C0                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:449A  CD 0A 43                CALL DUMP_SPR_P1    
     199.  00:449D                      
     200.  00:449D  C3 DF 44                JP .FINISH
     201.  00:44A0                      
     202.  00:44A0                      .SET_DIR_UP:
     203.  00:44A0  21 F7 65                ld hl, SPRITE_P1_UP
     204.  00:44A3  22 D8 C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:44A6                          
     206.  00:44A6  21 57 6C                ld hl, SPRITE_COLOR_P1_UP
     207.  00:44A9  22 DA C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:44AC  22 DC C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:44AF  CD 0A 43                CALL DUMP_SPR_P1
     210.  00:44B2  C3 DF 44                JP .FINISH
     211.  00:44B5                      
     212.  00:44B5                      .SET_DIR_LEFT:    
     213.  00:44B5  21 77 67                ld hl, SPRITE_P1_LEFT
     214.  00:44B8  22 D8 C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:44BB                          
     216.  00:44BB  21 E3 76                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:44BE  22 DA C0                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:44C1  22 DC C0                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:44C4  CD 0A 43                CALL DUMP_SPR_P1   
     220.  00:44C7  C3 DF 44                JP .FINISH
     221.  00:44CA                      
     222.  00:44CA                      .SET_DIR_RIGHT:
     223.  00:44CA  21 37 68                ld hl, SPRITE_P1_RIGHT
     224.  00:44CD  22 D8 C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:44D0                          
     226.  00:44D0  21 17 6D                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:44D3  22 DA C0                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:44D6  22 DC C0                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:44D9                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:44D9  CD 0A 43                CALL DUMP_SPR_P1
     231.  00:44DC  C3 DF 44                JP .FINISH
     232.  00:44DF                      
     233.  00:44DF                      .FINISH:
     234.  00:44DF  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:44E0  32 52 C0                LD (CHAR_MIN_STEP), A   
     236.  00:44E3  3A 50 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:44E6  32 4F C0                LD (CHAR_DIR_MAIN),A    
     238.  00:44E9                      
     239.  00:44E9                          ; ponemos el primer frame del sprite
     240.  00:44E9  DD 36 02 00             LD (ix+2), $00
     241.  00:44ED  DD 36 06 04             LD (ix+6), $04
     242.  00:44F1  DD 36 0A 08             LD (ix+10), $08
     243.  00:44F5                          ;CALL DUMP_SPR_ATTS
     244.  00:44F5  C9                      RET
     245.  00:44F6                      
     246.  00:44F6                      UPDATE_MOVEMENT:
     247.  00:44F6  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     248.  00:44F9  2A 47 C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:44FC  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:44FD                          
     251.  00:44FD  DD 77 00            	LD (ix), A
     252.  00:4500  DD 77 04                LD (ix+4), A
     253.  00:4503  DD 77 08                LD (ix+8), A
     254.  00:4506                      	
     255.  00:4506  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     256.  00:4509  2A 46 C0            	LD HL, (CHAR_SPEED_X)
     257.  00:450C  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     258.  00:450D                          
     259.  00:450D  DD 77 01            	LD (ix+1), A
     260.  00:4510  DD 77 05                LD (ix+5), A
     261.  00:4513  DD 77 09                LD (ix+9), A	
     262.  00:4516                      
     263.  00:4516  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     264.  00:4517  32 46 C0                LD (CHAR_SPEED_X),A
     265.  00:451A  32 47 C0                LD (CHAR_SPEED_Y),A	
     266.  00:451D  C9                      RET
     267.  00:451E                      
     268.  00:451E                      ANIMATE_P1:
     269.  00:451E                          ; Animación/pasos de personaje	
     270.  00:451E  3A 52 C0                LD A, (CHAR_MIN_STEP)
     271.  00:4521  FE 05                   CP MAX_CHAR_STEPS
     272.  00:4523  C2 5C 45                JP NZ,.NO_CHAR_PATTERN_CHANGE
     273.  00:4526                          
     274.  00:4526  AF                      XOR A
     275.  00:4527  32 52 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     276.  00:452A  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     277.  00:452D  FE 00                   CP $00
     278.  00:452F  CA 45 45                JP Z,.SET_SPR_1P_2
     279.  00:4532  DD 36 02 00             LD (ix+2), $00
     280.  00:4536  DD 36 06 04             LD (ix+6), $04
     281.  00:453A  DD 36 0A 08             LD (ix+10), $08
     282.  00:453E  2A DA C0                ld hl, (SPRITE_COLOR_REPLACE)
     283.  00:4541  22 DC C0                ld (SPRITE_COLOR_REPLACE2), HL
     284.  00:4544  C9                      ret
     285.  00:4545                      
     286.  00:4545                      .SET_SPR_1P_2:
     287.  00:4545  DD 36 02 0C             LD (ix+2), $0C
     288.  00:4549  DD 36 06 10             LD (ix+6), $10
     289.  00:454D  DD 36 0A 14             LD (ix+10), $14
     290.  00:4551                              
     291.  00:4551  2A DA C0                ld HL, (SPRITE_COLOR_REPLACE)
     292.  00:4554  11 30 00                ld DE,48
     293.  00:4557  19                      ADD HL, DE
     294.  00:4558  22 DC C0                ld (SPRITE_COLOR_REPLACE2), HL
     295.  00:455B                          ;ld a, 0
     296.  00:455B  C9                  	ret
     297.  00:455C                      
     298.  00:455C                      .NO_CHAR_PATTERN_CHANGE    
     299.  00:455C  C6 01                   ADD 1
     300.  00:455E  32 52 C0                LD (CHAR_MIN_STEP), A    
     301.  00:4561  C9                      ret
     302.  00:4562                      
     303.  00:4562                      NO_MOVEMENT:    
     304.  00:4562  C9                      ret
     305.  00:4563                      
     306.  00:4563                      MOVE_SHOOT:
     307.  00:4563  3A 51 C0                LD A,(CHAR_MAIN_SHOOT)    
     308.  00:4566  FE 01                   CP $01
     309.  00:4568  CA 93 45                JP Z,.MOVE_SHOOT_LEFT
     310.  00:456B  FE 02                   CP $02
     311.  00:456D  CA 7B 45                JP Z,.MOVE_SHOOT_RIGHT
     312.  00:4570  FE 03                   CP $03
     313.  00:4572  CA 83 45                JP Z,.MOVE_SHOOT_UP    
     314.  00:4575  FE 04                   CP $04
     315.  00:4577  CA 8B 45                JP Z,.MOVE_SHOOT_DOWN
     316.  00:457A  C9                      RET
     317.  00:457B                      
     318.  00:457B                      .MOVE_SHOOT_RIGHT:        
     319.  00:457B  3E 03                   LD A, MOV_SPEED_SHOOT
     320.  00:457D  32 54 C0            	LD (CHAR_SPEED_SHOOT), A    
     321.  00:4580  C3 98 45                JP .CHECK_SHOOT_DISTANCE
     322.  00:4583                      
     323.  00:4583                      .MOVE_SHOOT_UP:        
     324.  00:4583  3E FD                   LD A, -MOV_SPEED_SHOOT
     325.  00:4585  32 54 C0            	LD (CHAR_SPEED_SHOOT), A    
     326.  00:4588  C3 98 45                JP .CHECK_SHOOT_DISTANCE
     327.  00:458B                      
     328.  00:458B                      .MOVE_SHOOT_DOWN:
     329.  00:458B  3E 03                   LD A, MOV_SPEED_SHOOT
     330.  00:458D  32 54 C0            	LD (CHAR_SPEED_SHOOT), A    
     331.  00:4590  C3 98 45                JP .CHECK_SHOOT_DISTANCE
     332.  00:4593                      
     333.  00:4593                      .MOVE_SHOOT_LEFT:    
     334.  00:4593  3E FD                   LD A, -MOV_SPEED_SHOOT
     335.  00:4595  32 54 C0            	LD (CHAR_SPEED_SHOOT), A    
     336.  00:4598                      
     337.  00:4598                      .CHECK_SHOOT_DISTANCE:
     338.  00:4598                          ; Miramos si va a izq o der
     339.  00:4598  3A 51 C0                LD A,(CHAR_MAIN_SHOOT)    
     340.  00:459B  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     341.  00:459D  D2 AD 45                JP NC,.ADD_SHOOT_Y
     342.  00:45A0                          ; Movemos el disparo
     343.  00:45A0  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     344.  00:45A3  2A 54 C0            	LD HL, (CHAR_SPEED_SHOOT)
     345.  00:45A6  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     346.  00:45A7  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     347.  00:45AA  C3 B7 45                JP .ADD_DISTANCE
     348.  00:45AD                      .ADD_SHOOT_Y
     349.  00:45AD                          ; Movemos el disparo
     350.  00:45AD  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     351.  00:45B0  2A 54 C0            	LD HL, (CHAR_SPEED_SHOOT)
     352.  00:45B3  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     353.  00:45B4  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     354.  00:45B7                      
     355.  00:45B7                      .ADD_DISTANCE:
     356.  00:45B7  3A 53 C0                LD A,(CHAR_DISTANCE_SHOOT)
     357.  00:45BA  C6 03                   ADD MOV_SPEED_SHOOT
     358.  00:45BC  32 53 C0                LD (CHAR_DISTANCE_SHOOT),A    
     359.  00:45BF  FE 30                   CP MAX_DISTANCE_SHOOT
     360.  00:45C1  C0                      RET NZ
     361.  00:45C2                      
     362.  00:45C2                      .HIDE_SHOOT:
     363.  00:45C2  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     364.  00:45C6  AF                      XOR A
     365.  00:45C7  32 51 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     366.  00:45CA  32 53 C0                LD (CHAR_DISTANCE_SHOOT),A
     367.  00:45CD  C9                      RET
     368.  00:45CE                      
     369.  00:45CE                      SHOOT_MAIN_CHAR:    
     370.  00:45CE  3A 51 C0                LD A, (CHAR_MAIN_SHOOT)
     371.  00:45D1  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     372.  00:45D3  C8                      RET Z;,MAIN_LOOP
     373.  00:45D4  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     374.  00:45D6  C8                      RET Z;,MAIN_LOOP
     375.  00:45D7  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     376.  00:45D9  C8                      RET Z;,MAIN_LOOP
     377.  00:45DA  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     378.  00:45DC  C8                      RET Z;,MAIN_LOOP
     379.  00:45DD                      
     380.  00:45DD  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     381.  00:45E1                      
     382.  00:45E1  DD 7E 00                LD A, (ix)          
     383.  00:45E4  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     384.  00:45E7                      
     385.  00:45E7  3A 4F C0                LD A, (CHAR_DIR_MAIN)
     386.  00:45EA  FE 03                   CP $03
     387.  00:45EC  CA 08 46                JP Z,.SHOOT_RIGHT
     388.  00:45EF  FE 00                   CP $00
     389.  00:45F1  CA 17 46                JP Z,.SHOOT_UP
     390.  00:45F4  FE 01                   CP $01
     391.  00:45F6  CA 2A 46                JP Z,.SHOOT_DOWN
     392.  00:45F9                          ; SHOOT LEFT
     393.  00:45F9  3E 01                   LD A,$01                ; SHOOT LEFT
     394.  00:45FB  32 51 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     395.  00:45FE  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     396.  00:4601  21 F4 FF            	LD HL, -12
     397.  00:4604  85                  	ADD L
     398.  00:4605                          
     399.  00:4605  C3 3A 46                JP .CONTINUE
     400.  00:4608                      
     401.  00:4608                      .SHOOT_RIGHT:    
     402.  00:4608  3E 02                   LD A,$02
     403.  00:460A  32 51 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     404.  00:460D                          
     405.  00:460D  DD 7E 01                LD A, (ix+1)			;cargamos la X
     406.  00:4610  21 0C 00            	LD HL, 12
     407.  00:4613  85                  	ADD L
     408.  00:4614  C3 3A 46                JP .CONTINUE
     409.  00:4617                      
     410.  00:4617                      .SHOOT_UP:
     411.  00:4617  3E 03                   LD A,$03
     412.  00:4619  32 51 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     413.  00:461C                          
     414.  00:461C                          ; Sumamos el desplazamiento a la Y
     415.  00:461C  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     416.  00:461F  D6 10                   SUB 16
     417.  00:4621  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     418.  00:4624                          ;LD (ix+17), D
     419.  00:4624  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     420.  00:4627  C3 3A 46                JP .CONTINUE
     421.  00:462A                      
     422.  00:462A                      .SHOOT_DOWN
     423.  00:462A  3E 04               	LD A,$04
     424.  00:462C  32 51 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     425.  00:462F                          
     426.  00:462F                          ; Sumamos el desplazamiento a la Y
     427.  00:462F  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     428.  00:4632  C6 10                   ADD 16
     429.  00:4634  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     430.  00:4637                          ;LD (ix+17), D
     431.  00:4637  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     432.  00:463A                      
     433.  00:463A                      .CONTINUE:
     434.  00:463A                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     435.  00:463A  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     436.  00:463D                          ;jp MAIN_LOOP
     437.  00:463D  C9                      ret
     438.  00:463E                      
     439.  00:463E                      BOUNCE_ANDY:
     440.  00:463E  DD 7E 00                LD A, (ix)
     441.  00:4641  C6 10                   ADD 16
     442.  00:4643  DD 77 00                LD (ix), A
     443.  00:4646  DD 77 04                LD (ix+4), A
     444.  00:4649  DD 77 08                LD (ix+8), A
     445.  00:464C                      
     446.  00:464C  C9                      ret
      26   00:464D                      	include "include\VDP.asm"
       1.  00:464D                      ; Offset commands registers
       2.  00:464D  (00:0000)           VDP_SX		 EQU 0
       3.  00:464D  (00:0002)           VDP_SY		 EQU 2
       4.  00:464D  (00:0004)           VDP_DX		 EQU 4
       5.  00:464D  (00:0006)           VDP_DY		 EQU 6
       6.  00:464D  (00:0008)           VDP_NX		 EQU 8
       7.  00:464D  (00:000A)           VDP_NY		 EQU 10
       8.  00:464D  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:464D  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:464D  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:464D                      
      12.  00:464D                      ; Offset for sprite commands from memory
      13.  00:464D                      
      14.  00:464D                      ; VDP Commands
      15.  00:464D  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:464D  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:464D  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:464D  (00:0098)           CMD_LMMM	equ	$98
      19.  00:464D  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:464D  (00:0080)           CMD_LMMV    equ $80
      21.  00:464D                      
      22.  00:464D                      ; Logical operations
      23.  00:464D  (00:0000)           VDP_IMP		equ	%0000
      24.  00:464D  (00:0001)           VDP_AND		equ	%0001
      25.  00:464D  (00:0002)           VDP_OR		equ	%0010
      26.  00:464D  (00:0003)           VDP_XOR		equ	%0011
      27.  00:464D  (00:0004)           VDP_NOT		equ	%0100
      28.  00:464D  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:464D  (00:0009)           VDP_TAND	equ	%1001
      30.  00:464D  (00:000A)           VDP_TOR		equ	%1010
      31.  00:464D  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:464D  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:464D                      
      34.  00:464D                      ; Tile
      35.  00:464D  (00:0010)           ENERGY_WIDTH		equ	16		; Blood drops
      36.  00:464D  (00:0020)           TILE_WIDTH			equ	32
      37.  00:464D  (00:0010)           TILE_HEIGHT			equ	16
      38.  00:464D  (00:0001)           TILES_PAGE			equ	1		; Page where tiles are stored
      39.  00:464D  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      40.  00:464D  (00:0002)           BACK_BUFFER			equ 2		; we will draw to page 1
      41.  00:464D  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      42.  00:464D                      
      43.  00:464D                      ; Dialog Box
      44.  00:464D  (00:0014)           DIAGBOX_HEIGHT	equ 20
      45.  00:464D  (00:00FF)           DIAGBOX_WIDTH	equ 255
      46.  00:464D                      
      47.  00:464D                      ;---------------------------------------------------------------------------
      48.  00:464D                      ; Init the RAM buffers used to draw a tile, energy and entities
      49.  00:464D                      ;---------------------------------------------------------------------------
      50.  00:464D                      initVDPBuffers:
      51.  00:464D  21 BA 48            		ld	hl,tileDatROM
      52.  00:4650  11 1C C0            		ld	de,tileDat
      53.  00:4653  01 0F 00            		ld	bc,15
      54.  00:4656  ED B0               		ldir	
      55.  00:4658                      
      56.  00:4658  21 C9 48            		ld	hl,energyDatROM
      57.  00:465B  11 2B C0            		ld	de,energyDat
      58.  00:465E  01 0F 00            		ld	bc,15
      59.  00:4661  ED B0               		ldir	
      60.  00:4663                      
      61.  00:4663  21 ED 4F            		ld 	hl, init_playerDAT
      62.  00:4666  11 00 C0            		ld de, ENTITY_PLAYER_POINTER
      63.  00:4669  01 09 00            		ld bc,ENTITY_SIZE
      64.  00:466C  ED B0               		ldir
      65.  00:466E                      
      66.  00:466E  21 F6 4F            		ld 	hl, enemy1_stg1DAT
      67.  00:4671                      		;add hl, 9			; ENTITY_SIZE
      68.  00:4671  11 09 C0            		ld de, ENTITY_ENEMY1_POINTER
      69.  00:4674  01 09 00            		ld bc,ENTITY_SIZE
      70.  00:4677  ED B0               		ldir
      71.  00:4679                      
      72.  00:4679  C9                  		ret
      73.  00:467A                      
      74.  00:467A                      print_strings_dialog_box:		
      75.  00:467A                      
      76.  00:467A  FD 66 01            	LD H, (IY+1)
      77.  00:467D  FD 6E 00            	LD L, (IY)
      78.  00:4680  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      79.  00:4683  FD E5               	PUSH IY
      80.  00:4685  CD A7 46                call print_string 
      81.  00:4688  FD E1                   POP IY
      82.  00:468A                      
      83.  00:468A  FD 66 03            	LD H, (IY+3)
      84.  00:468D  FD 6E 02            	LD L, (IY+2)
      85.  00:4690  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
      86.  00:4693  FD E5               	PUSH IY
      87.  00:4695  CD A7 46                call print_string 
      88.  00:4698  FD E1               	POP IY
      89.  00:469A                      
      90.  00:469A  FD 66 05                LD H, (IY+5)
      91.  00:469D  FD 6E 04            	LD L, (IY+4)
      92.  00:46A0  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      93.  00:46A3  CD A7 46                call print_string 
      94.  00:46A6  C9                  	RET
      95.  00:46A7                      
      96.  00:46A7                      print_string:       
      97.  00:46A7                      	
      98.  00:46A7                      	;LD HL, string01
      99.  00:46A7                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
     100.  00:46A7                      .loop_str:
     101.  00:46A7  7E                  	LD A, (HL)
     102.  00:46A8  A7                  	AND A
     103.  00:46A9  C8                  	RET Z
     104.  00:46AA                      
     105.  00:46AA  D6 20               	SUB 32
     106.  00:46AC  CB 07               	RLC A
     107.  00:46AE  CB 07               	RLC A	
     108.  00:46B0                          
     109.  00:46B0  06 00               	LD B, 0
     110.  00:46B2  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
     111.  00:46B3                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
     112.  00:46B3                      				; Si #ASCII > 63 -> 2ª línea
     113.  00:46B3                      				; segunda línea - ((#ASCII -32)*4)+1024
     114.  00:46B3                      	
     115.  00:46B3  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
     116.  00:46B4  E5                  	PUSH HL
     117.  00:46B5  21 00 80            	LD HL, FONT
     118.  00:46B8  09                  	ADD HL, BC
     119.  00:46B9  FE 40               	CP 64
     120.  00:46BB  DA C2 46            	JP C, .first_line_font
     121.  00:46BE  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     122.  00:46C1  09                  	ADD HL, BC
     123.  00:46C2                      
     124.  00:46C2                      .first_line_font:
     125.  00:46C2  22 E0 C0                LD (BITMAP), HL
     126.  00:46C5                          
     127.  00:46C5  06 06               	LD B, :FONT
     128.  00:46C7  D5                  	PUSH DE
     129.  00:46C8  CD DB 46                call print_char
     130.  00:46CB  D1                      POP DE
     131.  00:46CC                      	
     132.  00:46CC  FD 21 04 00         	LD IY, 4
     133.  00:46D0  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     134.  00:46D2  FD 54               	LD D, IYH
     135.  00:46D4  FD 5D               	LD E, IYL
     136.  00:46D6                      	
     137.  00:46D6                      
     138.  00:46D6  E1                  	POP HL
     139.  00:46D7  23                  	INC HL
     140.  00:46D8  18 CD               	JR .loop_str
     141.  00:46DA                          
     142.  00:46DA  C9                      RET
     143.  00:46DB                      
     144.  00:46DB                      print_char
     145.  00:46DB  AF                  		XOR A		
     146.  00:46DC  0E 00               		ld		c,0
     147.  00:46DE                      		;ld		de,0
     148.  00:46DE  ED 53 3F C0         		LD (CHR_ACR), DE
     149.  00:46E2  CD 55 42                	call	_vdpsetvramwr		
     150.  00:46E5  78                  		ld	a, b			; 1st page bitmap
     151.  00:46E6                      		;ld	d,a
     152.  00:46E6  32 00 70            		ld	(_bank2),a
     153.  00:46E9  2A E0 C0            		ld	hl,(BITMAP)		; Bitmap address
     154.  00:46EC  3E 08               		ld	a, 8			; #lineas del caracter
     155.  00:46EE  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     156.  00:46F1  ED B3                       otir
     157.  00:46F3  01 7C 00                    LD BC, 124
     158.  00:46F6  09                          ADD HL, BC
     159.  00:46F7  F5                  		PUSH AF
     160.  00:46F8                      
     161.  00:46F8  FD 2A 3F C0         		LD IY, (CHR_ACR)
     162.  00:46FC  01 80 00            		LD BC, 128
     163.  00:46FF  FD 09               		ADD IY, BC
     164.  00:4701  FD 54               		LD D, IYH
     165.  00:4703  FD 5D               		LD E, IYL
     166.  00:4705  A9                  		XOR C
     167.  00:4706  ED 53 3F C0         		LD (CHR_ACR), DE
     168.  00:470A  CD 55 42            		call	_vdpsetvramwr		
     169.  00:470D  F1                  		POP AF		
     170.  00:470E                      
     171.  00:470E  3D                  		dec	a
     172.  00:470F  20 DD               		jr	nz,1b		
     173.  00:4711  C9                  		ret 
     174.  00:4712                      
     175.  00:4712                      CLEAR_DIALOG_BOX_v1:		
     176.  00:4712  0E 00               		LD C,0
     177.  00:4714  11 28 5C            		LD DE, 5C28H
     178.  00:4717  ED 53 3F C0         		LD (CHR_ACR), DE
     179.  00:471B  CD 55 42            		call _vdpsetvramwr
     180.  00:471E  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     181.  00:4720  21 43 77            1:		LD HL, BLANK_DATA
     182.  00:4723  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     183.  00:4726  ED B3               		OTIR
     184.  00:4728                      
     185.  00:4728  F5                  		PUSH AF
     186.  00:4729  FD 2A 3F C0         		LD IY, (CHR_ACR)
     187.  00:472D  01 80 00            		LD BC, 128
     188.  00:4730  FD 09               		ADD IY, BC
     189.  00:4732  FD 54               		LD D, IYH
     190.  00:4734  FD 5D               		LD E, IYL
     191.  00:4736  0E 00               		LD C,0
     192.  00:4738  ED 53 3F C0         		LD (CHR_ACR), DE
     193.  00:473C  CD 55 42            		call	_vdpsetvramwr		
     194.  00:473F  F1                  		POP AF		
     195.  00:4740                      
     196.  00:4740  3D                  		DEC a
     197.  00:4741  20 DD               		JR NZ,1b
     198.  00:4743  C9                  		RET
     199.  00:4744                      
     200.  00:4744                      CLEAR_DIALOG_BOX_v2:
     201.  00:4744  0E 00               		LD C,0
     202.  00:4746  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     203.  00:4749  ED 53 3F C0         		LD (CHR_ACR), DE
     204.  00:474D  CD 55 42            		call _vdpsetvramwr
     205.  00:4750  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     206.  00:4752  21 43 77            1:		LD HL, BLANK_DATA
     207.  00:4755  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     208.  00:4758  ED B3               		OTIR
     209.  00:475A                      
     210.  00:475A  F5                  		PUSH AF
     211.  00:475B  FD 2A 3F C0         		LD IY, (CHR_ACR)
     212.  00:475F  01 80 00            		LD BC, 128
     213.  00:4762  FD 09               		ADD IY, BC
     214.  00:4764  FD 54               		LD D, IYH
     215.  00:4766  FD 5D               		LD E, IYL
     216.  00:4768  0E 00               		LD C,0
     217.  00:476A  ED 53 3F C0         		LD (CHR_ACR), DE
     218.  00:476E  CD 55 42            		call	_vdpsetvramwr		
     219.  00:4771  F1                  		POP AF		
     220.  00:4772                      
     221.  00:4772  3D                  		DEC a
     222.  00:4773  20 DD               		JR NZ,1b
     223.  00:4775  C9                  		RET
     224.  00:4776                      	
     225.  00:4776                      CLEAR_DIALOG_BOX:
     226.  00:4776  21 E7 48            		LD HL, DiagBoxToFrontkBufROM
     227.  00:4779  CD BF 47            		CALL VDPCMD
     228.  00:477C  C9                  		RET
     229.  00:477D                      
     230.  00:477D                      
     231.  00:477D                      ; -----------------------------------------------------------------------------------
     232.  00:477D                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     233.  00:477D                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     234.  00:477D                      ; -----------------------------------------------------------------------------------
     235.  00:477D  (00:F3E0)           VDP_01: EQU   $F3E0
     236.  00:477D  (00:FFE7)           VDP_08: EQU   $FFE7
     237.  00:477D  (00:FFE8)           VDP_09: EQU   $FFE8
     238.  00:477D                      
     239.  00:477D                      SETPAG:				; SETPAG [A]
     240.  00:477D  0F                  	RRCA
     241.  00:477E  0F                  	RRCA
     242.  00:477F  0F                  	RRCA
     243.  00:4780  F6 1F               	OR	%00011111
     244.  00:4782  F3                  	DI
     245.  00:4783  D3 99               	OUT	($99),A
     246.  00:4785  3E 82               	LD	A,$80+2
     247.  00:4787  FB                  	EI
     248.  00:4788  D3 99               	OUT	($99),A
     249.  00:478A  C9                  	RET
     250.  00:478B                      
     251.  00:478B                      SET_WR:				; SET_WR [AHL]
     252.  00:478B  CB 04               	RLC	H
     253.  00:478D  17                  	RLA
     254.  00:478E  CB 04               	RLC	H
     255.  00:4790  17                  	RLA
     256.  00:4791  CB 3C               	SRL	H
     257.  00:4793  CB 3C               	SRL	H
     258.  00:4795  F3                  	DI
     259.  00:4796  D3 99               	OUT	($99),A
     260.  00:4798  3E 8E               	LD	A,$80+14
     261.  00:479A  D3 99               	OUT	($99),A
     262.  00:479C  7D                  	LD	A,L
     263.  00:479D                      ;	NOP				; MSX2+
     264.  00:479D  D3 99               	OUT	($99),A
     265.  00:479F  7C                  	LD	A,H
     266.  00:47A0  F6 40               	OR	64
     267.  00:47A2  D3 99               	OUT	($99),A
     268.  00:47A4  FB                  	EI
     269.  00:47A5  C9                  	RET
     270.  00:47A6                      
     271.  00:47A6                      SET_RD:				; SET_RD [AHL]
     272.  00:47A6  CB 04               	RLC	H
     273.  00:47A8  17                  	RLA
     274.  00:47A9  CB 04               	RLC	H
     275.  00:47AB  17                  	RLA
     276.  00:47AC  CB 3C               	SRL	H
     277.  00:47AE  CB 3C               	SRL	H
     278.  00:47B0  F3                  	DI
     279.  00:47B1  D3 99               	OUT	($99),A
     280.  00:47B3  3E 8E               	LD	A,$80+14
     281.  00:47B5  D3 99               	OUT	($99),A
     282.  00:47B7  7D                  	LD	A,L
     283.  00:47B8                      ;	NOP				; MSX2+
     284.  00:47B8  D3 99               	OUT	($99),A
     285.  00:47BA  7C                  	LD	A,H
     286.  00:47BB                      ;	NOP				; MSX2+
     287.  00:47BB  D3 99               	OUT	($99),A
     288.  00:47BD  FB                  	EI
     289.  00:47BE  C9                  	RET
     290.  00:47BF                      
     291.  00:47BF                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     292.  00:47BF  CD D2 47            	CALL	WAITCE
     293.  00:47C2  F3                  	DI
     294.  00:47C3  3E 20               	LD	A,$20
     295.  00:47C5  D3 99               	OUT	($99),A
     296.  00:47C7  3E 91               	LD	A,$80+17
     297.  00:47C9  D3 99               	OUT	($99),A
     298.  00:47CB  FB                  	EI
     299.  00:47CC  01 9B 0F            	LD	BC,$0F9B
     300.  00:47CF  ED B3               	OTIR
     301.  00:47D1  C9                  	RET
     302.  00:47D2                      
     303.  00:47D2                      WAITCE:				; WAITCE
     304.  00:47D2  3E 02               	LD	A,$02
     305.  00:47D4  F3                  	DI
     306.  00:47D5  D3 99               	OUT	($99),A
     307.  00:47D7  3E 8F               	LD	A,$80+15
     308.  00:47D9  D3 99               	OUT	($99),A
     309.  00:47DB  DB 99               	IN	A,($99)
     310.  00:47DD  1F                  	RRA
     311.  00:47DE  3E 00               	LD	A,$00
     312.  00:47E0  D3 99               	OUT	($99),A
     313.  00:47E2  3E 8F               	LD	A,$80+15
     314.  00:47E4  FB                  	EI
     315.  00:47E5  D3 99               	OUT	($99),A
     316.  00:47E7  38 E9               	JR	C,WAITCE
     317.  00:47E9  C9                  	RET
     318.  00:47EA                      
     319.  00:47EA                      ENASCR:				; Enable Screen
     320.  00:47EA  3A E0 F3            	LD	A,(VDP_01)
     321.  00:47ED  F6 40               	OR	%01000000
     322.  00:47EF  18 05               	JR	DISSCR.OUT
     323.  00:47F1                      
     324.  00:47F1                      DISSCR:				; Disable Screen
     325.  00:47F1  3A E0 F3            	LD	A,(VDP_01)
     326.  00:47F4  E6 BF               	AND	%10111111
     327.  00:47F6  32 E0 F3            .OUT:	LD	(VDP_01),A
     328.  00:47F9  F3                  	DI
     329.  00:47FA  D3 99               	OUT	($99),A
     330.  00:47FC  3E 81               	LD	A,$80+1
     331.  00:47FE  FB                  	EI
     332.  00:47FF  D3 99               	OUT	($99),A
     333.  00:4801  C9                  	RET
     334.  00:4802                      
     335.  00:4802                      ENASPR:				; Enable Sprites
     336.  00:4802  3A E7 FF            	LD	A,(VDP_08)
     337.  00:4805  E6 FD               	AND	%11111101
     338.  00:4807  18 05               	JR	DISSPR.OUT
     339.  00:4809                      
     340.  00:4809                      DISSPR:				; Disable Sprites
     341.  00:4809  3A E7 FF            	LD	A,(VDP_08)
     342.  00:480C  F6 02               	OR	%00000010
     343.  00:480E  32 E7 FF            .OUT:	LD	(VDP_08),A
     344.  00:4811  F3                  	DI
     345.  00:4812  D3 99               	OUT	($99),A
     346.  00:4814  3E 88               	LD	A,$80+8
     347.  00:4816  FB                  	EI
     348.  00:4817  D3 99               	OUT	($99),A
     349.  00:4819  C9                  	RET
     350.  00:481A                      
     351.  00:481A                      LIN192:				; Set 192 lines
     352.  00:481A  3A E8 FF            	LD	A,(VDP_09)
     353.  00:481D  F6 80               	OR	%10000000
     354.  00:481F  18 05               	JR	LIN212.OUT
     355.  00:4821                      
     356.  00:4821                      LIN212:				; Set 212 lines
     357.  00:4821  3A E8 FF            	LD	A,(VDP_09)
     358.  00:4824  E6 7F               	AND	%01111111
     359.  00:4826  32 E8 FF            .OUT:	LD	(VDP_09),A
     360.  00:4829  F3                  	DI
     361.  00:482A  D3 99               	OUT	($99),A
     362.  00:482C  3E 89               	LD	A,$80+9
     363.  00:482E  FB                  	EI
     364.  00:482F  D3 99               	OUT	($99),A
     365.  00:4831  C9                  	RET
     366.  00:4832                      ;
     367.  00:4832                      ; This lil' routine waits until the VDP is done copying.
     368.  00:4832                      ;
     369.  00:4832                      VDP_Ready:
     370.  00:4832  3E 02                   ld a,2
     371.  00:4834  F3                      di
     372.  00:4835  D3 99                   out (#99),a     ; select s#2
     373.  00:4837  3E 8F                   ld a,15+128
     374.  00:4839  D3 99                   out (#99),a
     375.  00:483B  DB 99                   in a,(#99)
     376.  00:483D  1F                      rra
     377.  00:483E  3E 00                   ld a,0          ; back to s#0, enable ints
     378.  00:4840  D3 99                   out (#99),a
     379.  00:4842  3E 8F                   ld a,15+128
     380.  00:4844  FB                      ei
     381.  00:4845  D3 99                   out (#99),a     ; loop if vdp not ready (CE)
     382.  00:4847  DA 32 48                jp c,VDP_Ready
     383.  00:484A  C9                      ret
     384.  00:484B                      
     385.  00:484B                      ;INPUT: A - ANDY'S MAX ENERGY
     386.  00:484B                      DRAW_ANDY_ENERGY:		
     387.  00:484B  11 00 00            	LD DE, 0
     388.  00:484E  FD 21 2B C0         	LD IY, energyDat
     389.  00:4852                          ;LD (IY + VDP_SX), 128      ; SXL - Tile 4
     390.  00:4852                          ;LD (IY+VDP_SY), 0      ; SYL	
     391.  00:4852                          ;LD (IY + VDP_DX), A     ; DXL    
     392.  00:4852  FD 36 06 C2             LD (IY + VDP_DY), 194      ; DYL    
     393.  00:4856  3A 03 C0            	LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)		; cargamos la energia de Andy
     394.  00:4859  FE 00               	CP 0
     395.  00:485B  28 32               	JR Z, .draw_empty_drops
     396.  00:485D                      	;LD A, 24  ; TESTS	
     397.  00:485D                      
     398.  00:485D                      .check_next_drop
     399.  00:485D  FE 04               	CP 4
     400.  00:485F  CA 7D 48            	JP Z, .draw_half_drop	
     401.  00:4862  FD 36 00 80         	LD (IY + VDP_SX), 128      ; SXL - Tile 4
     402.  00:4866  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     403.  00:4869  F5                  	PUSH AF
     404.  00:486A  7A                  	LD A, D
     405.  00:486B  C6 10               	ADD A, 16
     406.  00:486D  57                  	LD D, A 	
     407.  00:486E  21 2B C0            	LD HL, energyDat
     408.  00:4871  CD BF 47                CALL VDPCMD
     409.  00:4874  1C                  	INC E
     410.  00:4875  F1                  	POP AF
     411.  00:4876  D6 08               	SUB 8
     412.  00:4878  C2 5D 48            	JP NZ, .check_next_drop
     413.  00:487B                      	;ret
     414.  00:487B  18 12               	JR .draw_empty_drops
     415.  00:487D                      
     416.  00:487D                      .draw_half_drop		
     417.  00:487D  FD 36 00 90         	LD (IY + VDP_SX), 144      ; SXL - Tile 5
     418.  00:4881  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     419.  00:4884  7A                  	LD A, D
     420.  00:4885  C6 10               	ADD A, 16
     421.  00:4887  57                  	LD D, A 	
     422.  00:4888  21 2B C0                LD HL, energyDat
     423.  00:488B  CD BF 47                CALL VDPCMD
     424.  00:488E  1C                  	INC E
     425.  00:488F                      	;ret
     426.  00:488F                      
     427.  00:488F                      .draw_empty_drops
     428.  00:488F  21 10 40            		LD HL, ANDY_MAX_ENERGY
     429.  00:4892  ED 4B 1B C0         		LD BC, (current_level)
     430.  00:4896  06 00               		LD B,0
     431.  00:4898  09                  		ADD HL, BC
     432.  00:4899                      		;INC HL
     433.  00:4899  7E                  		LD A, (HL)
     434.  00:489A                      		;LD A, 24
     435.  00:489A  CB 3F CB 3F CB 3F   [3]     srl a       ;a/8
     436.  00:48A0  93                  		sub e
     437.  00:48A1  C8                  		ret Z		; si es cero volvemos, full energy
     438.  00:48A2                      .loop
     439.  00:48A2  FD 36 00 A0         		LD (IY + VDP_SX), 160      ; SXL - Tile 6
     440.  00:48A6  FD 72 04            		LD (IY + VDP_DX), D     ; DXL    
     441.  00:48A9  21 2B C0                	LD HL, energyDat
     442.  00:48AC  F5                  		PUSH AF
     443.  00:48AD  7A                  		LD A, D
     444.  00:48AE  C6 10               		ADD A, 16
     445.  00:48B0  57                  		LD D, A 			
     446.  00:48B1  CD BF 47                	CALL VDPCMD
     447.  00:48B4  F1                  		pop AF
     448.  00:48B5  3D                  		dec a
     449.  00:48B6  C2 A2 48            		jp nz, .loop
     450.  00:48B9  C9                  		ret
     451.  00:48BA                      		;ld a, (ENTITY_PLAYER_POINTER+3)	; Andy's energy
      27   00:48BA                          include "include\VDP_Data.asm"
       1.  00:48BA                      ; VDP COMMAND PARAMETER
       2.  00:48BA                      ;                               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:48BA                      tileDatROM:                 db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       3.  00:48BA  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D0 
       4.  00:48C9                      energyDatROM:               db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, ENERGY_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       4.  00:48C9  00 00 00 01 00 00 00 00 10 00 10 00 00 00 D0 
       5.  00:48D8                      DiagBoxToBackBufROM:        db	0, 0, 192, FRONT_BUFFER, 0, 0, 192, BACK_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       5.  00:48D8  00 00 C0 00 00 00 C0 02 FF 00 14 00 00 00 D0 
       6.  00:48E7                      DiagBoxToFrontkBufROM:      db	0, 0, 192, BACK_BUFFER, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       6.  00:48E7  00 00 C0 02 00 00 C0 00 FF 00 14 00 00 00 D0 
       7.  00:48F6                      DiagBoxClearROM:            db	0, 0, 192, TILES_PAGE, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       7.  00:48F6  00 00 C0 01 00 00 C0 00 FF 00 14 00 00 00 D0 
      28   00:4905                      ; SFX
      29   00:4905                          include	"include\PT3_player.s"
       1.  00:4905                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:4905                      		; --- Can be assembled with asMSX ---
       3.  00:4905                      		; --- ROM version: MSX-KUN        ---
       4.  00:4905                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:4905                      
       6.  00:4905                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:4905                      ;
       8.  00:4905                      ; This version of the replayer can be used with any note table
       9.  00:4905                      ; This version also allows the use of PT3 commands
      10.  00:4905                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:4905                      ;
      12.  00:4905                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:4905                      ;
      14.  00:4905                      ; ROM LENGTH: 1549 bytes
      15.  00:4905                      ; RAM LENGTH:  576 bytes
      16.  00:4905                      
      17.  00:4905                      
      18.  00:4905                      
      19.  00:4905                      ;SJASM version by BTV 2016
      20.  00:4905                      
      21.  00:4905                      
      22.  00:4905                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:4905                      
      24.  00:4905                      ;ChannelsVars
      25.  00:4905                      ;struc	CHNPRM
      26.  00:4905                      ;reset group
      27.  00:4905  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:4905  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:4905  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:4905  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:4905  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:4905  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:4905  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:4905  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:4905  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:4905                      ;reset group
      37.  00:4905                      
      38.  00:4905  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:4905                      
      40.  00:4905                      ;IX for PTDECOD here [+12]
      41.  00:4905  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:4905  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:4905  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:4905  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:4905  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:4905  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:4905  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:4905  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:4905                       ;Enabled - 0,SimpleGliss - 2
      50.  00:4905  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:4905  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:4905  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:4905  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:4905  (00:0017)           CHNPRM_Volume	equ 23	;RESB 1
      55.  00:4905  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:4905                      ;endstruc
      57.  00:4905                      
      58.  00:4905                      ;struc	AR
      59.  00:4905  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:4905  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:4905  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:4905  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:4905  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:4905  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:4905  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:4905  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:4905  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:4905  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:4905                      ;endstruc
      70.  00:4905                      
      71.  00:4905                      		; --- CODE STARTS HERE ---
      72.  00:4905                      
      73.  00:4905  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:4908  CB FE               		SET	7,[HL]
      75.  00:490A  CB 46               		BIT	0,[HL]
      76.  00:490C  C8                  		RET	Z
      77.  00:490D  E1                  		POP	HL
      78.  00:490E  21 79 F0            		LD	HL,DelyCnt
      79.  00:4911  34                  		INC	[HL]
      80.  00:4912  21 3D F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:4915  34                  		INC	[HL]
      82.  00:4916  AF                  PT3_MUTE:	XOR	A
      83.  00:4917  67                  		LD	H,A
      84.  00:4918  6F                  		LD	L,A
      85.  00:4919  32 47 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:491C  22 48 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:491F  C3 68 4E            		JP	ROUT_A0
      88.  00:4922                      
      89.  00:4922                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:4922  22 00 F0            		LD [PT3_MODADDR],HL
      91.  00:4925  E5                  		PUSH HL
      92.  00:4926  11 64 00            		LD DE,100
      93.  00:4929  19                  		ADD HL,DE
      94.  00:492A  7E                  		LD A,[HL]
      95.  00:492B  32 1B F0            		LD [PT3_Delay],A
      96.  00:492E  E5                  		PUSH HL
      97.  00:492F  DD E1               		POP IX
      98.  00:4931  19                  		ADD HL,DE
      99.  00:4932  22 02 F0            		LD [PT3_CrPsPtr],HL
     100.  00:4935  DD 5E 02            		LD E,[IX+102-100]
     101.  00:4938  19                  		ADD HL,DE
     102.  00:4939  23                  		INC HL
     103.  00:493A  22 17 F0            		LD [PT3_LPosPtr],HL
     104.  00:493D  D1                  		POP DE
     105.  00:493E  DD 6E 03            		LD L,[IX+103-100]
     106.  00:4941  DD 66 04            		LD H,[IX+104-100]
     107.  00:4944  19                  		ADD HL,DE
     108.  00:4945  22 19 F0            		LD [PT3_PatsPtr],HL
     109.  00:4948  21 A9 00            		LD HL,169
     110.  00:494B  19                  		ADD HL,DE
     111.  00:494C  22 06 F0            		LD [PT3_OrnPtrs],HL
     112.  00:494F  21 69 00            		LD HL,105
     113.  00:4952  19                  		ADD HL,DE
     114.  00:4953  22 04 F0            		LD [PT3_SAMPTRS],HL
     115.  00:4956  21 00 F0            		LD HL,PT3_SETUP
     116.  00:4959  CB BE               		RES 7,[HL]
     117.  00:495B                      
     118.  00:495B                      		; --- note table data depacker ---
     119.  00:495B                      		; Depacks first 12 tones of each tone table
     120.  00:495B                      
     121.  00:495B  11 DC 4E            		LD DE,T_PACK
     122.  00:495E  01 B0 F1            		LD BC,T1_+(2*49)-1
     123.  00:4961  1A                  .TP_0:		LD A,[DE]
     124.  00:4962  13                  		INC DE
     125.  00:4963  FE 1E               		CP 15*2
     126.  00:4965  30 06               		JR NC,.TP_1
     127.  00:4967  67                  		LD H,A
     128.  00:4968  1A                  		LD A,[DE]
     129.  00:4969  6F                  		LD L,A
     130.  00:496A  13                  		INC DE
     131.  00:496B  18 07               		JR .TP_2
     132.  00:496D  D5                  .TP_1:		PUSH DE
     133.  00:496E  16 00               		LD D,0
     134.  00:4970  5F                  		LD E,A
     135.  00:4971  19                  		ADD HL,DE
     136.  00:4972  19                  		ADD HL,DE
     137.  00:4973  D1                  		POP DE
     138.  00:4974  7C                  .TP_2:		LD A,H
     139.  00:4975  02                  		LD [BC],A
     140.  00:4976  0B                  		DEC BC
     141.  00:4977  7D                  		LD A,L
     142.  00:4978  02                  		LD [BC],A
     143.  00:4979  0B                  		DEC BC
     144.  00:497A  D6 F0               		SUB $F0
     145.  00:497C  20 E3               		JR NZ,.TP_0
     146.  00:497E                      
     147.  00:497E                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:497E  21 22 F0            		LD HL,VARS
     149.  00:4981  77                  		LD [HL],A
     150.  00:4982  11 23 F0            		LD DE,VARS+1
     151.  00:4985  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:4988  ED B0               		LDIR
     153.  00:498A                      
     154.  00:498A  3C                  		INC A
     155.  00:498B  32 79 F0            		LD [DelyCnt],A
     156.  00:498E  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:4991  22 3D F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:4994  22 5A F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4997  22 77 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:499A                      
     161.  00:499A  21 D8 4E            		LD HL,EMPTYSAMORN
     162.  00:499D  22 11 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:49A0  22 2F F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:49A3  22 4C F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:49A6  22 69 F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:49A9                      
     167.  00:49A9  22 31 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:49AC  22 4E F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:49AF  22 6B F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:49B2                      					    ;also EMPTYSAMORN comment
     171.  00:49B2                      
     172.  00:49B2                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:49B2  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:49B5  17                  		RLA
     175.  00:49B6  E6 07               		AND 7
     176.  00:49B8  21 88 4E            		LD HL,NT_DATA
     177.  00:49BB  D5                  		PUSH DE
     178.  00:49BC  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:49BD  87                  		ADD A,A
     180.  00:49BE  5F                  		LD E,A
     181.  00:49BF  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:49C0  5E                  		LD E,[HL]
     183.  00:49C1  23                  		INC HL
     184.  00:49C2  CB 3B               		SRL E
     185.  00:49C4  9F                  		SBC A,A
     186.  00:49C5  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:49C7  32 20 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:49CA  3E C9               		LD A,$C9		; RET CODE
     189.  00:49CC  32 21 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:49CF  EB                  		EX DE,HL
     191.  00:49D0  C1                  		POP BC ;BC=T1_
     192.  00:49D1  09                  		ADD HL,BC
     193.  00:49D2                      
     194.  00:49D2  1A                  		LD A,[DE]                           
     195.  00:49D3                      
     196.  00:49D3  01 98 4E            		LD BC,T_
     197.  00:49D6  81                  		ADD A,C
     198.  00:49D7  4F                  		LD C,A
     199.  00:49D8  88                  		ADC A,B
     200.  00:49D9                      
     201.  00:49D9  91                  		SUB C
     202.  00:49DA  47                  		LD B,A
     203.  00:49DB  C5                  		PUSH BC
     204.  00:49DC  11 7F F0            		LD DE,NT_
     205.  00:49DF  D5                  		PUSH DE
     206.  00:49E0                      
     207.  00:49E0  06 0C               		LD B,12
     208.  00:49E2  C5                  .L1:		PUSH BC
     209.  00:49E3  4E                  		LD C,[HL]
     210.  00:49E4  23                  		INC HL
     211.  00:49E5  E5                  		PUSH HL
     212.  00:49E6  46                  		LD B,[HL]
     213.  00:49E7                      
     214.  00:49E7  D5                  		PUSH DE
     215.  00:49E8  EB                  		EX DE,HL
     216.  00:49E9  11 17 00            		LD DE,23
     217.  00:49EC  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:49EF                      
     219.  00:49EF  CB 38               .L2:		SRL B
     220.  00:49F1  CB 19               		RR C
     221.  00:49F3  CD 20 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:49F6  79                  		LD A,C
     223.  00:49F7  8A                  		ADC A,D	;=ADC 0
     224.  00:49F8  77                  		LD [HL],A
     225.  00:49F9  23                  		INC HL
     226.  00:49FA  78                  		LD A,B
     227.  00:49FB  8A                  		ADC A,D
     228.  00:49FC  77                  		LD [HL],A
     229.  00:49FD  19                  		ADD HL,DE
     230.  00:49FE  DD 25               		db $DD,$25	;DEC XH
     231.  00:4A00  20 ED               		JR NZ,.L2
     232.  00:4A02                      
     233.  00:4A02  D1                  		POP DE
     234.  00:4A03  13                  		INC DE
     235.  00:4A04  13                  		INC DE
     236.  00:4A05  E1                  		POP HL
     237.  00:4A06  23                  		INC HL
     238.  00:4A07  C1                  		POP BC
     239.  00:4A08  10 D8               		DJNZ .L1
     240.  00:4A0A                      
     241.  00:4A0A  E1                  		POP HL
     242.  00:4A0B  D1                  		POP DE
     243.  00:4A0C                      
     244.  00:4A0C  7B                  		LD A,E
     245.  00:4A0D  D5                  		PUSH DE
     246.  00:4A0E  11 A4 4E            		LD DE,TCOLD_1
     247.  00:4A11  BB                  		CP E
     248.  00:4A12  D1                  		POP DE
     249.  00:4A13  20 05               		JR NZ,.CORR_1
     250.  00:4A15  3E FD               		LD A,$FD
     251.  00:4A17  32 AD F0            		LD [NT_+$2E],A
     252.  00:4A1A                      
     253.  00:4A1A  1A                  .CORR_1:	LD A,[DE]
     254.  00:4A1B  A7                  		AND A
     255.  00:4A1C  28 11               		JR Z,.TC_EXIT
     256.  00:4A1E  1F                  		RRA
     257.  00:4A1F  F5                  		PUSH AF
     258.  00:4A20  87                  		ADD A,A
     259.  00:4A21  4F                  		LD C,A
     260.  00:4A22  09                  		ADD HL,BC
     261.  00:4A23  F1                  		POP AF
     262.  00:4A24  30 02               		JR NC,.CORR_2
     263.  00:4A26  35                  		DEC [HL]
     264.  00:4A27  35                  		DEC [HL]
     265.  00:4A28  34                  .CORR_2:	INC [HL]
     266.  00:4A29  A7                  		AND A
     267.  00:4A2A  ED 42               		SBC HL,BC
     268.  00:4A2C  13                  		INC DE
     269.  00:4A2D  18 EB               		JR .CORR_1
     270.  00:4A2F                      
     271.  00:4A2F                      .TC_EXIT:	;POP AF
     272.  00:4A2F                      
     273.  00:4A2F                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:4A2F  21 11 00            		ld	hl,$11
     275.  00:4A32  54                  		ld	d,h
     276.  00:4A33  5C                  		ld	e,h
     277.  00:4A34  DD 21 4F F1         		ld	IX,VT_+16
     278.  00:4A38  06 0F               		ld	b,15
     279.  00:4A3A  E5                  .INITV1:	push	hl
     280.  00:4A3B  19                  		add	hl,de
     281.  00:4A3C  EB                  		ex	de,hl
     282.  00:4A3D  ED 62               		sbc	hl,hl
     283.  00:4A3F  48                  		ld	c,b
     284.  00:4A40  06 10               		ld	b,16
     285.  00:4A42  7D                  .INITV2:	ld	a,l
     286.  00:4A43  17                  		rla
     287.  00:4A44  7C                  		ld	a,h
     288.  00:4A45  CE 00               		adc	a,0
     289.  00:4A47  DD 77 00            		ld	[ix],a
     290.  00:4A4A  DD 23               		inc	ix
     291.  00:4A4C  19                  		add	hl,de
     292.  00:4A4D  10 F3               		djnz	.INITV2
     293.  00:4A4F  E1                  		pop	hl
     294.  00:4A50  7B                  		ld	a,e
     295.  00:4A51  FE 77               		cp	$77
     296.  00:4A53  20 01               		jr	nz,.INITV3
     297.  00:4A55  1C                  		inc	e
     298.  00:4A56  41                  .INITV3:	ld	b,c
     299.  00:4A57  10 E1               		djnz	.INITV1
     300.  00:4A59                      
     301.  00:4A59  C9                  		RET
     302.  00:4A5A                      
     303.  00:4A5A                      		;pattern decoder
     304.  00:4A5A  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:4A5E  CD E4 4B            		CALL SETORN
     306.  00:4A61  0A                  		LD A,[BC]
     307.  00:4A62  03                  		INC BC
     308.  00:4A63  0F                  		RRCA
     309.  00:4A64                      
     310.  00:4A64  87                  PD_SAM:		ADD A,A
     311.  00:4A65  5F                  PD_SAM_:	LD E,A
     312.  00:4A66  16 00               		LD D,0
     313.  00:4A68  2A 04 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:4A6B  19                  		ADD HL,DE
     315.  00:4A6C  5E                  		LD E,[HL]
     316.  00:4A6D  23                  		INC HL
     317.  00:4A6E  56                  		LD D,[HL]
     318.  00:4A6F  2A 00 F0            		LD HL,[PT3_MODADDR]
     319.  00:4A72  19                  		ADD HL,DE
     320.  00:4A73  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:4A76  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:4A79  18 41               		JR PD_LOOP
     323.  00:4A7B                      
     324.  00:4A7B  07                  PD_VOL:		RLCA
     325.  00:4A7C  07                  		RLCA
     326.  00:4A7D  07                  		RLCA
     327.  00:4A7E  07                  		RLCA
     328.  00:4A7F  DD 77 0B            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:4A82  18 3B               		JR PD_LP2
     330.  00:4A84                      	
     331.  00:4A84  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:4A87  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:4A8A  18 33               		JR PD_LP2
     334.  00:4A8C                      
     335.  00:4A8C  3D                  PD_SorE:	DEC A
     336.  00:4A8D  20 07               		JR NZ,PD_ENV
     337.  00:4A8F  0A                  		LD A,[BC]
     338.  00:4A90  03                  		INC BC
     339.  00:4A91  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:4A94  18 29               		JR PD_LP2
     341.  00:4A96                      
     342.  00:4A96  CD C8 4B            PD_ENV:		CALL SETENV
     343.  00:4A99  18 24               		JR PD_LP2
     344.  00:4A9B                      
     345.  00:4A9B  CD E4 4B            PD_ORN:		CALL SETORN
     346.  00:4A9E  18 1C               		JR PD_LOOP
     347.  00:4AA0                             
     348.  00:4AA0  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:4AA3  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4AA6  C4 C8 4B            		CALL NZ,SETENV
     351.  00:4AA9  0A                  		LD A,[BC]
     352.  00:4AAA  03                  		INC BC
     353.  00:4AAB  18 B8               		JR PD_SAM_
     354.  00:4AAD                      
     355.  00:4AAD  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:4AB0  32 0E F0            		LD [PT3_PrNote],A
     357.  00:4AB3  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4AB6  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4AB9  22 0F F0            		LD [PT3_PrSlide],HL
     360.  00:4ABC                      
     361.  00:4ABC  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:4ABF  0A                  PD_LP2:		LD A,[BC]
     363.  00:4AC0  03                  		INC BC
     364.  00:4AC1  83                  		ADD A,E
     365.  00:4AC2  38 96               		JR C,PD_OrSm
     366.  00:4AC4  82                  		ADD A,D
     367.  00:4AC5  28 4A               		JR Z,PD_FIN
     368.  00:4AC7  38 9B               		JR C,PD_SAM
     369.  00:4AC9  83                  		ADD A,E
     370.  00:4ACA  28 25               		JR Z,PD_REL
     371.  00:4ACC  38 AD               		JR C,PD_VOL
     372.  00:4ACE  83                  		ADD A,E
     373.  00:4ACF  28 B3               		JR Z,PD_EOff
     374.  00:4AD1  38 B9               		JR C,PD_SorE
     375.  00:4AD3  C6 60               		ADD A,96
     376.  00:4AD5  38 20               		JR C,PD_NOTE
     377.  00:4AD7  83                  		ADD A,E
     378.  00:4AD8  38 C1               		JR C,PD_ORN
     379.  00:4ADA  82                  		ADD A,D
     380.  00:4ADB  38 0F               		JR C,PD_NOIS
     381.  00:4ADD  83                  		ADD A,E
     382.  00:4ADE  38 C0               		JR C,PD_ESAM
     383.  00:4AE0  87                  		ADD A,A
     384.  00:4AE1  5F                  		LD E,A
     385.  00:4AE2  21 1D 2B            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:4AE5  19                  		ADD HL,DE
     387.  00:4AE6  5E                  		LD E,[HL]
     388.  00:4AE7  23                  		INC HL
     389.  00:4AE8  56                  		LD D,[HL]
     390.  00:4AE9  D5                  		PUSH DE
     391.  00:4AEA  18 D0               		JR PD_LOOP
     392.  00:4AEC                      
     393.  00:4AEC  32 7D F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:4AEF  18 CE               		JR PD_LP2
     395.  00:4AF1                      
     396.  00:4AF1  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:4AF5  18 08               		JR PD_RES
     398.  00:4AF7                      	
     399.  00:4AF7  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:4AFA  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:4AFE  AF                  		XOR A
     402.  00:4AFF                      
     403.  00:4AFF  ED 73 08 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:4B03  DD F9               		LD SP,IX
     405.  00:4B05  67                  		LD H,A
     406.  00:4B06  6F                  		LD L,A
     407.  00:4B07  E5                  		PUSH HL
     408.  00:4B08  E5                  		PUSH HL
     409.  00:4B09  E5                  		PUSH HL
     410.  00:4B0A  E5                  		PUSH HL
     411.  00:4B0B  E5                  		PUSH HL
     412.  00:4B0C  E5                  		PUSH HL
     413.  00:4B0D  ED 7B 08 F0         		LD SP,[PT3_PDSP]
     414.  00:4B11                      
     415.  00:4B11  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:4B14  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:4B17  C9                  		RET
     418.  00:4B18                      
     419.  00:4B18  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:4B1C  0A                  		LD A,[BC]
     421.  00:4B1D  03                  		INC BC
     422.  00:4B1E                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:4B1E                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:4B1E  03                  		INC BC
     425.  00:4B1F  03                  		INC BC
     426.  00:4B20  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:4B23  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:4B26  11 7F F0            		LD DE,NT_
     429.  00:4B29  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:4B2C  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:4B2F  87                  		ADD A,A
     432.  00:4B30  6F                  		LD L,A
     433.  00:4B31  26 00               		LD H,0
     434.  00:4B33  19                  		ADD HL,DE
     435.  00:4B34  7E                  		LD A,[HL]
     436.  00:4B35  23                  		INC HL
     437.  00:4B36  66                  		LD H,[HL]
     438.  00:4B37  6F                  		LD L,A
     439.  00:4B38  E5                  		PUSH HL
     440.  00:4B39  3A 0E F0            		LD A,[PT3_PrNote]
     441.  00:4B3C  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:4B3F  87                  		ADD A,A
     443.  00:4B40  6F                  		LD L,A
     444.  00:4B41  26 00               		LD H,0
     445.  00:4B43  19                  		ADD HL,DE
     446.  00:4B44  5E                  		LD E,[HL]
     447.  00:4B45  23                  		INC HL
     448.  00:4B46  56                  		LD D,[HL]
     449.  00:4B47  E1                  		POP HL
     450.  00:4B48  ED 52               		SBC HL,DE
     451.  00:4B4A  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:4B4D  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:4B50  ED 5B 0F F0         		LD DE,[PT3_PrSlide]
     454.  00:4B54  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4B57  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4B5A  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4B5B  03                  		INC BC
     458.  00:4B5C  08                  		EX AF,AF'
     459.  00:4B5D  0A                  		LD A,[BC]
     460.  00:4B5E  03                  		INC BC
     461.  00:4B5F  A7                  		AND A
     462.  00:4B60  28 01               		JR Z,.NOSIG
     463.  00:4B62  EB                  		EX DE,HL
     464.  00:4B63  ED 52               .NOSIG:	SBC HL,DE
     465.  00:4B65  F2 6D 4B            		JP P,SET_STP
     466.  00:4B68  2F                  		CPL
     467.  00:4B69  08                  		EX AF,AF'
     468.  00:4B6A  ED 44               		NEG
     469.  00:4B6C  08                  		EX AF,AF'
     470.  00:4B6D  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:4B70  08                  		EX AF,AF'
     472.  00:4B71  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:4B74  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4B78  C9                  		RET
     475.  00:4B79                      
     476.  00:4B79  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4B7D  0A                  		LD A,[BC]
     478.  00:4B7E  03                  		INC BC
     479.  00:4B7F  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:4B82  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:4B85  0A                  		LD A,[BC]
     482.  00:4B86  03                  		INC BC
     483.  00:4B87  08                  		EX AF,AF'
     484.  00:4B88  0A                  		LD A,[BC]
     485.  00:4B89  03                  		INC BC
     486.  00:4B8A  18 E1               		JR SET_STP
     487.  00:4B8C                      
     488.  00:4B8C  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4B8D  03                  		INC BC
     490.  00:4B8E  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:4B91  C9                  		RET
     492.  00:4B92                      
     493.  00:4B92  0A                  C_ORPOS:	LD A,[BC]
     494.  00:4B93  03                  		INC BC
     495.  00:4B94  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4B97  C9                  		RET
     497.  00:4B98                      
     498.  00:4B98  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4B99  03                  		INC BC
     500.  00:4B9A  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4B9D  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:4BA0  0A                  		LD A,[BC]
     503.  00:4BA1  03                  		INC BC
     504.  00:4BA2  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:4BA5  AF                  		XOR A
     506.  00:4BA6  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4BA9  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4BAC  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4BAF  C9                  		RET
     510.  00:4BB0                      
     511.  00:4BB0  0A                  C_ENGLS:	LD A,[BC]
     512.  00:4BB1  03                  		INC BC
     513.  00:4BB2  32 1D F0            		LD [PT3_Env_Del],A
     514.  00:4BB5  32 7C F0            		LD [CurEDel],A
     515.  00:4BB8  0A                  		LD A,[BC]
     516.  00:4BB9  03                  		INC BC
     517.  00:4BBA  6F                  		LD L,A
     518.  00:4BBB  0A                  		LD A,[BC]
     519.  00:4BBC  03                  		INC BC
     520.  00:4BBD  67                  		LD H,A
     521.  00:4BBE  22 1E F0            		LD [PT3_ESldAdd],HL
     522.  00:4BC1  C9                  		RET
     523.  00:4BC2                      
     524.  00:4BC2  0A                  C_DELAY:	LD A,[BC]
     525.  00:4BC3  03                  		INC BC
     526.  00:4BC4  32 1B F0            		LD [PT3_Delay],A
     527.  00:4BC7  C9                  		RET
     528.  00:4BC8                      	
     529.  00:4BC8  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4BCB  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:4BCE  0A                  		LD A,[BC]
     532.  00:4BCF  03                  		INC BC
     533.  00:4BD0  67                  		LD H,A
     534.  00:4BD1  0A                  		LD A,[BC]
     535.  00:4BD2  03                  		INC BC
     536.  00:4BD3  6F                  		LD L,A
     537.  00:4BD4  22 4D F1            		LD [EnvBase],HL
     538.  00:4BD7  AF                  		XOR A
     539.  00:4BD8  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4BDB  32 7C F0            		LD [CurEDel],A
     541.  00:4BDE  67                  		LD H,A
     542.  00:4BDF  6F                  		LD L,A
     543.  00:4BE0  22 7A F0            		LD [CurESld],HL
     544.  00:4BE3  C9                  C_NOP:		RET
     545.  00:4BE4                      
     546.  00:4BE4  87                  SETORN:		ADD A,A
     547.  00:4BE5  5F                  		LD E,A
     548.  00:4BE6  16 00               		LD D,0
     549.  00:4BE8  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4BEB  2A 06 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:4BEE  19                  		ADD HL,DE
     552.  00:4BEF  5E                  		LD E,[HL]
     553.  00:4BF0  23                  		INC HL
     554.  00:4BF1  56                  		LD D,[HL]
     555.  00:4BF2  2A 00 F0            		LD HL,[PT3_MODADDR]
     556.  00:4BF5  19                  		ADD HL,DE
     557.  00:4BF6  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:4BF9  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:4BFC  C9                  		RET
     560.  00:4BFD                      
     561.  00:4BFD                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:4BFD  E3 4B               SPCCOMS:	dw C_NOP
     563.  00:4BFF  79 4B               		dw C_GLISS
     564.  00:4C01  18 4B               		dw C_PORTM
     565.  00:4C03  8C 4B               		dw C_SMPOS
     566.  00:4C05  92 4B               		dw C_ORPOS
     567.  00:4C07  98 4B               		dw C_VIBRT
     568.  00:4C09  E3 4B               		dw C_NOP
     569.  00:4C0B  E3 4B               		dw C_NOP
     570.  00:4C0D  B0 4B               		dw C_ENGLS
     571.  00:4C0F  C2 4B               		dw C_DELAY
     572.  00:4C11  E3 4B               		dw C_NOP
     573.  00:4C13  E3 4B               		dw C_NOP
     574.  00:4C15  E3 4B               		dw C_NOP
     575.  00:4C17  E3 4B               		dw C_NOP
     576.  00:4C19  E3 4B               		dw C_NOP
     577.  00:4C1B  E3 4B               		dw C_NOP
     578.  00:4C1D                      
     579.  00:4C1D  AF                  CHREGS:		XOR A
     580.  00:4C1E  32 49 F1            		LD [AYREGS+AR_AmplC],A
     581.  00:4C21  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:4C25  E5                  		PUSH HL
     583.  00:4C26  CA 4C 4D            		JP Z,.CH_EXIT
     584.  00:4C29  ED 73 0A F0         		LD [PT3_CSP],SP
     585.  00:4C2D  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:4C30  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:4C33  F9                  		LD SP,HL
     588.  00:4C34  D1                  		POP DE
     589.  00:4C35  67                  		LD H,A
     590.  00:4C36  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:4C39  6F                  		LD L,A
     592.  00:4C3A  39                  		ADD HL,SP
     593.  00:4C3B  3C                  		INC A
     594.  00:4C3C  BA                  		CP D
     595.  00:4C3D  38 01               		JR C,.CH_ORPS
     596.  00:4C3F  7B                  		LD A,E
     597.  00:4C40  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:4C43  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:4C46  86                  		ADD A,[HL]
     600.  00:4C47  F2 4B 4C            		JP P,.CH_NTP
     601.  00:4C4A  AF                  		XOR A
     602.  00:4C4B  FE 60               .CH_NTP:	CP 96
     603.  00:4C4D  38 02               		JR C,.CH_NOK
     604.  00:4C4F  3E 5F               		LD A,95
     605.  00:4C51  87                  .CH_NOK:	ADD A,A
     606.  00:4C52  08                  		EX AF,AF'
     607.  00:4C53  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4C56  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4C59  F9                  		LD SP,HL
     610.  00:4C5A  D1                  		POP DE
     611.  00:4C5B  26 00               		LD H,0
     612.  00:4C5D  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4C60  47                  		LD B,A
     614.  00:4C61  87                  		ADD A,A
     615.  00:4C62  87                  		ADD A,A
     616.  00:4C63  6F                  		LD L,A
     617.  00:4C64  39                  		ADD HL,SP
     618.  00:4C65  F9                  		LD SP,HL
     619.  00:4C66  78                  		LD A,B
     620.  00:4C67  3C                  		INC A
     621.  00:4C68  BA                  		CP D
     622.  00:4C69  38 01               		JR C,.CH_SMPS
     623.  00:4C6B  7B                  		LD A,E
     624.  00:4C6C  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4C6F  C1                  		POP BC
     626.  00:4C70  E1                  		POP HL
     627.  00:4C71  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4C74  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4C77  19                  		ADD HL,DE
     630.  00:4C78  CB 70               		BIT 6,B
     631.  00:4C7A  28 06               		JR Z,.CH_NOAC
     632.  00:4C7C  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4C7F  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4C82  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4C83  08                  		EX AF,AF'
     636.  00:4C84  6F                  		LD L,A
     637.  00:4C85  26 00               		LD H,0
     638.  00:4C87  31 7F F0            		LD SP,NT_
     639.  00:4C8A  39                  		ADD HL,SP
     640.  00:4C8B  F9                  		LD SP,HL
     641.  00:4C8C  E1                  		POP HL
     642.  00:4C8D  19                  		ADD HL,DE
     643.  00:4C8E  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4C91  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4C94  19                  		ADD HL,DE
     646.  00:4C95  ED 7B 0A F0         		LD SP,[PT3_CSP]
     647.  00:4C99  E3                  		EX [SP],HL
     648.  00:4C9A  AF                  		XOR A
     649.  00:4C9B  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4C9E  28 3E               		JR Z,.CH_AMP
     651.  00:4CA0  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4CA3  20 39               		JR NZ,.CH_AMP
     653.  00:4CA5  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4CA8  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4CAB  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4CAE  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4CB1  7C                  		LD A,H
     658.  00:4CB2  19                  		ADD HL,DE
     659.  00:4CB3  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4CB6  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4CB9  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4CBD  20 1F               		JR NZ,.CH_AMP
     663.  00:4CBF  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4CC2  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4CC5  A7                  		AND A
     666.  00:4CC6  28 01               		JR Z,.CH_STPP
     667.  00:4CC8  EB                  		EX DE,HL
     668.  00:4CC9  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4CCB  FA DE 4C            		JP M,.CH_AMP
     670.  00:4CCE  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4CD1  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4CD4  AF                  		XOR A
     673.  00:4CD5  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4CD8  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4CDB  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4CDE  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4CE1  CB 79               		BIT 7,C
     678.  00:4CE3  28 13               		JR Z,.CH_NOAM
     679.  00:4CE5  CB 71               		BIT 6,C
     680.  00:4CE7  28 07               		JR Z,.CH_AMIN
     681.  00:4CE9  FE 0F               		CP 15
     682.  00:4CEB  28 0B               		JR Z,.CH_NOAM
     683.  00:4CED  3C                  		INC A
     684.  00:4CEE  18 05               		JR .CH_SVAM
     685.  00:4CF0  FE F1               .CH_AMIN:	CP -15
     686.  00:4CF2  28 04               		JR Z,.CH_NOAM
     687.  00:4CF4  3D                  		DEC A
     688.  00:4CF5  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4CF8  6F                  .CH_NOAM:	LD L,A
     690.  00:4CF9  78                  		LD A,B
     691.  00:4CFA  E6 0F               		AND 15
     692.  00:4CFC  85                  		ADD A,L
     693.  00:4CFD  F2 01 4D            		JP P,.CH_APOS
     694.  00:4D00  AF                  		XOR A
     695.  00:4D01  FE 10               .CH_APOS:	CP 16
     696.  00:4D03  38 02               		JR C,.CH_VOL
     697.  00:4D05  3E 0F               		LD A,15
     698.  00:4D07  DD B6 17            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4D0A  6F                  		LD L,A
     700.  00:4D0B  26 00               		LD H,0
     701.  00:4D0D  11 3F F1            		LD DE,VT_
     702.  00:4D10  19                  		ADD HL,DE
     703.  00:4D11  7E                  		LD A,[HL]
     704.  00:4D12  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4D14  20 03               		JR NZ,.CH_NOEN
     706.  00:4D16  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4D19  32 49 F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4D1C  CB 78               		BIT 7,B
     709.  00:4D1E  79                  		LD A,C
     710.  00:4D1F  28 19               		JR Z,.NO_ENSL
     711.  00:4D21  17                  		RLA
     712.  00:4D22  17                  		RLA
     713.  00:4D23  CB 2F               		SRA A
     714.  00:4D25  CB 2F               		SRA A
     715.  00:4D27  CB 2F               		SRA A
     716.  00:4D29  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4D2C  CB 68               		BIT 5,B
     718.  00:4D2E  28 03               		JR Z,.NO_ENAC
     719.  00:4D30  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4D33  21 1C F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4D36  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4D37                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4D37  77                  		LD [HL],A
     724.  00:4D38  18 0E               		JR .CH_MIX
     725.  00:4D3A  1F                  .NO_ENSL:	RRA
     726.  00:4D3B  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4D3E  32 7E F0            		LD [AddToNs],A
     728.  00:4D41  CB 68               		BIT 5,B
     729.  00:4D43  28 03               		JR Z,.CH_MIX
     730.  00:4D45  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4D48  78                  .CH_MIX:	LD A,B
     732.  00:4D49  1F                  		RRA
     733.  00:4D4A  E6 48               		AND $48
     734.  00:4D4C  21 46 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4D4F  B6                  		OR [HL]
     736.  00:4D50  0F                  		RRCA
     737.  00:4D51  77                  		LD [HL],A
     738.  00:4D52  E1                  		POP HL
     739.  00:4D53  AF                  		XOR A
     740.  00:4D54  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4D57  C8                  		RET Z
     742.  00:4D58  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4D5B  C0                  		RET NZ
     744.  00:4D5C  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4D5F  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4D62  1F                  		RRA
     747.  00:4D63  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4D66  38 03               		JR C,.CH_ONDL
     749.  00:4D68  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4D6B  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4D6E  C9                  		RET
     752.  00:4D6F                      
     753.  00:4D6F  AF                  PT3_PLAY:	XOR A
     754.  00:4D70  32 1C F0            		LD [PT3_AddToEn],A
     755.  00:4D73  32 46 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:4D76  3D                  		DEC A
     757.  00:4D77  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:4D7A  21 79 F0            		LD HL,DelyCnt
     759.  00:4D7D  35                  		DEC [HL]
     760.  00:4D7E  C2 05 4E            		JP NZ,.PL2
     761.  00:4D81  21 3D F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4D84  35                  		DEC [HL]
     763.  00:4D85  20 4E               		JR NZ,.PL1B
     764.  00:4D87  ED 4B 11 F0         		LD BC,[PT3_AdInPtA]
     765.  00:4D8B  0A                  		LD A,[BC]
     766.  00:4D8C  A7                  		AND A
     767.  00:4D8D  20 3B               		JR NZ,.PL1A
     768.  00:4D8F  57                  		LD D,A
     769.  00:4D90  32 7D F0            		LD [Ns_Base],A
     770.  00:4D93  2A 02 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:4D96  23                  		INC HL
     772.  00:4D97  7E                  		LD A,[HL]
     773.  00:4D98  3C                  		INC A
     774.  00:4D99  20 08               		JR NZ,.PLNLP
     775.  00:4D9B  CD 05 49            		CALL CHECKLP
     776.  00:4D9E  2A 17 F0            		LD HL,[PT3_LPosPtr]
     777.  00:4DA1  7E                  		LD A,[HL]
     778.  00:4DA2  3C                  		INC A
     779.  00:4DA3  22 02 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4DA6  3D                  		DEC A
     781.  00:4DA7  87                  		ADD A,A
     782.  00:4DA8  5F                  		LD E,A
     783.  00:4DA9  CB 12               		RL D
     784.  00:4DAB  2A 19 F0            		LD HL,[PT3_PatsPtr]
     785.  00:4DAE  19                  		ADD HL,DE
     786.  00:4DAF  ED 5B 00 F0         		LD DE,[PT3_MODADDR]
     787.  00:4DB3  ED 73 0C F0         		LD [PT3_PSP],SP
     788.  00:4DB7  F9                  		LD SP,HL
     789.  00:4DB8  E1                  		POP HL
     790.  00:4DB9  19                  		ADD HL,DE
     791.  00:4DBA  44                  		LD B,H
     792.  00:4DBB  4D                  		LD C,L
     793.  00:4DBC  E1                  		POP HL
     794.  00:4DBD  19                  		ADD HL,DE
     795.  00:4DBE  22 13 F0            		LD [PT3_AdInPtB],HL
     796.  00:4DC1  E1                  		POP HL
     797.  00:4DC2  19                  		ADD HL,DE
     798.  00:4DC3  22 15 F0            		LD [PT3_AdInPtC],HL
     799.  00:4DC6  ED 7B 0C F0         		LD SP,[PT3_PSP]
     800.  00:4DCA                      
     801.  00:4DCA  DD 21 2E F0         .PL1A:		LD IX,ChanA+12
     802.  00:4DCE  CD AD 4A            		CALL PTDECOD
     803.  00:4DD1  ED 43 11 F0         		LD [PT3_AdInPtA],BC
     804.  00:4DD5                      
     805.  00:4DD5  21 5A F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4DD8  35                  		DEC [HL]
     807.  00:4DD9  20 0F               		JR NZ,.PL1C
     808.  00:4DDB  DD 21 4B F0         		LD IX,ChanB+12
     809.  00:4DDF  ED 4B 13 F0         		LD BC,[PT3_AdInPtB]
     810.  00:4DE3  CD AD 4A            		CALL PTDECOD
     811.  00:4DE6  ED 43 13 F0         		LD [PT3_AdInPtB],BC
     812.  00:4DEA                      
     813.  00:4DEA  21 77 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4DED  35                  		DEC [HL]
     815.  00:4DEE  20 0F               		JR NZ,.PL1D
     816.  00:4DF0  DD 21 68 F0         		LD IX,ChanC+12
     817.  00:4DF4  ED 4B 15 F0         		LD BC,[PT3_AdInPtC]
     818.  00:4DF8  CD AD 4A            		CALL PTDECOD
     819.  00:4DFB  ED 43 15 F0         		LD [PT3_AdInPtC],BC
     820.  00:4DFF                      
     821.  00:4DFF  3A 1B F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:4E02  32 79 F0            		LD [DelyCnt],A
     823.  00:4E05                      
     824.  00:4E05  DD 21 22 F0         .PL2:		LD IX,ChanA
     825.  00:4E09  2A 3F F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:4E0C  CD 1D 4C            		CALL CHREGS
     827.  00:4E0F  22 3F F1            		LD [AYREGS+AR_TonA],HL
     828.  00:4E12  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:4E15  32 47 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:4E18  DD 21 3F F0         		LD IX,ChanB
     831.  00:4E1C  2A 41 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:4E1F  CD 1D 4C            		CALL CHREGS
     833.  00:4E22  22 41 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:4E25  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:4E28  32 48 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:4E2B  DD 21 5C F0         		LD IX,ChanC
     837.  00:4E2F  2A 43 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:4E32  CD 1D 4C            		CALL CHREGS
     839.  00:4E35  22 43 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:4E38                      
     841.  00:4E38  2A 7D F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:4E3B  7C                  		LD A,H
     843.  00:4E3C  85                  		ADD A,L
     844.  00:4E3D  32 45 F1            		LD [AYREGS+AR_Noise],A
     845.  00:4E40                      
     846.  00:4E40  3A 1C F0            		LD A,[PT3_AddToEn]
     847.  00:4E43  5F                  		LD E,A
     848.  00:4E44  87                  		ADD A,A
     849.  00:4E45  9F                  		SBC A,A
     850.  00:4E46  57                  		LD D,A
     851.  00:4E47  2A 4D F1            		LD HL,[EnvBase]
     852.  00:4E4A  19                  		ADD HL,DE
     853.  00:4E4B  ED 5B 7A F0         		LD DE,[CurESld]
     854.  00:4E4F  19                  		ADD HL,DE
     855.  00:4E50  22 4A F1            		LD [AYREGS+AR_Env],HL
     856.  00:4E53                      
     857.  00:4E53  AF                  		XOR A
     858.  00:4E54  21 7C F0            		LD HL,CurEDel
     859.  00:4E57  B6                  		OR [HL]
     860.  00:4E58  C8                  		RET Z
     861.  00:4E59  35                  		DEC [HL]
     862.  00:4E5A  C0                  		RET NZ
     863.  00:4E5B  3A 1D F0            		LD A,[PT3_Env_Del]
     864.  00:4E5E  77                  		LD [HL],A
     865.  00:4E5F  2A 1E F0            		LD HL,[PT3_ESldAdd]
     866.  00:4E62  19                  		ADD HL,DE
     867.  00:4E63  22 7A F0            		LD [CurESld],HL
     868.  00:4E66  C9                  		RET
     869.  00:4E67                      
     870.  00:4E67  AF                  PT3_ROUT:	XOR A
     871.  00:4E68                      	
     872.  00:4E68                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:4E68  21 46 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:4E6B  CB FE               		set	7,[hl]
     875.  00:4E6D  CB B6               		res	6,[hl]
     876.  00:4E6F                      
     877.  00:4E6F  0E A0               		LD C,$A0
     878.  00:4E71  21 3F F1            		LD HL,AYREGS
     879.  00:4E74  ED 79               .LOUT:		OUT [C],A
     880.  00:4E76  0C                  		INC C
     881.  00:4E77  ED A3               		OUTI 
     882.  00:4E79  0D                  		DEC C
     883.  00:4E7A  3C                  		INC A
     884.  00:4E7B  FE 0D               		CP 13
     885.  00:4E7D  20 F5               		JR NZ,.LOUT
     886.  00:4E7F  ED 79               		OUT [C],A
     887.  00:4E81  7E                  		LD A,[HL]
     888.  00:4E82  A7                  		AND A
     889.  00:4E83  F8                  		RET M
     890.  00:4E84  0C                  		INC C
     891.  00:4E85  ED 79               		OUT [C],A
     892.  00:4E87  C9                  		RET
     893.  00:4E88                      
     894.  00:4E88  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:4E89  2A                  		db TCNEW_0-T_
     896.  00:4E8A  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:4E8B  00                  		db TCOLD_0-T_
     898.  00:4E8C  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:4E8D  0C                  		db TCNEW_1-T_
     900.  00:4E8E  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:4E8F  0C                  		db TCOLD_1-T_
     902.  00:4E90  94                  		db (T_NEW_2-T1_)*2
     903.  00:4E91  35                  		db TCNEW_2-T_
     904.  00:4E92  30                  		db (T_OLD_2-T1_)*2
     905.  00:4E93  0E                  		db TCOLD_2-T_
     906.  00:4E94  60                  		db (T_NEW_3-T1_)*2
     907.  00:4E95  20                  		db TCNEW_3-T_
     908.  00:4E96  60                  		db (T_OLD_3-T1_)*2
     909.  00:4E97  21                  		db TCOLD_3-T_
     910.  00:4E98                      
     911.  00:4E98                      T_:
     912.  00:4E98                      
     913.  00:4E98                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:4E98  01 05 09 0B 0D 0F 13 15 
     914.  00:4EA0  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:4EA4                      TCNEW_1:	
     916.  00:4EA4  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:4EA6                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:4EA6  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:4EAF                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:4EAF  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:4EB8  57                  TCNEW_3:	db $56+1
     920.  00:4EB9                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:4EB9  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:4EC2                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:4EC2  1D 21 23 27 2B 2D 31 55 
     922.  00:4ECA  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:4ECD                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:4ECD  1B 21 25 29 2B 3B 4D 5F 
     924.  00:4ED5  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:4ED8                      
     926.  00:4ED8  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:4EDC                      
     928.  00:4EDC                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:4EDC  0D                  		db ($06EC*2)/256
     930.  00:4EDD  D8                  		db #d8
     931.  00:4EDE  69                  		db $0755-$06EC
     932.  00:4EDF  70                  		db $07C5-$0755
     933.  00:4EE0  76                  		db $083B-$07C5
     934.  00:4EE1  7D                  		db $08B8-$083B
     935.  00:4EE2  85                  		db $093D-$08B8
     936.  00:4EE3  8D                  		db $09CA-$093D
     937.  00:4EE4  95                  		db $0A5F-$09CA
     938.  00:4EE5  9D                  		db $0AFC-$0A5F
     939.  00:4EE6  A8                  		db $0BA4-$0AFC
     940.  00:4EE7  B1                  		db $0C55-$0BA4
     941.  00:4EE8  BB                  		db $0D10-$0C55
     942.  00:4EE9  0C                  		db ($066D*2)/256
     943.  00:4EEA  DA                  		db #da
     944.  00:4EEB  62                  		db $06CF-$066D
     945.  00:4EEC  68                  		db $0737-$06CF
     946.  00:4EED  6D                  		db $07A4-$0737
     947.  00:4EEE  75                  		db $0819-$07A4
     948.  00:4EEF  7B                  		db $0894-$0819
     949.  00:4EF0  83                  		db $0917-$0894
     950.  00:4EF1  8A                  		db $09A1-$0917
     951.  00:4EF2  92                  		db $0A33-$09A1
     952.  00:4EF3  9C                  		db $0ACF-$0A33
     953.  00:4EF4  A4                  		db $0B73-$0ACF
     954.  00:4EF5  AF                  		db $0C22-$0B73
     955.  00:4EF6  B8                  		db $0CDA-$0C22
     956.  00:4EF7  0E                  		db ($0704*2)/256
     957.  00:4EF8  08                  		db #08
     958.  00:4EF9  6A                  		db $076E-$0704
     959.  00:4EFA  72                  		db $07E0-$076E
     960.  00:4EFB  78                  		db $0858-$07E0
     961.  00:4EFC  7E                  		db $08D6-$0858
     962.  00:4EFD  86                  		db $095C-$08D6
     963.  00:4EFE  90                  		db $09EC-$095C
     964.  00:4EFF  96                  		db $0A82-$09EC
     965.  00:4F00  A0                  		db $0B22-$0A82
     966.  00:4F01  AA                  		db $0BCC-$0B22
     967.  00:4F02  B4                  		db $0C80-$0BCC
     968.  00:4F03  BE                  		db $0D3E-$0C80
     969.  00:4F04  0F                  		db ($07E0*2)/256
     970.  00:4F05  C0                  		db #c0
     971.  00:4F06  78                  		db $0858-$07E0
     972.  00:4F07  88                  		db $08E0-$0858
     973.  00:4F08  80                  		db $0960-$08E0
     974.  00:4F09  90                  		db $09F0-$0960
     975.  00:4F0A  98                  		db $0A88-$09F0
     976.  00:4F0B  A0                  		db $0B28-$0A88
     977.  00:4F0C  B0                  		db $0BD8-$0B28
     978.  00:4F0D  A8                  		db $0C80-$0BD8
     979.  00:4F0E  E0                  		db $0D60-$0C80
     980.  00:4F0F  B0                  		db $0E10-$0D60
     981.  00:4F10  E8                  		db $0EF8-$0E10
     982.  00:4F11                      
     983.  00:4F11                      
     984.  00:4F11                      	;Variables del replayer... las coloco desde aqui.
     985.  00:4F11                      	;mirar que hace la directiva MAP del SJASM
     986.  00:4F11  (F000)              	map		#F000
     987.  00:4F11                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     988.  00:4F11  (00:F000)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
     989.  00:4F11                                          ;bit7 is set each time, when loop point is passed
     990.  00:4F11  (00:F000)           PT3_MODADDR:	#2
     991.  00:4F11  (00:F002)           PT3_CrPsPtr:		#2
     992.  00:4F11  (00:F004)           PT3_SAMPTRS:		#2
     993.  00:4F11  (00:F006)           PT3_OrnPtrs:		#2
     994.  00:4F11  (00:F008)           PT3_PDSP:		#2
     995.  00:4F11  (00:F00A)           PT3_CSP:		#2 
     996.  00:4F11  (00:F00C)           PT3_PSP:		#2
     997.  00:4F11  (00:F00E)           PT3_PrNote:		#1
     998.  00:4F11  (00:F00F)           PT3_PrSlide:		#2
     999.  00:4F11  (00:F011)           PT3_AdInPtA:		#2
    1000.  00:4F11  (00:F013)           PT3_AdInPtB:		#2
    1001.  00:4F11  (00:F015)           PT3_AdInPtC:		#2
    1002.  00:4F11  (00:F017)           PT3_LPosPtr:		#2
    1003.  00:4F11  (00:F019)           PT3_PatsPtr:		#2
    1004.  00:4F11  (00:F01B)           PT3_Delay:		#1
    1005.  00:4F11  (00:F01C)           PT3_AddToEn:		#1
    1006.  00:4F11  (00:F01D)           PT3_Env_Del:		#1
    1007.  00:4F11  (00:F01E)           PT3_ESldAdd:		#2
    1008.  00:4F11  (00:F020)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1009.  00:4F11                      
    1010.  00:4F11  (00:F022)           VARS:			#0
    1011.  00:4F11                      
    1012.  00:4F11  (00:F022)           ChanA:			#29			;CHNPRM_Size
    1013.  00:4F11  (00:F03F)           ChanB:			#29			;CHNPRM_Size
    1014.  00:4F11  (00:F05C)           ChanC:			#29			;CHNPRM_Size
    1015.  00:4F11                      
    1016.  00:4F11                      ;GlobalVars
    1017.  00:4F11  (00:F079)           DelyCnt:		#1
    1018.  00:4F11  (00:F07A)           CurESld:		#2
    1019.  00:4F11  (00:F07C)           CurEDel:		#1
    1020.  00:4F11  (00:F07D)           Ns_Base_AddToNs:	#0
    1021.  00:4F11  (00:F07D)           Ns_Base:		#1
    1022.  00:4F11  (00:F07E)           AddToNs:		#1
    1023.  00:4F11                      
    1024.  00:4F11  (00:F07F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1025.  00:4F11                      
    1026.  00:4F11  (00:F13F)           AYREGS:			#0
    1027.  00:4F11  (00:F13F)           VT_:			#14
    1028.  00:4F11  (00:F14D)           EnvBase:		#2
    1029.  00:4F11  (00:F14F)           VAR0END:		#0
    1030.  00:4F11                      
    1031.  00:4F11  (00:F14F)           T1_:			#0		
    1032.  00:4F11  (00:F14F)           T_NEW_1:		#0
    1033.  00:4F11  (00:F14F)           T_OLD_1:		#24
    1034.  00:4F11  (00:F167)           T_OLD_2:		#24
    1035.  00:4F11  (00:F17F)           T_NEW_3:		#0
    1036.  00:4F11  (00:F17F)           T_OLD_3:		#2
    1037.  00:4F11  (00:F181)           T_OLD_0:		#0
    1038.  00:4F11  (00:F181)           T_NEW_0:		#24
    1039.  00:4F11  (00:F199)           T_NEW_2:		#166
    1040.  00:4F11                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
    1041.  00:4F11  (0000)                  ENDMAP
      30   00:4F11                      ; AFX
      31   00:4F11                          include "include\ayFX-ROM.ASM"
       1.  00:4F11                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:4F11                      
       3.  00:4F11                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:4F11                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:4F11                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:4F11                      		; --- v1.2f/r	ayFX bank support
       7.  00:4F11                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:4F11                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:4F11                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:4F11                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:4F11                      		; --- v1.0	Initial release
      12.  00:4F11                      
      13.  00:4F11                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:4F11                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:4F11  (00:0000)           AYFXRELATIVE: 	equ 0
      16.  00:4F11                      
      17.  00:4F11                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:4F11                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:4F11  22 C3 C3            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:4F14  AF                  		xor	a				; a:=0
      21.  00:4F15  32 C2 C3            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:4F18  3C                  		inc	a				; Starting channel (=1)
      23.  00:4F19  32 CC C3            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:4F1C                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:4F1C  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:4F1E  32 C5 C3            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:4F21  C9                  		ret					; Return
      28.  00:4F22                      
      29.  00:4F22                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:4F22                      		; --- INPUT: A -> sound to be played ---
      31.  00:4F22                      		; ---        C -> sound priority     ---
      32.  00:4F22  C5                  		push	bc				; Store bc in stack
      33.  00:4F23  D5                  		push	de				; Store de in stack
      34.  00:4F24  E5                  		push	hl				; Store hl in stack
      35.  00:4F25                      		; --- Check if the index is in the bank ---
      36.  00:4F25  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:4F26  2A C3 C3            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:4F29  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:4F2A  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:4F2B  28 06               		jr	z,.CHECK_PRI			; ...goto @@CHECK_PRI
      41.  00:4F2D                      		; The bank has less than 256 samples
      42.  00:4F2D  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:4F2E  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:4F2F  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:4F31  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:4F33                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:4F33                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:4F33  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:4F34  3A C5 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:4F37  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:4F38  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:4F3A  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:4F3C                      		; --- Set new priority ---
      54.  00:4F3C  79                  		ld	a,c				; a:=New priority
      55.  00:4F3D  E6 0F               		and	$0F				; We mask the priority
      56.  00:4F3F  32 C5 C3            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:4F42                      
      58.  00:4F42                      		IF ( AYFXRELATIVE == 1 )
      59.  00:4F42                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:4F42                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:4F42                    ~ 			ld	a,15				; a:=15
      62.  00:4F42                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:4F42                    ~ 			jr	z,@@INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:4F42                    ~ 			add	a,a				; a:=a*2
      65.  00:4F42                    ~ 			add	a,a				; a:=a*4
      66.  00:4F42                    ~ 			add	a,a				; a:=a*8
      67.  00:4F42                    ~ 			add	a,a				; a:=a*16
      68.  00:4F42                    ~ 			ld	e,a				; e:=a
      69.  00:4F42                    ~ 			ld	d,0				; de:=a
      70.  00:4F42                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:4F42                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:4F42                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:4F42                    ~ 		ENDIF
      74.  00:4F42                      
      75.  00:4F42                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:4F42  ED 5B C3 C3         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:4F46  13                  		inc	de				; de points to the increments table of the bank
      78.  00:4F47  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:4F48  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:4F4A  29                  		add	hl,hl				; hl:=hl*2
      81.  00:4F4B  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:4F4C  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:4F4D  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:4F4E  56                  		ld	d,[hl]				; de:=increment
      85.  00:4F4F  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:4F50  22 C6 C3            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:4F53  AF                  		xor	a				; a:=0 (no errors)
      88.  00:4F54  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:4F55  D1                  		pop	de				; Retrieve de from stack
      90.  00:4F56  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:4F57  C9                  		ret					; Return
      92.  00:4F58                      
      93.  00:4F58                      		IF ( AYFXRELATIVE == 1 )
      94.  00:4F58                    ~ 	.INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:4F58                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:4F58                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:4F58                    ~ 			jr	.INIT_END			; Jumps to @@INIT_END
      98.  00:4F58                    ~ 		ENDIF
      99.  00:4F58                      
     100.  00:4F58                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:4F58  3A C5 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:4F5B  B7                  		or	a				; If priority has bit 7 on...
     103.  00:4F5C  F8                  		ret	m				; ...return
     104.  00:4F5D                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:4F5D  3A C2 C3            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:4F60  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:4F62  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:4F64  21 CC C3            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:4F67  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:4F68  20 02               		jr	nz,.TAKECB			; If not zero jump to @@TAKECB
     111.  00:4F6A  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:4F6C                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:4F6C  2A C6 C3            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:4F6F  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:4F70  23                  		inc	hl				; Increment pointer
     116.  00:4F71                      		; --- Check if there's new tone on stream ---
     117.  00:4F71  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:4F73  28 08               		jr	z,.CHECK_NN			; ...jump to @@CHECK_NN (no new tone)
     119.  00:4F75                      		; --- Extract new tone from stream ---
     120.  00:4F75  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:4F76  23                  		inc	hl				; Increment pointer
     122.  00:4F77  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:4F78  23                  		inc	hl				; Increment pointer
     124.  00:4F79  ED 53 C8 C3         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:4F7D                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:4F7D  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:4F7F  28 09               		jr	z,.SETPOINTER			; ...jump to @@SETPOINTER (no new noise)
     128.  00:4F81                      		; --- Extract new noise from stream ---
     129.  00:4F81  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:4F82  23                  		inc	hl				; Increment pointer
     131.  00:4F83  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:4F85  28 95               		jr	z,ayFX_END			; ...jump to ayFX_END
     133.  00:4F87  32 CA C3            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:4F8A                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:4F8A  22 C6 C3            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:4F8D                      		; --- Extract volume ---
     137.  00:4F8D  79                  		ld	a,c				; a:=Control byte
     138.  00:4F8E  E6 0F               		and	$0F				; lower nibble
     139.  00:4F90                      
     140.  00:4F90                      		IF ( AYFXRELATIVE == 1 )
     141.  00:4F90                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:4F90                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:4F90                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:4F90                    ~ 			ld	d,0				; d:=0
     145.  00:4F90                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:4F90                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:4F90                    ~ 			or	a				; If relative volume is zero...
     148.  00:4F90                    ~ 		ENDIF
     149.  00:4F90                      
     150.  00:4F90  32 CB C3            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:4F93  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:4F94                      		; -------------------------------------
     153.  00:4F94                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:4F94                      		; -------------------------------------
     155.  00:4F94                      		; --- Set noise channel ---
     156.  00:4F94  CB 79               		bit	7,c				; If noise is off...
     157.  00:4F96  20 06               		jr	nz,.SETMASKS			; ...jump to @@SETMASKS
     158.  00:4F98  3A CA C3            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:4F9B  32 45 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:4F9E                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:4F9E  79                  		ld	a,c				; a:=Control byte
     162.  00:4F9F  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:4FA1  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:4FA3  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:4FA4                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:4FA4  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:4FA5  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:4FA6  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:4FA8                      		; --- Dump to correct channel ---
     170.  00:4FA8  21 CC C3            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:4FAB  46                  		ld	b,[hl]				; Channel counter
     172.  00:4FAC                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:4FAC  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:4FAE                      .LAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:4FAE  CD DD 4F            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:4FB1  32 49 F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:4FB4  CB 51               		bit	2,c				; If tone is off...
     178.  00:4FB6  C0                  		ret	nz				; ...return
     179.  00:4FB7  22 43 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:4FBA  C9                  		ret					; Return
     181.  00:4FBB                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:4FBB  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:4FBD  0F                  		rrca					; Rotate right OR mask
     184.  00:4FBE  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:4FC0                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:4FC0  CD DD 4F            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:4FC3  32 48 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:4FC6  CB 49               		bit	1,c				; If tone is off...
     189.  00:4FC8  C0                  		ret	nz				; ...return
     190.  00:4FC9  22 41 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:4FCC  C9                  		ret					; Return
     192.  00:4FCD                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:4FCD  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:4FCF  0F                  		rrca					; Rotate right OR mask
     195.  00:4FD0                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:4FD0  CD DD 4F            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:4FD3  32 47 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:4FD6  CB 41               		bit	0,c				; If tone is off...
     199.  00:4FD8  C0                  		ret	nz				; ...return
     200.  00:4FD9  22 3F F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:4FDC  C9                  		ret					; Return
     202.  00:4FDD                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:4FDD  4F                  		ld	c,a				; c:=OR mask
     204.  00:4FDE  3A 46 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:4FE1  A2                  		and	d				; AND mask
     206.  00:4FE2  B1                  		or	c				; OR mask
     207.  00:4FE3  32 46 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:4FE6  3A CB C3            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:4FE9  2A C8 C3            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:4FEC  C9                  		ret					; Return
     211.  00:4FED                      
     212.  00:4FED                      		IF ( AYFXRELATIVE == 1 )
     213.  00:4FED                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:4FED                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:4FED                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:4FED                    ~ 		ENDIF
      32   00:4FED                      ; GFX
      33   00:4FED                          ;include "include\metatiles.asm"
      34   00:4FED                      ; entities
      35   00:4FED                          include "include\entities.asm"
       1.  00:4FED                      ; Entities struct
       2.  00:4FED                      ; 0 - on/off
       3.  00:4FED                      ; 1 - x
       4.  00:4FED                      ; 2 - y
       5.  00:4FED                      ; 3 - energy
       6.  00:4FED                      ; 4 - ENEMY_COLLISION_OFFSET_X
       7.  00:4FED                      ; 5 - ENEMY_COLLISION_OFFSET_Y
       8.  00:4FED                      ; 6 - ENEMY_COLLISION_WIDTH
       9.  00:4FED                      ; 7 - ENEMY_COLLISION_HEIGHT
      10.  00:4FED                      ; 8 - spritenumber in spat
      11.  00:4FED                      ; 9 - damage
      12.  00:4FED                      
      13.  00:4FED                      init_playerDAT: db 1,$7F,$69,24,12,12,15,15,0
      13.  00:4FED  01 7F 69 18 0C 0C 0F 0F 00 
      14.  00:4FF6                      enemy1_stg1DAT: db 1,$AF,$0F,4,16,16,16,16,4
      14.  00:4FF6  01 AF 0F 04 10 10 10 10 04 
      15.  00:4FFF                      
      36   00:4FFF                      START
      37   00:4FFF                      	; CODE
      38   00:4FFF  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      39   00:5002  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      40   00:5004  23                  	inc hl ; FORCLR+1
      41   00:5005  36 00               	ld [hl],0 ; Color de fondo 1=negro
      42   00:5007  23                  	inc hl ; FORCLR+2
      43   00:5008  36 00               	ld [hl],0 ; Color del borde 1=negro
      44   00:500A  3E 08               	LD A,8
      45   00:500C                      	;CALL CHGMOD    	
      46   00:500C  CD 88 42                CALL SETPAGES32K
      47   00:500F                      	;CALL opening_screen
      48   00:500F  3E 01               	LD A,1
      49   00:5011  32 00 70            	LD (_bank2),A
      50   00:5014                      	;CALL CHGET
      51   00:5014                      	; Empieza el juego    
      52   00:5014  CD F5 41            	call ClearVram_MSX2		
      53   00:5017  CD 9B 42            	call SET_SCREEN5_MODE    
      54   00:501A  CD E9 41                call Set212Lines
      55   00:501D                              
      56   00:501D  CD 44 50                call INIT_CHARS_VARS
      57   00:5020  CD 4D 46                call initVDPBuffers    
      58   00:5023                      
      59   00:5023  3E FF                   LD A, -MOV_SPEED_GHOST
      60   00:5025  32 48 C0            	LD (CHAR_SPEED_X_GHOST), A
      61   00:5028  21 C3 77                LD HL, PaletteData
      62   00:502B  CD 27 43                CALL SetPalette
      63   00:502E                          ; init sfx
      64   00:502E  F3                      di	
      65   00:502F  21 AD 56            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
      66   00:5032  DD E5                   PUSH IX
      67   00:5034  CD 22 49                call	PT3_INIT			; Inicia el reproductor de PT3
      68   00:5037  21 1A 55            	ld hl, AFX
      69   00:503A  CD 11 4F                call ayFX_SETUP
      70   00:503D  DD E1                   POP IX
      71   00:503F  FB                      ei
      72   00:5040                              
      73   00:5040                          ; Start STG1    
      74   00:5040  CD D3 50                CALL STAGE1
      75   00:5043                      
      76   00:5043                          ;call MAIN_LOOP
      77   00:5043                          ;CALL CHGET
      78   00:5043  C9                  	ret
      79   00:5044                      
      80   00:5044                      
      81   00:5044                      INIT_CHARS_VARS:    
      82   00:5044  DD 21 55 C0             ld ix, SPRITE_ATTRS           
      83   00:5048                          
      84   00:5048  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      85   00:504C  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      86   00:5050  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      87   00:5054                      
      88   00:5054  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      89   00:5058  DD 36 05 7F             ld (ix+5), 7Fh
      90   00:505C  DD 36 06 04             ld (ix+6), 04h        
      91   00:5060                      
      92   00:5060  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      93   00:5064  DD 36 09 7F             ld (ix+9), 7Fh
      94   00:5068  DD 36 0A 08             ld (ix+10), 08h        
      95   00:506C                      
      96   00:506C  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
      97   00:5070  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
      98   00:5074  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
      99   00:5078                          
     100   00:5078  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
     101   00:507C  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
     102   00:5080  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
     103   00:5084                          
     104   00:5084  AF                      XOR A
     105   00:5085  32 1B C0                LD (current_level), A
     106   00:5088  32 45 C0                LD (JIFFY_TEMP),A
     107   00:508B  32 46 C0                LD (CHAR_SPEED_X),A
     108   00:508E  32 47 C0                LD (CHAR_SPEED_Y),A
     109   00:5091  32 48 C0                LD (CHAR_SPEED_X_GHOST),A
     110   00:5094  32 4D C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
     111   00:5097  32 50 C0                LD (CHAR_NEW_DIR_MAIN),A    
     112   00:509A  32 51 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
     113   00:509D  32 53 C0                LD (CHAR_DISTANCE_SHOOT),A
     114   00:50A0  32 54 C0                LD (CHAR_SPEED_SHOOT),A
     115   00:50A3  32 4A C0                LD (CHAR_GHOST_DEAD),A
     116   00:50A6  32 52 C0                LD (CHAR_MIN_STEP), A
     117   00:50A9  32 DC C0                LD (SPRITE_COLOR_REPLACE2), A
     118   00:50AC  32 3E C0                LD (SHOWING_GUS_DIALOG), A
     119   00:50AF  32 3D C0                LD (SHOWING_JOHN_DIALOG), A
     120   00:50B2  32 3C C0                LD (SHOWING_MIKE_DIALOG), A
     121   00:50B5  32 3B C0                LD (SHOWING_SKULL_STG1_DIALOG), A    
     122   00:50B8  32 3A C0                LD (stg1_puzzle_solved), A
     123   00:50BB                         ; LD A,$FF
     124   00:50BB  32 44 C0                LD (OLD_KEY_PRESSED), A
     125   00:50BE  3E 01                   LD A,$01
     126   00:50C0  32 4F C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     127   00:50C3                      
     128   00:50C3  21 B7 66                ld hl, SPRITE_P1_DOWN
     129   00:50C6  22 D8 C0                ld (SPRITE_PTR_REPLACE), HL    
     130   00:50C9  21 B7 6C                ld hl, SPRITE_COLOR_P1_DOWN
     131   00:50CC  22 DA C0                ld (SPRITE_COLOR_REPLACE), HL
     132   00:50CF  22 DC C0                LD (SPRITE_COLOR_REPLACE2), HL
     133   00:50D2                      
     134   00:50D2                          
     135   00:50D2  C9                      ret
     136   00:50D3                      
     137   00:50D3                      STAGE1:
     138   00:50D3  CD F1 47                CALL DISSCR
     139   00:50D6  21 00 80                LD HL, CEMENTER1
     140   00:50D9  22 E0 C0                LD (BITMAP), HL
     141   00:50DC  06 07                   LD B, :CEMENTER1
     142   00:50DE  CD 33 42                call load_screen
     143   00:50E1                          
     144   00:50E1  CD C0 42                call DUMP_SPR_ALL
     145   00:50E4  CD 0A 43                CALL DUMP_SPR_P1
     146   00:50E7                          
     147   00:50E7  21 83 6D                LD HL, mapa1
     148   00:50EA  11 E2 C0                LD DE, MAP_RAM
     149   00:50ED  01 E0 02                LD BC, 736
     150   00:50F0  ED B0                   LDIR
     151   00:50F2                          
     152   00:50F2  21 E2 C0                LD HL, MAP_RAM
     153   00:50F5  22 DE C0                LD (MAPA), HL
     154   00:50F8                          
     155   00:50F8                          ;We load the tiles on page 1 of VDP
     156   00:50F8  21 E3 77                LD HL, TILES1    
     157   00:50FB  CD E5 42                call load_tiles_vdp
     158   00:50FE                          
     159   00:50FE                          ; set energy
     160   00:50FE  21 10 40                LD HL, ANDY_MAX_ENERGY
     161   00:5101                          ;ADD HL, current_level
     162   00:5101  7E                      LD A, (HL)  ; no offset for level 1
     163   00:5102                          ;LD A, 0
     164   00:5102  32 03 C0                LD (ENTITY_PLAYER_POINTER+3), A
     165   00:5105  CD 4B 48                CALL DRAW_ANDY_ENERGY
     166   00:5108                      
     167   00:5108  3A 3A C0                LD A, (stg1_puzzle_solved)
     168   00:510B  FE 03                   CP 3
     169   00:510D  20 30                   JR NZ, .nobackfromstg2
     170   00:510F                              ; Open the gate!
     171   00:510F  FD 21 1C C0             LD IY, tileDat
     172   00:5113  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     173   00:5117  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     174   00:511B  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     175   00:511F  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     176   00:5123  21 1C C0                LD HL, tileDat
     177   00:5126  CD BF 47                CALL VDPCMD
     178   00:5129                      
     179   00:5129                          ; Modify MAP
     180   00:5129  21 77 6D                LD HL,stg1_gate
     181   00:512C  11 F0 C0                LD DE, MAP_RAM+14
     182   00:512F  01 04 00                LD BC, 4
     183   00:5132  ED B0                   LDIR
     184   00:5134                      
     185   00:5134  21 77 6D                LD HL,stg1_gate
     186   00:5137  11 10 C1                LD DE, MAP_RAM+46
     187   00:513A  01 04 00                LD BC, 4
     188   00:513D  ED B0                   LDIR
     189   00:513F                          
     190   00:513F                      .nobackfromstg2
     191   00:513F                              ; Copy the energy bar to back buffer
     192   00:513F  21 D8 48                LD HL, DiagBoxToBackBufROM
     193   00:5142  CD BF 47            	call VDPCMD
     194   00:5145                      ;	call VDP_Ready
     195   00:5145  CD EA 47                CALL ENASCR    
     196   00:5148                          
     197   00:5148                      MAIN_LOOP:
     198   00:5148                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     199   00:5148                          
     200   00:5148  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     201   00:514B  FE 00                   CP $00
     202   00:514D  CA D4 53                JP Z, STAGE2
     203   00:5150  CD EF 42                call DUMP_SPR_ATTS    
     204   00:5153                      
     205   00:5153                      .check_tombs:
     206   00:5153                      
     207   00:5153  3A 3A C0                LD A, (stg1_puzzle_solved)
     208   00:5156  FE 03                   CP 3
     209   00:5158  CA D2 52                JP Z, .animate_ghost
     210   00:515B                      
     211   00:515B  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     212   00:515E  FE C8                   CP MIKE_TOMB_STG1_X
     213   00:5160  C2 D6 51                JP NZ, .check_john_tomb    
     214   00:5163                          
     215   00:5163  3A 3A C0                LD A, (stg1_puzzle_solved)
     216   00:5166  FE 02                   CP 2
     217   00:5168  C2 B0 51                JP NZ, .puzzle_wrong_order
     218   00:516B  3C                      INC A
     219   00:516C  32 3A C0                LD (stg1_puzzle_solved), A
     220   00:516F                          ; Open the gate!
     221   00:516F  FD 21 1C C0             LD IY, tileDat
     222   00:5173  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     223   00:5177  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     224   00:517B  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     225   00:517F  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     226   00:5183  21 1C C0                LD HL, tileDat
     227   00:5186  CD BF 47                CALL VDPCMD
     228   00:5189                      
     229   00:5189  FD 21 10 41             LD IY, stg1_puzzle_solved_strings
     230   00:518D  CD 7A 46                CALL print_strings_dialog_box
     231   00:5190                      
     232   00:5190                          ; Modify MAP
     233   00:5190  21 77 6D                LD HL,stg1_gate
     234   00:5193  11 F0 C0                LD DE, MAP_RAM+14
     235   00:5196  01 04 00                LD BC, 4
     236   00:5199  ED B0                   LDIR
     237   00:519B                      
     238   00:519B  21 77 6D                LD HL,stg1_gate
     239   00:519E  11 10 C1                LD DE, MAP_RAM+46
     240   00:51A1  01 04 00                LD BC, 4
     241   00:51A4  ED B0                   LDIR
     242   00:51A6                          ; afx
     243   00:51A6  3E 02                   LD A,2
     244   00:51A8  0E 00                   LD C, 0
     245   00:51AA  CD 22 4F                CALL ayFX_INIT
     246   00:51AD                      
     247   00:51AD  C3 D2 52                JP .animate_ghost
     248   00:51B0                      
     249   00:51B0                      .puzzle_wrong_order
     250   00:51B0  3A 3C C0                LD A, (SHOWING_MIKE_DIALOG)
     251   00:51B3  FE 01                   CP 1
     252   00:51B5  CA D2 52                JP Z, .animate_ghost    
     253   00:51B8  FD 21 16 40             LD IY, mike_tomb_strings
     254   00:51BC  CD 7A 46                CALL print_strings_dialog_box
     255   00:51BF  3E 01                   LD A,1
     256   00:51C1  32 3C C0                LD (SHOWING_MIKE_DIALOG), A
     257   00:51C4  AF                      XOR A
     258   00:51C5  32 3A C0                LD (stg1_puzzle_solved), A
     259   00:51C8                                  ; Close the gate!
     260   00:51C8                          ;LD IY, tileDat
     261   00:51C8                          ;LD (IY + VDP_SX), 0      ; SXL - Tile 2
     262   00:51C8                          ;LD (IY+VDP_SY), 0      ; SYL
     263   00:51C8                          ;LD (IY + VDP_DX), 112     ; DXL    
     264   00:51C8                          ;LD (IY + VDP_DY), 0      ; DYL    
     265   00:51C8                          ;LD HL, tileDat
     266   00:51C8                          ;CALL VDPCMD
     267   00:51C8                      
     268   00:51C8  21 7D 6D                LD HL,stg1_gate_blocked
     269   00:51CB  11 0F C1                LD DE, MAP_RAM+45
     270   00:51CE  01 06 00                LD BC, 6
     271   00:51D1  ED B0                   LDIR
     272   00:51D3                      
     273   00:51D3  C3 D2 52                JP .animate_ghost
     274   00:51D6                      
     275   00:51D6                      .check_john_tomb:
     276   00:51D6  FE 29                   CP JOHN_TOMB_STG1_X
     277   00:51D8  20 44                   jr nz, .check_gus_tomb
     278   00:51DA  3A 3D C0                LD A, (SHOWING_JOHN_DIALOG)
     279   00:51DD  FE 01                   CP 1
     280   00:51DF  CA D2 52                JP Z, .animate_ghost
     281   00:51E2  FD 21 55 40             LD IY, john_tomb_strings
     282   00:51E6  CD 7A 46                CALL print_strings_dialog_box
     283   00:51E9  3E 01                   LD A,1
     284   00:51EB  32 3D C0                LD (SHOWING_JOHN_DIALOG), A
     285   00:51EE  3A 3A C0                LD A, (stg1_puzzle_solved)
     286   00:51F1  FE 01                   CP 1
     287   00:51F3  C2 D2 52                JP NZ, .animate_ghost
     288   00:51F6  3C                      INC A
     289   00:51F7  32 3A C0                LD (stg1_puzzle_solved), A
     290   00:51FA                          ; Half open gate
     291   00:51FA  FD 21 1C C0             LD IY, tileDat
     292   00:51FE  FD 36 00 40             LD (IY + VDP_SX), 64      ; SXL - Tile 2
     293   00:5202  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     294   00:5206  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     295   00:520A  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     296   00:520E  21 1C C0                LD HL, tileDat
     297   00:5211  CD BF 47                CALL VDPCMD
     298   00:5214                          ; afx
     299   00:5214  3E 00                   LD A,0
     300   00:5216  0E 00                   LD C, 0
     301   00:5218  CD 22 4F                CALL ayFX_INIT
     302   00:521B                      
     303   00:521B  C3 D2 52                JP .animate_ghost
     304   00:521E                      
     305   00:521E                      .check_gus_tomb:
     306   00:521E  FE 49                   CP GUS_TOMB_STG1_X
     307   00:5220  C2 70 52                JP nz, .check_skull_hint
     308   00:5223  3A 3E C0                LD A, (SHOWING_GUS_DIALOG)
     309   00:5226  FE 01                   CP 1
     310   00:5228  CA D2 52                JP Z, .animate_ghost
     311   00:522B  DD 7E 00                LD A, (ix)
     312   00:522E  FE 78                   CP GUS_TOMB_STG1_Y
     313   00:5230  DA D2 52                jp c, .animate_ghost
     314   00:5233  FD 21 92 40             LD IY, gus_tomb_strings
     315   00:5237  CD 7A 46                CALL print_strings_dialog_box
     316   00:523A  3E 01                   LD A,1
     317   00:523C  32 3E C0                LD (SHOWING_GUS_DIALOG), A
     318   00:523F  32 3A C0                LD (stg1_puzzle_solved), A
     319   00:5242                          ; Remove the lockpad
     320   00:5242  FD 21 1C C0             LD IY, tileDat
     321   00:5246  FD 36 00 20             LD (IY + VDP_SX), 32      ; SXL - Tile 1
     322   00:524A  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     323   00:524E  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     324   00:5252  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     325   00:5256  21 1C C0                LD HL, tileDat
     326   00:5259  CD BF 47                CALL VDPCMD
     327   00:525C                      
     328   00:525C  21 77 6D                LD HL,stg1_gate
     329   00:525F  11 11 C1                LD DE, MAP_RAM+47
     330   00:5262  01 02 00                LD BC, 2
     331   00:5265  ED B0                   LDIR
     332   00:5267                      
     333   00:5267                          ; afx
     334   00:5267  3E 01                   LD A,1
     335   00:5269  0E 00                   LD C, 0
     336   00:526B  CD 22 4F                CALL ayFX_INIT
     337   00:526E                      
     338   00:526E  18 62                   JR .animate_ghost
     339   00:5270                      
     340   00:5270                      .check_skull_hint:
     341   00:5270  FE 69                   CP SKULL_TOMB_STG1_X
     342   00:5272  20 20                   jr nz, .check_mike_dialog_box
     343   00:5274                              
     344   00:5274  DD 7E 00                LD A, (ix)
     345   00:5277  FE 5A                   CP SKULL_TOMB_STG1_Y1
     346   00:5279  38 19                   jr c, .check_mike_dialog_box
     347   00:527B  FE 64                   CP SKULL_TOMB_STG1_Y2
     348   00:527D  30 15                   jr nc, .check_mike_dialog_box
     349   00:527F                      
     350   00:527F  3A 3B C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     351   00:5282  FE 01                   CP 1
     352   00:5284  28 4C                   JR Z, .animate_ghost
     353   00:5286  FD 21 D3 40             LD IY, stg1_skull_strings
     354   00:528A  CD 7A 46                CALL print_strings_dialog_box
     355   00:528D  3E 01                   LD A,1
     356   00:528F  32 3B C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     357   00:5292  18 3E                   JR .animate_ghost
     358   00:5294                      
     359   00:5294                      .check_mike_dialog_box
     360   00:5294  3A 3C C0                LD A, (SHOWING_MIKE_DIALOG)
     361   00:5297  FE 01                   CP 1
     362   00:5299  20 09                   JR nz, .check_gus_dialog
     363   00:529B  CD 76 47                CALL CLEAR_DIALOG_BOX
     364   00:529E  AF                      XOR A
     365   00:529F  32 3C C0                LD (SHOWING_MIKE_DIALOG), A
     366   00:52A2  18 2E                   JR .animate_ghost
     367   00:52A4                      
     368   00:52A4                      .check_gus_dialog
     369   00:52A4  3A 3E C0                LD A, (SHOWING_GUS_DIALOG)
     370   00:52A7  FE 01                   CP 1
     371   00:52A9  20 09                   JR nz, .check_john_dialog
     372   00:52AB  CD 76 47                CALL CLEAR_DIALOG_BOX
     373   00:52AE  AF                      XOR A
     374   00:52AF  32 3E C0                LD (SHOWING_GUS_DIALOG), A
     375   00:52B2  18 1E                   JR .animate_ghost
     376   00:52B4                      
     377   00:52B4                      .check_john_dialog
     378   00:52B4  3A 3D C0                LD A, (SHOWING_JOHN_DIALOG)
     379   00:52B7  FE 01                   CP 1
     380   00:52B9  20 09                   JR nz, .check_skull_dialog
     381   00:52BB  CD 76 47                CALL CLEAR_DIALOG_BOX
     382   00:52BE  AF                      XOR A
     383   00:52BF  32 3D C0                LD (SHOWING_JOHN_DIALOG), A
     384   00:52C2  18 0E                   JR .animate_ghost
     385   00:52C4                      
     386   00:52C4                      .check_skull_dialog
     387   00:52C4  3A 3B C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     388   00:52C7  FE 01                   CP 1
     389   00:52C9  20 07                   JR nz, .animate_ghost
     390   00:52CB  CD 76 47                CALL CLEAR_DIALOG_BOX
     391   00:52CE  AF                      XOR A
     392   00:52CF  32 3B C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     393   00:52D2                      
     394   00:52D2                      .animate_ghost    
     395   00:52D2  3A 4A C0                LD A,(CHAR_GHOST_DEAD)
     396   00:52D5  FE 01                   CP $01
     397   00:52D7  CA 4B 53                JP Z,.continue
     398   00:52DA  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     399   00:52DD  2A 48 C0            	LD HL, (CHAR_SPEED_X_GHOST)
     400   00:52E0  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     401   00:52E1                          
     402   00:52E1  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     403   00:52E4  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     404   00:52E7  FE 50                   CP $50
     405   00:52E9  CA F4 52                JP Z,.CHANGE_DIR_RIGHT
     406   00:52EC  FE AF                   CP $AF
     407   00:52EE  CA 01 53                JP Z,.CHANGE_DIR_LEFT
     408   00:52F1                          		
     409   00:52F1  C3 0A 53                JP .check_pattern
     410   00:52F4                      
     411   00:52F4                      .CHANGE_DIR_RIGHT:
     412   00:52F4  3E 01                   LD A, MOV_SPEED_GHOST
     413   00:52F6  32 48 C0            	LD (CHAR_SPEED_X_GHOST), A
     414   00:52F9  3E FF                   LD A,$FF
     415   00:52FB  32 4D C0                LD (CHAR_DIR_GHOST1),A
     416   00:52FE  C3 0A 53                JP .check_pattern
     417   00:5301                      
     418   00:5301                      .CHANGE_DIR_LEFT:
     419   00:5301  3E FF                   LD A, -MOV_SPEED_GHOST
     420   00:5303  32 48 C0            	LD (CHAR_SPEED_X_GHOST), A
     421   00:5306  AF                      XOR A   ; Pone A a 0
     422   00:5307  32 4D C0                LD (CHAR_DIR_GHOST1),A
     423   00:530A                      
     424   00:530A                      .check_pattern:
     425   00:530A  3A 4D C0                LD A,(CHAR_DIR_GHOST1)
     426   00:530D  FE FF                   CP $FF
     427   00:530F  CA 30 53                JP Z,.check_pattern_RIGHT
     428   00:5312  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     429   00:5315  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     430   00:5317  CA 25 53                jp z,.change_pattern_L
     431   00:531A  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     432   00:531E  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     433   00:5322  C3 4B 53                jp .continue
     434   00:5325                      .change_pattern_L:
     435   00:5325  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     436   00:5329  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     437   00:532D  C3 4B 53                jp .continue
     438   00:5330                      
     439   00:5330                      .check_pattern_RIGHT
     440   00:5330  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     441   00:5333  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     442   00:5335  CA 43 53                jp z,.change_pattern_R
     443   00:5338  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     444   00:533C  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     445   00:5340  C3 4B 53                jp .continue
     446   00:5343                      .change_pattern_R:
     447   00:5343  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     448   00:5347  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     449   00:534B                      
     450   00:534B                      .continue:    
     451   00:534B  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)     ; Cargamos la X
     452   00:534E  32 0A C0                LD (ENTITY_ENEMY1_POINTER+1), A
     453   00:5351  DD 7E 10                LD A, (ix+SPR_GHOST_STG1)           ; Cargamos la Y
     454   00:5354  32 0B C0                LD (ENTITY_ENEMY1_POINTER+2), A
     455   00:5357                          
     456   00:5357  FD 21 09 C0             LD IY, ENTITY_ENEMY1_POINTER
     457   00:535B  CD 6D 41                CALL EnemyCollisionCheck
     458   00:535E  30 16                   JR NC, .move_shoot
     459   00:5360                          ; Collision
     460   00:5360  3A 03 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     461   00:5363  D6 04                   SUB 4    
     462   00:5365  32 03 C0                LD (ENTITY_PLAYER_POINTER+ENTITY_ENERGY), A
     463   00:5368  CD 4B 48                call DRAW_ANDY_ENERGY
     464   00:536B  CD 3E 46                call BOUNCE_ANDY
     465   00:536E  3A 03 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     466   00:5371  FE 00                   CP 0
     467   00:5373  CA 07 55                JP Z, game_over
     468   00:5376                      
     469   00:5376                      .move_shoot:
     470   00:5376  CD 63 45                CALL MOVE_SHOOT
     471   00:5379                      .CHECK_GHOST:
     472   00:5379                          ; Comprobamos si hay colision con el fantasma
     473   00:5379  3A 4A C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     474   00:537C  FE 01                   CP $01
     475   00:537E  CA A2 53                JP Z,.check_KB
     476   00:5381                      
     477   00:5381  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     478   00:5384  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     479   00:5387  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     480   00:538A  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     481   00:538D  CD 9C 41                call check_spr_collision
     482   00:5390  FE 01                   CP 1
     483   00:5392  C2 A2 53                JP NZ,.check_KB
     484   00:5395                      
     485   00:5395                      .KILL_GHOST:
     486   00:5395  3E 01                   LD A,1
     487   00:5397  32 4A C0                LD (CHAR_GHOST_DEAD),A
     488   00:539A  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     489   00:539E  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     490   00:53A2                      
     491   00:53A2                      .check_KB:
     492   00:53A2  76                      halt    
     493   00:53A3                      	
     494   00:53A3  F3                  	di       
     495   00:53A4  DD E5                   PUSH IX
     496   00:53A6  CD 67 4E            	call	PT3_ROUT			;envia datos a al PSG 	   
     497   00:53A9  CD 6F 4D            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     498   00:53AC  CD 58 4F            	call ayFX_PLAY
     499   00:53AF  DD E1                   POP IX
     500   00:53B1  FB                      ei
     501   00:53B2                      
     502   00:53B2  3E 08                   ld a, 8
     503   00:53B4  CD 41 01            	call SNSMAT   
     504   00:53B7                          
     505   00:53B7  4F                      LD C,A    
     506   00:53B8                          
     507   00:53B8  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     508   00:53BA  CC AB 43                call z, move_right
     509   00:53BD                          
     510   00:53BD  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     511   00:53BF  CC 0A 44                call z, move_left
     512   00:53C2                      
     513   00:53C2  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     514   00:53C4  CC 36 43                call z, move_up
     515   00:53C7                      
     516   00:53C7  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     517   00:53C9  CC 70 43                call z, move_down
     518   00:53CC                      
     519   00:53CC                      no_arrows:
     520   00:53CC  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     521   00:53CE  CC CE 45                call z,SHOOT_MAIN_CHAR
     522   00:53D1                      
     523   00:53D1                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     524   00:53D1                          ;ret z
     525   00:53D1                          
     526   00:53D1  C3 48 51                jp MAIN_LOOP
     527   00:53D4                      
     528   00:53D4                      
     529   00:53D4                      STAGE2:
     530   00:53D4  CD F1 47                CALL DISSCR
     531   00:53D7  76                      halt
     532   00:53D8  F3                  	di       
     533   00:53D9  DD E5                   PUSH IX
     534   00:53DB  CD 67 4E            	call	PT3_ROUT			;envia datos a al PSG 	   
     535   00:53DE  CD 6F 4D            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     536   00:53E1  DD E1               	POP IX
     537   00:53E3  FB                      ei
     538   00:53E4  21 00 80                LD HL, CEMENTER2
     539   00:53E7  22 E0 C0                LD (BITMAP), HL
     540   00:53EA  06 0D                   LD B, :CEMENTER2
     541   00:53EC                      
     542   00:53EC  CD 33 42                call load_screen
     543   00:53EF  21 63 70                LD HL, mapa2
     544   00:53F2  22 DE C0                LD (MAPA), HL
     545   00:53F5                          
     546   00:53F5                          ; Ponemos el P1 por encima del marco
     547   00:53F5  DD 36 00 AF             LD (ix), 175      ; mask 0
     548   00:53F9  DD 36 04 AF             LD (ix+4), 175    ; mask 1
     549   00:53FD  DD 36 08 AF             LD (ix+8), 175    ; mask 2
     550   00:5401                          
     551   00:5401  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     552   00:5405  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     553   00:5409                          
     554   00:5409  CD C0 42                CALL DUMP_SPR_ALL
     555   00:540C  CD 0A 43                CALL DUMP_SPR_P1        
     556   00:540F                          
     557   00:540F                          ;LD HL, ANDY_MAX_ENERGY
     558   00:540F                          ;LD A, (HL)  
     559   00:540F                          ;INC A           ; level 1
     560   00:540F                          ;LD (ENTITY_PLAYER_POINTER+3), A
     561   00:540F                      
     562   00:540F                          ;XOR a
     563   00:540F                          ;LD (current_level), A
     564   00:540F  CD 4B 48                CALL DRAW_ANDY_ENERGY
     565   00:5412                          
     566   00:5412  CD EA 47                CALL ENASCR
     567   00:5415                          
     568   00:5415                      MAIN_LOOP2:
     569   00:5415                          ;halt    
     570   00:5415  76                      halt
     571   00:5416  F3                  	di       
     572   00:5417  DD E5                   PUSH IX
     573   00:5419  CD 67 4E            	call	PT3_ROUT			;envia datos a al PSG 	   
     574   00:541C  CD 6F 4D            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     575   00:541F  CD 58 4F            	call ayFX_PLAY
     576   00:5422  DD E1                   POP IX
     577   00:5424  FB                      ei
     578   00:5425  DD 7E 00                LD A, (ix)    
     579   00:5428  FE B0                   CP 176      ; Miramos si la Y es 160 para pasar a stg1
     580   00:542A  C2 4C 54                JP NZ, .no_screen_change
     581   00:542D                          ; Ponemos el P1 al principio de la pantalla 1
     582   00:542D  DD 36 00 01             LD (ix), 1          ; P1.Y = 1
     583   00:5431  DD 36 04 01             LD (ix+4), 1
     584   00:5435  DD 36 08 01             LD (ix+8), 1
     585   00:5439                      
     586   00:5439  3A 4A C0                LD A, (CHAR_GHOST_DEAD)
     587   00:543C  FE 01                   CP $01
     588   00:543E  CA 49 54                JP Z, .GHOST_DEAD
     589   00:5441  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     590   00:5445  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     591   00:5449                      .GHOST_DEAD:    
     592   00:5449  CD D3 50                CALL STAGE1
     593   00:544C                      
     594   00:544C                      .no_screen_change:
     595   00:544C                          
     596   00:544C                          ; check X,Y to play Black Sabbath
     597   00:544C                          ; Ya tenemos en A la Y
     598   00:544C  FE 6E                   CP STG2_TILE1_Y
     599   00:544E  C2 AA 54                JP NZ, .check_tile3
     600   00:5451  DD 7E 01                LD A, (ix+1)
     601   00:5454  FE 71                   CP STG2_TILE1_X
     602   00:5456  C2 80 54                JP NZ, .check_next_tile
     603   00:5459  3E 03                   LD A, 3
     604   00:545B  0E 00                   LD C, 0
     605   00:545D  CD 22 4F                CALL ayFX_INIT    
     606   00:5460                      
     607   00:5460  FD 21 1C C0             LD IY, tileDat
     608   00:5464  FD 36 00 C0             LD (IY + VDP_SX), 192      ; SXL - Tile 2
     609   00:5468  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     610   00:546C  FD 36 08 10             LD (IY+VDP_NX), 16      ; NX    
     611   00:5470  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     612   00:5474  FD 36 06 70             LD (IY + VDP_DY), 112      ; DYL    
     613   00:5478  21 1C C0                LD HL, tileDat
     614   00:547B  CD BF 47                CALL VDPCMD
     615   00:547E  18 5C                   jr .continue
     616   00:5480                      
     617   00:5480                      .check_next_tile:
     618   00:5480  FE 80                   CP STG2_TILE2_X
     619   00:5482  C2 AA 54                JP NZ, .check_tile3
     620   00:5485  3E 04                   LD A, 4
     621   00:5487  0E 00                   LD C, 0
     622   00:5489  CD 22 4F                CALL ayFX_INIT    
     623   00:548C                      
     624   00:548C  FD 21 1C C0             LD IY, tileDat
     625   00:5490  FD 36 00 C0             LD (IY + VDP_SX), 192      ; SXL - Tile 2
     626   00:5494  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     627   00:5498  FD 36 08 10             LD (IY+VDP_NX), 16      ; NX    
     628   00:549C  FD 36 04 80             LD (IY + VDP_DX), 128     ; DXL    
     629   00:54A0  FD 36 06 70             LD (IY + VDP_DY), 112      ; DYL    
     630   00:54A4  21 1C C0                LD HL, tileDat
     631   00:54A7  CD BF 47                CALL VDPCMD
     632   00:54AA                      
     633   00:54AA                      .check_tile3:
     634   00:54AA  FE 8E                   CP STG2_TILE3_Y
     635   00:54AC  C2 DC 54                JP NZ, .continue
     636   00:54AF  DD 7E 01                LD A, (ix+1)
     637   00:54B2  FE 80                   CP STG2_TILE3_X
     638   00:54B4  C2 DC 54                JP NZ, .continue
     639   00:54B7  3E 05                   LD A, 5
     640   00:54B9  0E 00                   LD C, 0
     641   00:54BB  CD 22 4F                CALL ayFX_INIT    
     642   00:54BE                      
     643   00:54BE  FD 21 1C C0             LD IY, tileDat
     644   00:54C2  FD 36 00 C0             LD (IY + VDP_SX), 192      ; SXL - Tile 2
     645   00:54C6  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     646   00:54CA  FD 36 08 10             LD (IY+VDP_NX), 16      ; NX    
     647   00:54CE  FD 36 04 80             LD (IY + VDP_DX), 128     ; DXL    
     648   00:54D2  FD 36 06 90             LD (IY + VDP_DY), 144      ; DYL    
     649   00:54D6  21 1C C0                LD HL, tileDat
     650   00:54D9  CD BF 47                CALL VDPCMD
     651   00:54DC                      
     652   00:54DC                      .continue:
     653   00:54DC  CD EF 42                call DUMP_SPR_ATTS      
     654   00:54DF  CD 63 45                CALL MOVE_SHOOT    
     655   00:54E2                      
     656   00:54E2  3E 08                   ld a, 8
     657   00:54E4  CD 41 01            	call SNSMAT   
     658   00:54E7  4F                      LD C,A    
     659   00:54E8                              
     660   00:54E8  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     661   00:54EA  CC AB 43                call z, move_right
     662   00:54ED                          
     663   00:54ED  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     664   00:54EF  CC 0A 44                call z, move_left
     665   00:54F2                      
     666   00:54F2  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     667   00:54F4  CC 36 43                call z, move_up
     668   00:54F7                      
     669   00:54F7  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     670   00:54F9  CC 70 43                call z, move_down
     671   00:54FC                      
     672   00:54FC  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     673   00:54FE  CC CE 45                call z,SHOOT_MAIN_CHAR
     674   00:5501                      
     675   00:5501  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     676   00:5503  C8                      ret z
     677   00:5504                      
     678   00:5504                      
     679   00:5504                      
     680   00:5504  C3 15 54                jp MAIN_LOOP2
     681   00:5507                      
     682   00:5507                      game_over:
     683   00:5507  FD 21 49 41             LD IY, game_over_strings
     684   00:550B  CD 7A 46                call print_strings_dialog_box
     685   00:550E  CD 9F 00                call CHGET
     686   00:5511  CD 9F 00                call CHGET
     687   00:5514  CD 9F 00                call CHGET
     688   00:5517  C3 FF 4F                JP START
     689   00:551A                      
     690   00:551A                      AFX:
     691   00:551A  (01F6)                  incbin "sfx\cementer_sounds.afb"
     692   00:5710                      SONG:
     693   00:5710                      	;incbin "sfx\Nostalgy_sincabecera.pt3"
     694   00:5710  (0EE7)                  incbin "sfx\test.pt3"
     695   00:65F7                          ;incbin "sfx\G-6sin_cabecera.pt3"
     696   00:65F7                      include "include\BTH_data.asm"
       1.  00:65F7                      SPRITE_P1_UP:
       2.  00:65F7                          ; UP 1        
       3.  00:65F7                          ; mask 0
       4.  00:65F7                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  00:65F7  07 0F 05 1F 1F 3F 3F 7F 
       5.  00:65FF                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  00:65FF  00 4F 70 38 0C 0E 07 04 
       6.  00:6607                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  00:6607  E0 F0 A0 F8 F8 F8 FC FE 
       7.  00:660F                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  00:660F  06 F2 1E 3C 30 70 C0 00 
       8.  00:6617                          ; mask 1
       9.  00:6617                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  00:6617  00 00 18 00 1F 00 00 00 
      10.  00:661F                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  00:661F  7F 50 4F 3F 0F 0F 07 02 
      11.  00:6627                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  00:6627  00 00 10 00 FC 00 00 00 
      12.  00:662F                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  00:662F  F2 0E FE FC F0 F0 A0 00 
      13.  00:6637                          ; mask 2
      14.  00:6637                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  00:6637  00 00 1A 00 00 00 00 00 
      15.  00:663F                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  00:663F  7F 60 00 00 00 00 07 00 
      16.  00:6647                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  00:6647  00 00 50 00 00 00 00 00 
      17.  00:664F                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  00:664F  FA 0E 00 00 00 00 80 00 
      18.  00:6657                          
      19.  00:6657                          ; UP 2
      20.  00:6657                          ; mask 0
      21.  00:6657                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  00:6657  07 0F 05 1F 1F 3F 3F 7F 
      22.  00:665F                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  00:665F  10 4F 70 38 0C 0E 05 00 
      23.  00:6667                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  00:6667  E0 F0 A0 F8 F8 F8 FC FE 
      24.  00:666F                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  00:666F  02 F2 1E 3C 30 70 E0 40 
      25.  00:6677                          ; mask 1
      26.  00:6677                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  00:6677  00 00 18 00 1F 00 00 00 
      27.  00:667F                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  00:667F  4F 70 7F 3F 0F 0F 03 00 
      28.  00:6687                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  00:6687  00 00 10 00 FC 00 00 00 
      29.  00:668F                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  00:668F  FE 06 F2 FC F0 F0 E0 20 
      30.  00:6697                          ; mask 2
      31.  00:6697                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  00:6697  00 00 1A 00 00 00 00 00 
      32.  00:669F                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  00:669F  6F 70 00 00 00 00 01 00 
      33.  00:66A7                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  00:66A7  00 00 50 00 00 00 00 00 
      34.  00:66AF                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  00:66AF  FE 0A 00 00 00 00 E0 00 
      35.  00:66B7                          
      36.  00:66B7                      SPRITE_P1_DOWN:
      37.  00:66B7                          ; DOWN 1 - 00h
      38.  00:66B7                          ; mask 0
      39.  00:66B7                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  00:66B7  07 0F 04 06 0F 07 1F 3F 
      40.  00:66BF                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  00:66BF  4C 4E 4E 3C 0C 0E 0F 08 
      41.  00:66C7                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  00:66C7  E0 F0 20 20 70 E0 F8 FC 
      42.  00:66CF                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  00:66CF  32 72 7E 7C 70 F0 C0 00 
      43.  00:66D7                          ; mask 1
      44.  00:66D7                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  00:66D7  00 00 19 19 10 3A 3A 78 
      45.  00:66DF                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  00:66DF  5F 5E 7E 3C 0C 0E 0F 04 
      46.  00:66E7                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  00:66E7  00 00 90 D8 88 58 5C 1E 
      47.  00:66EF                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  00:66EF  F6 FE FE 3C 30 70 A0 00 
      48.  00:66F7                          ; mask 2
      49.  00:66F7                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  00:66F7  00 00 1B 00 10 00 00 00 
      50.  00:66FF                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  00:66FF  6F 6F 7F 3F 0F 0F 0F 00 
      51.  00:6707                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  00:6707  00 00 D0 00 8C 00 00 00 
      52.  00:670F                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  00:670F  FA 7E 7E BC B0 70 80 00 
      53.  00:6717                          
      54.  00:6717                          ; DOWN 2
      55.  00:6717                          ; mask 0 - 0Ch    
      56.  00:6717                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  00:6717  07 0F 04 06 0F 07 1F 3F 
      57.  00:671F                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  00:671F  4C 4E 7E 3C 0C 0E 05 00 
      58.  00:6727                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  00:6727  E0 F0 20 20 70 E0 F8 FC 
      59.  00:672F                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  00:672F  32 72 72 7C 70 F0 E0 40 
      60.  00:6737                          ; mask 1
      61.  00:6737                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  00:6737  00 00 19 19 10 3A 3A 78 
      62.  00:673F                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  00:673F  5F 7E 7E 3C 0C 0E 03 00 
      63.  00:6747                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  00:6747  00 00 90 D8 88 58 5C 1E 
      64.  00:674F                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  00:674F  F6 F6 FE 3C 30 70 E0 20 
      65.  00:6757                          ; mask 2
      66.  00:6757                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  00:6757  00 00 1B 00 10 00 00 00 
      67.  00:675F                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  00:675F  6F 7F 7F 3F 0F 0F 01 00 
      68.  00:6767                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  00:6767  00 00 D0 00 8C 00 00 00 
      69.  00:676F                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  00:676F  FA 7A 7E BC B0 70 E0 00 
      70.  00:6777                      
      71.  00:6777                      SPRITE_P1_LEFT:         
      72.  00:6777                          ; --- Slot 3
      73.  00:6777                          ; mask 0
      74.  00:6777                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  00:6777  07 0F 02 05 07 07 0F 0F 
      75.  00:677F                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  00:677F  07 03 03 03 01 03 03 04 
      76.  00:6787                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  00:6787  E0 F0 80 00 A0 E0 C0 C0 
      77.  00:678F                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  00:678F  E0 B0 70 F0 F0 F0 C0 00 
      78.  00:6797                          ; mask 1
      79.  00:6797                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  00:6797  00 00 18 1A 08 0A 12 10 
      80.  00:679F                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  00:679F  08 03 02 02 01 03 03 03 
      81.  00:67A7                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  00:67A7  00 00 78 F8 5C 1C 7E 7E 
      82.  00:67AF                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  00:67AF  FE 3E 7E 7C F8 F8 B0 00 
      83.  00:67B7                          ; mask 2
      84.  00:67B7                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  00:67B7  00 00 1D 00 28 00 00 00 
      85.  00:67BF                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  00:67BF  00 07 06 06 07 07 03 00 
      86.  00:67C7                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  00:67C7  00 00 78 00 5C 00 00 00 
      87.  00:67CF                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  00:67CF  00 7E FE 7C F8 F8 80 00 
      88.  00:67D7                          ; --- Slot 4
      89.  00:67D7                          ; mask 0
      90.  00:67D7                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  00:67D7  07 0F 02 05 07 07 0F 0F 
      91.  00:67DF                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  00:67DF  07 03 03 03 01 03 04 00 
      92.  00:67E7                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  00:67E7  E0 F0 80 00 A0 E0 C0 C0 
      93.  00:67EF                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  00:67EF  E0 B0 D0 D0 F0 F0 E0 40 
      94.  00:67F7                          ; mask 1
      95.  00:67F7                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  00:67F7  00 00 18 1A 08 0A 12 10 
      96.  00:67FF                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  00:67FF  08 03 03 03 01 03 03 00 
      97.  00:6807                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  00:6807  00 00 78 F8 5C 1C 7E 7E 
      98.  00:680F                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  00:680F  FE 3E 9E 9C 98 F8 E0 30 
      99.  00:6817                          ; mask 2
     100.  00:6817                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  00:6817  00 00 1D 00 28 00 00 00 
     101.  00:681F                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  00:681F  00 07 07 07 07 07 00 00 
     102.  00:6827                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  00:6827  00 00 78 00 5C 00 00 00 
     103.  00:682F                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  00:682F  00 7E BE BC 98 F8 E0 00 
     104.  00:6837                      
     105.  00:6837                      SPRITE_P1_RIGHT:
     106.  00:6837                          ; --- Slot 0
     107.  00:6837                          ; mask 0
     108.  00:6837                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  00:6837  07 0F 01 00 05 07 03 03 
     109.  00:683F                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  00:683F  07 0D 0E 0F 0F 0F 03 00 
     110.  00:6847                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  00:6847  E0 F0 40 A0 E0 E0 F0 F0 
     111.  00:684F                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  00:684F  E0 C0 C0 C0 80 C0 C0 20 
     112.  00:6857                          ; mask 1
     113.  00:6857                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  00:6857  00 00 1E 1F 3A 38 7E 7E 
     114.  00:685F                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  00:685F  7F 7C 7E 3E 1F 1F 0D 00 
     115.  00:6867                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  00:6867  00 00 18 58 10 50 48 08 
     116.  00:686F                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  00:686F  10 C0 40 40 80 C0 C0 C0 
     117.  00:6877                          ; mask 2
     118.  00:6877                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  00:6877  00 00 1E 00 3A 00 00 00 
     119.  00:687F                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  00:687F  00 7E 7F 3E 1F 1F 01 00 
     120.  00:6887                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  00:6887  00 00 B8 00 14 00 00 00 
     121.  00:688F                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  00:688F  00 E0 60 60 E0 E0 C0 00 
     122.  00:6897                          
     123.  00:6897                          ; --- Slot 2
     124.  00:6897                         ; mask 0
     125.  00:6897                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  00:6897  07 0F 01 00 05 07 03 03 
     126.  00:689F                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  00:689F  07 0D 0B 0B 0F 0F 07 02 
     127.  00:68A7                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  00:68A7  E0 F0 40 A0 E0 E0 F0 F0 
     128.  00:68AF                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  00:68AF  E0 C0 C0 C0 80 C0 20 00 
     129.  00:68B7                          ; mask 1
     130.  00:68B7                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  00:68B7  00 00 1E 1F 3A 38 7E 7E 
     131.  00:68BF                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  00:68BF  7F 7C 79 39 19 1F 07 0C 
     132.  00:68C7                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  00:68C7  00 00 18 58 10 50 48 08 
     133.  00:68CF                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  00:68CF  10 C0 C0 C0 80 C0 C0 00 
     134.  00:68D7                              ; mask 2
     135.  00:68D7                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  00:68D7  00 00 1E 00 3A 00 00 00 
     136.  00:68DF                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  00:68DF  00 7E 7D 3D 19 1F 07 00 
     137.  00:68E7                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  00:68E7  00 00 B8 00 14 00 00 00 
     138.  00:68EF                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  00:68EF  00 E0 E0 E0 E0 E0 00 00 
     139.  00:68F7                          
     140.  00:68F7                      SPRITE_PATTERN:    
     141.  00:68F7                          ; P1 - DOWN 1 
     142.  00:68F7                          ; DOWN 1 - 00h
     143.  00:68F7                          ; mask 0
     144.  00:68F7                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  00:68F7  07 0F 04 06 0F 07 1F 3F 
     145.  00:68FF                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  00:68FF  4C 4E 4E 3C 0C 0E 0F 08 
     146.  00:6907                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  00:6907  E0 F0 20 20 70 E0 F8 FC 
     147.  00:690F                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  00:690F  32 72 7E 7C 70 F0 C0 00 
     148.  00:6917                          ; mask 1
     149.  00:6917                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  00:6917  00 00 19 19 10 3A 3A 78 
     150.  00:691F                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  00:691F  5F 5E 7E 3C 0C 0E 0F 04 
     151.  00:6927                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  00:6927  00 00 90 D8 88 58 5C 1E 
     152.  00:692F                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  00:692F  F6 FE FE 3C 30 70 A0 00 
     153.  00:6937                          ; mask 2
     154.  00:6937                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  00:6937  00 00 1B 00 10 00 00 00 
     155.  00:693F                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  00:693F  6F 6F 7F 3F 0F 0F 0F 00 
     156.  00:6947                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  00:6947  00 00 D0 00 8C 00 00 00 
     157.  00:694F                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  00:694F  FA 7E 7E BC B0 70 80 00 
     158.  00:6957                          
     159.  00:6957                          ; DOWN 2
     160.  00:6957                          ; mask 0 - 0Ch    
     161.  00:6957                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  00:6957  07 0F 04 06 0F 07 1F 3F 
     162.  00:695F                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  00:695F  4C 4E 7E 3C 0C 0E 05 00 
     163.  00:6967                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  00:6967  E0 F0 20 20 70 E0 F8 FC 
     164.  00:696F                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  00:696F  32 72 72 7C 70 F0 E0 40 
     165.  00:6977                          ; mask 1
     166.  00:6977                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  00:6977  00 00 19 19 10 3A 3A 78 
     167.  00:697F                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  00:697F  5F 7E 7E 3C 0C 0E 03 00 
     168.  00:6987                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  00:6987  00 00 90 D8 88 58 5C 1E 
     169.  00:698F                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  00:698F  F6 F6 FE 3C 30 70 E0 20 
     170.  00:6997                          ; mask 2
     171.  00:6997                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  00:6997  00 00 1B 00 10 00 00 00 
     172.  00:699F                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  00:699F  6F 7F 7F 3F 0F 0F 01 00 
     173.  00:69A7                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  00:69A7  00 00 D0 00 8C 00 00 00 
     174.  00:69AF                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  00:69AF  FA 7A 7E BC B0 70 E0 00 
     175.  00:69B7                          
     176.  00:69B7                          ; Antichrist - RIGHT
     177.  00:69B7                          ; mask 0 - 18h    
     178.  00:69B7                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  00:69B7  00 00 00 01 01 01 01 01 
     179.  00:69BF                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  00:69BF  01 01 07 07 01 01 00 00 
     180.  00:69C7                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  00:69C7  00 00 00 80 80 80 80 80 
     181.  00:69CF                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  00:69CF  80 80 E0 E0 80 80 00 00 
     182.  00:69D7                      
     183.  00:69D7                          ;Ghost 1 Left - 1CH
     184.  00:69D7                          ; mask 0
     185.  00:69D7                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  00:69D7  03 04 08 68 B5 90 50 40 
     186.  00:69DF                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  00:69DF  22 20 10 10 08 06 03 00 
     187.  00:69E7                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  00:69E7  C0 E0 70 36 BB 33 26 06 
     188.  00:69EF                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  00:69EF  0C 18 3E 19 07 0C F8 E0 
     189.  00:69F7                          ; mask 1    20h
     190.  00:69F7                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  00:69F7  00 07 0F 6F DF FF 6F 7F 
     191.  00:69FF                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  00:69FF  3F 3F 1F 1F 0F 05 03 00 
     192.  00:6A07                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  00:6A07  00 20 90 D6 DD DD DA FA 
     193.  00:6A0F                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  00:6A0F  F4 E8 CE EF FB F4 18 00 
     194.  00:6A17                          
     195.  00:6A17                          ; Ghost 2 Left - 24h
     196.  00:6A17                          ; mask 0    24-h
     197.  00:6A17                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  00:6A17  03 04 08 08 65 B0 90 40 
     198.  00:6A1F                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  00:6A1F  22 20 10 10 08 06 01 00 
     199.  00:6A27                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  00:6A27  C0 E0 70 30 B6 3B 27 06 
     200.  00:6A2F                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  00:6A2F  0C 18 3C 1A 06 0C F0 C0 
     201.  00:6A37                          ; mask 1    28h
     202.  00:6A37                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  00:6A37  00 07 0F 0F 6F DF EF 7F 
     203.  00:6A3F                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  00:6A3F  3F 3F 1F 1F 0F 05 01 00 
     204.  00:6A47                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  00:6A47  00 20 90 D0 D6 DD D9 FA 
     205.  00:6A4F                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  00:6A4F  F4 E8 CC EE FA F4 30 00 
     206.  00:6A57                      
     207.  00:6A57                          ; Ghost 1 Right - 2Ch
     208.  00:6A57                          ; mask 0
     209.  00:6A57                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  00:6A57  03 07 0E 6C DD CC 64 60 
     210.  00:6A5F                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  00:6A5F  30 18 7C 98 E0 30 1F 07 
     211.  00:6A67                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  00:6A67  C0 20 10 16 AD 09 0A 02 
     212.  00:6A6F                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  00:6A6F  44 04 08 08 10 60 C0 00 
     213.  00:6A77                          ; mask 1    - 30h
     214.  00:6A77                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  00:6A77  00 04 09 6B BB BB 5B 5F 
     215.  00:6A7F                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  00:6A7F  2F 17 73 F7 DF 2F 18 00 
     216.  00:6A87                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  00:6A87  00 E0 F0 F6 FB FF F6 FE 
     217.  00:6A8F                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  00:6A8F  FC FC F8 F8 F0 A0 C0 00 
     218.  00:6A97                          
     219.  00:6A97                          ; Ghost 2 Right - 34h
     220.  00:6A97                          ; mask 0
     221.  00:6A97                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  00:6A97  03 07 0E 0C 6D DC E4 60 
     222.  00:6A9F                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  00:6A9F  30 18 3C 58 60 30 0F 03 
     223.  00:6AA7                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  00:6AA7  C0 20 10 10 A6 0D 09 02 
     224.  00:6AAF                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  00:6AAF  44 04 08 08 10 60 80 00 
     225.  00:6AB7                          ; mask 1    38h
     226.  00:6AB7                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  00:6AB7  00 04 09 0B 6B BB 9B 5F 
     227.  00:6ABF                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  00:6ABF  2F 17 33 77 5F 2F 0C 00 
     228.  00:6AC7                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  00:6AC7  00 E0 F0 F0 F6 FB F7 FE 
     229.  00:6ACF                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  00:6ACF  FC FC F8 F8 F0 A0 80 00 
     230.  00:6AD7                          
     231.  00:6AD7                      
     232.  00:6AD7                          ; Esqueleto Left - 1
     233.  00:6AD7                          ; mask 0 - 3Ch
     234.  00:6AD7                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  00:6AD7  1F 1B 2E 24 3F 1F 1F 00 
     235.  00:6ADF                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  00:6ADF  03 05 09 04 01 02 02 04 
     236.  00:6AE7                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  00:6AE7  80 C0 C0 C0 80 00 00 80 
     237.  00:6AEF                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  00:6AEF  E0 D0 C8 C4 C0 20 20 40 
     238.  00:6AF7                          ; mask 1 - 40h
     239.  00:6AF7                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  00:6AF7  1F 1F 3F 3F 3F 1E 0A 00 
     240.  00:6AFF                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  00:6AFF  03 05 09 04 01 00 00 00 
     241.  00:6B07                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  00:6B07  00 80 80 80 00 00 00 00 
     242.  00:6B0F                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  00:6B0F  80 10 88 84 80 00 00 00 
     243.  00:6B17                      
     244.  00:6B17                          ; Esqueleto Left - 2
     245.  00:6B17                          ; mask 0 - 44h
     246.  00:6B17                          ; mask 0
     247.  00:6B17                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  00:6B17  0F 0D 17 12 1F 0F 0F 00 
     248.  00:6B1F                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  00:6B1F  03 05 09 10 01 06 08 00 
     249.  00:6B27                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  00:6B27  C0 E0 60 60 C0 80 80 80 
     250.  00:6B2F                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  00:6B2F  E0 D0 C8 D0 C0 20 20 50 
     251.  00:6B37                          ; mask 1 - 48h
     252.  00:6B37                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  00:6B37  0F 0F 1F 1F 1F 0F 05 00 
     253.  00:6B3F                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  00:6B3F  03 05 09 10 01 00 00 00 
     254.  00:6B47                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  00:6B47  80 C0 C0 C0 80 00 00 00 
     255.  00:6B4F                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  00:6B4F  80 10 88 90 80 00 20 40 
     256.  00:6B57                          
     257.  00:6B57                          ; Esqueleto Right - 1
     258.  00:6B57                          ; mask 0 - 4Ch
     259.  00:6B57                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  00:6B57  01 03 03 03 01 00 00 01 
     260.  00:6B5F                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  00:6B5F  07 0B 13 23 03 04 04 02 
     261.  00:6B67                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  00:6B67  F8 D8 74 24 FC F8 F8 00 
     262.  00:6B6F                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  00:6B6F  C0 A0 90 20 80 40 40 20 
     263.  00:6B77                          ; mask 1 - 50h
     264.  00:6B77                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  00:6B77  00 01 01 01 00 00 00 00 
     265.  00:6B7F                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  00:6B7F  01 08 11 21 01 00 00 00 
     266.  00:6B87                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  00:6B87  F8 F8 FC FC FC 78 50 00 
     267.  00:6B8F                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  00:6B8F  C0 A0 90 20 80 00 00 00 
     268.  00:6B97                          
     269.  00:6B97                          ; Esqueleto Right - 2
     270.  00:6B97                          ; mask 0 - 54h
     271.  00:6B97                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  00:6B97  03 07 06 06 03 01 01 01 
     272.  00:6B9F                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  00:6B9F  07 0B 13 0B 03 04 04 0A 
     273.  00:6BA7                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  00:6BA7  F0 B0 E8 48 F8 F0 F0 00 
     274.  00:6BAF                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  00:6BAF  C0 A0 90 08 80 60 10 00 
     275.  00:6BB7                          ; mask 1 - 58h
     276.  00:6BB7                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  00:6BB7  01 03 03 03 01 00 00 00 
     277.  00:6BBF                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  00:6BBF  01 08 11 09 01 00 04 02 
     278.  00:6BC7                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  00:6BC7  F0 F0 F8 F8 F8 F0 A0 00 
     279.  00:6BCF                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  00:6BCF  C0 A0 90 08 80 00 00 00 
     280.  00:6BD7                      
     281.  00:6BD7                      SPRITE_COLOR_TABLE:       
     282.  00:6BD7                           ;P1 - DOWN 1
     283.  00:6BD7                          ;DOWN 1
     284.  00:6BD7                          ; attr 0
     285.  00:6BD7                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  00:6BD7  05 05 0A 0B 0B 0B 0B 0B 
     286.  00:6BDF                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  00:6BDF  04 04 04 0A 0A 0A 08 08 
     287.  00:6BE7                          ; attr 1
     288.  00:6BE7                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  00:6BE7  00 00 44 45 45 45 45 45 
     289.  00:6BEF                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  00:6BEF  4A 4A 4A 44 44 44 45 45 
     290.  00:6BF7                          ; attr 2
     291.  00:6BF7                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  00:6BF7  00 00 41 00 40 00 00 00 
     292.  00:6BFF                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  00:6BFF  41 41 41 41 41 41 42 00 
     293.  00:6C07                               
     294.  00:6C07                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  00:6C07                          ; Disparo - antichrist    
     296.  00:6C07                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  00:6C07  00 00 00 0A 0A 0A 0A 0A 
     297.  00:6C0F                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  00:6C0F  0A 0A 0A 0A 0A 0A 00 00 
     298.  00:6C17                          ; Fantasma
     299.  00:6C17                          ; attr 0
     300.  00:6C17                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  00:6C17  0F 08 08 08 08 08 08 08 
     301.  00:6C1F                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  00:6C1F  08 08 08 08 08 08 08 0F 
     302.  00:6C27                          ; attr 1
     303.  00:6C27                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  00:6C27  00 47 47 47 47 47 47 47 
     304.  00:6C2F                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  00:6C2F  47 47 47 47 47 47 47 00 
     305.  00:6C37                          
     306.  00:6C37                          
     307.  00:6C37                          ; Esqueleto Left 1
     308.  00:6C37                          ; attr 0
     309.  00:6C37                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  00:6C37  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  00:6C3F                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  00:6C3F  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  00:6C47                          ; attr 1
     312.  00:6C47                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  00:6C47  41 49 49 49 41 41 41 00 
     313.  00:6C4F                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  00:6C4F  41 41 41 41 41 00 00 00 
     314.  00:6C57                      
     315.  00:6C57                      SPRITE_COLOR_P1_UP:
     316.  00:6C57                          ;UP 1
     317.  00:6C57                          ; attr 0
     318.  00:6C57                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  00:6C57  05 05 0A 05 05 05 05 05 
     319.  00:6C5F                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  00:6C5F  0A 05 0B 0A 0A 0A 08 08 
     320.  00:6C67                          ; attr 1
     321.  00:6C67                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  00:6C67  00 00 44 00 40 00 00 00 
     322.  00:6C6F                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  00:6C6F  44 4A 45 45 45 45 45 45 
     323.  00:6C77                          ; attr 2
     324.  00:6C77                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  00:6C77  00 00 41 00 00 00 00 00 
     325.  00:6C7F                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  00:6C7F  41 41 00 00 00 00 42 00 
     326.  00:6C87                          
     327.  00:6C87                          ;SPRITE_COLOR_P1_UP2:
     328.  00:6C87                          ;UP 1
     329.  00:6C87                          ; attr 0
     330.  00:6C87                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  00:6C87  05 05 0A 05 05 05 05 05 
     331.  00:6C8F                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  00:6C8F  0A 05 0B 0A 0A 0A 08 08 
     332.  00:6C97                          ; attr 1
     333.  00:6C97                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  00:6C97  00 00 44 00 40 00 00 00 
     334.  00:6C9F                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  00:6C9F  44 4A 45 45 45 45 45 45 
     335.  00:6CA7                          ; attr 2
     336.  00:6CA7                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  00:6CA7  00 00 41 00 00 00 00 00 
     337.  00:6CAF                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  00:6CAF  41 41 00 00 00 00 42 00 
     338.  00:6CB7                      
     339.  00:6CB7                      
     340.  00:6CB7                      SPRITE_COLOR_P1_DOWN:
     341.  00:6CB7                          ;DOWN 1
     342.  00:6CB7                          ; attr 0
     343.  00:6CB7                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  00:6CB7  05 05 0A 0B 0B 0B 0B 0B 
     344.  00:6CBF                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  00:6CBF  04 04 04 0A 0A 0A 08 08 
     345.  00:6CC7                          ; attr 1
     346.  00:6CC7                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  00:6CC7  00 00 44 45 45 45 45 45 
     347.  00:6CCF                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  00:6CCF  4A 4A 4A 44 44 44 45 45 
     348.  00:6CD7                          ; attr 2
     349.  00:6CD7                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  00:6CD7  00 00 41 00 40 00 00 00 
     350.  00:6CDF                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  00:6CDF  41 41 41 41 41 41 42 00 
     351.  00:6CE7                          ;SPRITE_COLOR_P1_DOWN2:
     352.  00:6CE7                          ;DOWN 1
     353.  00:6CE7                          ; attr 0
     354.  00:6CE7                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  00:6CE7  05 05 0A 0B 0B 0B 0B 0B 
     355.  00:6CEF                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  00:6CEF  04 04 04 0A 0A 0A 08 08 
     356.  00:6CF7                          ; attr 1
     357.  00:6CF7                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  00:6CF7  00 00 44 45 45 45 45 45 
     358.  00:6CFF                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  00:6CFF  4A 4A 4A 44 44 44 45 45 
     359.  00:6D07                          ; attr 2
     360.  00:6D07                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  00:6D07  00 00 41 00 40 00 00 00 
     361.  00:6D0F                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  00:6D0F  41 41 41 41 41 41 42 00 
     362.  00:6D17                      
     363.  00:6D17                      SPRITE_COLOR_P1_RIGHT:
     364.  00:6D17                          ; attr 0
     365.  00:6D17                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  00:6D17  05 05 0A 0B 0B 0B 0B 0B 
     366.  00:6D1F                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  00:6D1F  0B 0A 0A 0B 0A 0A 08 08 
     367.  00:6D27                          ; attr 1
     368.  00:6D27                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  00:6D27  00 00 44 45 45 45 45 45 
     369.  00:6D2F                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  00:6D2F  45 44 44 44 44 44 45 45 
     370.  00:6D37                          ; attr 2
     371.  00:6D37                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  00:6D37  00 00 41 00 40 00 00 00 
     372.  00:6D3F                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  00:6D3F  00 41 41 41 41 41 42 00 
     373.  00:6D47                             
     374.  00:6D47                          ; attr 0
     375.  00:6D47                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  00:6D47  05 05 0A 0B 0B 0B 0B 0B 
     376.  00:6D4F                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  00:6D4F  0B 0A 0A 0A 0B 0A 08 08 
     377.  00:6D57                          ; attr 1
     378.  00:6D57                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  00:6D57  00 00 44 45 45 45 45 45 
     379.  00:6D5F                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  00:6D5F  45 44 44 44 44 44 45 45 
     380.  00:6D67                          ; attr 2
     381.  00:6D67                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  00:6D67  00 00 41 00 40 00 00 00 
     382.  00:6D6F                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  00:6D6F  00 41 41 41 41 41 42 00 
     383.  00:6D77                      
     384.  00:6D77                      stg1_gate:
     385.  00:6D77  00 00 00 00 00 00       DB #00,#00,#00,#00,#00,#00
     386.  00:6D7D                      stg1_gate_blocked:
     387.  00:6D7D  01 01 01 01 01 01       DB #01,#01,#01,#01,#01,#01
     388.  00:6D83                      mapa1:
     389.  00:6D83                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     389.  00:6D83  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     389.  00:6D93  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  00:6DA3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     390.  00:6DA3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  00:6DB3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     391.  00:6DC3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  00:6DC3  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  00:6DD3  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  00:6DE3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  00:6DE3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  00:6DF3  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  00:6E03                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  00:6E03  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     393.  00:6E13  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  00:6E23                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:6E23  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:6E33  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:6E43                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:6E43  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     395.  00:6E53  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:6E63                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  00:6E63  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  00:6E73  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  00:6E83                          
     398.  00:6E83                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  00:6E83  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  00:6E93  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  00:6EA3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  00:6EA3  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  00:6EB3  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  00:6EC3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  00:6EC3  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  00:6ED3  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  00:6EE3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     401.  00:6EE3  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  00:6EF3  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     402.  00:6F03                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     402.  00:6F03  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  00:6F13  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     403.  00:6F23                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  00:6F23  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  00:6F33  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  00:6F43                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     404.  00:6F43  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     404.  00:6F53  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     405.  00:6F63                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  00:6F63  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     405.  00:6F73  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  00:6F83                      
     407.  00:6F83                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  00:6F83  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     407.  00:6F93  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  00:6FA3                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  00:6FA3  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     408.  00:6FB3  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  00:6FC3                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  00:6FC3  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     409.  00:6FD3  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  00:6FE3                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  00:6FE3  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     410.  00:6FF3  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  00:7003                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     411.  00:7003  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  00:7013  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  00:7023                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  00:7023  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     412.  00:7033  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:7043                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     413.  00:7043  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  00:7053  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:7063                      
     415.  00:7063                      mapa2:
     416.  00:7063                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:7063  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:7073  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:7083                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  00:7083  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:7093  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:70A3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  00:70A3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:70B3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:70C3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:70C3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:70D3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:70E3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  00:70E3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:70F3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:7103                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  00:7103  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  00:7113  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:7123                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  00:7123  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:7133  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:7143                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:7143  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:7153  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:7163                            
     425.  00:7163                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  00:7163  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:7173  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:7183                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  00:7183  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:7193  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:71A3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  00:71A3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:71B3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:71C3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  00:71C3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:71D3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  00:71E3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  00:71E3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     429.  00:71F3  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  00:7203                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  00:7203  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  00:7213  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  00:7223                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  00:7223  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  00:7233  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  00:7243                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  00:7243  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  00:7253  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  00:7263                            
     434.  00:7263                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  00:7263  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  00:7273  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  00:7283                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  00:7283  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  00:7293  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  00:72A3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  00:72A3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  00:72B3  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  00:72C3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  00:72C3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     437.  00:72D3  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  00:72E3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  00:72E3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     438.  00:72F3  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  00:7303                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  00:7303  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     439.  00:7313  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  00:7323                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  00:7323  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     440.  00:7333  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  00:7343                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  00:7343  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     441.  00:7353  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  00:7363                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  00:7363  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     442.  00:7373  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  00:7383                            
     444.  00:7383                      mapa0:      
     445.  00:7383                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     445.  00:7383  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     445.  00:7393  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     446.  00:73A3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     446.  00:73A3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     446.  00:73B3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     447.  00:73C3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     447.  00:73C3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     447.  00:73D3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     448.  00:73E3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     448.  00:73E3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     448.  00:73F3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     449.  00:7403                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     449.  00:7403  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     449.  00:7413  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     450.  00:7423                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     450.  00:7423  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     450.  00:7433  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     451.  00:7443                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     451.  00:7443  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     451.  00:7453  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     452.  00:7463                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     452.  00:7463  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     452.  00:7473  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     453.  00:7483                            
     454.  00:7483                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     454.  00:7483  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     454.  00:7493  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     455.  00:74A3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     455.  00:74A3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     455.  00:74B3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     456.  00:74C3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     456.  00:74C3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     456.  00:74D3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     457.  00:74E3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:74E3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:74F3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:7503                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:7503  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:7513  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:7523                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:7523  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     459.  00:7533  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:7543                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     460.  00:7543  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     460.  00:7553  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:7563                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     461.  00:7563  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:7573  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:7583                      
     463.  00:7583                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     463.  00:7583  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     463.  00:7593  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     464.  00:75A3                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     464.  00:75A3  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:75B3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:75C3                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     465.  00:75C3  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     465.  00:75D3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     466.  00:75E3                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     466.  00:75E3  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     466.  00:75F3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     467.  00:7603                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     467.  00:7603  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  00:7613  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     468.  00:7623                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     468.  00:7623  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  00:7633  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     469.  00:7643                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     469.  00:7643  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  00:7653  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     470.  00:7663                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01   
     470.  00:7663  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  00:7673  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     471.  00:7683                            
     472.  00:7683                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     472.  00:7683  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     472.  00:7693  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     473.  00:76A3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     473.  00:76A3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     473.  00:76B3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     474.  00:76C3                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     474.  00:76C3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     474.  00:76D3  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     475.  00:76E3                          
     476.  00:76E3                      
     477.  00:76E3                      SPRITE_COLOR_P1_LEFT:
     478.  00:76E3                          ; attr 0
     479.  00:76E3                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     479.  00:76E3  05 05 0A 0B 0B 0B 0B 0B 
     480.  00:76EB                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     480.  00:76EB  0B 0A 0A 0B 0A 0A 08 08 
     481.  00:76F3                          ; attr 1
     482.  00:76F3                          DB $00,$00,$44,$45,$45,$45,$45,$45
     482.  00:76F3  00 00 44 45 45 45 45 45 
     483.  00:76FB                          DB $45,$44,$44,$44,$44,$44,$45,$45
     483.  00:76FB  45 44 44 44 44 44 45 45 
     484.  00:7703                          ; attr 2
     485.  00:7703                          DB $00,$00,$41,$00,$40,$00,$00,$00
     485.  00:7703  00 00 41 00 40 00 00 00 
     486.  00:770B                          DB $00,$41,$41,$41,$41,$41,$42,$00
     486.  00:770B  00 41 41 41 41 41 42 00 
     487.  00:7713                          ;SPRITE_COLOR_P1_LEFT2:    
     488.  00:7713                          ; attr 0
     489.  00:7713                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     489.  00:7713  05 05 0A 0B 0B 0B 0B 0B 
     490.  00:771B                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     490.  00:771B  0B 0A 0A 0A 0B 0A 08 08 
     491.  00:7723                          ; attr 1
     492.  00:7723                          DB $00,$00,$44,$45,$45,$45,$45,$45
     492.  00:7723  00 00 44 45 45 45 45 45 
     493.  00:772B                          DB $45,$44,$44,$44,$44,$44,$45,$45
     493.  00:772B  45 44 44 44 44 44 45 45 
     494.  00:7733                          ; attr 2
     495.  00:7733                          DB $00,$00,$41,$00,$40,$00,$00,$00
     495.  00:7733  00 00 41 00 40 00 00 00 
     496.  00:773B                          DB $00,$41,$41,$41,$41,$41,$42,$00
     496.  00:773B  00 41 41 41 41 41 42 00 
     497.  00:7743                      
     498.  00:7743                      BLANK_DATA:
     499.  00:7743                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     499.  00:7743  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     499.  00:7753  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     500.  00:7763                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     500.  00:7763  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     500.  00:7773  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     501.  00:7783                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     501.  00:7783  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     501.  00:7793  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     502.  00:77A3                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     502.  00:77A3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     502.  00:77B3  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     503.  00:77C3                      
     504.  00:77C3                          
     505.  00:77C3                      PaletteData:
     506.  00:77C3                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     507.  00:77C3  00 00                   db 0x00, 0x00 ; Color index 0
     508.  00:77C5  30 00                   db 0x30, 0x00 ; Color index 1
     509.  00:77C7  70 06                   db 0x70, 0x06 ; Color index 2
     510.  00:77C9  50 00                   db 0x50, 0x00 ; Color index 3
     511.  00:77CB  11 01                   db 0x11, 0x01 ; Color index 4
     512.  00:77CD  22 02                   db 0x22, 0x02 ; Color index 5
     513.  00:77CF  06 02                   db 0x06, 0x02 ; Color index 6
     514.  00:77D1  77 07                   db 0x77, 0x07 ; Color index 7
     515.  00:77D3  33 03                   db 0x33, 0x03 ; Color index 8
     516.  00:77D5  66 06                   db 0x66, 0x06 ; Color index 9
     517.  00:77D7  70 00                   db 0x70, 0x00 ; Color index 10
     518.  00:77D9  64 05                   db 0x64, 0x05 ; Color index 11
     519.  00:77DB  50 03                   db 0x50, 0x03 ; Color index 12
     520.  00:77DD  02 04                   db 0x02, 0x04 ; Color index 13
     521.  00:77DF  01 02                   db 0x01, 0x02 ; Color index 14
     522.  00:77E1  00 00                   db 0x00, 0x00 ; Color index 15
     697   00:77E3                      TILES1:
     698   00:77E3  (07F9)               INCBIN "gfx\tiles1.sc5",#7
     699   00:7FDC                      
     700   00:7FDC  (01)                 PAGE 1
     701   01:8000                      ; CODE O NO
     702   01:8000                      
     703   01:8000  (02)                 PAGE 2
     704   02:8000                      
     705   02:8000  (03)                 PAGE 3
     706   03:8000                      
     707   03:8000  (04)                 PAGE 4
     708   04:8000  (05)                 PAGE 5
     709   05:8000  (06)                 PAGE 6
     710   06:8000                      FONT:
     711   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     712   06:87F7  (07)                 PAGE 7
     713   07:8000                      CEMENTER1
     714   07:8000                       ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     715   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     716   07:C000  (08)                 PAGE 8
     717   08:8000  (200D)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     718   08:A00D  (09)                 PAGE 9
     719   09:8000                      GRAPHIC
     720   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     721   09:C000  (0A)                 PAGE 10
     722   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     723   0A:C000                      
     724   0A:C000  (0B)                 PAGE 11
     725   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     726   0B:C000                      
     727   0B:C000  (0C)                 PAGE 12
     728   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     729   0C:9400                      
     730   0C:9400  (0D)                 PAGE 13
     731   0D:8000                      CEMENTER2
     732   0D:8000                      ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     733   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     734   0D:C000  (0E)                 PAGE 14
     735   0E:8000  (200E)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     736   0E:A00E  (0F)                 PAGE 15
     737   0F:C000                      ;---------------------------------------------------------
     738   0F:C000                      ; Variables
     739   0F:C000                      ;---------------------------------------------------------
     740   0F:C000                      	
     741   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     742   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     743   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     744   0F:C000                      ;ETC
     745   0F:C000                      ;
     746   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ;entities data
       2.  0F:C000  00 (27)             ENTITY_DATA: ds 27 ;  10 bytes, 3 entities
       3.  0F:C01B  (0F:C000)           ENTITY_PLAYER_POINTER:  EQU ENTITY_DATA
       4.  0F:C01B  (0F:C009)           ENTITY_ENEMY1_POINTER:  EQU ENTITY_DATA+9
       5.  0F:C01B  (0F:C012)           ENTITY_ENEMY2_POINTER:  EQU ENTITY_DATA+18
       6.  0F:C01B                      
       7.  0F:C01B  00 (1)              current_level: 	ds 1
       8.  0F:C01C                      
       9.  0F:C01C                      ; VDP variables
      10.  0F:C01C  00 (15)             tileDat: ds 15
      11.  0F:C02B  00 (15)             energyDat: ds 15
      12.  0F:C03A                      
      13.  0F:C03A                      
      14.  0F:C03A                      ; puzzle 1st stage
      15.  0F:C03A  00 (1)              stg1_puzzle_solved DS 1
      16.  0F:C03B                      
      17.  0F:C03B  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
      18.  0F:C03C  00 (1)              SHOWING_MIKE_DIALOG  DS 1
      19.  0F:C03D  00 (1)              SHOWING_JOHN_DIALOG  DS 1
      20.  0F:C03E  00 (1)              SHOWING_GUS_DIALOG  DS 1
      21.  0F:C03F  (0F:0008)           FONT_HEIGHT EQU 8
      22.  0F:C03F  (0F:0008)           FONT_WIDTH  EQU 8
      23.  0F:C03F  00 (2)              CHR_ACR DS 2
      24.  0F:C041  00 (1)              PTR_STR_DX DS 1
      25.  0F:C042  00 (1)              PTR_STR_DY DS 1
      26.  0F:C043                      
      27.  0F:C043  00 (1)              LAST_KEY_PRESSED DS 1
      28.  0F:C044  00 (1)              OLD_KEY_PRESSED DS 1
      29.  0F:C045  00                  JIFFY_TEMP DB $00
      30.  0F:C046  00                  CHAR_SPEED_X DB $00
      31.  0F:C047  00                  CHAR_SPEED_Y DB $00
      32.  0F:C048  00                  CHAR_SPEED_X_GHOST DB $00
      33.  0F:C049  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      34.  0F:C04A  00 (1)              CHAR_GHOST_DEAD DS 1
      35.  0F:C04B  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      36.  0F:C04C  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      37.  0F:C04D  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      38.  0F:C04E  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      39.  0F:C04F  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      40.  0F:C050  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      41.  0F:C051  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      42.  0F:C052  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      43.  0F:C053  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      44.  0F:C054  00 (1)              CHAR_SPEED_SHOOT DS 1
      45.  0F:C055                      SPRITE_ATTRS:
      46.  0F:C055  00 (128)                DS 128
      47.  0F:C0D5                      SLOTBIOS:
      48.  0F:C0D5  00 (1)                  DS 1
      49.  0F:C0D6                      SLOTGAME:
      50.  0F:C0D6  00 (1)                  DS 1
      51.  0F:C0D7                      SLOTRAM:
      52.  0F:C0D7  00 (1)                  DS 1
      53.  0F:C0D8                      SPRITE_PTR_REPLACE:
      54.  0F:C0D8  00 (2)                  DS 2
      55.  0F:C0DA                      SPRITE_COLOR_REPLACE:
      56.  0F:C0DA  00 (2)                  DS 2
      57.  0F:C0DC                      SPRITE_COLOR_REPLACE2:
      58.  0F:C0DC  00 (2)                  DS 2
      59.  0F:C0DE                      MAPA:
      60.  0F:C0DE  00 (2)                  DS 2
      61.  0F:C0E0                      BITMAP:
      62.  0F:C0E0  00 (2)                  DS 2
      63.  0F:C0E2                      MAP_RAM:
      64.  0F:C0E2  00 (736)                DS 736
     747   0F:C3C2                          include "include\ayFX-RAM.ASM"
       1.  0F:C3C2                      		; --- ayFX REPLAYER v1.31 ---
       2.  0F:C3C2                      
       3.  0F:C3C2                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  0F:C3C2                      
       5.  0F:C3C2  00 (1)              ayFX_MODE:	ds	1			; ayFX mode
       6.  0F:C3C3  00 (2)              ayFX_BANK:	ds	2			; Current ayFX Bank
       7.  0F:C3C5  00 (1)              ayFX_PRIORITY:	ds	1			; Current ayFX stream priotity
       8.  0F:C3C6  00 (2)              ayFX_POINTER:	ds	2			; Pointer to the current ayFX stream
       9.  0F:C3C8  00 (2)              ayFX_TONE:	ds	2			; Current tone of the ayFX stream
      10.  0F:C3CA  00 (1)              ayFX_NOISE:	ds	1			; Current noise of the ayFX stream
      11.  0F:C3CB  00 (1)              ayFX_VOLUME:	ds	1			; Current volume of the ayFX stream
      12.  0F:C3CC  00 (1)              ayFX_CHANNEL:	ds	1			; PSG channel to play the ayFX stream
      13.  0F:C3CD                      IF ( AYFXRELATIVE == 1 )
      14.  0F:C3CD                    ~ 	ayFX_VT:	sds	2			; ayFX relative volume table pointer
      15.  0F:C3CD                    ~ ENDIF
      16.  0F:C3CD                      
      17.  0F:C3CD                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      18.  0F:C3CD                      ;AYREGS:		.ds	14			; Ram copy of PSG registers
      19.  0F:C3CD                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     748   0F:C3CD  (0000)              	ENDMAP
     749   0F:C3CD                        

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:00000069   CLRSPR
00:0000009F   CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000009   ENTITY_SIZE
00:0000000F   PLAYER_COLLISION_OFFSET_X
00:00000010   PLAYER_COLLISION_OFFSET_Y
00:0000000E   PLAYER_WIDTH
00:00000010   PLAYER_HEIGHT
00:00000001   ENEMY_X
00:00000002   ENEMY_Y
00:00000003   ENTITY_ENERGY
00:00000004   ENEMY_COLLISION_OFFSET_X
00:00000005   ENEMY_COLLISION_OFFSET_Y
00:00000006   ENEMY_COLLISION_WIDTH
00:00000007   ENEMY_COLLISION_HEIGHT
00:00000008 X SPRITENUMBER_SPAT
00:00000009 X damage
00:00000071   STG2_TILE1_X
00:0000006E   STG2_TILE1_Y
00:00000080   STG2_TILE2_X
00:00000080   STG2_TILE3_X
00:0000008E   STG2_TILE3_Y
00:00004010   ANDY_MAX_ENERGY
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006 X MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018 X SPR_GHOST_STG2
00:0000003C X SPR_GHOST_STG2_PTRN_L1
00:00000044 X SPR_GHOST_STG2_PTRN_L2
00:0000004C X SPR_GHOST_STG2_PTRN_R1
00:00000054 X SPR_GHOST_STG2_PTRN_R2
00:00004016   mike_tomb_strings
00:0000401C   string01M
00:00004038   string02M
00:00004054   string03M
00:00004055   john_tomb_strings
00:0000405B   string01J
00:00004076   string02J
00:00004091   string03J
00:00004092   gus_tomb_strings
00:00004098   string01G
00:000040B5   string02G
00:000040D2   string03G
00:000040D3   stg1_skull_strings
00:000040D9   string01Sk
00:000040F4   string02Sk
00:0000410F   string03Sk
00:00004110   stg1_puzzle_solved_strings
00:00004116   string01P
00:0000412F   string02P
00:00004148   string03P
00:00004149   game_over_strings
00:0000414F   string01GO
00:00004161   string02GO
00:0000416C   string03GO
00:0000416D   EnemyCollisionCheck
00:00004193   EnemyCollisionCheck.check
00:0000419A   EnemyCollisionCheck.other
00:0000419C   check_spr_collision
00:000041A9   check_spr_collision.no_collision
00:000041AC   get_bloque_en_X_Y
00:000041CD   SetVdp_Write
00:000041E9   Set212Lines
00:000041F5   ClearVram_MSX2
00:000041FF   ClearVram_MSX2.loop_2
00:00004201   ClearVram_MSX2.loop_1
00:00004203   ClearVram_MSX2.loop
00:00004210 X opening_screen
00:00004233   load_screen
00:00004255   _vdpsetvramwr
00:00004266 X _vdpsetvramwr14
00:0000426F   GETSLOT
00:00004286   EXIT
00:00004288   SETPAGES32K
00:0000428D   NOPRET
00:0000429B   SET_SCREEN5_MODE
00:000042C0   DUMP_SPR_ALL
00:000042E5   load_tiles_vdp
00:000042EF   DUMP_SPR_ATTS
00:00004309 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:0000430A   DUMP_SPR_P1
00:00004327   SetPalette
00:00004336   move_up
00:00004370   move_down
00:000043AB   move_right
00:000043BC   move_right.KB_UPDOWN_PRESSED
00:0000440A   move_left
00:0000441B   move_left.KB_UPDOWN_PRESSED
00:00004469   CHECK_DIRECTION_MAIN
00:0000448B   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000044A0   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:000044B5   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:000044CA   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:000044DF   CHECK_DIRECTION_MAIN.FINISH
00:000044F6   UPDATE_MOVEMENT
00:0000451E   ANIMATE_P1
00:00004545   ANIMATE_P1.SET_SPR_1P_2
00:0000455C   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:00004562   NO_MOVEMENT
00:00004563   MOVE_SHOOT
00:0000457B   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:00004583   MOVE_SHOOT.MOVE_SHOOT_UP
00:0000458B   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:00004593   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:00004598   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:000045AD   MOVE_SHOOT.ADD_SHOOT_Y
00:000045B7   MOVE_SHOOT.ADD_DISTANCE
00:000045C2 X MOVE_SHOOT.HIDE_SHOOT
00:000045CE   SHOOT_MAIN_CHAR
00:00004608   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:00004617   SHOOT_MAIN_CHAR.SHOOT_UP
00:0000462A   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:0000463A   SHOOT_MAIN_CHAR.CONTINUE
00:0000463E   BOUNCE_ANDY
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008   VDP_NX
00:0000000A X VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098 X CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008 X VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000010   ENERGY_WIDTH
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_PAGE
00:00008000 X TILES_START_ADDR
00:00000002   BACK_BUFFER
00:00000000   FRONT_BUFFER
00:00000014   DIAGBOX_HEIGHT
00:000000FF   DIAGBOX_WIDTH
00:0000464D   initVDPBuffers
00:0000467A   print_strings_dialog_box
00:000046A7   print_string
00:000046A7   print_string.loop_str
00:000046C2   print_string.first_line_font
00:000046DB   print_char
00:00004712 X CLEAR_DIALOG_BOX_v1
00:00004744 X CLEAR_DIALOG_BOX_v2
00:00004776   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:0000477D X SETPAG
00:0000478B X SET_WR
00:000047A6 X SET_RD
00:000047BF   VDPCMD
00:000047D2   WAITCE
00:000047EA   ENASCR
00:000047F1   DISSCR
00:000047F6   DISSCR.OUT
00:00004802 X ENASPR
00:00004809 X DISSPR
00:0000480E   DISSPR.OUT
00:0000481A X LIN192
00:00004821 X LIN212
00:00004826   LIN212.OUT
00:00004832   VDP_Ready
00:0000484B   DRAW_ANDY_ENERGY
00:0000485D   DRAW_ANDY_ENERGY.check_next_drop
00:0000487D   DRAW_ANDY_ENERGY.draw_half_drop
00:0000488F   DRAW_ANDY_ENERGY.draw_empty_drops
00:000048A2   DRAW_ANDY_ENERGY.loop
00:000048BA   tileDatROM
00:000048C9   energyDatROM
00:000048D8   DiagBoxToBackBufROM
00:000048E7   DiagBoxToFrontkBufROM
00:000048F6 X DiagBoxClearROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:00000017   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:00004905   CHECKLP
00:00004916 X PT3_MUTE
00:00004922   PT3_INIT
00:00004961   PT3_INIT.TP_0
00:0000496D   PT3_INIT.TP_1
00:00004974   PT3_INIT.TP_2
00:000049E2   PT3_INIT.L1
00:000049EF   PT3_INIT.L2
00:000049F3 X PT3_INIT.L3
00:00004A1A   PT3_INIT.CORR_1
00:00004A28   PT3_INIT.CORR_2
00:00004A2F   PT3_INIT.TC_EXIT
00:00004A3A   PT3_INIT.INITV1
00:00004A42   PT3_INIT.INITV2
00:00004A56   PT3_INIT.INITV3
00:00004A5A   PD_OrSm
00:00004A64   PD_SAM
00:00004A65   PD_SAM_
00:00004A7B   PD_VOL
00:00004A84   PD_EOff
00:00004A8C   PD_SorE
00:00004A96   PD_ENV
00:00004A9B   PD_ORN
00:00004AA0   PD_ESAM
00:00004AAD   PTDECOD
00:00004ABC   PD_LOOP
00:00004ABF   PD_LP2
00:00004AEC   PD_NOIS
00:00004AF1   PD_REL
00:00004AF7   PD_NOTE
00:00004AFF   PD_RES
00:00004B11   PD_FIN
00:00004B18   C_PORTM
00:00004B63   C_PORTM.NOSIG
00:00004B6D   SET_STP
00:00004B79   C_GLISS
00:00004B8C   C_SMPOS
00:00004B92   C_ORPOS
00:00004B98   C_VIBRT
00:00004BB0   C_ENGLS
00:00004BC2   C_DELAY
00:00004BC8   SETENV
00:00004BE3   C_NOP
00:00004BE4   SETORN
00:00004BFD   SPCCOMS
00:00004C1D   CHREGS
00:00004C40   CHREGS.CH_ORPS
00:00004C4B   CHREGS.CH_NTP
00:00004C51   CHREGS.CH_NOK
00:00004C6C   CHREGS.CH_SMPS
00:00004C82   CHREGS.CH_NOAC
00:00004CC9   CHREGS.CH_STPP
00:00004CDE   CHREGS.CH_AMP
00:00004CF0   CHREGS.CH_AMIN
00:00004CF5   CHREGS.CH_SVAM
00:00004CF8   CHREGS.CH_NOAM
00:00004D01   CHREGS.CH_APOS
00:00004D07   CHREGS.CH_VOL
00:00004D12 X CHREGS.CH_ENV
00:00004D19   CHREGS.CH_NOEN
00:00004D33   CHREGS.NO_ENAC
00:00004D3A   CHREGS.NO_ENSL
00:00004D48   CHREGS.CH_MIX
00:00004D4C   CHREGS.CH_EXIT
00:00004D6B   CHREGS.CH_ONDL
00:00004D6F   PT3_PLAY
00:00004DA3   PT3_PLAY.PLNLP
00:00004DCA   PT3_PLAY.PL1A
00:00004DD5   PT3_PLAY.PL1B
00:00004DEA   PT3_PLAY.PL1C
00:00004DFF   PT3_PLAY.PL1D
00:00004E05   PT3_PLAY.PL2
00:00004E67   PT3_ROUT
00:00004E68   ROUT_A0
00:00004E74   ROUT_A0.LOUT
00:00004E88   NT_DATA
00:00004E98   T_
00:00004E98   TCOLD_0
00:00004EA4   TCNEW_1
00:00004EA4   TCOLD_1
00:00004EA6   TCOLD_2
00:00004EB8   TCNEW_3
00:00004EB9   TCOLD_3
00:00004EC2   TCNEW_0
00:00004ECD   TCNEW_2
00:00004ED8   EMPTYSAMORN
00:00004EDC   T_PACK
00:0000F000   PT3_SETUP
00:0000F000   PT3_MODADDR
00:0000F002   PT3_CrPsPtr
00:0000F004   PT3_SAMPTRS
00:0000F006   PT3_OrnPtrs
00:0000F008   PT3_PDSP
00:0000F00A   PT3_CSP
00:0000F00C   PT3_PSP
00:0000F00E   PT3_PrNote
00:0000F00F   PT3_PrSlide
00:0000F011   PT3_AdInPtA
00:0000F013   PT3_AdInPtB
00:0000F015   PT3_AdInPtC
00:0000F017   PT3_LPosPtr
00:0000F019   PT3_PatsPtr
00:0000F01B   PT3_Delay
00:0000F01C   PT3_AddToEn
00:0000F01D   PT3_Env_Del
00:0000F01E   PT3_ESldAdd
00:0000F020   PT3_NTL3
00:0000F022   VARS
00:0000F022   ChanA
00:0000F03F   ChanB
00:0000F05C   ChanC
00:0000F079   DelyCnt
00:0000F07A   CurESld
00:0000F07C   CurEDel
00:0000F07D   Ns_Base_AddToNs
00:0000F07D   Ns_Base
00:0000F07E   AddToNs
00:0000F07F   NT_
00:0000F13F   AYREGS
00:0000F13F   VT_
00:0000F14D   EnvBase
00:0000F14F   VAR0END
00:0000F14F   T1_
00:0000F14F   T_NEW_1
00:0000F14F   T_OLD_1
00:0000F167   T_OLD_2
00:0000F17F   T_NEW_3
00:0000F17F   T_OLD_3
00:0000F181   T_OLD_0
00:0000F181   T_NEW_0
00:0000F199   T_NEW_2
00:00000000 X AYFXRELATIVE
00:00004F11   ayFX_SETUP
00:00004F1C   ayFX_END
00:00004F22   ayFX_INIT
00:00004F33   ayFX_INIT.CHECK_PRI
00:00004F54   ayFX_INIT.INIT_END
00:00004F58   ayFX_PLAY
00:00004F6C   ayFX_PLAY.TAKECB
00:00004F7D   ayFX_PLAY.CHECK_NN
00:00004F8A   ayFX_PLAY.SETPOINTER
00:00004F9E   ayFX_PLAY.SETMASKS
00:00004FAC X ayFX_PLAY.CHK1
00:00004FAE X ayFX_PLAY.LAY_C
00:00004FBB   ayFX_PLAY.CHK2
00:00004FC0 X ayFX_PLAY.PLAY_B
00:00004FCD   ayFX_PLAY.CHK3
00:00004FD0 X ayFX_PLAY.PLAY_A
00:00004FDD   ayFX_PLAY.SETMIXER
00:00004FED   init_playerDAT
00:00004FF6   enemy1_stg1DAT
00:00004FFF   START
00:00005044   INIT_CHARS_VARS
00:000050D3   STAGE1
00:0000513F   STAGE1.nobackfromstg2
00:00005148   MAIN_LOOP
00:00005153 X MAIN_LOOP.check_tombs
00:000051B0   MAIN_LOOP.puzzle_wrong_order
00:000051D6   MAIN_LOOP.check_john_tomb
00:0000521E   MAIN_LOOP.check_gus_tomb
00:00005270   MAIN_LOOP.check_skull_hint
00:00005294   MAIN_LOOP.check_mike_dialog_box
00:000052A4   MAIN_LOOP.check_gus_dialog
00:000052B4   MAIN_LOOP.check_john_dialog
00:000052C4   MAIN_LOOP.check_skull_dialog
00:000052D2   MAIN_LOOP.animate_ghost
00:000052F4   MAIN_LOOP.CHANGE_DIR_RIGHT
00:00005301   MAIN_LOOP.CHANGE_DIR_LEFT
00:0000530A   MAIN_LOOP.check_pattern
00:00005325   MAIN_LOOP.change_pattern_L
00:00005330   MAIN_LOOP.check_pattern_RIGHT
00:00005343   MAIN_LOOP.change_pattern_R
00:0000534B   MAIN_LOOP.continue
00:00005376   MAIN_LOOP.move_shoot
00:00005379 X MAIN_LOOP.CHECK_GHOST
00:00005395 X MAIN_LOOP.KILL_GHOST
00:000053A2   MAIN_LOOP.check_KB
00:000053CC X no_arrows
00:000053D4   STAGE2
00:00005415   MAIN_LOOP2
00:00005449   MAIN_LOOP2.GHOST_DEAD
00:0000544C   MAIN_LOOP2.no_screen_change
00:00005480   MAIN_LOOP2.check_next_tile
00:000054AA   MAIN_LOOP2.check_tile3
00:000054DC   MAIN_LOOP2.continue
00:00005507   game_over
00:0000551A   AFX
00:00005710   SONG
00:000065F7   SPRITE_P1_UP
00:000066B7   SPRITE_P1_DOWN
00:00006777   SPRITE_P1_LEFT
00:00006837   SPRITE_P1_RIGHT
00:000068F7   SPRITE_PATTERN
00:00006BD7   SPRITE_COLOR_TABLE
00:00006C57   SPRITE_COLOR_P1_UP
00:00006CB7   SPRITE_COLOR_P1_DOWN
00:00006D17   SPRITE_COLOR_P1_RIGHT
00:00006D77   stg1_gate
00:00006D7D   stg1_gate_blocked
00:00006D83   mapa1
00:00007063   mapa2
00:00007383 X mapa0
00:000076E3   SPRITE_COLOR_P1_LEFT
00:00007743   BLANK_DATA
00:000077C3   PaletteData
00:000077E3   TILES1
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   ENTITY_DATA
0F:0000C000   ENTITY_PLAYER_POINTER
0F:0000C009   ENTITY_ENEMY1_POINTER
0F:0000C012 X ENTITY_ENEMY2_POINTER
0F:0000C01B   current_level
0F:0000C01C   tileDat
0F:0000C02B   energyDat
0F:0000C03A   stg1_puzzle_solved
0F:0000C03B   SHOWING_SKULL_STG1_DIALOG
0F:0000C03C   SHOWING_MIKE_DIALOG
0F:0000C03D   SHOWING_JOHN_DIALOG
0F:0000C03E   SHOWING_GUS_DIALOG
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C03F   CHR_ACR
0F:0000C041 X PTR_STR_DX
0F:0000C042 X PTR_STR_DY
0F:0000C043 X LAST_KEY_PRESSED
0F:0000C044   OLD_KEY_PRESSED
0F:0000C045   JIFFY_TEMP
0F:0000C046   CHAR_SPEED_X
0F:0000C047   CHAR_SPEED_Y
0F:0000C048   CHAR_SPEED_X_GHOST
0F:0000C049 X CHAR_SPEED_X_GHOST_STG2
0F:0000C04A   CHAR_GHOST_DEAD
0F:0000C04B X CHAR_GHOST_DEAD_STG2
0F:0000C04C X CHAR_MIN_STEP_STG2
0F:0000C04D   CHAR_DIR_GHOST1
0F:0000C04E X CHAR_DIR_GHOST_STG2
0F:0000C04F   CHAR_DIR_MAIN
0F:0000C050   CHAR_NEW_DIR_MAIN
0F:0000C051   CHAR_MAIN_SHOOT
0F:0000C052   CHAR_MIN_STEP
0F:0000C053   CHAR_DISTANCE_SHOOT
0F:0000C054   CHAR_SPEED_SHOOT
0F:0000C055   SPRITE_ATTRS
0F:0000C0D5 X SLOTBIOS
0F:0000C0D6 X SLOTGAME
0F:0000C0D7 X SLOTRAM
0F:0000C0D8   SPRITE_PTR_REPLACE
0F:0000C0DA   SPRITE_COLOR_REPLACE
0F:0000C0DC   SPRITE_COLOR_REPLACE2
0F:0000C0DE   MAPA
0F:0000C0E0   BITMAP
0F:0000C0E2   MAP_RAM
0F:0000C3C2   ayFX_MODE
0F:0000C3C3   ayFX_BANK
0F:0000C3C5   ayFX_PRIORITY
0F:0000C3C6   ayFX_POINTER
0F:0000C3C8   ayFX_TONE
0F:0000C3CA   ayFX_NOISE
0F:0000C3CB   ayFX_VOLUME
0F:0000C3CC   ayFX_CHANNEL


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00003FE2

   Address   Length Align   Label
   00004000   16348         ANDY_MAX_ENERGY
   00007FDC       6         
   00007FE2      30       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 0000200D

   Address   Length Align   Label
   00008000    8205         
   0000A00D    8179       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 0000200E

   Address   Length Align   Label
   00008000    8206         
   0000A00E    8178       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000003CD

   Address   Length Align   Label
   0000C000     973         ENTITY_DATA
   0000C3CD   15411       <empty>
