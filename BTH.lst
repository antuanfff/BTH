Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.04.25 - 20:23:14]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:5A0D                      
       3   00:5A0D                      ;ROM ASCII16
       4   00:5A0D                      		defpage	0,0x4000, 0x4000
       5   00:5A0D                      		defpage	1,0x8000, 0x4000        
       6   00:5A0D                      		defpage	2..14 ;Here it is determined rom size        
       7   00:5A0D                              defpage	15,0xC000, 0x4000
       8   00:5A0D                      
       9   00:5A0D  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:5A0D  (00:6000)           _bank1	equ	6000h
      11   00:5A0D  (00:7000)           _bank2	equ	7000h
      12   00:5A0D  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:5A13  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 0A 45 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       2.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       3.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       4.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       5.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       6.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       7.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       8.  00:4010  (00:0141)           SNSMAT					equ #0141
       9.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      10.  00:4010  (00:0041)           DISSCR                  equ #0041   ; Disable screen
      11.  00:4010  (00:0044)           ENASCR                  equ #0044   ; Enable screen
      12.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      13.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      14.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ; VDP Const
       2.  00:4010  (00:5C28)           FIRST_LINE_DLG_BOX   equ 5C28H
       3.  00:4010  (00:6028)           SEC_LINE_DLG_BOX   equ 6028H
       4.  00:4010  (00:6428)           THIRD_LINE_DLG_BOX   equ 6428H
       5.  00:4010                      
       6.  00:4010  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
       7.  00:4010  (00:0007)           KB_RIGHT 				equ 7
       8.  00:4010  (00:0006)           KB_DOWN 				equ 6
       9.  00:4010  (00:0005)           KB_UP 					equ	5        
      10.  00:4010  (00:0004)           KB_LEFT 				equ	4
      11.  00:4010  (00:0003)           KB_DEL 					equ	3
      12.  00:4010  (00:0000)           KB_SPACE				equ	0
      13.  00:4010                      
      14.  00:4010  (00:0001)           MOV_SPEED				equ 1
      15.  00:4010  (00:0001)           MOV_SPEED_GHOST			equ 1
      16.  00:4010  (00:0003)           MOV_SPEED_SHOOT         equ 3
      17.  00:4010  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      18.  00:4010  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      19.  00:4010  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      20.  00:4010  (00:FFE8)           REG9SAV                 equ #FFE8
      21.  00:4010  (00:0098)           PORT_0                  equ 0x98
      22.  00:4010  (00:0099)           PORT_1                  equ 0x99
      23.  00:4010  (00:009A)           PORT_2                  equ 0x9a
      24.  00:4010  (00:009B)           PORT_3                  equ 0x9b
      25.  00:4010                      
      26.  00:4010  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan es entas direcciones valores globals del sistema
      27.  00:4010  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      28.  00:4010                      
      29.  00:4010  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)S
      30.  00:4010  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
      31.  00:4010  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
      32.  00:4010  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
      33.  00:4010  (00:0020)           SPR_GHOST_STG1_PTRN_L2      equ 20h  ; Offset del Sprite Pattern Table
      34.  00:4010  (00:0024)           SPR_GHOST_STG1_PTRN_R1      equ 24h  ; Offset del Sprite Pattern Table
      35.  00:4010  (00:0028)           SPR_GHOST_STG1_PTRN_R2      equ 28h  ; Offset del Sprite Pattern Table
      22   00:4010                          include "include\BTH_strings.asm"
       1.  00:4010  16 40 1D 40 33 40   sardu01_strings: dw string01, string02, string03
       2.  00:4016                      ; Caben 23 caracteres en cada línea
       3.  00:4016                      string01: db 'SARDU:',0
       3.  00:4016  53 41 52 44 55 3A 00 
       4.  00:401D                      string02: db 'CRISTO DE ACERO ES EL',0
       4.  00:401D  43 52 49 53 54 4F 20 44 45 20 41 43 45 52 4F 20 
       4.  00:402D  45 53 20 45 4C 00 
       5.  00:4033                      string03: db 'TERCERO',0
       5.  00:4033  54 45 52 43 45 52 4F 00 
       6.  00:403B  31 32 33 34 00      mensaje: db '1234',0
      23   00:4040                      
      24   00:4040                      ; Funciones auxiliares
      25   00:4040                      	include "include\BTH_func.asm"
       1.  00:4040                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
       2.  00:4040                      ;Entrada:
       3.  00:4040                      ;   b - Y SPR1
       4.  00:4040                      ;   C - X SPR1
       5.  00:4040                      
       6.  00:4040                      ;   d - Y SPR2
       7.  00:4040                      ;   e - X SPR2
       8.  00:4040                      ;Salida:
       9.  00:4040                      ;   a - bloque
      10.  00:4040                      ;Modifica:
      11.  00:4040                      ;   a, hl, de
      12.  00:4040                      check_spr_collision:        
      13.  00:4040  78                          LD A,B          ; a = Y SPR1
      14.  00:4041  BA                          CP D
      15.  00:4042  C2 4D 40                    JP NZ,.no_collision
      16.  00:4045                      
      17.  00:4045  79                          LD A,C          ; a = X SPR1
      18.  00:4046  BB                          CP E
      19.  00:4047  C2 4D 40                    JP NZ,.no_collision
      20.  00:404A                      
      21.  00:404A  3E 01                       LD A,1
      22.  00:404C  C9                          RET
      23.  00:404D                      .no_collision
      24.  00:404D  3E 00                   LD A,0
      25.  00:404F  C9                      RET
      26.  00:4050                      
      27.  00:4050                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      28.  00:4050                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      29.  00:4050                      ;Entrada:
      30.  00:4050                      ;   d - X
      31.  00:4050                      ;   e - y
      32.  00:4050                      ;Salida:
      33.  00:4050                      ;   a - bloque
      34.  00:4050                      ;Modifica:
      35.  00:4050                      ;   a, hl, de
      36.  00:4050                      get_bloque_en_X_Y:
      37.  00:4050                              ;(y/8)*32+(x/8)
      38.  00:4050  7B                          ld a,e      ;a=y
      39.  00:4051  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      40.  00:4057  26 00                       ld h,0
      41.  00:4059  6F                          ld l,a      ;hl=y/8
      42.  00:405A  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      43.  00:405F                      
      44.  00:405F  7A                          ld a,d      ;a=x
      45.  00:4060  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      46.  00:4066  16 00                       ld d,0
      47.  00:4068  5F                          ld e,a      ;de=x/8
      48.  00:4069  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      49.  00:406A                      
      50.  00:406A  ED 5B A0 C0                 ld de,(MAPA)
      51.  00:406E  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      52.  00:406F                      
      53.  00:406F  7E                          ld a,[hl]
      54.  00:4070  C9                          ret
      55.  00:4071                      
      56.  00:4071                      ; SCREEN 8
      57.  00:4071                      SetVdp_Write:
      58.  00:4071                      
      59.  00:4071                      	; transform address from 
      60.  00:4071                      	;
      61.  00:4071                      	; |           Register A            |           Register H            |           Register L            |
      62.  00:4071                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      63.  00:4071                      	;
      64.  00:4071                      	; to
      65.  00:4071                      	;
      66.  00:4071                      	; |           Register A            |           Register H            |           Register L            |
      67.  00:4071                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
      68.  00:4071  CB 04                   rlc     h
      69.  00:4073  17                      rla
      70.  00:4074  CB 04                   rlc     h
      71.  00:4076  17                      rla
      72.  00:4077  CB 3C                   srl     h
      73.  00:4079  CB 3C                   srl     h
      74.  00:407B                      
      75.  00:407B  F3                      di
      76.  00:407C                      	    ; write bits a14-16 of address to R#14
      77.  00:407C  D3 99               	    out     (PORT_1), a
      78.  00:407E  3E 8E               	    ld      a, 14 + 128
      79.  00:4080  D3 99               	    out     (PORT_1), a
      80.  00:4082                      
      81.  00:4082                      	    ; write the other address bits to VDP PORT_1
      82.  00:4082  7D                  	    ld      a, l
      83.  00:4083  00                  	    nop
      84.  00:4084  D3 99               	    out     (PORT_1), a
      85.  00:4086  7C                  	    ld      a, h
      86.  00:4087  F6 40               	    or      64
      87.  00:4089  FB                      ei
      88.  00:408A  D3 99                   out     (PORT_1),a
      89.  00:408C  C9                      ret
      90.  00:408D                      
      91.  00:408D                      Set212Lines:
      92.  00:408D                              ; set LN (bit 7) of R#9 to 1
      93.  00:408D  3A E8 FF                    ld      a, (REG9SAV)
      94.  00:4090  F6 80                       or      10000000b
      95.  00:4092  47                          ld      b, a
      96.  00:4093  0E 09                       ld      c, 9            ; register #
      97.  00:4095  CD 47 00                    call    WRTVDP
      98.  00:4098  C9                          ret
      99.  00:4099                      
     100.  00:4099                      ClearVram_MSX2:
     101.  00:4099  AF                          xor     a           ; set vram write base address
     102.  00:409A  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     103.  00:409D  CD 71 40                    call    SetVdp_Write
     104.  00:40A0  AF                          xor		a
     105.  00:40A1                      
     106.  00:40A1                          ; TODO: 
     107.  00:40A1                          ;   use VDP command (currently is taking almost 1 second)
     108.  00:40A1                          ;   disable screen/sprites (should I ??)
     109.  00:40A1                      
     110.  00:40A1                          ; clear all 128kb of VRAM
     111.  00:40A1  16 02               	ld		d, 2		; 2 repetitions
     112.  00:40A3                      .loop_2:
     113.  00:40A3  0E 00               	ld		c, 0		; 256 repetitions
     114.  00:40A5                      .loop_1:
     115.  00:40A5  06 00               	ld		b, 0		; 256 repetitions
     116.  00:40A7                      .loop:
     117.  00:40A7  D3 98               	out		(PORT_0), a
     118.  00:40A9  10 FC               	djnz	.loop
     119.  00:40AB  0D                  	dec		c
     120.  00:40AC  C2 A5 40            	jp		nz, .loop_1
     121.  00:40AF  15                  	dec		d
     122.  00:40B0  C2 A3 40            	jp		nz, .loop_2
     123.  00:40B3                      
     124.  00:40B3  C9                  	ret
     125.  00:40B4                      
     126.  00:40B4                      ; MEGAROM
     127.  00:40B4                      
     128.  00:40B4                      opening_screen		
     129.  00:40B4  0E 00               		ld		c,0
     130.  00:40B6  11 00 00            		ld		de,0
     131.  00:40B9  CD F9 40            		call	_vdpsetvramwr
     132.  00:40BC  1E 04               		ld	e,4
     133.  00:40BE  3E 09               		ld	a, :GRAPHIC
     134.  00:40C0  57                  		ld	d,a
     135.  00:40C1  32 00 70            2:		ld	(_bank2),a
     136.  00:40C4  21 00 80            		ld	hl,GRAPHIC
     137.  00:40C7  01 98 00            		ld	bc,0x98
     138.  00:40CA  3E 40               		ld	a,32*2
     139.  00:40CC  ED B3               1:		otir
     140.  00:40CE  3D                  		dec	a
     141.  00:40CF  20 FB               		jr	nz,1b
     142.  00:40D1  14                  		inc	d
     143.  00:40D2  7A                  		ld	a,d
     144.  00:40D3  1D                  		dec	e
     145.  00:40D4  20 EB               		jr	nz,2b
     146.  00:40D6  C9                  		ret 
     147.  00:40D7                      
     148.  00:40D7                      load_screen
     149.  00:40D7  0E 00               		ld		c,0
     150.  00:40D9  11 00 00            		ld		de,0
     151.  00:40DC  CD F9 40            		call	_vdpsetvramwr
     152.  00:40DF  1E 02               		ld	e,2					; #pages
     153.  00:40E1  78                  		ld	a, b			; 1st page bitmap
     154.  00:40E2  57                  		ld	d,a
     155.  00:40E3  32 00 70            2:		ld	(_bank2),a
     156.  00:40E6  2A A2 C0            		ld	hl,(BITMAP)		; Bitmap address
     157.  00:40E9  01 98 00            		ld	bc,0x98
     158.  00:40EC  3E 40               		ld	a,64
     159.  00:40EE  ED B3               1:		otir
     160.  00:40F0  3D                  		dec	a
     161.  00:40F1  20 FB               		jr	nz,1b
     162.  00:40F3  14                  		inc	d
     163.  00:40F4  7A                  		ld	a,d
     164.  00:40F5  1D                  		dec	e
     165.  00:40F6  20 EB               		jr	nz,2b
     166.  00:40F8  C9                  		ret 
     167.  00:40F9                      
     168.  00:40F9                      ;Set VDP for writing at address CDE (17-bit) 
     169.  00:40F9                      
     170.  00:40F9                      _vdpsetvramwr:
     171.  00:40F9  79                  	ld a,c
     172.  00:40FA  CB 02               	rlc d
     173.  00:40FC  17                  	rla
     174.  00:40FD  CB 02               	rlc d
     175.  00:40FF  17                  	rla
     176.  00:4100  CB 3A               	srl d ; primo shift, il secondo dopo la out
     177.  00:4102                      
     178.  00:4102  D3 99               	out (0x99),a ;set bits 14-16
     179.  00:4104  3E 8E               	ld a,14+128
     180.  00:4106  D3 99               	out (0x99),a
     181.  00:4108  CB 3A               	srl d ; secondo shift.     
     182.  00:410A                      _vdpsetvramwr14
     183.  00:410A  7B                  	ld a,e ;set bits 0-7
     184.  00:410B  D3 99               	out (0x99),a
     185.  00:410D  7A                  	ld a,d ;set bits 8-13
     186.  00:410E  F6 40               	or 0x40 ; + write access
     187.  00:4110  D3 99               	out (0x99),a
     188.  00:4112  C9                  	ret
     189.  00:4113                      
     190.  00:4113                      
     191.  00:4113                      
     192.  00:4113                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     193.  00:4113                      		; -----------------------------------------------------
     194.  00:4113                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     195.  00:4113                      		; -----------------------------------------------------
     196.  00:4113                      
     197.  00:4113                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     198.  00:4113                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     199.  00:4113                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     200.  00:4113                      
     201.  00:4113                      		; --- VARIABLES EN RAM NECESARIAS ---
     202.  00:4113                      		; NINGUNA
     203.  00:4113                      
     204.  00:4113                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     205.  00:4113                      		; --- Entrada: a = SLOT                                           ---
     206.  00:4113                      		; --- Salida: a = valor para ENASLT                               ---
     207.  00:4113                      		; --- AUTOR: Konamiman                                            ---
     208.  00:4113  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     209.  00:4115  4F                  		ld	c,a				; c = slot de la pagina
     210.  00:4116  06 00               		ld	b,0				; bc = slot de la pagina
     211.  00:4118  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     212.  00:411B  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     213.  00:411C  7E                  		ld	a,(hl)				; Tomamos el valor
     214.  00:411D  E6 80               		and	$80				; Si el bit mas alto es cero...
     215.  00:411F  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     216.  00:4121                      		; --- El slot esta expandido ---
     217.  00:4121  B1                  		or	c				; Slot basico en el lugar adecuado
     218.  00:4122  4F                  		ld	c,a				; Guardamos el valor en c
     219.  00:4123  23                  		inc	hl				; Incrementamos hl una...
     220.  00:4124  23                  		inc	hl				; ...dos...
     221.  00:4125  23                  		inc	hl				; ...tres...
     222.  00:4126  23                  		inc	hl				; ...cuatro veces
     223.  00:4127  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     224.  00:4128  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     225.  00:412A  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     226.  00:412B  C9                  		ret					; Volvemos
     227.  00:412C                      
     228.  00:412C                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     229.  00:412C  3E C9               		ld	a,$C9				; Codigo de RET
     230.  00:412E  32 31 41            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     231.  00:4131  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     232.  00:4132                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     233.  00:4132  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     234.  00:4135  0F                  		rrca					; Rotamos a la derecha...
     235.  00:4136  0F                  		rrca					; ...dos veces
     236.  00:4137  CD 13 41            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     237.  00:413A  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     238.  00:413C  C3 24 00            		jp	ENASLT ;ENASLT
     239.  00:413F                      
     240.  00:413F                      SET_SCREEN5_MODE:
     241.  00:413F                           ;Cambiamos el modo de pantalla
     242.  00:413F                          ; BASIC: COLOR 15,1,1
     243.  00:413F                          ; Establecer los colores
     244.  00:413F  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     245.  00:4142  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     246.  00:4144  23                  	inc hl ; FORCLR+1
     247.  00:4145  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     248.  00:4147  23                  	inc hl ; FORCLR+2
     249.  00:4148  36 0F               	ld [hl],15 ; Color del borde 1=negro
     250.  00:414A                      
     251.  00:414A  3E 05                   ld  a,5     ; La rutina CHGMOD nos obliga a poner en el registro A el modo de pantalla que queremos
     252.  00:414C  CD 5F 00                call CHGMOD ; Mira arriba, pone la explicación
     253.  00:414F                      ;
     254.  00:414F  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     255.  00:4152                          ;En or 0+0=0, 0+1=1, 1+1=1
     256.  00:4152                          ;En and 0+0=0, 0+1=0, 1+1=1
     257.  00:4152                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     258.  00:4152                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     259.  00:4152                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     260.  00:4152  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     261.  00:4154                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     262.  00:4154  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     263.  00:4156                      
     264.  00:4156  47                      ld b,a ;carga en b el valor de a
     265.  00:4157  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     266.  00:4159  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     267.  00:415C  AF                      xor a ; ld a,0
     268.  00:415D  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     269.  00:4160  C9                      ret
     270.  00:4161                      
     271.  00:4161                      DUMP_SPR_ALL:
     272.  00:4161                      
     273.  00:4161                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     274.  00:4161                      
     275.  00:4161  21 49 4B                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     276.  00:4164  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     277.  00:4167  01 60 02                ld bc, 8*4*19; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     278.  00:416A  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     279.  00:416D                      
     280.  00:416D                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     281.  00:416D                      
     282.  00:416D  21 17 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     283.  00:4170  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     284.  00:4173  01 80 00                ld bc,128; 4 x #Sprites
     285.  00:4176  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     286.  00:4179                      
     287.  00:4179                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     288.  00:4179                      
     289.  00:4179  21 A9 4D                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     290.  00:417C  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     291.  00:417F  01 30 01                ld bc,16*19; 16 x #Sprites
     292.  00:4182  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     293.  00:4185  C9                      ret
     294.  00:4186                      	
     295.  00:4186                      DUMP_SPR_ATTS:
     296.  00:4186                      
     297.  00:4186                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------
     298.  00:4186                      
     299.  00:4186  21 17 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     300.  00:4189  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     301.  00:418C  01 1C 00                ld bc,28		; 6 x #Sprites
     302.  00:418F  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     303.  00:4192                      
     304.  00:4192                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     305.  00:4192                      ;	JP Z,.DUMP_SPR_ATTS_END
     306.  00:4192  2A 9E C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     307.  00:4195  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     308.  00:4198  C5                      PUSH BC
     309.  00:4199  01 30 00            	ld bc,16*3; 16 x #Sprites
     310.  00:419C  CD 5C 00                call  LDIRVM 
     311.  00:419F  C1                  	POP BC
     312.  00:41A0                      
     313.  00:41A0                      .DUMP_SPR_ATTS_END:
     314.  00:41A0  C9                      ret
     315.  00:41A1                      
     316.  00:41A1                      DUMP_SPR_P1:    
     317.  00:41A1                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:41A1                      
     319.  00:41A1  2A 9A C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:41A4  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:41A7  C5                      PUSH BC
     322.  00:41A8  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     323.  00:41AB  CD 5C 00                call  LDIRVM 
     324.  00:41AE  C1                  	POP BC
     325.  00:41AF                      
     326.  00:41AF                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     327.  00:41AF                      
     328.  00:41AF  2A 9C C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     329.  00:41B2  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     330.  00:41B5  C5                      PUSH BC
     331.  00:41B6  01 30 00            	ld bc,16*3; 16 x #Sprites
     332.  00:41B9  CD 5C 00                call  LDIRVM 
     333.  00:41BC  C1                  	POP BC
     334.  00:41BD                      	
     335.  00:41BD                      
     336.  00:41BD                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     337.  00:41BD                      ;    xor a
     338.  00:41BD                      ;	di			; set VRAM address to 1800h
     339.  00:41BD                      ;	out (99h),a		; lower byte 00
     340.  00:41BD                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     341.  00:41BD                      ;	ei
     342.  00:41BD                      ;	out (99h),a		; note that this is protected by the ei instruction
     343.  00:41BD                      ;   push BC
     344.  00:41BD                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     345.  00:41BD                      ;	ld hl,(SPRITE_PTR_REPLACE)
     346.  00:41BD                      
     347.  00:41BD                      ;.loop1:
     348.  00:41BD                      ;	outi			; send the data (HL) to port 98h 
     349.  00:41BD                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     350.  00:41BD                      ;   POP BC
     351.  00:41BD                      
     352.  00:41BD                          ; Replace 2 entries in sprite color table
     353.  00:41BD                      ;    xor a
     354.  00:41BD                      ;	di			; set VRAM address to 1800h
     355.  00:41BD                      ;	out (99h),a		; lower byte 00
     356.  00:41BD                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     357.  00:41BD                      ;	ei
     358.  00:41BD                      ;	out (99h),a		; note that this is protected by the ei instruction
     359.  00:41BD                       ;   push BC
     360.  00:41BD                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     361.  00:41BD                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     362.  00:41BD                      	
     363.  00:41BD                      ;.loop2:
     364.  00:41BD                      ;	outi			; send the data (HL) to port 98h 
     365.  00:41BD                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     366.  00:41BD                       ;   POP BC
     367.  00:41BD                      
     368.  00:41BD  C9                      ret
     369.  00:41BE                      
     370.  00:41BE                      SetPalette:
     371.  00:41BE  AF                  	xor a
     372.  00:41BF  F3                  	di
     373.  00:41C0  D3 99               	out ($99),a
     374.  00:41C2  3E 90               	ld a,16+128
     375.  00:41C4  D3 99               	out ($99),a
     376.  00:41C6  01 9A 20            	ld bc,$209A
     377.  00:41C9  ED B3               	otir
     378.  00:41CB  FB                  	ei
     379.  00:41CC  C9                  	ret
      26   00:41CD                          include "include\BTH_animate.asm"
       1.  00:41CD                      ; Movimiento P1
       2.  00:41CD                      move_up:
       3.  00:41CD  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:41CE                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:41CE  AF                      XOR A
       6.  00:41CF  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:41D2  CD D8 42                CALL CHECK_DIRECTION_MAIN
       8.  00:41D5                      
       9.  00:41D5  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:41D8  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:41DA  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:41DB  DD 7E 01                ld a,(ix+1)
      13.  00:41DE  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:41DF  CD 50 40                call get_bloque_en_X_Y
      15.  00:41E2  FE 01                   cp 1
      16.  00:41E4  CA D0 43                jp z,NO_MOVEMENT
      17.  00:41E7                      
      18.  00:41E7  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:41EA  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:41EC  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:41ED  DD 7E 01                ld a,(ix+1)
      22.  00:41F0  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:41F2  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:41F3  CD 50 40                call get_bloque_en_X_Y
      25.  00:41F6  FE 01                   cp 1
      26.  00:41F8  CA D0 43                jp z,NO_MOVEMENT
      27.  00:41FB                            
      28.  00:41FB  3E FF               	LD A, -MOV_SPEED
      29.  00:41FD  32 09 C0            	LD (CHAR_SPEED_Y), A
      30.  00:4200  CD 65 43                call UPDATE_MOVEMENT   
      31.  00:4203                          ;JP no_arrows
      32.  00:4203  C9                      ret
      33.  00:4204                      
      34.  00:4204                      move_down:
      35.  00:4204  A9                      XOR C               ; Reseteamos la entrada del teclado
      36.  00:4205                          ; Actualizamos la última tecla de dirección pulsada
      37.  00:4205  3E 01                   LD A,$01
      38.  00:4207  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
      39.  00:420A  CD D8 42                CALL CHECK_DIRECTION_MAIN
      40.  00:420D                      
      41.  00:420D  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      42.  00:4210  C6 11                   add 17 ; incrementamos en 15+2 el valor
      43.  00:4212  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      44.  00:4213  DD 7E 01                ld a,(ix+1)
      45.  00:4216  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      46.  00:4217  CD 50 40                call get_bloque_en_X_Y
      47.  00:421A  FE 01                   cp 1
      48.  00:421C  CA D0 43                jp z,NO_MOVEMENT
      49.  00:421F                      
      50.  00:421F  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      51.  00:4222  C6 11                   add 17 ; incrementamos en 15 el valor
      52.  00:4224  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      53.  00:4225  DD 7E 01                ld a,(ix+1)
      54.  00:4228  C6 0A                   add 10 ; miramos la segunda tile 8+2
      55.  00:422A  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      56.  00:422B  CD 50 40                call get_bloque_en_X_Y
      57.  00:422E  FE 01                   cp 1
      58.  00:4230  CA D0 43                jp z,NO_MOVEMENT
      59.  00:4233                          
      60.  00:4233  3E 01                   LD A, MOV_SPEED
      61.  00:4235  32 09 C0            	LD (CHAR_SPEED_Y), A
      62.  00:4238  CD 65 43                call UPDATE_MOVEMENT    
      63.  00:423B                          ;JP no_arrows
      64.  00:423B  C9                      ret
      65.  00:423C                      
      66.  00:423C                      move_right:
      67.  00:423C  A9                      XOR C               ; Reseteamos la entrada del teclado
      68.  00:423D                          ; Actualizamos la última tecla de dirección pulsada
      69.  00:423D  3E 03                   LD A,$03
      70.  00:423F  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
      71.  00:4242  CD D8 42                CALL CHECK_DIRECTION_MAIN
      72.  00:4245                      
      73.  00:4245  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      74.  00:4248  C6 10                   add 16; incrementamos en 3 el valor
      75.  00:424A  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      76.  00:424B  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      77.  00:424E  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      78.  00:4250  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      79.  00:4251  CD 50 40                call get_bloque_en_X_Y
      80.  00:4254  FE 01                   cp 1
      81.  00:4256  CA D0 43                jp z,NO_MOVEMENT
      82.  00:4259                      
      83.  00:4259                          ;Miramos el tile del byte inferior del sprite - centro personaje
      84.  00:4259  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      85.  00:425C  C6 10                   add 16; incrementamos en 2 tiles el valor
      86.  00:425E  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      87.  00:425F  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      88.  00:4262  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      89.  00:4264  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      90.  00:4265  CD 50 40                call get_bloque_en_X_Y
      91.  00:4268  FE 01                   cp 1
      92.  00:426A  CA D0 43                jp z,NO_MOVEMENT
      93.  00:426D                      
      94.  00:426D                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
      95.  00:426D  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      96.  00:4270  C6 10                   add 16; incrementamos en 2 tiles el valor
      97.  00:4272  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      98.  00:4273  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      99.  00:4276  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     100.  00:4278  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     101.  00:4279  CD 50 40                call get_bloque_en_X_Y
     102.  00:427C  FE 01                   cp 1
     103.  00:427E  CA D0 43                jp z,NO_MOVEMENT    
     104.  00:4281                          
     105.  00:4281  3E 01                   LD A, MOV_SPEED
     106.  00:4283  32 08 C0            	LD (CHAR_SPEED_X), A
     107.  00:4286  CD 65 43                call UPDATE_MOVEMENT      
     108.  00:4289                          ;JP no_arrows
     109.  00:4289  C9                      ret
     110.  00:428A                      
     111.  00:428A                      move_left:
     112.  00:428A  A9                      XOR C               ; Reseteamos la entrada del teclado
     113.  00:428B                          ; Actualizamos la última tecla de dirección pulsada
     114.  00:428B  3E 02                   LD A,$02
     115.  00:428D  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A
     116.  00:4290  CD D8 42                CALL CHECK_DIRECTION_MAIN
     117.  00:4293  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     118.  00:4296  D6 02                   sub 2 ; decrementamos en 2 el valor
     119.  00:4298  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     120.  00:4299  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     121.  00:429C  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     122.  00:429E  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     123.  00:429F  CD 50 40                call get_bloque_en_X_Y
     124.  00:42A2  FE 01                   cp 1
     125.  00:42A4  CA D0 43                jp z,NO_MOVEMENT
     126.  00:42A7                      
     127.  00:42A7                          ;Miramos el tile inferior parte central del personaje
     128.  00:42A7  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     129.  00:42AA  D6 02                   sub 2 ; decrementamos en 2 el valor
     130.  00:42AC  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     131.  00:42AD  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     132.  00:42B0  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     133.  00:42B2  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     134.  00:42B3  CD 50 40                call get_bloque_en_X_Y
     135.  00:42B6  FE 01                   cp 1
     136.  00:42B8  CA D0 43                jp z,NO_MOVEMENT
     137.  00:42BB                      
     138.  00:42BB                          ;Miramos el tile inferior esquina inferior izquierda
     139.  00:42BB  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     140.  00:42BE  D6 02                   sub 2 ; decrementamos en 2 el valor
     141.  00:42C0  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     142.  00:42C1  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     143.  00:42C4  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     144.  00:42C6  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     145.  00:42C7  CD 50 40                call get_bloque_en_X_Y
     146.  00:42CA  FE 01                   cp 1
     147.  00:42CC  CA D0 43                jp z,NO_MOVEMENT
     148.  00:42CF                      
     149.  00:42CF  3E FF                   LD A, -MOV_SPEED
     150.  00:42D1  32 08 C0            	LD (CHAR_SPEED_X), A
     151.  00:42D4  CD 65 43                call UPDATE_MOVEMENT     
     152.  00:42D7                          ;JP no_arrows
     153.  00:42D7  C9                      ret
     154.  00:42D8                      
     155.  00:42D8                      CHECK_DIRECTION_MAIN:
     156.  00:42D8  3A 11 C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     157.  00:42DB  2A 12 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     158.  00:42DE  BD                  	CP L		            	                ;Son iguales?
     159.  00:42DF  C8                  	RET Z                           			;Si son iguales, vuelvo
     160.  00:42E0  3A 12 C0                LD A,(CHAR_NEW_DIR_MAIN)
     161.  00:42E3  FE 01                   CP $01
     162.  00:42E5  CA FA 42                JP Z,.SET_DIR_DOWN
     163.  00:42E8  FE 00                   CP $00
     164.  00:42EA  CA 0F 43                JP Z,.SET_DIR_UP
     165.  00:42ED  FE 03                   CP $03
     166.  00:42EF  CA 39 43                JP Z,.SET_DIR_RIGHT
     167.  00:42F2  FE 02                   CP $02
     168.  00:42F4  CA 24 43                JP Z,.SET_DIR_LEFT
     169.  00:42F7  C3 4E 43                JP .FINISH
     170.  00:42FA                          
     171.  00:42FA                      .SET_DIR_DOWN:    
     172.  00:42FA  21 09 49                ld hl, SPRITE_P1_DOWN
     173.  00:42FD  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     174.  00:4300                          
     175.  00:4300  21 99 4E                ld hl, SPRITE_COLOR_P1_DOWN
     176.  00:4303  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL    
     177.  00:4306  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     178.  00:4309  CD A1 41                CALL DUMP_SPR_P1    
     179.  00:430C                      
     180.  00:430C  C3 4E 43                JP .FINISH
     181.  00:430F                      
     182.  00:430F                      .SET_DIR_UP:
     183.  00:430F  21 49 48                ld hl, SPRITE_P1_UP
     184.  00:4312  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     185.  00:4315                          
     186.  00:4315  21 39 4E                ld hl, SPRITE_COLOR_P1_UP
     187.  00:4318  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
     188.  00:431B  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     189.  00:431E  CD A1 41                CALL DUMP_SPR_P1
     190.  00:4321  C3 4E 43                JP .FINISH
     191.  00:4324                      
     192.  00:4324                      .SET_DIR_LEFT:    
     193.  00:4324  21 C9 49                ld hl, SPRITE_P1_LEFT
     194.  00:4327  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     195.  00:432A                          
     196.  00:432A  21 39 59                ld hl, SPRITE_COLOR_P1_LEFT
     197.  00:432D  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
     198.  00:4330  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     199.  00:4333  CD A1 41                CALL DUMP_SPR_P1   
     200.  00:4336  C3 4E 43                JP .FINISH
     201.  00:4339                      
     202.  00:4339                      .SET_DIR_RIGHT:
     203.  00:4339  21 89 4A                ld hl, SPRITE_P1_RIGHT
     204.  00:433C  22 9A C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:433F                          
     206.  00:433F  21 F9 4E                ld hl, SPRITE_COLOR_P1_RIGHT
     207.  00:4342  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:4345  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:4348                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     210.  00:4348  CD A1 41                CALL DUMP_SPR_P1
     211.  00:434B  C3 4E 43                JP .FINISH
     212.  00:434E                      
     213.  00:434E                      .FINISH:
     214.  00:434E  AF                      XOR A   ; reseteamos el contador de pasos
     215.  00:434F  32 14 C0                LD (CHAR_MIN_STEP), A   
     216.  00:4352  3A 12 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     217.  00:4355  32 11 C0                LD (CHAR_DIR_MAIN),A    
     218.  00:4358                      
     219.  00:4358                          ; ponemos el primer frame del sprite
     220.  00:4358  DD 36 02 00             LD (ix+2), $00
     221.  00:435C  DD 36 06 04             LD (ix+6), $04
     222.  00:4360  DD 36 0A 08             LD (ix+10), $08
     223.  00:4364                          ;CALL DUMP_SPR_ATTS
     224.  00:4364  C9                      RET
     225.  00:4365                      
     226.  00:4365                      UPDATE_MOVEMENT:
     227.  00:4365  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     228.  00:4368  2A 09 C0            	LD HL, (CHAR_SPEED_Y)
     229.  00:436B  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     230.  00:436C                          
     231.  00:436C  DD 77 00            	LD (ix), A
     232.  00:436F  DD 77 04                LD (ix+4), A
     233.  00:4372  DD 77 08                LD (ix+8), A
     234.  00:4375                      	
     235.  00:4375  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     236.  00:4378  2A 08 C0            	LD HL, (CHAR_SPEED_X)
     237.  00:437B  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     238.  00:437C                          
     239.  00:437C  DD 77 01            	LD (ix+1), A
     240.  00:437F  DD 77 05                LD (ix+5), A
     241.  00:4382  DD 77 09                LD (ix+9), A	
     242.  00:4385                      
     243.  00:4385  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     244.  00:4386  32 08 C0                LD (CHAR_SPEED_X),A
     245.  00:4389  32 09 C0                LD (CHAR_SPEED_Y),A	
     246.  00:438C                      
     247.  00:438C                          ; Animación/pasos de personaje	
     248.  00:438C  3A 14 C0                LD A, (CHAR_MIN_STEP)
     249.  00:438F  FE 05                   CP MAX_CHAR_STEPS
     250.  00:4391  C2 CA 43                JP NZ,.NO_CHAR_PATTERN_CHANGE
     251.  00:4394                          
     252.  00:4394  AF                      XOR A
     253.  00:4395  32 14 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     254.  00:4398  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     255.  00:439B  FE 00                   CP $00
     256.  00:439D  CA B3 43                JP Z,.SET_SPR_1P_2
     257.  00:43A0  DD 36 02 00             LD (ix+2), $00
     258.  00:43A4  DD 36 06 04             LD (ix+6), $04
     259.  00:43A8  DD 36 0A 08             LD (ix+10), $08
     260.  00:43AC  2A 9C C0                ld hl, (SPRITE_COLOR_REPLACE)
     261.  00:43AF  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     262.  00:43B2  C9                      ret
     263.  00:43B3                      
     264.  00:43B3                      .SET_SPR_1P_2:
     265.  00:43B3  DD 36 02 0C             LD (ix+2), $0C
     266.  00:43B7  DD 36 06 10             LD (ix+6), $10
     267.  00:43BB  DD 36 0A 14             LD (ix+10), $14
     268.  00:43BF                              
     269.  00:43BF  2A 9C C0                ld HL, (SPRITE_COLOR_REPLACE)
     270.  00:43C2  11 30 00                ld DE,48
     271.  00:43C5  19                      ADD HL, DE
     272.  00:43C6  22 9E C0                ld (SPRITE_COLOR_REPLACE2), HL
     273.  00:43C9                          ;ld a, 0
     274.  00:43C9  C9                  	ret
     275.  00:43CA                      
     276.  00:43CA                      .NO_CHAR_PATTERN_CHANGE    
     277.  00:43CA  C6 01                   ADD 1
     278.  00:43CC  32 14 C0                LD (CHAR_MIN_STEP), A    
     279.  00:43CF  C9                      ret
     280.  00:43D0                      
     281.  00:43D0                      NO_MOVEMENT:    
     282.  00:43D0  C9                      ret
     283.  00:43D1                      
     284.  00:43D1                      MOVE_SHOOT:
     285.  00:43D1  3A 13 C0                LD A,(CHAR_MAIN_SHOOT)    
     286.  00:43D4  FE 01                   CP $01
     287.  00:43D6  CA 01 44                JP Z,.MOVE_SHOOT_LEFT
     288.  00:43D9  FE 02                   CP $02
     289.  00:43DB  CA E9 43                JP Z,.MOVE_SHOOT_RIGHT
     290.  00:43DE  FE 03                   CP $03
     291.  00:43E0  CA F1 43                JP Z,.MOVE_SHOOT_UP    
     292.  00:43E3  FE 04                   CP $04
     293.  00:43E5  CA F9 43                JP Z,.MOVE_SHOOT_DOWN
     294.  00:43E8  C9                      RET
     295.  00:43E9                      
     296.  00:43E9                      .MOVE_SHOOT_RIGHT:        
     297.  00:43E9  3E 03                   LD A, MOV_SPEED_SHOOT
     298.  00:43EB  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     299.  00:43EE  C3 06 44                JP .CHECK_SHOOT_DISTANCE
     300.  00:43F1                      
     301.  00:43F1                      .MOVE_SHOOT_UP:        
     302.  00:43F1  3E FD                   LD A, -MOV_SPEED_SHOOT
     303.  00:43F3  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     304.  00:43F6  C3 06 44                JP .CHECK_SHOOT_DISTANCE
     305.  00:43F9                      
     306.  00:43F9                      .MOVE_SHOOT_DOWN:
     307.  00:43F9  3E 03                   LD A, MOV_SPEED_SHOOT
     308.  00:43FB  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     309.  00:43FE  C3 06 44                JP .CHECK_SHOOT_DISTANCE
     310.  00:4401                      
     311.  00:4401                      .MOVE_SHOOT_LEFT:    
     312.  00:4401  3E FD                   LD A, -MOV_SPEED_SHOOT
     313.  00:4403  32 16 C0            	LD (CHAR_SPEED_SHOOT), A    
     314.  00:4406                      
     315.  00:4406                      .CHECK_SHOOT_DISTANCE:
     316.  00:4406                          ; Miramos si va a izq o der
     317.  00:4406  3A 13 C0                LD A,(CHAR_MAIN_SHOOT)    
     318.  00:4409  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     319.  00:440B  D2 1B 44                JP NC,.ADD_SHOOT_Y
     320.  00:440E                          ; Movemos el disparo
     321.  00:440E  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     322.  00:4411  2A 16 C0            	LD HL, (CHAR_SPEED_SHOOT)
     323.  00:4414  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     324.  00:4415  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     325.  00:4418  C3 25 44                JP .ADD_DISTANCE
     326.  00:441B                      .ADD_SHOOT_Y
     327.  00:441B                          ; Movemos el disparo
     328.  00:441B  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     329.  00:441E  2A 16 C0            	LD HL, (CHAR_SPEED_SHOOT)
     330.  00:4421  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     331.  00:4422  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     332.  00:4425                      
     333.  00:4425                      .ADD_DISTANCE:
     334.  00:4425  3A 15 C0                LD A,(CHAR_DISTANCE_SHOOT)
     335.  00:4428  C6 03                   ADD MOV_SPEED_SHOOT
     336.  00:442A  32 15 C0                LD (CHAR_DISTANCE_SHOOT),A    
     337.  00:442D  FE 30                   CP MAX_DISTANCE_SHOOT
     338.  00:442F  C0                      RET NZ
     339.  00:4430                      
     340.  00:4430                      .HIDE_SHOOT:
     341.  00:4430  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     342.  00:4434  AF                      XOR A
     343.  00:4435  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     344.  00:4438  32 15 C0                LD (CHAR_DISTANCE_SHOOT),A
     345.  00:443B  C9                      RET
     346.  00:443C                      
      27   00:443C                      	include "include\VDP.asm"
       1.  00:443C                      print_strings_dialog_box:
       2.  00:443C                      
       3.  00:443C  FD 66 01            	LD H, (IY+1)
       4.  00:443F  FD 6E 00            	LD L, (IY)
       5.  00:4442  11 28 5C            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
       6.  00:4445  FD E5               	PUSH IY
       7.  00:4447  CD 69 44                call print_string 
       8.  00:444A  FD E1                   POP IY
       9.  00:444C                      
      10.  00:444C  FD 66 03            	LD H, (IY+3)
      11.  00:444F  FD 6E 02            	LD L, (IY+2)
      12.  00:4452  11 28 60                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
      13.  00:4455  FD E5               	PUSH IY
      14.  00:4457  CD 69 44                call print_string 
      15.  00:445A  FD E1               	POP IY
      16.  00:445C                      
      17.  00:445C  FD 66 05                LD H, (IY+5)
      18.  00:445F  FD 6E 04            	LD L, (IY+4)
      19.  00:4462  11 28 64            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
      20.  00:4465  CD 69 44                call print_string 
      21.  00:4468  C9                  	RET
      22.  00:4469                      
      23.  00:4469                      print_string:       
      24.  00:4469                      	
      25.  00:4469                      	;LD HL, string01
      26.  00:4469                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
      27.  00:4469                      .loop_str:
      28.  00:4469  7E                  	LD A, (HL)
      29.  00:446A  A7                  	AND A
      30.  00:446B  C8                  	RET Z
      31.  00:446C                      
      32.  00:446C  D6 20               	SUB 32
      33.  00:446E  CB 07               	RLC A
      34.  00:4470  CB 07               	RLC A	
      35.  00:4472                          
      36.  00:4472  06 00               	LD B, 0
      37.  00:4474  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
      38.  00:4475                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
      39.  00:4475                      				; Si #ASCII > 63 -> 2ª línea
      40.  00:4475                      				; segunda línea - ((#ASCII -32)*4)+1024
      41.  00:4475                      	
      42.  00:4475  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
      43.  00:4476  E5                  	PUSH HL
      44.  00:4477  21 00 80            	LD HL, FONT
      45.  00:447A  09                  	ADD HL, BC
      46.  00:447B  FE 40               	CP 64
      47.  00:447D  DA 84 44            	JP C, .first_line_font
      48.  00:4480  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
      49.  00:4483  09                  	ADD HL, BC
      50.  00:4484                      
      51.  00:4484                      .first_line_font:
      52.  00:4484  22 A2 C0                LD (BITMAP), HL
      53.  00:4487                          
      54.  00:4487  06 06               	LD B, :FONT
      55.  00:4489  D5                  	PUSH DE
      56.  00:448A  CD 9D 44                call print_char
      57.  00:448D  D1                      POP DE
      58.  00:448E                      	
      59.  00:448E  FD 21 04 00         	LD IY, 4
      60.  00:4492  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
      61.  00:4494  FD 54               	LD D, IYH
      62.  00:4496  FD 5D               	LD E, IYL
      63.  00:4498                      	
      64.  00:4498                      
      65.  00:4498  E1                  	POP HL
      66.  00:4499  23                  	INC HL
      67.  00:449A  18 CD               	JR .loop_str
      68.  00:449C                          
      69.  00:449C  C9                      RET
      70.  00:449D                      
      71.  00:449D                      print_char
      72.  00:449D  AF                  		XOR A		
      73.  00:449E  0E 00               		ld		c,0
      74.  00:44A0                      		;ld		de,0
      75.  00:44A0  ED 53 01 C0         		LD (CHR_ACR), DE
      76.  00:44A4  CD F9 40                	call	_vdpsetvramwr		
      77.  00:44A7  78                  		ld	a, b			; 1st page bitmap
      78.  00:44A8                      		;ld	d,a
      79.  00:44A8  32 00 70            		ld	(_bank2),a
      80.  00:44AB  2A A2 C0            		ld	hl,(BITMAP)		; Bitmap address
      81.  00:44AE  3E 08               		ld	a, 8			; #lineas del caracter
      82.  00:44B0  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
      83.  00:44B3  ED B3                       otir
      84.  00:44B5  01 7C 00                    LD BC, 124
      85.  00:44B8  09                          ADD HL, BC
      86.  00:44B9  F5                  		PUSH AF
      87.  00:44BA                      
      88.  00:44BA  FD 2A 01 C0         		LD IY, (CHR_ACR)
      89.  00:44BE  01 80 00            		LD BC, 128
      90.  00:44C1  FD 09               		ADD IY, BC
      91.  00:44C3  FD 54               		LD D, IYH
      92.  00:44C5  FD 5D               		LD E, IYL
      93.  00:44C7  A9                  		XOR C
      94.  00:44C8  ED 53 01 C0         		LD (CHR_ACR), DE
      95.  00:44CC  CD F9 40            		call	_vdpsetvramwr		
      96.  00:44CF  F1                  		POP AF		
      97.  00:44D0                      
      98.  00:44D0  3D                  		dec	a
      99.  00:44D1  20 DD               		jr	nz,1b		
     100.  00:44D3  C9                  		ret 
     101.  00:44D4                      
     102.  00:44D4                      CLEAR_DIALOG_BOX:		
     103.  00:44D4  0E 00               		LD C,0
     104.  00:44D6  11 28 5C            		LD DE, 5C28H
     105.  00:44D9  ED 53 01 C0         		LD (CHR_ACR), DE
     106.  00:44DD  CD F9 40            		call _vdpsetvramwr
     107.  00:44E0  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     108.  00:44E2  21 99 59            1:		LD HL, BLANK_DATA
     109.  00:44E5  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     110.  00:44E8  ED B3               		OTIR
     111.  00:44EA                      
     112.  00:44EA  F5                  		PUSH AF
     113.  00:44EB  FD 2A 01 C0         		LD IY, (CHR_ACR)
     114.  00:44EF  01 80 00            		LD BC, 128
     115.  00:44F2  FD 09               		ADD IY, BC
     116.  00:44F4  FD 54               		LD D, IYH
     117.  00:44F6  FD 5D               		LD E, IYL
     118.  00:44F8  0E 00               		LD C,0
     119.  00:44FA  ED 53 01 C0         		LD (CHR_ACR), DE
     120.  00:44FE  CD F9 40            		call	_vdpsetvramwr		
     121.  00:4501  F1                  		POP AF		
     122.  00:4502                      
     123.  00:4502  3D                  		DEC a
     124.  00:4503  20 DD               		JR NZ,1b
     125.  00:4505  AF                  		XOR A
     126.  00:4506  32 00 C0                	LD (SHOWING_DIALOG), A
     127.  00:4509  C9                  		RET
      28   00:450A                      
      29   00:450A                      START
      30   00:450A                      	; CODE
      31   00:450A                      	;LD A,8
      32   00:450A                      	;CALL CHGMOD    	
      33   00:450A  CD 2C 41                CALL SETPAGES32K
      34   00:450D                      ;	CALL opening_screen
      35   00:450D  3E 01               	LD A,1
      36   00:450F  32 00 70            	LD (_bank2),A
      37   00:4512                      ;	CALL CHGET
      38   00:4512                      	; Empieza el juego    
      39   00:4512  CD 99 40            	call ClearVram_MSX2		
      40   00:4515  CD 3F 41            	call SET_SCREEN5_MODE    
      41   00:4518  CD 8D 40                call Set212Lines
      42   00:451B                              
      43   00:451B  CD 2D 45                call INIT_CHARS_VARS
      44   00:451E  3E FF                   LD A, -MOV_SPEED_GHOST
      45   00:4520  32 0A C0            	LD (CHAR_SPEED_X_GHOST), A
      46   00:4523  21 ED 59                LD HL, PaletteData
      47   00:4526  CD BE 41                CALL SetPalette
      48   00:4529  CD 9E 45                CALL STAGE1
      49   00:452C                          ;call MAIN_LOOP
      50   00:452C                          ;CALL CHGET
      51   00:452C  C9                  	ret
      52   00:452D                      
      53   00:452D                      
      54   00:452D                      INIT_CHARS_VARS:    
      55   00:452D  DD 21 17 C0             ld ix, SPRITE_ATTRS           
      56   00:4531                          
      57   00:4531  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      58   00:4535  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      59   00:4539  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      60   00:453D                      
      61   00:453D  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      62   00:4541  DD 36 05 7F             ld (ix+5), 7Fh
      63   00:4545  DD 36 06 04             ld (ix+6), 04h        
      64   00:4549                      
      65   00:4549  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      66   00:454D  DD 36 09 7F             ld (ix+9), 7Fh
      67   00:4551  DD 36 0A 08             ld (ix+10), 08h        
      68   00:4555                      
      69   00:4555  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost
      70   00:4559  DD 36 11 B9             ld (ix+SPR_GHOST_STG1+1), $B9
      71   00:455D  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
      72   00:4561                          
      73   00:4561  AF                      XOR A
      74   00:4562  32 07 C0                LD (JIFFY_TEMP),A
      75   00:4565  32 08 C0                LD (CHAR_SPEED_X),A
      76   00:4568  32 09 C0                LD (CHAR_SPEED_Y),A
      77   00:456B  32 0A C0                LD (CHAR_SPEED_X_GHOST),A
      78   00:456E  32 0F C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
      79   00:4571  32 12 C0                LD (CHAR_NEW_DIR_MAIN),A    
      80   00:4574  32 13 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
      81   00:4577  32 15 C0                LD (CHAR_DISTANCE_SHOOT),A
      82   00:457A  32 16 C0                LD (CHAR_SPEED_SHOOT),A
      83   00:457D  32 0C C0                LD (CHAR_GHOST_DEAD),A
      84   00:4580  32 14 C0                LD (CHAR_MIN_STEP), A
      85   00:4583  32 9E C0                LD (SPRITE_COLOR_REPLACE2), A
      86   00:4586                         ; LD A,$FF
      87   00:4586  32 06 C0                LD (OLD_KEY_PRESSED), A
      88   00:4589  3E 01                   LD A,$01
      89   00:458B  32 11 C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      90   00:458E                      
      91   00:458E  21 09 49                ld hl, SPRITE_P1_DOWN
      92   00:4591  22 9A C0                ld (SPRITE_PTR_REPLACE), HL    
      93   00:4594  21 99 4E                ld hl, SPRITE_COLOR_P1_DOWN
      94   00:4597  22 9C C0                ld (SPRITE_COLOR_REPLACE), HL
      95   00:459A  22 9E C0                LD (SPRITE_COLOR_REPLACE2), HL
      96   00:459D  C9                      ret
      97   00:459E                      
      98   00:459E                      STAGE1:
      99   00:459E  CD 41 00                CALL DISSCR
     100   00:45A1  21 00 80                LD HL, CEMENTER1
     101   00:45A4  22 A2 C0                LD (BITMAP), HL
     102   00:45A7  06 07                   LD B, :CEMENTER1
     103   00:45A9  CD D7 40                call load_screen
     104   00:45AC                          
     105   00:45AC  CD 61 41                call DUMP_SPR_ALL
     106   00:45AF  CD A1 41                CALL DUMP_SPR_P1
     107   00:45B2  21 59 4F                LD HL, mapa1
     108   00:45B5  22 A0 C0                LD (MAPA), HL
     109   00:45B8                          
     110   00:45B8  CD 44 00                CALL ENASCR
     111   00:45BB                          ;CALL CHGET
     112   00:45BB                          ;CALL CLEAR_DIALOG_BOX
     113   00:45BB                          
     114   00:45BB                      MAIN_LOOP:
     115   00:45BB                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     116   00:45BB  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     117   00:45BE  FE 00                   CP $00
     118   00:45C0  CA 12 47                JP Z, STAGE2
     119   00:45C3  CD 86 41                call DUMP_SPR_ATTS    
     120   00:45C6                          
     121   00:45C6  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     122   00:45C9  FE B0                   CP 176
     123   00:45CB  20 15                   JR NZ, .check_dialog_box
     124   00:45CD  3A 00 C0                LD A, (SHOWING_DIALOG)
     125   00:45D0  FE 01                   CP 1
     126   00:45D2  28 16                   JR Z, .animate_ghost
     127   00:45D4  FD 21 10 40             LD IY, sardu01_strings
     128   00:45D8  CD 3C 44                CALL print_strings_dialog_box
     129   00:45DB  3E 01                   LD A,1
     130   00:45DD  32 00 C0                LD (SHOWING_DIALOG), A
     131   00:45E0  18 08                   JR .animate_ghost
     132   00:45E2                      
     133   00:45E2                      
     134   00:45E2                      .check_dialog_box
     135   00:45E2  3A 00 C0                LD A, (SHOWING_DIALOG)
     136   00:45E5  FE 01                   CP 1
     137   00:45E7  CC D4 44                CALL Z, CLEAR_DIALOG_BOX
     138   00:45EA                      
     139   00:45EA                      .animate_ghost    
     140   00:45EA  3A 0C C0                LD A,(CHAR_GHOST_DEAD)
     141   00:45ED  FE 01                   CP $01
     142   00:45EF  CA 50 46                JP Z,.continue
     143   00:45F2  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     144   00:45F5  2A 0A C0            	LD HL, (CHAR_SPEED_X_GHOST)
     145   00:45F8  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     146   00:45F9                          
     147   00:45F9  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A	
     148   00:45FC  FE 16                   CP $16
     149   00:45FE  CA 09 46                JP Z,.CHANGE_DIR_RIGHT
     150   00:4601  FE B9                   CP $B9
     151   00:4603  CA 16 46                JP Z,.CHANGE_DIR_LEFT
     152   00:4606                          		
     153   00:4606  C3 1F 46                JP .check_pattern
     154   00:4609                      
     155   00:4609                      .CHANGE_DIR_RIGHT:
     156   00:4609  3E 01                   LD A, MOV_SPEED_GHOST
     157   00:460B  32 0A C0            	LD (CHAR_SPEED_X_GHOST), A
     158   00:460E  3E FF                   LD A,$FF
     159   00:4610  32 0F C0                LD (CHAR_DIR_GHOST1),A
     160   00:4613  C3 1F 46                JP .check_pattern
     161   00:4616                      
     162   00:4616                      .CHANGE_DIR_LEFT:
     163   00:4616  3E FF                   LD A, -MOV_SPEED_GHOST
     164   00:4618  32 0A C0            	LD (CHAR_SPEED_X_GHOST), A
     165   00:461B  AF                      XOR A   ; Pone A a 0
     166   00:461C  32 0F C0                LD (CHAR_DIR_GHOST1),A
     167   00:461F                      
     168   00:461F                      .check_pattern:
     169   00:461F  3A 0F C0                LD A,(CHAR_DIR_GHOST1)
     170   00:4622  FE FF                   CP $FF
     171   00:4624  CA 3D 46                JP Z,.check_pattern_RIGHT
     172   00:4627  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     173   00:462A  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     174   00:462C  CA 36 46                jp z,.change_pattern_L
     175   00:462F  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     176   00:4633  C3 50 46                jp .continue
     177   00:4636                      .change_pattern_L:
     178   00:4636  DD 36 12 20             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     179   00:463A  C3 50 46                jp .continue
     180   00:463D                      
     181   00:463D                      .check_pattern_RIGHT
     182   00:463D  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     183   00:4640  FE 24                   CP SPR_GHOST_STG1_PTRN_R1
     184   00:4642  CA 4C 46                jp z,.change_pattern_R
     185   00:4645  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     186   00:4649  C3 50 46                jp .continue
     187   00:464C                      .change_pattern_R:
     188   00:464C  DD 36 12 28             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     189   00:4650                      
     190   00:4650                      .continue:    
     191   00:4650  CD D1 43                CALL MOVE_SHOOT
     192   00:4653                      .CHECK_GHOST:
     193   00:4653                          ; Comprobamos si hay colision con el fantasma
     194   00:4653  3A 0C C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     195   00:4656  FE 01                   CP $01
     196   00:4658  CA 78 46                JP Z,.check_KB
     197   00:465B                      
     198   00:465B  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     199   00:465E  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     200   00:4661  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     201   00:4664  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     202   00:4667  CD 40 40                call check_spr_collision
     203   00:466A  FE 01                   CP 1
     204   00:466C  C2 78 46                JP NZ,.check_KB
     205   00:466F                      
     206   00:466F                      .KILL_GHOST:
     207   00:466F  3E 01                   LD A,1
     208   00:4671  32 0C C0                LD (CHAR_GHOST_DEAD),A
     209   00:4674  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     210   00:4678                      
     211   00:4678                      .check_KB:
     212   00:4678  76                      halt    
     213   00:4679                      
     214   00:4679  3A 06 C0                LD A, (OLD_KEY_PRESSED)
     215   00:467C  47                      LD B, A
     216   00:467D                      
     217   00:467D  3E 08                   ld a, 8
     218   00:467F  CD 41 01            	call SNSMAT   
     219   00:4682                          
     220   00:4682  32 06 C0                LD (OLD_KEY_PRESSED), A
     221   00:4685                          ;XOR B
     222   00:4685                          ;AND B
     223   00:4685                      
     224   00:4685  4F                      LD C,A    
     225   00:4686                          
     226   00:4686  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     227   00:4688  CC 3C 42                call z, move_right
     228   00:468B                          
     229   00:468B  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     230   00:468D  CC 8A 42                call z, move_left
     231   00:4690                      
     232   00:4690  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     233   00:4692  CC CD 41                call z, move_up
     234   00:4695                      
     235   00:4695  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     236   00:4697  CC 04 42                call z, move_down
     237   00:469A                      
     238   00:469A                      no_arrows:
     239   00:469A  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     240   00:469C  CC A2 46                call z,SHOOT_MAIN_CHAR
     241   00:469F                      
     242   00:469F                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     243   00:469F                          ;ret z
     244   00:469F                      
     245   00:469F  C3 BB 45                jp MAIN_LOOP
     246   00:46A2                      
     247   00:46A2                      SHOOT_MAIN_CHAR:    
     248   00:46A2  3A 13 C0                LD A, (CHAR_MAIN_SHOOT)
     249   00:46A5  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     250   00:46A7  C8                      RET Z;,MAIN_LOOP
     251   00:46A8  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     252   00:46AA  C8                      RET Z;,MAIN_LOOP
     253   00:46AB  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     254   00:46AD  C8                      RET Z;,MAIN_LOOP
     255   00:46AE  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     256   00:46B0  C8                      RET Z;,MAIN_LOOP
     257   00:46B1                      
     258   00:46B1  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     259   00:46B5                      
     260   00:46B5  DD 7E 00                LD A, (ix)          
     261   00:46B8  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     262   00:46BB                      
     263   00:46BB  3A 11 C0                LD A, (CHAR_DIR_MAIN)
     264   00:46BE  FE 03                   CP $03
     265   00:46C0  CA DC 46                JP Z,.SHOOT_RIGHT
     266   00:46C3  FE 00                   CP $00
     267   00:46C5  CA EB 46                JP Z,.SHOOT_UP
     268   00:46C8  FE 01                   CP $01
     269   00:46CA  CA FE 46                JP Z,.SHOOT_DOWN
     270   00:46CD                          ; SHOOT LEFT
     271   00:46CD  3E 01                   LD A,$01                ; SHOOT LEFT
     272   00:46CF  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     273   00:46D2  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     274   00:46D5  21 F4 FF            	LD HL, -12
     275   00:46D8  85                  	ADD L
     276   00:46D9                          
     277   00:46D9  C3 0E 47                JP .CONTINUE
     278   00:46DC                      
     279   00:46DC                      .SHOOT_RIGHT:    
     280   00:46DC  3E 02                   LD A,$02
     281   00:46DE  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     282   00:46E1                          
     283   00:46E1  DD 7E 01                LD A, (ix+1)			;cargamos la X
     284   00:46E4  21 0C 00            	LD HL, 12
     285   00:46E7  85                  	ADD L
     286   00:46E8  C3 0E 47                JP .CONTINUE
     287   00:46EB                      
     288   00:46EB                      .SHOOT_UP:
     289   00:46EB  3E 03                   LD A,$03
     290   00:46ED  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     291   00:46F0                          
     292   00:46F0                          ; Sumamos el desplazamiento a la Y
     293   00:46F0  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     294   00:46F3  D6 10                   SUB 16
     295   00:46F5  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     296   00:46F8                          ;LD (ix+17), D
     297   00:46F8  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     298   00:46FB  C3 0E 47                JP .CONTINUE
     299   00:46FE                      
     300   00:46FE                      .SHOOT_DOWN
     301   00:46FE  3E 04               	LD A,$04
     302   00:4700  32 13 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     303   00:4703                          
     304   00:4703                          ; Sumamos el desplazamiento a la Y
     305   00:4703  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     306   00:4706  C6 10                   ADD 16
     307   00:4708  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     308   00:470B                          ;LD (ix+17), D
     309   00:470B  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     310   00:470E                      
     311   00:470E                      .CONTINUE:
     312   00:470E                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     313   00:470E  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     314   00:4711                          ;jp MAIN_LOOP
     315   00:4711  C9                      ret
     316   00:4712                      
     317   00:4712                      STAGE2:
     318   00:4712  CD 41 00                CALL DISSCR
     319   00:4715  21 00 80                LD HL, CEMENTER2
     320   00:4718  22 A2 C0                LD (BITMAP), HL
     321   00:471B  06 0D                   LD B, :CEMENTER2
     322   00:471D                      
     323   00:471D  CD D7 40                call load_screen
     324   00:4720  21 99 52                LD HL, mapa2
     325   00:4723  22 A0 C0                LD (MAPA), HL
     326   00:4726                      
     327   00:4726  DD 36 00 A0             LD (ix), 160    ; Ponemos el P1 abajo
     328   00:472A  DD 36 04 C4             LD (ix+4), 196    
     329   00:472E  DD 36 08 C4             LD (ix+8), 196    
     330   00:4732                          
     331   00:4732  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     332   00:4736                          
     333   00:4736  CD 61 41                call DUMP_SPR_ALL    
     334   00:4739  CD A1 41                CALL DUMP_SPR_P1
     335   00:473C                          ; Esqueleto
     336   00:473C  DD 36 14 10             LD (ix+20), 10h
     337   00:4740  DD 36 15 10             LD (ix+21), 10h
     338   00:4744  DD 36 16 3C             LD (ix+22), 3Ch
     339   00:4748                      
     340   00:4748  DD 36 18 10             LD (ix+24), 10h
     341   00:474C  DD 36 19 10             LD (ix+25), 10h
     342   00:4750  DD 36 1A 40             LD (ix+26), 40h
     343   00:4754                      
     344   00:4754  AF                      XOR A
     345   00:4755  32 0D C0                LD (CHAR_GHOST_DEAD_STG2), A
     346   00:4758  32 0E C0                LD (CHAR_MIN_STEP_STG2), A
     347   00:475B  3E FF                   LD A, $FF
     348   00:475D  32 10 C0                LD (CHAR_DIR_GHOST_STG2), A
     349   00:4760  3E 01                   LD A, MOV_SPEED_GHOST
     350   00:4762  32 0B C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     351   00:4765                      
     352   00:4765  CD 44 00                CALL ENASCR
     353   00:4768                          
     354   00:4768                      MAIN_LOOP2:
     355   00:4768  76                      halt    
     356   00:4769                      
     357   00:4769  DD 7E 00                LD A, (ix)    
     358   00:476C  FE C6                   CP 198
     359   00:476E  C2 94 47                JP NZ, .no_screen_change
     360   00:4771                          ; Ponemos el SP1 al principio de la pantalla 1
     361   00:4771  DD 36 00 01             LD (ix), 1          ; SP1 - Y = 1
     362   00:4775  DD 36 04 01             LD (ix+4), 1
     363   00:4779  DD 36 08 01             LD (ix+8), 1
     364   00:477D                      
     365   00:477D  3A 0C C0                LD A, (CHAR_GHOST_DEAD)
     366   00:4780  FE 01                   CP $01
     367   00:4782  CA 89 47                JP Z, .GHOST_DEAD
     368   00:4785  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     369   00:4789                      .GHOST_DEAD:
     370   00:4789  DD 36 14 D9             LD (ix+20),217  ; ocultamos el esqueleto
     371   00:478D  DD 36 18 D9             LD (ix+24),217  ; ocultamos el esqueleto
     372   00:4791  CD 9E 45                CALL STAGE1
     373   00:4794                      
     374   00:4794                      .no_screen_change:
     375   00:4794                      
     376   00:4794  CD 86 41                call DUMP_SPR_ATTS    
     377   00:4797                          ; Movemos el esqueleto
     378   00:4797  3A 0D C0                LD A,(CHAR_GHOST_DEAD_STG2)
     379   00:479A  FE 01                   CP $01
     380   00:479C  CA 21 48                JP Z,.continue
     381   00:479F  DD 7E 15                LD A, (ix+21)          ;cargamos la X del Esqueleto
     382   00:47A2  2A 0B C0            	LD HL, (CHAR_SPEED_X_GHOST_STG2)
     383   00:47A5  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     384   00:47A6                          
     385   00:47A6  DD 77 15            	LD (ix+21), A	
     386   00:47A9  DD 77 19                LD (ix+25), A
     387   00:47AC  FE 16                   CP $16
     388   00:47AE  CA C6 47                JP Z,.CHANGE_DIR_RIGHT
     389   00:47B1  FE B9                   CP $B9
     390   00:47B3  CA D3 47                JP Z,.CHANGE_DIR_LEFT
     391   00:47B6                      
     392   00:47B6  3A 0E C0                LD A, (CHAR_MIN_STEP_STG2)		
     393   00:47B9  FE 06                   CP MAX_CHAR_STEPS_STG2
     394   00:47BB  CA DC 47                JP Z,.check_pattern
     395   00:47BE  C6 01                   ADD 1
     396   00:47C0  32 0E C0                LD (CHAR_MIN_STEP_STG2), A
     397   00:47C3  C3 21 48                JP .continue
     398   00:47C6                      
     399   00:47C6                      .CHANGE_DIR_RIGHT:
     400   00:47C6  3E 01                   LD A, MOV_SPEED_GHOST
     401   00:47C8  32 0B C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     402   00:47CB  3E FF                   LD A,$FF
     403   00:47CD  32 10 C0                LD (CHAR_DIR_GHOST_STG2),A
     404   00:47D0  C3 DC 47                JP .check_pattern
     405   00:47D3                      
     406   00:47D3                      .CHANGE_DIR_LEFT:
     407   00:47D3  3E FF                   LD A, -MOV_SPEED_GHOST
     408   00:47D5  32 0B C0            	LD (CHAR_SPEED_X_GHOST_STG2), A
     409   00:47D8  AF                      XOR A   ; Pone A a 0
     410   00:47D9  32 10 C0                LD (CHAR_DIR_GHOST_STG2),A
     411   00:47DC                      
     412   00:47DC                      .check_pattern:
     413   00:47DC  AF                      XOR A
     414   00:47DD  32 0E C0                LD (CHAR_MIN_STEP_STG2), A
     415   00:47E0  3A 10 C0                LD A,(CHAR_DIR_GHOST_STG2)
     416   00:47E3  FE FF                   CP $FF
     417   00:47E5  CA 06 48                JP Z,.check_pattern_RIGHT
     418   00:47E8  DD 7E 16                LD A, (ix+22)       ; Cargamos el patrón y lo cambiamos
     419   00:47EB  FE 2C                   CP $2C
     420   00:47ED  CA FB 47                jp z,.change_pattern_L
     421   00:47F0  DD 36 16 2C             LD (ix+22),$2C
     422   00:47F4  DD 36 1A 30             LD (ix+26),$30
     423   00:47F8  C3 21 48                jp .continue
     424   00:47FB                      .change_pattern_L:
     425   00:47FB  DD 36 16 34             LD (ix+22),$34
     426   00:47FF  DD 36 1A 38             LD (ix+26),$38
     427   00:4803  C3 21 48                jp .continue
     428   00:4806                      
     429   00:4806                      .check_pattern_RIGHT
     430   00:4806  DD 7E 16                LD A, (ix+22)       ; Cargamos el patrón y lo cambiamos
     431   00:4809  FE 3C                   CP $3C
     432   00:480B  CA 19 48                jp z,.change_pattern_R
     433   00:480E  DD 36 16 3C             LD (ix+22),$3C
     434   00:4812  DD 36 1A 40             LD (ix+26),$40
     435   00:4816  C3 21 48                jp .continue
     436   00:4819                      .change_pattern_R:
     437   00:4819  DD 36 16 44             LD (ix+22),$44
     438   00:481D  DD 36 1A 48             LD (ix+26),$48
     439   00:4821                      
     440   00:4821                      .continue:
     441   00:4821  CD D1 43                CALL MOVE_SHOOT    
     442   00:4824                      
     443   00:4824  3E 08                   ld a, 8
     444   00:4826  CD 41 01            	call SNSMAT   
     445   00:4829  4F                      LD C,A    
     446   00:482A                              
     447   00:482A  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     448   00:482C  CC 3C 42                call z, move_right
     449   00:482F                          
     450   00:482F  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     451   00:4831  CC 8A 42                call z, move_left
     452   00:4834                      
     453   00:4834  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     454   00:4836  CC CD 41                call z, move_up
     455   00:4839                      
     456   00:4839  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     457   00:483B  CC 04 42                call z, move_down
     458   00:483E                      
     459   00:483E  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     460   00:4840  CC A2 46                call z,SHOOT_MAIN_CHAR
     461   00:4843                      
     462   00:4843  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     463   00:4845  C8                      ret z
     464   00:4846                      
     465   00:4846  C3 68 47                jp MAIN_LOOP2
     466   00:4849                      
     467   00:4849                      include "include\BTH_data.asm"
       1.  00:4849                      SPRITE_P1_UP:
       2.  00:4849                          ; UP 1        
       3.  00:4849                          ; mask 0
       4.  00:4849                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  00:4849  07 0F 05 1F 1F 3F 3F 7F 
       5.  00:4851                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  00:4851  00 4F 70 38 0C 0E 07 04 
       6.  00:4859                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  00:4859  E0 F0 A0 F8 F8 F8 FC FE 
       7.  00:4861                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  00:4861  06 F2 1E 3C 30 70 C0 00 
       8.  00:4869                          ; mask 1
       9.  00:4869                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  00:4869  00 00 18 00 1F 00 00 00 
      10.  00:4871                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  00:4871  7F 50 4F 3F 0F 0F 07 02 
      11.  00:4879                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  00:4879  00 00 10 00 FC 00 00 00 
      12.  00:4881                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  00:4881  F2 0E FE FC F0 F0 A0 00 
      13.  00:4889                          ; mask 2
      14.  00:4889                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  00:4889  00 00 1A 00 00 00 00 00 
      15.  00:4891                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  00:4891  7F 60 00 00 00 00 07 00 
      16.  00:4899                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  00:4899  00 00 50 00 00 00 00 00 
      17.  00:48A1                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  00:48A1  FA 0E 00 00 00 00 80 00 
      18.  00:48A9                          
      19.  00:48A9                          ; UP 2
      20.  00:48A9                          ; mask 0
      21.  00:48A9                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  00:48A9  07 0F 05 1F 1F 3F 3F 7F 
      22.  00:48B1                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  00:48B1  10 4F 70 38 0C 0E 05 00 
      23.  00:48B9                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  00:48B9  E0 F0 A0 F8 F8 F8 FC FE 
      24.  00:48C1                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  00:48C1  02 F2 1E 3C 30 70 E0 40 
      25.  00:48C9                          ; mask 1
      26.  00:48C9                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  00:48C9  00 00 18 00 1F 00 00 00 
      27.  00:48D1                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  00:48D1  4F 70 7F 3F 0F 0F 03 00 
      28.  00:48D9                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  00:48D9  00 00 10 00 FC 00 00 00 
      29.  00:48E1                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  00:48E1  FE 06 F2 FC F0 F0 E0 20 
      30.  00:48E9                          ; mask 2
      31.  00:48E9                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  00:48E9  00 00 1A 00 00 00 00 00 
      32.  00:48F1                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  00:48F1  6F 70 00 00 00 00 01 00 
      33.  00:48F9                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  00:48F9  00 00 50 00 00 00 00 00 
      34.  00:4901                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  00:4901  FE 0A 00 00 00 00 E0 00 
      35.  00:4909                          
      36.  00:4909                      SPRITE_P1_DOWN:
      37.  00:4909                          ; DOWN 1 - 00h
      38.  00:4909                          ; mask 0
      39.  00:4909                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  00:4909  07 0F 04 06 0F 07 1F 3F 
      40.  00:4911                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  00:4911  4C 4E 4E 3C 0C 0E 0F 08 
      41.  00:4919                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  00:4919  E0 F0 20 20 70 E0 F8 FC 
      42.  00:4921                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  00:4921  32 72 7E 7C 70 F0 C0 00 
      43.  00:4929                          ; mask 1
      44.  00:4929                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  00:4929  00 00 19 19 10 3A 3A 78 
      45.  00:4931                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  00:4931  5F 5E 7E 3C 0C 0E 0F 04 
      46.  00:4939                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  00:4939  00 00 90 D8 88 58 5C 1E 
      47.  00:4941                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  00:4941  F6 FE FE 3C 30 70 A0 00 
      48.  00:4949                          ; mask 2
      49.  00:4949                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  00:4949  00 00 1B 00 10 00 00 00 
      50.  00:4951                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  00:4951  6F 6F 7F 3F 0F 0F 0F 00 
      51.  00:4959                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  00:4959  00 00 D0 00 8C 00 00 00 
      52.  00:4961                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  00:4961  FA 7E 7E BC B0 70 80 00 
      53.  00:4969                          
      54.  00:4969                          ; DOWN 2
      55.  00:4969                          ; mask 0 - 0Ch    
      56.  00:4969                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  00:4969  07 0F 04 06 0F 07 1F 3F 
      57.  00:4971                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  00:4971  4C 4E 7E 3C 0C 0E 05 00 
      58.  00:4979                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  00:4979  E0 F0 20 20 70 E0 F8 FC 
      59.  00:4981                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  00:4981  32 72 72 7C 70 F0 E0 40 
      60.  00:4989                          ; mask 1
      61.  00:4989                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  00:4989  00 00 19 19 10 3A 3A 78 
      62.  00:4991                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  00:4991  5F 7E 7E 3C 0C 0E 03 00 
      63.  00:4999                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  00:4999  00 00 90 D8 88 58 5C 1E 
      64.  00:49A1                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  00:49A1  F6 F6 FE 3C 30 70 E0 20 
      65.  00:49A9                          ; mask 2
      66.  00:49A9                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  00:49A9  00 00 1B 00 10 00 00 00 
      67.  00:49B1                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  00:49B1  6F 7F 7F 3F 0F 0F 01 00 
      68.  00:49B9                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  00:49B9  00 00 D0 00 8C 00 00 00 
      69.  00:49C1                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  00:49C1  FA 7A 7E BC B0 70 E0 00 
      70.  00:49C9                      
      71.  00:49C9                      SPRITE_P1_LEFT:         
      72.  00:49C9                          ; --- Slot 1
      73.  00:49C9                          ; mask 0
      74.  00:49C9                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  00:49C9  07 0F 02 05 07 07 0F 0F 
      75.  00:49D1                          DB $07,$03,$03,$01,$01,$03,$03,$04
      75.  00:49D1  07 03 03 01 01 03 03 04 
      76.  00:49D9                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  00:49D9  E0 F0 80 00 A0 E0 C0 C0 
      77.  00:49E1                          DB $E0,$B0,$B0,$F0,$F0,$F0,$C0,$00
      77.  00:49E1  E0 B0 B0 F0 F0 F0 C0 00 
      78.  00:49E9                          ; mask 1
      79.  00:49E9                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  00:49E9  00 00 18 1A 08 0A 12 10 
      80.  00:49F1                          DB $08,$03,$03,$01,$01,$03,$03,$03
      80.  00:49F1  08 03 03 01 01 03 03 03 
      81.  00:49F9                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  00:49F9  00 00 78 F8 5C 1C 7E 7E 
      82.  00:4A01                          DB $FE,$3E,$3E,$3C,$F8,$F8,$B0,$00    
      82.  00:4A01  FE 3E 3E 3C F8 F8 B0 00 
      83.  00:4A09                          ; mask 2
      84.  00:4A09                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  00:4A09  00 00 1D 00 28 00 00 00 
      85.  00:4A11                          DB $00,$07,$07,$07,$07,$07,$03,$00
      85.  00:4A11  00 07 07 07 07 07 03 00 
      86.  00:4A19                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  00:4A19  00 00 78 00 5C 00 00 00 
      87.  00:4A21                          DB $00,$7E,$7E,$3C,$F8,$F8,$80,$00    
      87.  00:4A21  00 7E 7E 3C F8 F8 80 00 
      88.  00:4A29                          ; --- Slot 3
      89.  00:4A29                          ; mask 0
      90.  00:4A29                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  00:4A29  07 0F 02 05 07 07 0F 0F 
      91.  00:4A31                          DB $07,$03,$03,$01,$01,$03,$04,$00
      91.  00:4A31  07 03 03 01 01 03 04 00 
      92.  00:4A39                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  00:4A39  E0 F0 80 00 A0 E0 C0 C0 
      93.  00:4A41                          DB $E0,$B0,$B0,$B0,$F0,$F0,$E0,$40
      93.  00:4A41  E0 B0 B0 B0 F0 F0 E0 40 
      94.  00:4A49                          ; mask 1
      95.  00:4A49                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  00:4A49  00 00 18 1A 08 0A 12 10 
      96.  00:4A51                          DB $08,$03,$03,$01,$01,$03,$03,$00
      96.  00:4A51  08 03 03 01 01 03 03 00 
      97.  00:4A59                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  00:4A59  00 00 78 F8 5C 1C 7E 7E 
      98.  00:4A61                          DB $FE,$3E,$3E,$3C,$38,$F8,$E0,$30
      98.  00:4A61  FE 3E 3E 3C 38 F8 E0 30 
      99.  00:4A69                          ; mask 2
     100.  00:4A69                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  00:4A69  00 00 1D 00 28 00 00 00 
     101.  00:4A71                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  00:4A71  00 07 07 07 07 07 00 00 
     102.  00:4A79                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  00:4A79  00 00 78 00 5C 00 00 00 
     103.  00:4A81                          DB $00,$7E,$7E,$7C,$38,$F8,$E0,$00
     103.  00:4A81  00 7E 7E 7C 38 F8 E0 00 
     104.  00:4A89                      
     105.  00:4A89                      SPRITE_P1_RIGHT:
     106.  00:4A89                          ; --- Slot 0
     107.  00:4A89                          ; mask 0
     108.  00:4A89                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  00:4A89  07 0F 01 00 05 07 03 03 
     109.  00:4A91                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  00:4A91  07 0D 0E 0F 0F 0F 03 00 
     110.  00:4A99                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  00:4A99  E0 F0 40 A0 E0 E0 F0 F0 
     111.  00:4AA1                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  00:4AA1  E0 C0 C0 C0 80 C0 C0 20 
     112.  00:4AA9                          ; mask 1
     113.  00:4AA9                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  00:4AA9  00 00 1E 1F 3A 38 7E 7E 
     114.  00:4AB1                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  00:4AB1  7F 7C 7E 3E 1F 1F 0D 00 
     115.  00:4AB9                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  00:4AB9  00 00 18 58 10 50 48 08 
     116.  00:4AC1                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  00:4AC1  10 C0 40 40 80 C0 C0 C0 
     117.  00:4AC9                          ; mask 2
     118.  00:4AC9                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  00:4AC9  00 00 1E 00 3A 00 00 00 
     119.  00:4AD1                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  00:4AD1  00 7E 7F 3E 1F 1F 01 00 
     120.  00:4AD9                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  00:4AD9  00 00 B8 00 14 00 00 00 
     121.  00:4AE1                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  00:4AE1  00 E0 60 60 E0 E0 C0 00 
     122.  00:4AE9                          
     123.  00:4AE9                          ; --- Slot 2
     124.  00:4AE9                         ; mask 0
     125.  00:4AE9                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  00:4AE9  07 0F 01 00 05 07 03 03 
     126.  00:4AF1                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  00:4AF1  07 0D 0B 0B 0F 0F 07 02 
     127.  00:4AF9                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  00:4AF9  E0 F0 40 A0 E0 E0 F0 F0 
     128.  00:4B01                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  00:4B01  E0 C0 C0 C0 80 C0 20 00 
     129.  00:4B09                          ; mask 1
     130.  00:4B09                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  00:4B09  00 00 1E 1F 3A 38 7E 7E 
     131.  00:4B11                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  00:4B11  7F 7C 79 39 19 1F 07 0C 
     132.  00:4B19                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  00:4B19  00 00 18 58 10 50 48 08 
     133.  00:4B21                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  00:4B21  10 C0 C0 C0 80 C0 C0 00 
     134.  00:4B29                              ; mask 2
     135.  00:4B29                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  00:4B29  00 00 1E 00 3A 00 00 00 
     136.  00:4B31                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  00:4B31  00 7E 7D 3D 19 1F 07 00 
     137.  00:4B39                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  00:4B39  00 00 B8 00 14 00 00 00 
     138.  00:4B41                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  00:4B41  00 E0 E0 E0 E0 E0 00 00 
     139.  00:4B49                          
     140.  00:4B49                      SPRITE_PATTERN:    
     141.  00:4B49                          ; P1 - DOWN 1 
     142.  00:4B49                          ; DOWN 1 - 00h
     143.  00:4B49                          ; mask 0
     144.  00:4B49                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  00:4B49  07 0F 04 06 0F 07 1F 3F 
     145.  00:4B51                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  00:4B51  4C 4E 4E 3C 0C 0E 0F 08 
     146.  00:4B59                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  00:4B59  E0 F0 20 20 70 E0 F8 FC 
     147.  00:4B61                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  00:4B61  32 72 7E 7C 70 F0 C0 00 
     148.  00:4B69                          ; mask 1
     149.  00:4B69                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  00:4B69  00 00 19 19 10 3A 3A 78 
     150.  00:4B71                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  00:4B71  5F 5E 7E 3C 0C 0E 0F 04 
     151.  00:4B79                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  00:4B79  00 00 90 D8 88 58 5C 1E 
     152.  00:4B81                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  00:4B81  F6 FE FE 3C 30 70 A0 00 
     153.  00:4B89                          ; mask 2
     154.  00:4B89                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  00:4B89  00 00 1B 00 10 00 00 00 
     155.  00:4B91                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  00:4B91  6F 6F 7F 3F 0F 0F 0F 00 
     156.  00:4B99                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  00:4B99  00 00 D0 00 8C 00 00 00 
     157.  00:4BA1                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  00:4BA1  FA 7E 7E BC B0 70 80 00 
     158.  00:4BA9                          
     159.  00:4BA9                          ; DOWN 2
     160.  00:4BA9                          ; mask 0 - 0Ch    
     161.  00:4BA9                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  00:4BA9  07 0F 04 06 0F 07 1F 3F 
     162.  00:4BB1                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  00:4BB1  4C 4E 7E 3C 0C 0E 05 00 
     163.  00:4BB9                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  00:4BB9  E0 F0 20 20 70 E0 F8 FC 
     164.  00:4BC1                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  00:4BC1  32 72 72 7C 70 F0 E0 40 
     165.  00:4BC9                          ; mask 1
     166.  00:4BC9                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  00:4BC9  00 00 19 19 10 3A 3A 78 
     167.  00:4BD1                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  00:4BD1  5F 7E 7E 3C 0C 0E 03 00 
     168.  00:4BD9                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  00:4BD9  00 00 90 D8 88 58 5C 1E 
     169.  00:4BE1                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  00:4BE1  F6 F6 FE 3C 30 70 E0 20 
     170.  00:4BE9                          ; mask 2
     171.  00:4BE9                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  00:4BE9  00 00 1B 00 10 00 00 00 
     172.  00:4BF1                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  00:4BF1  6F 7F 7F 3F 0F 0F 01 00 
     173.  00:4BF9                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  00:4BF9  00 00 D0 00 8C 00 00 00 
     174.  00:4C01                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  00:4C01  FA 7A 7E BC B0 70 E0 00 
     175.  00:4C09                          
     176.  00:4C09                          ; Antichrist - RIGHT
     177.  00:4C09                          ; mask 0 - 18h    
     178.  00:4C09                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  00:4C09  00 00 00 01 01 01 01 01 
     179.  00:4C11                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  00:4C11  01 01 07 07 01 01 00 00 
     180.  00:4C19                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  00:4C19  00 00 00 80 80 80 80 80 
     181.  00:4C21                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  00:4C21  80 80 E0 E0 80 80 00 00 
     182.  00:4C29                      
     183.  00:4C29                          ;Ghost 1 Left - 1CH
     184.  00:4C29                          DB 00h,01h,07h,0fh,1fh,3fh,7fh,01h
     184.  00:4C29  00 01 07 0F 1F 3F 7F 01 
     185.  00:4C31                          DB $15,$14,$7f,$3f,$3f,$3f,$3f,$7f
     185.  00:4C31  15 14 7F 3F 3F 3F 3F 7F 
     186.  00:4C39                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     186.  00:4C39  00 E0 80 00 00 80 80 C0 
     187.  00:4C41                          DB $c0,$e0,$f0,$f8,$fc,$fc,$fe,$ff  
     187.  00:4C41  C0 E0 F0 F8 FC FC FE FF 
     188.  00:4C49                          
     189.  00:4C49                          ; Ghost 2 Left - 20h
     190.  00:4C49                          DB $00,$01,$07,$0f,$1f,$3f,$7f,$01
     190.  00:4C49  00 01 07 0F 1F 3F 7F 01 
     191.  00:4C51                          DB $15,$14,$7f,$3f,$3f,$7f,$7f,$83
     191.  00:4C51  15 14 7F 3F 3F 7F 7F 83 
     192.  00:4C59                          DB $00,$e0,$80,$00,$00,$80,$80,$c0
     192.  00:4C59  00 E0 80 00 00 80 80 C0 
     193.  00:4C61                          DB $c0,$e0,$e0,$f0,$f8,$fc,$fe,$ff      
     193.  00:4C61  C0 E0 E0 F0 F8 FC FE FF 
     194.  00:4C69                      
     195.  00:4C69                          ; Ghost 1 Right - 24h
     196.  00:4C69                          DB $00,$07,$01,$00,$00,$01,$01,$03
     196.  00:4C69  00 07 01 00 00 01 01 03 
     197.  00:4C71                          DB $03,$07,$07,$0f,$1f,$3f,$7f,$ff
     197.  00:4C71  03 07 07 0F 1F 3F 7F FF 
     198.  00:4C79                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     198.  00:4C79  00 80 E0 F0 F8 FC FE 80 
     199.  00:4C81                          DB $a8,$28,$fe,$fc,$fc,$fe,$fe,$c1
     199.  00:4C81  A8 28 FE FC FC FE FE C1 
     200.  00:4C89                          
     201.  00:4C89                          ; Ghost 2 Right - 28h
     202.  00:4C89                          DB $00,$07,$01,$00,$00,$01,$01,$03
     202.  00:4C89  00 07 01 00 00 01 01 03 
     203.  00:4C91                          DB $03,$07,$0f,$1f,$3f,$3f,$7f,$ff
     203.  00:4C91  03 07 0F 1F 3F 3F 7F FF 
     204.  00:4C99                          DB $00,$80,$e0,$f0,$f8,$fc,$fe,$80
     204.  00:4C99  00 80 E0 F0 F8 FC FE 80 
     205.  00:4CA1                          DB $a8,$28,$fe,$fc,$fc,$fc,$fc,$fe  
     205.  00:4CA1  A8 28 FE FC FC FC FC FE 
     206.  00:4CA9                      
     207.  00:4CA9                          
     208.  00:4CA9                      
     209.  00:4CA9                          ; Esqueleto Left - 1
     210.  00:4CA9                          ; mask 0 - 2Ch
     211.  00:4CA9                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     211.  00:4CA9  1F 1B 2E 24 3F 1F 1F 00 
     212.  00:4CB1                          DB $03,$05,$09,$04,$01,$02,$02,$04
     212.  00:4CB1  03 05 09 04 01 02 02 04 
     213.  00:4CB9                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     213.  00:4CB9  80 C0 C0 C0 80 00 00 80 
     214.  00:4CC1                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     214.  00:4CC1  E0 D0 C8 C4 C0 20 20 40 
     215.  00:4CC9                          ; mask 1 - 30h
     216.  00:4CC9                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     216.  00:4CC9  1F 1F 3F 3F 3F 1E 0A 00 
     217.  00:4CD1                          DB $03,$05,$09,$04,$01,$00,$00,$00
     217.  00:4CD1  03 05 09 04 01 00 00 00 
     218.  00:4CD9                          DB $00,$80,$80,$80,$00,$00,$00,$00
     218.  00:4CD9  00 80 80 80 00 00 00 00 
     219.  00:4CE1                          DB $80,$10,$88,$84,$80,$00,$00,$00
     219.  00:4CE1  80 10 88 84 80 00 00 00 
     220.  00:4CE9                      
     221.  00:4CE9                          ; Esqueleto Left - 2
     222.  00:4CE9                          ; mask 0 - 34h
     223.  00:4CE9                          ; mask 0
     224.  00:4CE9                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     224.  00:4CE9  0F 0D 17 12 1F 0F 0F 00 
     225.  00:4CF1                          DB $03,$05,$09,$10,$01,$06,$08,$00
     225.  00:4CF1  03 05 09 10 01 06 08 00 
     226.  00:4CF9                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     226.  00:4CF9  C0 E0 60 60 C0 80 80 80 
     227.  00:4D01                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     227.  00:4D01  E0 D0 C8 D0 C0 20 20 50 
     228.  00:4D09                          ; mask 1 - 38h
     229.  00:4D09                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     229.  00:4D09  0F 0F 1F 1F 1F 0F 05 00 
     230.  00:4D11                          DB $03,$05,$09,$10,$01,$00,$00,$00
     230.  00:4D11  03 05 09 10 01 00 00 00 
     231.  00:4D19                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     231.  00:4D19  80 C0 C0 C0 80 00 00 00 
     232.  00:4D21                          DB $80,$10,$88,$90,$80,$00,$20,$40
     232.  00:4D21  80 10 88 90 80 00 20 40 
     233.  00:4D29                          
     234.  00:4D29                          ; Esqueleto Right - 1
     235.  00:4D29                          ; mask 0 - 3Ch
     236.  00:4D29                          DB $01,$03,$03,$03,$01,$00,$00,$01
     236.  00:4D29  01 03 03 03 01 00 00 01 
     237.  00:4D31                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     237.  00:4D31  07 0B 13 23 03 04 04 02 
     238.  00:4D39                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     238.  00:4D39  F8 D8 74 24 FC F8 F8 00 
     239.  00:4D41                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     239.  00:4D41  C0 A0 90 20 80 40 40 20 
     240.  00:4D49                          ; mask 1 - 40h
     241.  00:4D49                          DB $00,$01,$01,$01,$00,$00,$00,$00
     241.  00:4D49  00 01 01 01 00 00 00 00 
     242.  00:4D51                          DB $01,$08,$11,$21,$01,$00,$00,$00
     242.  00:4D51  01 08 11 21 01 00 00 00 
     243.  00:4D59                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     243.  00:4D59  F8 F8 FC FC FC 78 50 00 
     244.  00:4D61                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     244.  00:4D61  C0 A0 90 20 80 00 00 00 
     245.  00:4D69                          
     246.  00:4D69                          ; Esqueleto Right - 2
     247.  00:4D69                          ; mask 0 - 44h
     248.  00:4D69                          DB $03,$07,$06,$06,$03,$01,$01,$01
     248.  00:4D69  03 07 06 06 03 01 01 01 
     249.  00:4D71                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     249.  00:4D71  07 0B 13 0B 03 04 04 0A 
     250.  00:4D79                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     250.  00:4D79  F0 B0 E8 48 F8 F0 F0 00 
     251.  00:4D81                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     251.  00:4D81  C0 A0 90 08 80 60 10 00 
     252.  00:4D89                          ; mask 1 - 48h
     253.  00:4D89                          DB $01,$03,$03,$03,$01,$00,$00,$00
     253.  00:4D89  01 03 03 03 01 00 00 00 
     254.  00:4D91                          DB $01,$08,$11,$09,$01,$00,$04,$02
     254.  00:4D91  01 08 11 09 01 00 04 02 
     255.  00:4D99                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     255.  00:4D99  F0 F0 F8 F8 F8 F0 A0 00 
     256.  00:4DA1                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     256.  00:4DA1  C0 A0 90 08 80 00 00 00 
     257.  00:4DA9                      
     258.  00:4DA9                      
     259.  00:4DA9                      SPRITE_COLOR_TABLE:       
     260.  00:4DA9                           ;P1 - DOWN 1
     261.  00:4DA9                          ;DOWN 1
     262.  00:4DA9                          ; attr 0
     263.  00:4DA9                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     263.  00:4DA9  05 05 0A 0B 0B 0B 0B 0B 
     264.  00:4DB1                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     264.  00:4DB1  04 04 04 0A 0A 0A 08 08 
     265.  00:4DB9                          ; attr 1
     266.  00:4DB9                          DB $00,$00,$44,$45,$45,$45,$45,$45
     266.  00:4DB9  00 00 44 45 45 45 45 45 
     267.  00:4DC1                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     267.  00:4DC1  4A 4A 4A 44 44 44 45 45 
     268.  00:4DC9                          ; attr 2
     269.  00:4DC9                          DB $00,$00,$41,$00,$40,$00,$00,$00
     269.  00:4DC9  00 00 41 00 40 00 00 00 
     270.  00:4DD1                          DB $41,$41,$41,$41,$41,$41,$42,$00
     270.  00:4DD1  41 41 41 41 41 41 42 00 
     271.  00:4DD9                               
     272.  00:4DD9                          ; Cada posición ha de corresponder con la tabla de atributos    
     273.  00:4DD9                          ; Disparo - antichrist    
     274.  00:4DD9                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     274.  00:4DD9  00 00 00 0A 0A 0A 0A 0A 
     275.  00:4DE1                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     275.  00:4DE1  0A 0A 0A 0A 0A 0A 00 00 
     276.  00:4DE9                      
     277.  00:4DE9                          ; Fantasma
     278.  00:4DE9                          DB $01,$01,$01,$01,$01,$01,$01,$01
     278.  00:4DE9  01 01 01 01 01 01 01 01 
     279.  00:4DF1                          DB $01,$01,$01,$01,$01,$01,$01,$01
     279.  00:4DF1  01 01 01 01 01 01 01 01 
     280.  00:4DF9                          ; Fantasma
     281.  00:4DF9                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     282.  00:4DF9                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     283.  00:4DF9                          ; Fantasma
     284.  00:4DF9                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     285.  00:4DF9                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     286.  00:4DF9                          ; Fantasma
     287.  00:4DF9                          ;DB $08,$08,$08,$08,$08,$08,$08,$08
     288.  00:4DF9                          ;DB $08,$08,$08,$08,$08,$08,$08,$08    
     289.  00:4DF9                          ; Me ahorro los colores del fantasma, la 4a posicion del array de atributos será para el disparo    
     290.  00:4DF9                          
     291.  00:4DF9                          ; Esqueleto Left 1
     292.  00:4DF9                          ; attr 0
     293.  00:4DF9                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     293.  00:4DF9  0E 0E 0E 0E 0E 0E 0E 0E 
     294.  00:4E01                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     294.  00:4E01  0E 0E 0E 0E 0E 0F 0F 0F 
     295.  00:4E09                          ; attr 1
     296.  00:4E09                          DB $41,$49,$49,$49,$41,$41,$41,$00
     296.  00:4E09  41 49 49 49 41 41 41 00 
     297.  00:4E11                          DB $41,$41,$41,$41,$41,$00,$00,$00
     297.  00:4E11  41 41 41 41 41 00 00 00 
     298.  00:4E19                          ; Esqueleto Left 2
     299.  00:4E19                          ; attr 0
     300.  00:4E19                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     300.  00:4E19  0E 0E 0E 0E 0E 0E 0E 0E 
     301.  00:4E21                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0E
     301.  00:4E21  0E 0E 0E 0E 0E 0F 0E 0E 
     302.  00:4E29                          ; attr 1
     303.  00:4E29                          DB $41,$49,$49,$49,$41,$41,$41,$00
     303.  00:4E29  41 49 49 49 41 41 41 00 
     304.  00:4E31                          DB $41,$41,$41,$41,$41,$00,$41,$41
     304.  00:4E31  41 41 41 41 41 00 41 41 
     305.  00:4E39                      
     306.  00:4E39                          ; Esqueleto Right 1
     307.  00:4E39                          ; attr 0
     308.  00:4E39                          ;DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  00:4E39                          ;DB $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0E    
     310.  00:4E39                          ; attr 1
     311.  00:4E39                          ;DB $41,$49,$49,$49,$41,$41,$41,$41
     312.  00:4E39                          ;DB $41,$41,$41,$41,$41,$00,$41,$41
     313.  00:4E39                          ; Esqueleto Right 2
     314.  00:4E39                          ; attr 0
     315.  00:4E39                          ;DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     316.  00:4E39                          ;DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     317.  00:4E39                          ; attr 1
     318.  00:4E39                          ;DB $41,$49,$49,$49,$41,$41,$41,$41
     319.  00:4E39                          ;DB $41,$41,$41,$41,$41,$00,$00,$00
     320.  00:4E39                      
     321.  00:4E39                      SPRITE_COLOR_P1_UP:
     322.  00:4E39                          ;UP 1
     323.  00:4E39                          ; attr 0
     324.  00:4E39                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     324.  00:4E39  05 05 0A 05 05 05 05 05 
     325.  00:4E41                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     325.  00:4E41  0A 05 0B 0A 0A 0A 08 08 
     326.  00:4E49                          ; attr 1
     327.  00:4E49                          DB $00,$00,$44,$00,$40,$00,$00,$00
     327.  00:4E49  00 00 44 00 40 00 00 00 
     328.  00:4E51                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     328.  00:4E51  44 4A 45 45 45 45 45 45 
     329.  00:4E59                          ; attr 2
     330.  00:4E59                          DB $00,$00,$41,$00,$00,$00,$00,$00
     330.  00:4E59  00 00 41 00 00 00 00 00 
     331.  00:4E61                          DB $41,$41,$00,$00,$00,$00,$42,$00
     331.  00:4E61  41 41 00 00 00 00 42 00 
     332.  00:4E69                          
     333.  00:4E69                          ;SPRITE_COLOR_P1_UP2:
     334.  00:4E69                          ;UP 1
     335.  00:4E69                          ; attr 0
     336.  00:4E69                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     336.  00:4E69  05 05 0A 05 05 05 05 05 
     337.  00:4E71                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     337.  00:4E71  0A 05 0B 0A 0A 0A 08 08 
     338.  00:4E79                          ; attr 1
     339.  00:4E79                          DB $00,$00,$44,$00,$40,$00,$00,$00
     339.  00:4E79  00 00 44 00 40 00 00 00 
     340.  00:4E81                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     340.  00:4E81  44 4A 45 45 45 45 45 45 
     341.  00:4E89                          ; attr 2
     342.  00:4E89                          DB $00,$00,$41,$00,$00,$00,$00,$00
     342.  00:4E89  00 00 41 00 00 00 00 00 
     343.  00:4E91                          DB $41,$41,$00,$00,$00,$00,$42,$00
     343.  00:4E91  41 41 00 00 00 00 42 00 
     344.  00:4E99                      
     345.  00:4E99                      
     346.  00:4E99                      SPRITE_COLOR_P1_DOWN:
     347.  00:4E99                          ;DOWN 1
     348.  00:4E99                          ; attr 0
     349.  00:4E99                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     349.  00:4E99  05 05 0A 0B 0B 0B 0B 0B 
     350.  00:4EA1                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     350.  00:4EA1  04 04 04 0A 0A 0A 08 08 
     351.  00:4EA9                          ; attr 1
     352.  00:4EA9                          DB $00,$00,$44,$45,$45,$45,$45,$45
     352.  00:4EA9  00 00 44 45 45 45 45 45 
     353.  00:4EB1                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     353.  00:4EB1  4A 4A 4A 44 44 44 45 45 
     354.  00:4EB9                          ; attr 2
     355.  00:4EB9                          DB $00,$00,$41,$00,$40,$00,$00,$00
     355.  00:4EB9  00 00 41 00 40 00 00 00 
     356.  00:4EC1                          DB $41,$41,$41,$41,$41,$41,$42,$00
     356.  00:4EC1  41 41 41 41 41 41 42 00 
     357.  00:4EC9                          ;SPRITE_COLOR_P1_DOWN2:
     358.  00:4EC9                          ;DOWN 1
     359.  00:4EC9                          ; attr 0
     360.  00:4EC9                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     360.  00:4EC9  05 05 0A 0B 0B 0B 0B 0B 
     361.  00:4ED1                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     361.  00:4ED1  04 04 04 0A 0A 0A 08 08 
     362.  00:4ED9                          ; attr 1
     363.  00:4ED9                          DB $00,$00,$44,$45,$45,$45,$45,$45
     363.  00:4ED9  00 00 44 45 45 45 45 45 
     364.  00:4EE1                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     364.  00:4EE1  4A 4A 4A 44 44 44 45 45 
     365.  00:4EE9                          ; attr 2
     366.  00:4EE9                          DB $00,$00,$41,$00,$40,$00,$00,$00
     366.  00:4EE9  00 00 41 00 40 00 00 00 
     367.  00:4EF1                          DB $41,$41,$41,$41,$41,$41,$42,$00
     367.  00:4EF1  41 41 41 41 41 41 42 00 
     368.  00:4EF9                      
     369.  00:4EF9                      SPRITE_COLOR_P1_RIGHT:
     370.  00:4EF9                          ; attr 0
     371.  00:4EF9                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     371.  00:4EF9  05 05 0A 0B 0B 0B 0B 0B 
     372.  00:4F01                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     372.  00:4F01  0B 0A 0A 0B 0A 0A 08 08 
     373.  00:4F09                          ; attr 1
     374.  00:4F09                          DB $00,$00,$44,$45,$45,$45,$45,$45
     374.  00:4F09  00 00 44 45 45 45 45 45 
     375.  00:4F11                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     375.  00:4F11  45 44 44 44 44 44 45 45 
     376.  00:4F19                          ; attr 2
     377.  00:4F19                          DB $00,$00,$41,$00,$40,$00,$00,$00
     377.  00:4F19  00 00 41 00 40 00 00 00 
     378.  00:4F21                          DB $00,$41,$41,$41,$41,$41,$42,$00
     378.  00:4F21  00 41 41 41 41 41 42 00 
     379.  00:4F29                             
     380.  00:4F29                          ; attr 0
     381.  00:4F29                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     381.  00:4F29  05 05 0A 0B 0B 0B 0B 0B 
     382.  00:4F31                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     382.  00:4F31  0B 0A 0A 0A 0B 0A 08 08 
     383.  00:4F39                          ; attr 1
     384.  00:4F39                          DB $00,$00,$44,$45,$45,$45,$45,$45
     384.  00:4F39  00 00 44 45 45 45 45 45 
     385.  00:4F41                          DB $45,$44,$44,$44,$44,$44,$45,$45
     385.  00:4F41  45 44 44 44 44 44 45 45 
     386.  00:4F49                          ; attr 2
     387.  00:4F49                          DB $00,$00,$41,$00,$40,$00,$00,$00
     387.  00:4F49  00 00 41 00 40 00 00 00 
     388.  00:4F51                          DB $00,$41,$41,$41,$41,$41,$42,$00
     388.  00:4F51  00 41 41 41 41 41 42 00 
     389.  00:4F59                      
     390.  00:4F59                      mapa1:
     391.  00:4F59                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     391.  00:4F59  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  00:4F69  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     392.  00:4F79                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     392.  00:4F79  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     392.  00:4F89  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     393.  00:4F99                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  00:4F99  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     393.  00:4FA9  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  00:4FB9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  00:4FB9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     394.  00:4FC9  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  00:4FD9                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  00:4FD9  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     395.  00:4FE9  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  00:4FF9                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  00:4FF9  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     396.  00:5009  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  00:5019                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     397.  00:5019  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     397.  00:5029  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     398.  00:5039                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  00:5039  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  00:5049  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  00:5059                          
     400.  00:5059                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     400.  00:5059  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  00:5069  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     401.  00:5079                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     401.  00:5079  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  00:5089  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     402.  00:5099                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     402.  00:5099  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  00:50A9  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     403.  00:50B9                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  00:50B9  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  00:50C9  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  00:50D9                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     404.  00:50D9  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     404.  00:50E9  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     405.  00:50F9                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     405.  00:50F9  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     405.  00:5109  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     406.  00:5119                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     406.  00:5119  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     406.  00:5129  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     407.  00:5139                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  00:5139  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     407.  00:5149  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  00:5159                      
     409.  00:5159                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  00:5159  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     409.  00:5169  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  00:5179                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  00:5179  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     410.  00:5189  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  00:5199                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     411.  00:5199  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  00:51A9  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     412.  00:51B9                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     412.  00:51B9  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     412.  00:51C9  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     413.  00:51D9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     413.  00:51D9  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     413.  00:51E9  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  00:51F9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     414.  00:51F9  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     414.  00:5209  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:5219                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     415.  00:5219  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     415.  00:5229  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:5239                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  00:5239  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  00:5249  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  00:5259                      
     418.  00:5259                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  00:5259  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  00:5269  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:5279                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  00:5279  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  00:5289  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  00:5299                      
     421.  00:5299                      mapa2:
     422.  00:5299                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  00:5299  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  00:52A9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:52B9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  00:52B9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  00:52C9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:52D9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     424.  00:52D9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  00:52E9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:52F9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  00:52F9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  00:5309  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:5319                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  00:5319  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  00:5329  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:5339                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  00:5339  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  00:5349  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:5359                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  00:5359  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  00:5369  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  00:5379                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  00:5379  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  00:5389  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  00:5399                            
     431.  00:5399                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  00:5399  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  00:53A9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  00:53B9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  00:53B9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  00:53C9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  00:53D9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     433.  00:53D9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  00:53E9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     434.  00:53F9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  00:53F9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     434.  00:5409  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  00:5419                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  00:5419  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     435.  00:5429  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  00:5439                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  00:5439  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     436.  00:5449  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  00:5459                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  00:5459  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     437.  00:5469  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  00:5479                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  00:5479  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     438.  00:5489  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  00:5499                            
     440.  00:5499                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  00:5499  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     440.  00:54A9  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  00:54B9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  00:54B9  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     441.  00:54C9  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  00:54D9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  00:54D9  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     442.  00:54E9  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  00:54F9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     443.  00:54F9  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     443.  00:5509  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     444.  00:5519                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     444.  00:5519  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     444.  00:5529  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     445.  00:5539                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     445.  00:5539  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     445.  00:5549  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     446.  00:5559                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     446.  00:5559  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     446.  00:5569  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     447.  00:5579                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     447.  00:5579  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     447.  00:5589  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     448.  00:5599                            
     449.  00:5599                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     449.  00:5599  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     449.  00:55A9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     450.  00:55B9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     450.  00:55B9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     450.  00:55C9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     451.  00:55D9                      
     452.  00:55D9                      
     453.  00:55D9                      mapa0:      
     454.  00:55D9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     454.  00:55D9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     454.  00:55E9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     455.  00:55F9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     455.  00:55F9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     455.  00:5609  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     456.  00:5619                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     456.  00:5619  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     456.  00:5629  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     457.  00:5639                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     457.  00:5639  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     457.  00:5649  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     458.  00:5659                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     458.  00:5659  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     458.  00:5669  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     459.  00:5679                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     459.  00:5679  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     459.  00:5689  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     460.  00:5699                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01       
     460.  00:5699  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     460.  00:56A9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     461.  00:56B9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     461.  00:56B9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     461.  00:56C9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     462.  00:56D9                            
     463.  00:56D9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     463.  00:56D9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     463.  00:56E9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     464.  00:56F9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     464.  00:56F9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     464.  00:5709  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     465.  00:5719                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     465.  00:5719  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     465.  00:5729  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     466.  00:5739                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     466.  00:5739  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     466.  00:5749  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     467.  00:5759                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     467.  00:5759  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  00:5769  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     468.  00:5779                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     468.  00:5779  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  00:5789  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     469.  00:5799                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     469.  00:5799  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  00:57A9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     470.  00:57B9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     470.  00:57B9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  00:57C9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     471.  00:57D9                      
     472.  00:57D9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     472.  00:57D9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     472.  00:57E9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     473.  00:57F9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     473.  00:57F9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     473.  00:5809  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     474.  00:5819                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     474.  00:5819  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     474.  00:5829  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     475.  00:5839                            db #01,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     475.  00:5839  01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 
     475.  00:5849  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     476.  00:5859                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     476.  00:5859  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     476.  00:5869  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     477.  00:5879                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     477.  00:5879  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     477.  00:5889  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     478.  00:5899                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01        
     478.  00:5899  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     478.  00:58A9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     479.  00:58B9                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01   
     479.  00:58B9  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     479.  00:58C9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 
     480.  00:58D9                            
     481.  00:58D9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     481.  00:58D9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     481.  00:58E9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     482.  00:58F9                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     482.  00:58F9  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     482.  00:5909  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     483.  00:5919                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     483.  00:5919  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     483.  00:5929  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     484.  00:5939                          
     485.  00:5939                      
     486.  00:5939                      SPRITE_COLOR_P1_LEFT:
     487.  00:5939                          ; attr 0
     488.  00:5939                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     488.  00:5939  05 05 0A 0B 0B 0B 0B 0B 
     489.  00:5941                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     489.  00:5941  0B 0A 0A 0B 0A 0A 08 08 
     490.  00:5949                          ; attr 1
     491.  00:5949                          DB $00,$00,$44,$45,$45,$45,$45,$45
     491.  00:5949  00 00 44 45 45 45 45 45 
     492.  00:5951                          DB $45,$44,$44,$44,$44,$44,$45,$45
     492.  00:5951  45 44 44 44 44 44 45 45 
     493.  00:5959                          ; attr 2
     494.  00:5959                          DB $00,$00,$41,$00,$40,$00,$00,$00
     494.  00:5959  00 00 41 00 40 00 00 00 
     495.  00:5961                          DB $00,$41,$41,$41,$41,$41,$42,$00
     495.  00:5961  00 41 41 41 41 41 42 00 
     496.  00:5969                          ;SPRITE_COLOR_P1_LEFT2:    
     497.  00:5969                          ; attr 0
     498.  00:5969                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     498.  00:5969  05 05 0A 0B 0B 0B 0B 0B 
     499.  00:5971                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     499.  00:5971  0B 0A 0A 0A 0B 0A 08 08 
     500.  00:5979                          ; attr 1
     501.  00:5979                          DB $00,$00,$44,$45,$45,$45,$45,$45
     501.  00:5979  00 00 44 45 45 45 45 45 
     502.  00:5981                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     502.  00:5981  45 44 44 44 44 44 45 45 
     503.  00:5989                          ; attr 2
     504.  00:5989                          DB $00,$00,$41,$00,$40,$00,$00,$00
     504.  00:5989  00 00 41 00 40 00 00 00 
     505.  00:5991                          DB $00,$41,$41,$41,$41,$41,$42,$00
     505.  00:5991  00 41 41 41 41 41 42 00 
     506.  00:5999                      
     507.  00:5999                      
     508.  00:5999                      BLANK_DATA:
     509.  00:5999                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     509.  00:5999  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     509.  00:59A9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     510.  00:59B9                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     510.  00:59B9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     510.  00:59C9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     511.  00:59D9                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     511.  00:59D9  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     511.  00:59E9  00 00 00 00 
     512.  00:59ED                          
     513.  00:59ED                      PaletteData:
     514.  00:59ED                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     515.  00:59ED  00 00                   db 0x00, 0x00 ; Color index 0
     516.  00:59EF  30 00                   db 0x30, 0x00 ; Color index 1
     517.  00:59F1  70 06                   db 0x70, 0x06 ; Color index 2
     518.  00:59F3  50 00                   db 0x50, 0x00 ; Color index 3
     519.  00:59F5  11 01                   db 0x11, 0x01 ; Color index 4
     520.  00:59F7  22 02                   db 0x22, 0x02 ; Color index 5
     521.  00:59F9  06 02                   db 0x06, 0x02 ; Color index 6
     522.  00:59FB  77 07                   db 0x77, 0x07 ; Color index 7
     523.  00:59FD  33 03                   db 0x33, 0x03 ; Color index 8
     524.  00:59FF  66 06                   db 0x66, 0x06 ; Color index 9
     525.  00:5A01  70 00                   db 0x70, 0x00 ; Color index 10
     526.  00:5A03  64 05                   db 0x64, 0x05 ; Color index 11
     527.  00:5A05  50 03                   db 0x50, 0x03 ; Color index 12
     528.  00:5A07  02 04                   db 0x02, 0x04 ; Color index 13
     529.  00:5A09  01 02                   db 0x01, 0x02 ; Color index 14
     530.  00:5A0B  00 00                   db 0x00, 0x00 ; Color index 15
     468   00:5A0D                      
     469   00:5A0D  (01)                 PAGE 1
     470   01:8000                      ; CODE O NO
     471   01:8000                      
     472   01:8000  (02)                 PAGE 2
     473   02:8000                      
     474   02:8000  (03)                 PAGE 3
     475   03:8000                      
     476   03:8000  (04)                 PAGE 4
     477   04:8000  (05)                 PAGE 5
     478   05:8000  (06)                 PAGE 6
     479   06:8000                      FONT:
     480   06:8000  (07F7)               INCBIN "gfx\FONT.SC5",#7
     481   06:87F7  (07)                 PAGE 7
     482   07:8000                      CEMENTER1
     483   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     484   07:C000  (08)                 PAGE 8
     485   08:8000  (2A00)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     486   08:AA00  (09)                 PAGE 9
     487   09:8000                      GRAPHIC
     488   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     489   09:C000  (0A)                 PAGE 10
     490   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     491   0A:C000                      
     492   0A:C000  (0B)                 PAGE 11
     493   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     494   0B:C000                      
     495   0B:C000  (0C)                 PAGE 12
     496   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     497   0C:9400                      
     498   0C:9400  (0D)                 PAGE 13
     499   0D:8000                      CEMENTER2
     500   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     501   0D:C000  (0E)                 PAGE 14
     502   0E:8000  (2A00)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     503   0E:AA00  (0F)                 PAGE 15
     504   0F:C000                      ;---------------------------------------------------------
     505   0F:C000                      ; Variables
     506   0F:C000                      ;---------------------------------------------------------
     507   0F:C000                      	
     508   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     509   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     510   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     511   0F:C000                      ;ETC
     512   0F:C000                      ;
     513   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000  00 (1)              SHOWING_DIALOG  DS 1
       2.  0F:C001  (0F:0008)           FONT_HEIGHT EQU 8
       3.  0F:C001  (0F:0008)           FONT_WIDTH  EQU 8
       4.  0F:C001  00 (2)              CHR_ACR DS 2
       5.  0F:C003  00 (1)              PTR_STR_DX DS 1
       6.  0F:C004  00 (1)              PTR_STR_DY DS 1
       7.  0F:C005                      
       8.  0F:C005  00 (1)              LAST_KEY_PRESSED DS 1
       9.  0F:C006  00 (1)              OLD_KEY_PRESSED DS 1
      10.  0F:C007  00                  JIFFY_TEMP DB $00
      11.  0F:C008  00                  CHAR_SPEED_X DB $00
      12.  0F:C009  00                  CHAR_SPEED_Y DB $00
      13.  0F:C00A  00                  CHAR_SPEED_X_GHOST DB $00
      14.  0F:C00B  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      15.  0F:C00C  00 (1)              CHAR_GHOST_DEAD DS 1
      16.  0F:C00D  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      17.  0F:C00E  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      18.  0F:C00F  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      19.  0F:C010  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      20.  0F:C011  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      21.  0F:C012  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      22.  0F:C013  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      23.  0F:C014  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      24.  0F:C015  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      25.  0F:C016  00 (1)              CHAR_SPEED_SHOOT DS 1
      26.  0F:C017                      SPRITE_ATTRS:
      27.  0F:C017  00 (128)                DS 128
      28.  0F:C097                      SLOTBIOS:
      29.  0F:C097  00 (1)                  DS 1
      30.  0F:C098                      SLOTGAME:
      31.  0F:C098  00 (1)                  DS 1
      32.  0F:C099                      SLOTRAM:
      33.  0F:C099  00 (1)                  DS 1
      34.  0F:C09A                      SPRITE_PTR_REPLACE:
      35.  0F:C09A  00 (2)                  DS 2
      36.  0F:C09C                      SPRITE_COLOR_REPLACE:
      37.  0F:C09C  00 (2)                  DS 2
      38.  0F:C09E                      SPRITE_COLOR_REPLACE2:
      39.  0F:C09E  00 (2)                  DS 2
      40.  0F:C0A0                      MAPA:
      41.  0F:C0A0  00 (2)                  DS 2
      42.  0F:C0A2                      BITMAP:
      43.  0F:C0A2  00 (2)                  DS 2
     514   0F:C0A4  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:0000009F X CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000041   DISSCR
00:00000044   ENASCR
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00005C28   FIRST_LINE_DLG_BOX
00:00006028   SEC_LINE_DLG_BOX
00:00006428   THIRD_LINE_DLG_BOX
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006   MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000020   SPR_GHOST_STG1_PTRN_L2
00:00000024   SPR_GHOST_STG1_PTRN_R1
00:00000028   SPR_GHOST_STG1_PTRN_R2
00:00004010   sardu01_strings
00:00004016   string01
00:0000401D   string02
00:00004033   string03
00:0000403B X mensaje
00:00004040   check_spr_collision
00:0000404D   check_spr_collision.no_collision
00:00004050   get_bloque_en_X_Y
00:00004071   SetVdp_Write
00:0000408D   Set212Lines
00:00004099   ClearVram_MSX2
00:000040A3   ClearVram_MSX2.loop_2
00:000040A5   ClearVram_MSX2.loop_1
00:000040A7   ClearVram_MSX2.loop
00:000040B4 X opening_screen
00:000040D7   load_screen
00:000040F9   _vdpsetvramwr
00:0000410A X _vdpsetvramwr14
00:00004113   GETSLOT
00:0000412A   EXIT
00:0000412C   SETPAGES32K
00:00004131   NOPRET
00:0000413F   SET_SCREEN5_MODE
00:00004161   DUMP_SPR_ALL
00:00004186   DUMP_SPR_ATTS
00:000041A0 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:000041A1   DUMP_SPR_P1
00:000041BE   SetPalette
00:000041CD   move_up
00:00004204   move_down
00:0000423C   move_right
00:0000428A   move_left
00:000042D8   CHECK_DIRECTION_MAIN
00:000042FA   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:0000430F   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:00004324   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:00004339   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:0000434E   CHECK_DIRECTION_MAIN.FINISH
00:00004365   UPDATE_MOVEMENT
00:000043B3   UPDATE_MOVEMENT.SET_SPR_1P_2
00:000043CA   UPDATE_MOVEMENT.NO_CHAR_PATTERN_CHANGE
00:000043D0   NO_MOVEMENT
00:000043D1   MOVE_SHOOT
00:000043E9   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:000043F1   MOVE_SHOOT.MOVE_SHOOT_UP
00:000043F9   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:00004401   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:00004406   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:0000441B   MOVE_SHOOT.ADD_SHOOT_Y
00:00004425   MOVE_SHOOT.ADD_DISTANCE
00:00004430 X MOVE_SHOOT.HIDE_SHOOT
00:0000443C   print_strings_dialog_box
00:00004469   print_string
00:00004469   print_string.loop_str
00:00004484   print_string.first_line_font
00:0000449D   print_char
00:000044D4   CLEAR_DIALOG_BOX
00:0000450A   START
00:0000452D   INIT_CHARS_VARS
00:0000459E   STAGE1
00:000045BB   MAIN_LOOP
00:000045E2   MAIN_LOOP.check_dialog_box
00:000045EA   MAIN_LOOP.animate_ghost
00:00004609   MAIN_LOOP.CHANGE_DIR_RIGHT
00:00004616   MAIN_LOOP.CHANGE_DIR_LEFT
00:0000461F   MAIN_LOOP.check_pattern
00:00004636   MAIN_LOOP.change_pattern_L
00:0000463D   MAIN_LOOP.check_pattern_RIGHT
00:0000464C   MAIN_LOOP.change_pattern_R
00:00004650   MAIN_LOOP.continue
00:00004653 X MAIN_LOOP.CHECK_GHOST
00:0000466F X MAIN_LOOP.KILL_GHOST
00:00004678   MAIN_LOOP.check_KB
00:0000469A X no_arrows
00:000046A2   SHOOT_MAIN_CHAR
00:000046DC   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:000046EB   SHOOT_MAIN_CHAR.SHOOT_UP
00:000046FE   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:0000470E   SHOOT_MAIN_CHAR.CONTINUE
00:00004712   STAGE2
00:00004768   MAIN_LOOP2
00:00004789   MAIN_LOOP2.GHOST_DEAD
00:00004794   MAIN_LOOP2.no_screen_change
00:000047C6   MAIN_LOOP2.CHANGE_DIR_RIGHT
00:000047D3   MAIN_LOOP2.CHANGE_DIR_LEFT
00:000047DC   MAIN_LOOP2.check_pattern
00:000047FB   MAIN_LOOP2.change_pattern_L
00:00004806   MAIN_LOOP2.check_pattern_RIGHT
00:00004819   MAIN_LOOP2.change_pattern_R
00:00004821   MAIN_LOOP2.continue
00:00004849   SPRITE_P1_UP
00:00004909   SPRITE_P1_DOWN
00:000049C9   SPRITE_P1_LEFT
00:00004A89   SPRITE_P1_RIGHT
00:00004B49   SPRITE_PATTERN
00:00004DA9   SPRITE_COLOR_TABLE
00:00004E39   SPRITE_COLOR_P1_UP
00:00004E99   SPRITE_COLOR_P1_DOWN
00:00004EF9   SPRITE_COLOR_P1_RIGHT
00:00004F59   mapa1
00:00005299   mapa2
00:000055D9 X mapa0
00:00005939   SPRITE_COLOR_P1_LEFT
00:00005999   BLANK_DATA
00:000059ED   PaletteData
06:00008000   FONT
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000   SHOWING_DIALOG
0F:00000008 X FONT_HEIGHT
0F:00000008 X FONT_WIDTH
0F:0000C001   CHR_ACR
0F:0000C003 X PTR_STR_DX
0F:0000C004 X PTR_STR_DY
0F:0000C005 X LAST_KEY_PRESSED
0F:0000C006   OLD_KEY_PRESSED
0F:0000C007   JIFFY_TEMP
0F:0000C008   CHAR_SPEED_X
0F:0000C009   CHAR_SPEED_Y
0F:0000C00A   CHAR_SPEED_X_GHOST
0F:0000C00B   CHAR_SPEED_X_GHOST_STG2
0F:0000C00C   CHAR_GHOST_DEAD
0F:0000C00D   CHAR_GHOST_DEAD_STG2
0F:0000C00E   CHAR_MIN_STEP_STG2
0F:0000C00F   CHAR_DIR_GHOST1
0F:0000C010   CHAR_DIR_GHOST_STG2
0F:0000C011   CHAR_DIR_MAIN
0F:0000C012   CHAR_NEW_DIR_MAIN
0F:0000C013   CHAR_MAIN_SHOOT
0F:0000C014   CHAR_MIN_STEP
0F:0000C015   CHAR_DISTANCE_SHOOT
0F:0000C016   CHAR_SPEED_SHOOT
0F:0000C017   SPRITE_ATTRS
0F:0000C097 X SLOTBIOS
0F:0000C098 X SLOTGAME
0F:0000C099 X SLOTRAM
0F:0000C09A   SPRITE_PTR_REPLACE
0F:0000C09C   SPRITE_COLOR_REPLACE
0F:0000C09E   SPRITE_COLOR_REPLACE2
0F:0000C0A0   MAPA
0F:0000C0A2   BITMAP


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 00001A13

   Address   Length Align   Label
   00004000    6669         sardu01_strings
   00005A0D       6         
   00005A13    9709       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 000007F7

   Address   Length Align   Label
   00008000    2039         FONT
   000087F7   14345       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 00002A00

   Address   Length Align   Label
   00008000   10752         
   0000AA00    5632       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000000A4

   Address   Length Align   Label
   0000C000     164         SHOWING_DIALOG
   0000C0A4   16220       <empty>
