Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2024.06.03 - 14:03:38]

.\BTH.asm
Errors: 0

       1   00:0000                      	output "BTH.rom" 
       2   00:66CC                      
       3   00:66CC                      ;ROM ASCII16
       4   00:66CC                      		defpage	0,0x4000, 0x4000
       5   00:66CC                      		defpage	1,0x8000, 0x4000        
       6   00:66CC                      		defpage	2..14 ;Here it is determined rom size        
       7   00:66CC                              defpage	15,0xC000, 0x4000
       8   00:66CC                      
       9   00:66CC  (00:4000)           PageSize:	    equ	0x4000	        ; 16kB
      10   00:66CC  (00:6000)           _bank1	equ	6000h
      11   00:66CC  (00:7000)           _bank2	equ	7000h
      12   00:66CC  32 00 70 32 FF 77   		DB 32h,0,70h,32h,0FFh,77h		; Para evitar seleccionar el tipo de ROM ASCII16 en OpenMSX
      13   00:66D2  (00)                		page 0			
      14   00:4000                              org 4000h		
      15   00:4000                              dw  4241h,START,0,0,0,0,0,0
      15   00:4000  41 42 92 51 00 00 00 00 00 00 00 00 00 00 00 00 
      16   00:4010                      
      17   00:4010                      ;Llamadas a rutinas bios
      18   00:4010                          include "include\System_BIOSCalls.asm"
       1.  00:4010  (00:0069)           CLRSPR                  equ #0069
       2.  00:4010  (00:009F)           CHGET                   equ #009F    ; Se queda esperando que se pulse una tecla
       3.  00:4010  (00:00A2)           CHPUT                   equ #00A2    ; escribe el caracter ascii almacenado en a                         
       4.  00:4010  (00:005F)           CHGMOD                  equ #005F   ; Cambia el modo de screen pero previamente necesita que se le asigne el modo en el registro a
       5.  00:4010  (00:005C)           LDIRVM                  equ #005C   ;Tansfiere bloques de la RAM a la VRAM, es la más importante, necesita previamente asignar valor al registro bc con la longitud, dc con la dirección de inicio de la VRAM y hl con la dirección de inicio de la RAM:
       6.  00:4010  (00:013E)           RDVDP                   equ #013E    ; Lee el registro de estado del VDP
       7.  00:4010  (00:0047)           WRTVDP                  equ #0047   ; Escribe en los registros del VDP 
       8.  00:4010  (00:F3DB)           CLIKSW                  equ $F3DB ; Keyboard click sound
       9.  00:4010  (00:0141)           SNSMAT					equ #0141
      10.  00:4010  (00:FC9E)           JIFFY 					equ #FC9E
      11.  00:4010                      ;DISSCR                  equ #0041   ; Disable screen
      12.  00:4010                      ;ENASCR                  equ #0044   ; Enable screen
      13.  00:4010  (00:0072)           INIGRP                  equ #0072   ; Enable Screen 2
      14.  00:4010  (00:0138)           RSLREG                  equ #0138   ; Leemos el contenido del registro de seleccion de slots
      15.  00:4010  (00:0024)           ENASLT                  equ #0024   ; Switches indicated slot at indicated page on perpetually Input    : A - Slot ID, see RDSLT            H - Bit 6 and 7 must contain the page number (00-11)
      19   00:4010                      
      20   00:4010                      ;Constantes
      21   00:4010                          include "include\BTH_const.asm"
       1.  00:4010                      ; page for SPRITE DATA
       2.  00:4010                      
       3.  00:4010  (00:0001)           BTH_DATA    equ 1
       4.  00:4010                      
       5.  00:4010  (00:0009)           ENTITY_SIZE: EQU 9
       6.  00:4010                      
       7.  00:4010                      ; Sprite Collision
       8.  00:4010                      
       9.  00:4010  (00:000F)           PLAYER_COLLISION_OFFSET_X      equ 15
      10.  00:4010  (00:0010)           PLAYER_COLLISION_OFFSET_Y      equ 16
      11.  00:4010  (00:000E)           PLAYER_WIDTH                   equ 14
      12.  00:4010  (00:0010)           PLAYER_HEIGHT                  equ 16
      13.  00:4010                      
      14.  00:4010                      ; Offset Entity struct
      15.  00:4010  (00:0001)           ENEMY_X                         equ 1
      16.  00:4010  (00:0002)           ENEMY_Y                         equ 2
      17.  00:4010  (00:0003)           ENTITY_ENERGY                   equ 3
      18.  00:4010  (00:0004)           ENEMY_COLLISION_OFFSET_X        equ 4
      19.  00:4010  (00:0005)           ENEMY_COLLISION_OFFSET_Y        equ 5
      20.  00:4010  (00:0006)           ENEMY_COLLISION_WIDTH           equ 6
      21.  00:4010  (00:0007)           ENEMY_COLLISION_HEIGHT          equ 7
      22.  00:4010  (00:0008)           SPRITENUMBER_SPAT               equ 8
      23.  00:4010  (00:0009)           damage                          equ 9
      24.  00:4010                      
      25.  00:4010                      ; Notes Black Sabbath
      26.  00:4010  (00:0071)           STG2_TILE1_X    equ 113
      27.  00:4010  (00:006E)           STG2_TILE1_Y    equ 110
      28.  00:4010                      
      29.  00:4010  (00:0080)           STG2_TILE2_X    equ 128
      30.  00:4010                      
      31.  00:4010  (00:0080)           STG2_TILE3_X    equ 128
      32.  00:4010  (00:008E)           STG2_TILE3_Y    equ 142
      33.  00:4010                      
      34.  00:4010                      
      35.  00:4010                      ; VDP Const
      36.  00:4010                      ;IRST_LINE_DLG_BOX   equ 5C28H
      37.  00:4010                      ;SEC_LINE_DLG_BOX   equ 6028H
      38.  00:4010                      ;THIRD_LINE_DLG_BOX   equ 6428H
      39.  00:4010                      
      40.  00:4010                      ; Energy             lv1, lv2, lv3, lv4, lv5, lv6
      41.  00:4010  18 20 28 30 38 40   ANDY_MAX_ENERGY:  db  24, 32, 40, 48, 56, 64
      42.  00:4016                      
      43.  00:4016  (00:6100)           FIRST_LINE_DLG_BOX   equ 6100H
      44.  00:4016  (00:6500)           SEC_LINE_DLG_BOX   equ 6500H
      45.  00:4016  (00:6900)           THIRD_LINE_DLG_BOX   equ 6900H
      46.  00:4016                      
      47.  00:4016  (00:00C2)           FIRST_LINE_DLG_BOX_v2   equ 194
      48.  00:4016  (00:00CA)           SEC_LINE_DLG_BOX_v2   equ 202
      49.  00:4016                      
      50.  00:4016  (00:0001)           ROMMODE                 equ 1 ; 0 Dos Mode 1 Rom Mode
      51.  00:4016  (00:0007)           KB_RIGHT 				equ 7
      52.  00:4016  (00:0006)           KB_DOWN 				equ 6
      53.  00:4016  (00:0005)           KB_UP 					equ	5        
      54.  00:4016  (00:0004)           KB_LEFT 				equ	4
      55.  00:4016  (00:0003)           KB_DEL 					equ	3
      56.  00:4016  (00:0000)           KB_SPACE				equ	0
      57.  00:4016                      
      58.  00:4016  (00:0001)           MOV_SPEED				equ 1
      59.  00:4016  (00:0001)           MOV_SPEED_GHOST			equ 1
      60.  00:4016  (00:0003)           MOV_SPEED_SHOOT         equ 3
      61.  00:4016  (00:0030)           MAX_DISTANCE_SHOOT      equ 48
      62.  00:4016  (00:0005)           MAX_CHAR_STEPS          equ 5       ; #steps pattern change MAIN CHAR
      63.  00:4016  (00:0006)           MAX_CHAR_STEPS_STG2          equ 6
      64.  00:4016  (00:FFE8)           REG9SAV                 equ #FFE8
      65.  00:4016  (00:0098)           PORT_0                  equ 0x98
      66.  00:4016  (00:0099)           PORT_1                  equ 0x99
      67.  00:4016  (00:009A)           PORT_2                  equ 0x9a
      68.  00:4016  (00:009B)           PORT_3                  equ 0x9b
      69.  00:4016                      
      70.  00:4016  (00:F3E0)           RG15AV equ #F3E0 ; alamcena el valor del registro 1 de escritura del VDP, hay unas rutinas de la bios que guardan estas direcciones valores globals del sistema
      71.  00:4016  (00:F3E9)           FORCLR equ $F3E9 ; Foreground colour
      72.  00:4016                      
      73.  00:4016  (00:00C8)           MIKE_TOMB_STG1_X            equ 200
      74.  00:4016  (00:0029)           JOHN_TOMB_STG1_X            equ 41
      75.  00:4016  (00:0049)           GUS_TOMB_STG1_X             equ 73
      76.  00:4016  (00:0078)           GUS_TOMB_STG1_Y             equ 120
      77.  00:4016  (00:0069)           SKULL_TOMB_STG1_X             equ 105
      78.  00:4016  (00:005A)           SKULL_TOMB_STG1_Y1             equ 90
      79.  00:4016  (00:0064)           SKULL_TOMB_STG1_Y2             equ 100
      80.  00:4016                      
      81.  00:4016  (00:000C)           SPR_SHOOT_P1                equ 12  ; Offset de IX (SPRATT)
      82.  00:4016  (00:0018)           SPR_SHOOT_P1_PTRN           equ 18h
      83.  00:4016  (00:0010)           SPR_GHOST_STG1              equ 16  ; Offset de IX (SPRATT)
      84.  00:4016  (00:001C)           SPR_GHOST_STG1_PTRN_L1      equ 1Ch  ; Offset del Sprite Pattern Table
      85.  00:4016  (00:0024)           SPR_GHOST_STG1_PTRN_L2      equ 24h  ; Offset del Sprite Pattern Table
      86.  00:4016  (00:002C)           SPR_GHOST_STG1_PTRN_R1      equ 2Ch  ; Offset del Sprite Pattern Table
      87.  00:4016  (00:0034)           SPR_GHOST_STG1_PTRN_R2      equ 34h  ; Offset del Sprite Pattern Table
      88.  00:4016                      
      89.  00:4016  (00:0018)           SPR_GHOST_STG2              equ 24  ; Offset de IX (SPRATT)
      90.  00:4016  (00:003C)           SPR_GHOST_STG2_PTRN_L1      equ 3Ch  ; Offset del Sprite Pattern Table
      91.  00:4016  (00:0044)           SPR_GHOST_STG2_PTRN_L2      equ 44h  ; Offset del Sprite Pattern Table
      92.  00:4016  (00:004C)           SPR_GHOST_STG2_PTRN_R1      equ 4Ch  ; Offset del Sprite Pattern Table
      93.  00:4016  (00:0054)           SPR_GHOST_STG2_PTRN_R2      equ 54h  ; Offset del Sprite Pattern Table
      94.  00:4016                      
      22   00:4016                          include "include\BTH_strings.asm"
       1.  00:4016  1C 40 38 40 54 40   mike_tomb_strings: dw string01M, string02M, string03M
       2.  00:401C                      ; Caben 23 caracteres en cada línea
       3.  00:401C                      string01M: db 'MIKE:                      ',0
       3.  00:401C  4D 49 4B 45 3A 20 20 20 20 20 20 20 20 20 20 20 
       3.  00:402C  20 20 20 20 20 20 20 20 20 20 20 00 
       4.  00:4038                      string02M: db 'GUS FUE EL PRIMERO EN MORIR',0
       4.  00:4038  47 55 53 20 46 55 45 20 45 4C 20 50 52 49 4D 45 
       4.  00:4048  52 4F 20 45 4E 20 4D 4F 52 49 52 00 
       5.  00:4054  00                  string03M: db 0
       6.  00:4055                      
       7.  00:4055  5B 40 76 40 91 40   john_tomb_strings: dw string01J, string02J, string03J
       8.  00:405B                      ; Caben 23 caracteres en cada línea
       9.  00:405B                      string01J: db 'JOHN:                     ',0
       9.  00:405B  4A 4F 48 4E 3A 20 20 20 20 20 20 20 20 20 20 20 
       9.  00:406B  20 20 20 20 20 20 20 20 20 20 00 
      10.  00:4076                      string02J: db 'YO FUI EL SEGUNDO EN MORIR',0
      10.  00:4076  59 4F 20 46 55 49 20 45 4C 20 53 45 47 55 4E 44 
      10.  00:4086  4F 20 45 4E 20 4D 4F 52 49 52 00 
      11.  00:4091  00                  string03J: db 0
      12.  00:4092                      
      13.  00:4092  98 40 B5 40 D2 40   gus_tomb_strings: dw string01G, string02G, string03G
      14.  00:4098                      ; Caben 23 caracteres en cada línea
      15.  00:4098                      string01G: db 'GUS:                        ',0
      15.  00:4098  47 55 53 3A 20 20 20 20 20 20 20 20 20 20 20 20 
      15.  00:40A8  20 20 20 20 20 20 20 20 20 20 20 20 00 
      16.  00:40B5                      string02G: db 'MIKE FUE EL TERCERO EN MORIR',0
      16.  00:40B5  4D 49 4B 45 20 46 55 45 20 45 4C 20 54 45 52 43 
      16.  00:40C5  45 52 4F 20 45 4E 20 4D 4F 52 49 52 00 
      17.  00:40D2  00                  string03G: db  0
      18.  00:40D3                      
      19.  00:40D3  D9 40 F4 40 0F 41   stg1_skull_strings: dw string01Sk, string02Sk, string03Sk
      20.  00:40D9                      ; Caben 23 caracteres en cada línea
      21.  00:40D9                      string01Sk: db 'MURRAY:                   ',0
      21.  00:40D9  4D 55 52 52 41 59 3A 20 20 20 20 20 20 20 20 20 
      21.  00:40E9  20 20 20 20 20 20 20 20 20 20 00 
      22.  00:40F4                      string02Sk: db 'LA SANGRE TE DARA EL ORDEN',0
      22.  00:40F4  4C 41 20 53 41 4E 47 52 45 20 54 45 20 44 41 52 
      22.  00:4104  41 20 45 4C 20 4F 52 44 45 4E 00 
      23.  00:410F  00                  string03Sk: db 0
      24.  00:4110                      
      25.  00:4110  16 41 2F 41 48 41   stg1_puzzle_solved_strings: dw string01P, string02P, string03P
      26.  00:4116                      ; Caben 23 caracteres en cada línea
      27.  00:4116                      string01P: db 'ANDY:                   ',0
      27.  00:4116  41 4E 44 59 3A 20 20 20 20 20 20 20 20 20 20 20 
      27.  00:4126  20 20 20 20 20 20 20 20 00 
      28.  00:412F                      string02P: db 'LA PUERTA SE HA ABIERTO!',0
      28.  00:412F  4C 41 20 50 55 45 52 54 41 20 53 45 20 48 41 20 
      28.  00:413F  41 42 49 45 52 54 4F 21 00 
      29.  00:4148  00                  string03P: db 0
      30.  00:4149                      
      31.  00:4149  4F 41 61 41 6C 41   game_over_strings: dw string01GO, string02GO, string03GO
      32.  00:414F                      ; Caben 23 caracteres en cada línea
      33.  00:414F                      string01GO: db 'AAAAHHHHHHHHHH!!!',0
      33.  00:414F  41 41 41 41 48 48 48 48 48 48 48 48 48 48 21 21 
      33.  00:415F  21 00 
      34.  00:4161                      string02GO: db 'GAME OVER!',0
      34.  00:4161  47 41 4D 45 20 4F 56 45 52 21 00 
      35.  00:416C  00                  string03GO: db '',0
      23   00:416D                      ; Funciones auxiliares
      24   00:416D                      	include "include\BTH_func.asm"
       1.  00:416D                      ;
       2.  00:416D                      ; EnemyCollisionCheck
       3.  00:416D                      ;
       4.  00:416D                      ;   Calculates whether a collision occurs between the player
       5.  00:416D                      ;   and an enemy
       6.  00:416D                      ;
       7.  00:416D                      ; IN: iy - pointer to enemy data record
       8.  00:416D                      ; OUT: Carry set if collision
       9.  00:416D                      ; CHANGES: A, B, C, E
      10.  00:416D                      ;
      11.  00:416D                      EnemyCollisionCheck:
      12.  00:416D  DD 7E 01                    ld      a,(ix+1)                     ; read player x-coordinate          [14]
      13.  00:4170  C6 0F                       add     PLAYER_COLLISION_OFFSET_X       ; add offset for smaller rectangle  [8]
      14.  00:4172  47                          ld      b,a                             ;                                   [5]
      15.  00:4173  0E 0E                       ld      c,PLAYER_WIDTH                  ; set the width of the player       [8]
      16.  00:4175                              
      17.  00:4175  FD 7E 01                    ld      a,(iy+ENEMY_X)                  ; read enemy x-coordinate           [21]
      18.  00:4178  FD 86 04                    add     (iy+ENEMY_COLLISION_OFFSET_X)   ; add offset for smaller rectangle  [21]
      19.  00:417B  FD 5E 06                    ld      e,(iy+ENEMY_COLLISION_WIDTH)    ; set the width of the enemy        [21]
      20.  00:417E                      
      21.  00:417E  CD 93 41                    call    .check                          ;                                   [18]
      22.  00:4181  D0                          ret     nc                              ;                                   [12/6]
      23.  00:4182                      
      24.  00:4182  DD 7E 00                    ld      a,(ix)                     ; read player y-coordinate          [14]
      25.  00:4185  C6 10                       add     PLAYER_COLLISION_OFFSET_Y       ; add offset for smaller rectangle  [8]
      26.  00:4187  47                          ld      b,a                             ;                                   [5]
      27.  00:4188  0E 10                       ld      c,PLAYER_HEIGHT                 ; set the height of the player      [8]
      28.  00:418A                              
      29.  00:418A  FD 7E 02                    ld      a,(iy+ENEMY_Y)                  ; read enemy y-coordinate           [21]
      30.  00:418D  FD 86 05                    add     (iy+ENEMY_COLLISION_OFFSET_Y)   ; add offset for smaller rectangle  [21]
      31.  00:4190  FD 5E 07                    ld      e,(iy+ENEMY_COLLISION_HEIGHT)    ; set the height of the enemy      [21]
      32.  00:4193                      
      33.  00:4193                      .check:
      34.  00:4193  90                          sub     b               ; calculate x2-x1              [5]
      35.  00:4194  30 04                       jr      nc,.other       ; don't jump if x2<x1          [13/8]
      36.  00:4196  ED 44                       neg                     ; use negative value           [10]
      37.  00:4198  93                          sub     e               ; compare with size 1          [5]
      38.  00:4199  C9                          ret                     ; return result                [11]
      39.  00:419A                      .other:
      40.  00:419A  91                          sub     c               ; compare with size 1          [5]
      41.  00:419B  C9                          ret                     ; return result                [11]
      42.  00:419C                      
      43.  00:419C                      ; Dadas las coordenadas X,Y en pixels de dos sprites, devuelve 1 si hay colision
      44.  00:419C                      ;Entrada:
      45.  00:419C                      ;   B - Y SPR1
      46.  00:419C                      ;   C - X SPR1
      47.  00:419C                      
      48.  00:419C                      ;   D - Y SPR2
      49.  00:419C                      ;   E - X SPR2
      50.  00:419C                      ;Salida:
      51.  00:419C                      ;   A - colision
      52.  00:419C                      ;Modifica:
      53.  00:419C                      ;   A
      54.  00:419C                      check_spr_collision:        
      55.  00:419C  78                          LD A,B          ; a = Y SPR1
      56.  00:419D  BA                          CP D
      57.  00:419E  C2 A9 41                    JP NZ,.no_collision
      58.  00:41A1                      
      59.  00:41A1  79                          LD A,C          ; a = X SPR1
      60.  00:41A2  BB                          CP E
      61.  00:41A3  C2 A9 41                    JP NZ,.no_collision
      62.  00:41A6                      
      63.  00:41A6  3E 01                       LD A,1
      64.  00:41A8  C9                          RET
      65.  00:41A9                      .no_collision
      66.  00:41A9  3E 00                   LD A,0
      67.  00:41AB  C9                      RET
      68.  00:41AC                      
      69.  00:41AC                      ; Dadas las coordenadas X,Y en pixels, devuelve el bloque de 8x8 al que corresponde esas coordenadas
      70.  00:41AC                      ; La tabla de colisiones es la tabla de nombres con 32x24 = 756 bytes
      71.  00:41AC                      ;Entrada:
      72.  00:41AC                      ;   d - X
      73.  00:41AC                      ;   e - y
      74.  00:41AC                      ;Salida:
      75.  00:41AC                      ;   a - bloque
      76.  00:41AC                      ;Modifica:
      77.  00:41AC                      ;   a, hl, de
      78.  00:41AC                      get_bloque_en_X_Y:
      79.  00:41AC                              ;(y/8)*32+(x/8)
      80.  00:41AC  7B                          ld a,e      ;a=y
      81.  00:41AD  CB 3F CB 3F CB 3F   [3]     srl a       ;a=y/8
      82.  00:41B3  26 00                       ld h,0
      83.  00:41B5  6F                          ld l,a      ;hl=y/8
      84.  00:41B6  29 29 29 29 29      [5]     add hl,hl   ;x32    ;a=(y/8)*32
      85.  00:41BB                      
      86.  00:41BB  7A                          ld a,d      ;a=x
      87.  00:41BC  CB 3F CB 3F CB 3F   [3]     srl a       ;a=x/8
      88.  00:41C2  16 00                       ld d,0
      89.  00:41C4  5F                          ld e,a      ;de=x/8
      90.  00:41C5  19                          add hl,de   ;hl=(y/8)*32+(x/8)
      91.  00:41C6                      
      92.  00:41C6  ED 5B FE C0                 ld de,(MAPA)
      93.  00:41CA  19                          add hl,de   ;hl=mapa + hl=(y/8)*32+(x/8)
      94.  00:41CB                      
      95.  00:41CB  7E                          ld a,[hl]
      96.  00:41CC  C9                          ret
      97.  00:41CD                      
      98.  00:41CD                      ; SCREEN 8
      99.  00:41CD                      SetVdp_Write:
     100.  00:41CD                      
     101.  00:41CD                      	; transform address from 
     102.  00:41CD                      	;
     103.  00:41CD                      	; |           Register A            |           Register H            |           Register L            |
     104.  00:41CD                      	; | --- --- --- --- --- --- --- A16 | A15 A14 A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     105.  00:41CD                      	;
     106.  00:41CD                      	; to
     107.  00:41CD                      	;
     108.  00:41CD                      	; |           Register A            |           Register H            |           Register L            |
     109.  00:41CD                      	; | --- --- --- --- --- A16 A15 A14 | --- --- A13 A12 A11 A10  A9  A8 |  A7  A6  A5  A4  A3  A2  A1  A0 |
     110.  00:41CD  CB 04                   rlc     h
     111.  00:41CF  17                      rla
     112.  00:41D0  CB 04                   rlc     h
     113.  00:41D2  17                      rla
     114.  00:41D3  CB 3C                   srl     h
     115.  00:41D5  CB 3C                   srl     h
     116.  00:41D7                      
     117.  00:41D7  F3                      di
     118.  00:41D8                      	    ; write bits a14-16 of address to R#14
     119.  00:41D8  D3 99               	    out     (PORT_1), a
     120.  00:41DA  3E 8E               	    ld      a, 14 + 128
     121.  00:41DC  D3 99               	    out     (PORT_1), a
     122.  00:41DE                      
     123.  00:41DE                      	    ; write the other address bits to VDP PORT_1
     124.  00:41DE  7D                  	    ld      a, l
     125.  00:41DF  00                  	    nop
     126.  00:41E0  D3 99               	    out     (PORT_1), a
     127.  00:41E2  7C                  	    ld      a, h
     128.  00:41E3  F6 40               	    or      64
     129.  00:41E5  FB                      ei
     130.  00:41E6  D3 99                   out     (PORT_1),a
     131.  00:41E8  C9                      ret
     132.  00:41E9                      
     133.  00:41E9                      Set212Lines:
     134.  00:41E9                              ; set LN (bit 7) of R#9 to 1
     135.  00:41E9  3A E8 FF                    ld      a, (REG9SAV)
     136.  00:41EC  F6 80                       or      10000000b
     137.  00:41EE  47                          ld      b, a
     138.  00:41EF  0E 09                       ld      c, 9            ; register #
     139.  00:41F1  CD 47 00                    call    WRTVDP
     140.  00:41F4  C9                          ret
     141.  00:41F5                      
     142.  00:41F5                      ClearVram_MSX2:
     143.  00:41F5  AF                          xor     a           ; set vram write base address
     144.  00:41F6  21 00 00                    ld      hl, 0     	; to 1st byte of page 0
     145.  00:41F9  CD CD 41                    call    SetVdp_Write
     146.  00:41FC  AF                          xor		a
     147.  00:41FD                      
     148.  00:41FD                          ; TODO: 
     149.  00:41FD                          ;   use VDP command (currently is taking almost 1 second)
     150.  00:41FD                          ;   disable screen/sprites (should I ??)
     151.  00:41FD                      
     152.  00:41FD                          ; clear all 128kb of VRAM
     153.  00:41FD  16 02               	ld		d, 2		; 2 repetitions
     154.  00:41FF                      .loop_2:
     155.  00:41FF  0E 00               	ld		c, 0		; 256 repetitions
     156.  00:4201                      .loop_1:
     157.  00:4201  06 00               	ld		b, 0		; 256 repetitions
     158.  00:4203                      .loop:
     159.  00:4203  D3 98               	out		(PORT_0), a
     160.  00:4205  10 FC               	djnz	.loop
     161.  00:4207  0D                  	dec		c
     162.  00:4208  C2 01 42            	jp		nz, .loop_1
     163.  00:420B  15                  	dec		d
     164.  00:420C  C2 FF 41            	jp		nz, .loop_2
     165.  00:420F                      
     166.  00:420F  C9                  	ret
     167.  00:4210                      
     168.  00:4210                      ; MEGAROM
     169.  00:4210                      
     170.  00:4210                      opening_screen		
     171.  00:4210  0E 00               		ld		c,0
     172.  00:4212  11 00 00            		ld		de,0
     173.  00:4215  CD 55 42            		call	_vdpsetvramwr
     174.  00:4218  1E 04               		ld	e,4
     175.  00:421A  3E 09               		ld	a, :GRAPHIC
     176.  00:421C  57                  		ld	d,a
     177.  00:421D  32 00 70            2:		ld	(_bank2),a
     178.  00:4220  21 00 80            		ld	hl,GRAPHIC
     179.  00:4223  01 98 00            		ld	bc,0x98
     180.  00:4226  3E 40               		ld	a,32*2
     181.  00:4228  ED B3               1:		otir
     182.  00:422A  3D                  		dec	a
     183.  00:422B  20 FB               		jr	nz,1b
     184.  00:422D  14                  		inc	d
     185.  00:422E  7A                  		ld	a,d
     186.  00:422F  1D                  		dec	e
     187.  00:4230  20 EB               		jr	nz,2b
     188.  00:4232  C9                  		ret 
     189.  00:4233                      
     190.  00:4233                      load_screen
     191.  00:4233  0E 00               		ld		c,0
     192.  00:4235  11 00 00            		ld		de,0
     193.  00:4238  CD 55 42            		call	_vdpsetvramwr
     194.  00:423B  1E 02               		ld	e,2					; #pages
     195.  00:423D  78                  		ld	a, b			; 1st page bitmap
     196.  00:423E  57                  		ld	d,a
     197.  00:423F  32 00 70            2:		ld	(_bank2),a
     198.  00:4242  2A 00 C1            		ld	hl,(BITMAP)		; Bitmap address
     199.  00:4245  01 98 00            		ld	bc,0x98
     200.  00:4248  3E 40               		ld	a,64
     201.  00:424A  ED B3               1:		otir
     202.  00:424C  3D                  		dec	a
     203.  00:424D  20 FB               		jr	nz,1b
     204.  00:424F  14                  		inc	d
     205.  00:4250  7A                  		ld	a,d
     206.  00:4251  1D                  		dec	e
     207.  00:4252  20 EB               		jr	nz,2b
     208.  00:4254  C9                  		ret 
     209.  00:4255                      
     210.  00:4255                      ;Set VDP for writing at address CDE (17-bit) 
     211.  00:4255                      
     212.  00:4255                      _vdpsetvramwr:
     213.  00:4255  79                  	ld a,c
     214.  00:4256  CB 02               	rlc d
     215.  00:4258  17                  	rla
     216.  00:4259  CB 02               	rlc d
     217.  00:425B  17                  	rla
     218.  00:425C  CB 3A               	srl d ; primo shift, il secondo dopo la out
     219.  00:425E                      
     220.  00:425E  D3 99               	out (0x99),a ;set bits 14-16
     221.  00:4260  3E 8E               	ld a,14+128
     222.  00:4262  D3 99               	out (0x99),a
     223.  00:4264  CB 3A               	srl d ; secondo shift.     
     224.  00:4266                      _vdpsetvramwr14
     225.  00:4266  7B                  	ld a,e ;set bits 0-7
     226.  00:4267  D3 99               	out (0x99),a
     227.  00:4269  7A                  	ld a,d ;set bits 8-13
     228.  00:426A  F6 40               	or 0x40 ; + write access
     229.  00:426C  D3 99               	out (0x99),a
     230.  00:426E  C9                  	ret
     231.  00:426F                      
     232.  00:426F                      
     233.  00:426F                      
     234.  00:426F                      		; --- RUTINAS PARA COLOCAR LAS PAGINAS DEL CARTUCHO ---
     235.  00:426F                      		; -----------------------------------------------------
     236.  00:426F                      		; --- SIEMPRE DEBEN IR EN LA PAGINA 1 DEL CARTUCHO! ---
     237.  00:426F                      		; -----------------------------------------------------
     238.  00:426F                      
     239.  00:426F                      		; --- RUTINAS PRINCIPALES DEL MODULO ---
     240.  00:426F                      		; GETSLOT:	OBTIENE EL VALOR DEL SLOT QUE LE INDIQUEMOS
     241.  00:426F                      		; SETPAGES32K:	BIOS-ROM-YY-ZZ	 -> BIOS-ROM-ROM-ZZ (SITUA PAGINA 2)
     242.  00:426F                      
     243.  00:426F                      		; --- VARIABLES EN RAM NECESARIAS ---
     244.  00:426F                      		; NINGUNA
     245.  00:426F                      
     246.  00:426F                      GETSLOT:	; --- Rutina que construye el valor del SLOT para llamar a ENASLT ---
     247.  00:426F                      		; --- Entrada: a = SLOT                                           ---
     248.  00:426F                      		; --- Salida: a = valor para ENASLT                               ---
     249.  00:426F                      		; --- AUTOR: Konamiman                                            ---
     250.  00:426F  E6 03               		and	$03				; Proteccion, nos aseguramos de que el valor esta en 0-3
     251.  00:4271  4F                  		ld	c,a				; c = slot de la pagina
     252.  00:4272  06 00               		ld	b,0				; bc = slot de la pagina
     253.  00:4274  21 C1 FC            		ld	hl,$FCC1			; Tabla de slots expandidos
     254.  00:4277  09                  		add	hl,bc				; hl -> variable que indica si este slot esta expandido
     255.  00:4278  7E                  		ld	a,(hl)				; Tomamos el valor
     256.  00:4279  E6 80               		and	$80				; Si el bit mas alto es cero...
     257.  00:427B  28 09               		jr	z,EXIT			; ...nos vamos a @@EXIT
     258.  00:427D                      		; --- El slot esta expandido ---
     259.  00:427D  B1                  		or	c				; Slot basico en el lugar adecuado
     260.  00:427E  4F                  		ld	c,a				; Guardamos el valor en c
     261.  00:427F  23                  		inc	hl				; Incrementamos hl una...
     262.  00:4280  23                  		inc	hl				; ...dos...
     263.  00:4281  23                  		inc	hl				; ...tres...
     264.  00:4282  23                  		inc	hl				; ...cuatro veces
     265.  00:4283  7E                  		ld	a,(hl)				; a = valor del registro de subslot del slot donde estamos
     266.  00:4284  E6 0C               		and	$0C				; Nos quedamos con el valor donde esta nuestro cartucho
     267.  00:4286  B1                  EXIT:		or	c				; Slot extendido/basico en su lugar
     268.  00:4287  C9                  		ret					; Volvemos
     269.  00:4288                      
     270.  00:4288                      SETPAGES32K:	; --- Posiciona las paginas de un megarom o un 32K ---
     271.  00:4288  3E C9               		ld	a,$C9				; Codigo de RET
     272.  00:428A  32 8D 42            		ld	(NOPRET),a			; Modificamos la siguiente instruccion si estamos en RAM
     273.  00:428D  00                  NOPRET:	nop					; No hacemos nada si no estamos en RAM
     274.  00:428E                      		; --- Si llegamos aqui no estamos en RAM, hay que posicionar la pagina ---
     275.  00:428E  CD 38 01            		call	RSLREG  			; Leemos el contenido del registro de seleccion de slots
     276.  00:4291  0F                  		rrca					; Rotamos a la derecha...
     277.  00:4292  0F                  		rrca					; ...dos veces
     278.  00:4293  CD 6F 42            		call	GETSLOT				; Obtenemos el slot de la pagina 1 ($4000-$BFFF)
     279.  00:4296  26 80               		ld	h,$80				; Seleccionamos pagina 2 ($8000-$BFFF)
     280.  00:4298  C3 24 00            		jp	ENASLT ;ENASLT
     281.  00:429B                      
     282.  00:429B                      SET_SCREEN5_MODE:
     283.  00:429B                           ;Cambiamos el modo de pantalla
     284.  00:429B                          ; BASIC: COLOR 15,1,1
     285.  00:429B                          ; Establecer los colores
     286.  00:429B  21 E9 F3            	ld hl,FORCLR ; Variable del Sistema
     287.  00:429E  36 0F               	ld [hl],15 ; Color del primer plano 15=blanco
     288.  00:42A0  23                  	inc hl ; FORCLR+1
     289.  00:42A1  36 0F               	ld [hl],15 ; Color de fondo 1=negro
     290.  00:42A3  23                  	inc hl ; FORCLR+2
     291.  00:42A4  36 0F               	ld [hl],15 ; Color del borde 1=negro
     292.  00:42A6                      
     293.  00:42A6  3E 05                   ld  a,5     
     294.  00:42A8  CD 5F 00                call CHGMOD 
     295.  00:42AB  CD 69 00            	call CLRSPR
     296.  00:42AE                      
     297.  00:42AE  3A E0 F3                ld a,(RG15AV) ; esta dirección de memoria almacena el valor del registro de lectura del VDP, mira arriba
     298.  00:42B1                          ;En or 0+0=0, 0+1=1, 1+1=1
     299.  00:42B1                          ;En and 0+0=0, 0+1=0, 1+1=1
     300.  00:42B1                          ;Con eso queremos cambiar los bits 7 y 8 del registro de escritura 1 del z80, queremos poner el 7 a 1 y también el 8 a 1
     301.  00:42B1                          ;el bit 7 del registro 1 pone los sprites en modo 16x16 (los que nostros queremos dibujar)
     302.  00:42B1                          ;el bit 8 queremos desactivarlo para no utilizar los sprites agrandados
     303.  00:42B1  F6 02                   or 00000010b ; con or poniendo un 0 siempre respetamos los bits que hay y poniendo 1 1 obligamos a que sea 1
     304.  00:42B3                          ;and 11111110b ; con and obligamos a que el ultimo bit valga 0
     305.  00:42B3  E6 FE                   and 11111110b ; con and obligamos a que el ultimo bit valga 0
     306.  00:42B5                      
     307.  00:42B5  47                      ld b,a ;carga en b el valor de a
     308.  00:42B6  0E 01                   ld c,1 ; La rutina WRTVDP necesta que le carguemos previamente el entero en C del z80 del registro que queroms modificar
     309.  00:42B8  CD 47 00                call WRTVDP ;Escribe en los registros del VDP 
     310.  00:42BB  AF                      xor a ; ld a,0
     311.  00:42BC  32 DB F3            	ld [CLIKSW],a ; Variable BIOS desactivar sonido teclas
     312.  00:42BF  C9                      ret
     313.  00:42C0                      
     314.  00:42C0                      DUMP_SPR_ALL:
     315.  00:42C0                      	;ld	a, BTH_DATA			; page 
     316.  00:42C0                      	;ld	(_bank2),a
     317.  00:42C0                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------
     318.  00:42C0                      
     319.  00:42C0  21 00 83                ld hl, SPRITE_PATTERN ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     320.  00:42C3  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     321.  00:42C6  01 E0 02                ld bc, 8*4*23; 8 byte de cada tile * 4 que son los sprites de 16x16 y * #sprites
     322.  00:42C9  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     323.  00:42CC                      
     324.  00:42CC                      ;-----------------------------Definición de los atributos en #7600 y volcado a la VRAM------------------------------------
     325.  00:42CC                      
     326.  00:42CC  21 75 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     327.  00:42CF  11 00 76                ld de, #7600; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     328.  00:42D2  01 80 00                ld bc,128; 4 x #Sprites
     329.  00:42D5  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     330.  00:42D8                      
     331.  00:42D8                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     332.  00:42D8                      
     333.  00:42D8  21 E0 85                ld hl, SPRITE_COLOR_TABLE ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     334.  00:42DB  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     335.  00:42DE  01 70 01                ld bc,16*23; 16 x #Sprites
     336.  00:42E1  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     337.  00:42E4  C9                      ret
     338.  00:42E5                      	
     339.  00:42E5                      load_tiles_vdp
     340.  00:42E5                          
     341.  00:42E5                      	;ld hl, TILES1
     342.  00:42E5  11 00 80                ld de, 0x8000; la rutina necesita haber cargado previamente la dirección de inicio de la VRAM          
     343.  00:42E8  01 00 10                ld bc,128*32; 32 lineas
     344.  00:42EB  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     345.  00:42EE  C9                  	ret 
     346.  00:42EF                      
     347.  00:42EF                      load_font_vdp    
     348.  00:42EF  21 2E 8F            	ld hl, FONT
     349.  00:42F2  11 00 6A                ld de, 0x6A00; la rutina necesita haber cargado previamente la dirección de inicio de la VRAM          
     350.  00:42F5  01 00 08                ld bc,128*16; 32 lineas
     351.  00:42F8  CD 5C 00                call  LDIRVM ; Mira arriba, pone la explicación
     352.  00:42FB  C9                  	ret 
     353.  00:42FC                      
     354.  00:42FC                      DUMP_SPR_ATTS:
     355.  00:42FC                      
     356.  00:42FC                      ;-----------------------------Definición de los atributos en #1E00 y volcado a la VRAM------------------------------------	
     357.  00:42FC                      
     358.  00:42FC  21 75 C0                ld hl, SPRITE_ATTRS ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     359.  00:42FF  11 00 76                ld de, #7600	; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     360.  00:4302  01 20 00                ld bc,32		; 4 x #Sprites mostrados
     361.  00:4305  CD 5C 00                call  LDIRVM 	; Mira arriba, pone la explicación
     362.  00:4308                      
     363.  00:4308                      ;	ld a, (SPRITE_COLOR_REPLACE2)
     364.  00:4308                      ;	JP Z,.DUMP_SPR_ATTS_END
     365.  00:4308  2A FC C0            	ld hl, (SPRITE_COLOR_REPLACE2) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     366.  00:430B  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     367.  00:430E  C5                      PUSH BC
     368.  00:430F  01 30 00            	ld bc,16*3; 16 x #Sprites
     369.  00:4312  CD 5C 00                call  LDIRVM 
     370.  00:4315  C1                  	POP BC
     371.  00:4316                      
     372.  00:4316                      .DUMP_SPR_ATTS_END:
     373.  00:4316  C9                      ret
     374.  00:4317                      
     375.  00:4317                      DUMP_SPR_P1:    
     376.  00:4317                      ;-----------------------------Definición del sprite en #7800  y volcado a la VRAM-------------------------------------------	
     377.  00:4317  2A F8 C0                ld hl, (SPRITE_PTR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 03800 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     378.  00:431A  11 00 78                ld de, #7800; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     379.  00:431D  C5                      PUSH BC
     380.  00:431E  01 C0 00            	ld bc, 192; 32 bytes por sprite * 3 planos * 2 frames
     381.  00:4321  CD 5C 00                call  LDIRVM 
     382.  00:4324  C1                  	POP BC
     383.  00:4325                      
     384.  00:4325                      ;-----------------------------Definición de los colores en #7400 y volcado a la VRAM------------------------------------
     385.  00:4325                      
     386.  00:4325  2A FA C0                ld hl, (SPRITE_COLOR_REPLACE) ; la rutina LDIRVM necesita haber cargado previamente la dirección de inicio de la RAM, para saber porqué he puesto 0000 fíjate este dibujo https://sites.google.com/site/multivac7/files-images/TMS9918_VRAMmap_G2_300dpi.png ,así es como está formado el VDP en screen 2
     387.  00:4328  11 00 74                ld de, #7400; la rutina necesita haber cargado previamente con de la dirección de inicio de la VRAM          
     388.  00:432B  C5                      PUSH BC
     389.  00:432C  01 30 00            	ld bc,16*3; 16 x #Sprites
     390.  00:432F  CD 5C 00                call  LDIRVM 
     391.  00:4332  C1                  	POP BC
     392.  00:4333                      	
     393.  00:4333                      
     394.  00:4333                      ; Replace 4 sprites(P1) in Sprite Pattern Table
     395.  00:4333                      ;    xor a
     396.  00:4333                      ;	di			; set VRAM address to 1800h
     397.  00:4333                      ;	out (99h),a		; lower byte 00
     398.  00:4333                      ;	ld a,78h + 040h		; upper byte 7800h with flag to set the bus in write mode (3800 VRAM: Sprite Pattern Table)
     399.  00:4333                      ;	ei
     400.  00:4333                      ;	out (99h),a		; note that this is protected by the ei instruction
     401.  00:4333                      ;   push BC
     402.  00:4333                      ;	ld bc,8098h     ; 80h = 128 bytes y port 98h 
     403.  00:4333                      ;	ld hl,(SPRITE_PTR_REPLACE)
     404.  00:4333                      
     405.  00:4333                      ;.loop1:
     406.  00:4333                      ;	outi			; send the data (HL) to port 98h 
     407.  00:4333                      ;	jp nz,.loop1		; the inner loop is exactly 29 cycles. 
     408.  00:4333                      ;   POP BC
     409.  00:4333                      
     410.  00:4333                          ; Replace 2 entries in sprite color table
     411.  00:4333                      ;    xor a
     412.  00:4333                      ;	di			; set VRAM address to 1800h
     413.  00:4333                      ;	out (99h),a		; lower byte 00
     414.  00:4333                      ;	ld a,74h + 040h		; upper byte 7400h with flag to set the bus in write mode (1C00 VRAM: Sprite Color Table)
     415.  00:4333                      ;	ei
     416.  00:4333                      ;	out (99h),a		; note that this is protected by the ei instruction
     417.  00:4333                       ;   push BC
     418.  00:4333                      ;	ld bc,2098h     ; 20h = 32 bytes y port 98h 
     419.  00:4333                      ;	ld hl,(SPRITE_COLOR_REPLACE)
     420.  00:4333                      	
     421.  00:4333                      ;.loop2:
     422.  00:4333                      ;	outi			; send the data (HL) to port 98h 
     423.  00:4333                      ;	jp nz,.loop2		; the inner loop is exactly 29 cycles. 
     424.  00:4333                       ;   POP BC
     425.  00:4333                      
     426.  00:4333  C9                      ret
     427.  00:4334                      
     428.  00:4334                      SetPalette:
     429.  00:4334  AF                  	xor a
     430.  00:4335  F3                  	di
     431.  00:4336  D3 99               	out ($99),a
     432.  00:4338  3E 90               	ld a,16+128
     433.  00:433A  D3 99               	out ($99),a
     434.  00:433C  01 9A 20            	ld bc,$209A
     435.  00:433F  ED B3               	otir
     436.  00:4341  FB                  	ei
     437.  00:4342  C9                  	ret
      25   00:4343                          include "include\BTH_animate.asm"
       1.  00:4343                      ; Movimiento P1
       2.  00:4343                      move_up:
       3.  00:4343  A9                      XOR C               ; Reseteamos la entrada del teclado
       4.  00:4344                          ; Actualizamos la última tecla de dirección pulsada
       5.  00:4344  AF                      XOR A
       6.  00:4345  32 70 C0                LD (CHAR_NEW_DIR_MAIN),A
       7.  00:4348  CD 76 44                CALL CHECK_DIRECTION_MAIN
       8.  00:434B                      
       9.  00:434B  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      10.  00:434E  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VDP
      11.  00:4350  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      12.  00:4351  DD 7E 01                ld a,(ix+1)
      13.  00:4354  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      14.  00:4355  CD AC 41                call get_bloque_en_X_Y
      15.  00:4358  FE 01                   cp 1
      16.  00:435A  CA 6F 45                jp z,NO_MOVEMENT
      17.  00:435D                      
      18.  00:435D  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      19.  00:4360  D6 01                   sub 1 ; decrementamos en 1 el valor, aunque realmente será dos por el desplazamiento de la Y que hace el VGP
      20.  00:4362  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      21.  00:4363  DD 7E 01                ld a,(ix+1)
      22.  00:4366  C6 0A                   add 10 ; miramos la segunda tile 8+2
      23.  00:4368  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      24.  00:4369  CD AC 41                call get_bloque_en_X_Y
      25.  00:436C  FE 01                   cp 1
      26.  00:436E  CA 6F 45                jp z,NO_MOVEMENT
      27.  00:4371                            
      28.  00:4371  3E FF               	LD A, -MOV_SPEED
      29.  00:4373  32 67 C0            	LD (CHAR_SPEED_Y), A
      30.  00:4376  CD 03 45                call UPDATE_MOVEMENT   
      31.  00:4379  CD 2B 45                call ANIMATE_P1
      32.  00:437C                          ;JP no_arrows
      33.  00:437C  C9                      ret
      34.  00:437D                      
      35.  00:437D                      move_down:
      36.  00:437D  A9                      XOR C               ; Reseteamos la entrada del teclado
      37.  00:437E                          ; Actualizamos la última tecla de dirección pulsada
      38.  00:437E  3E 01                   LD A,$01
      39.  00:4380  32 70 C0                LD (CHAR_NEW_DIR_MAIN),A
      40.  00:4383  CD 76 44                CALL CHECK_DIRECTION_MAIN
      41.  00:4386                      
      42.  00:4386  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      43.  00:4389  C6 11                   add 17 ; incrementamos en 15+2 el valor
      44.  00:438B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      45.  00:438C  DD 7E 01                ld a,(ix+1)
      46.  00:438F  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      47.  00:4390  CD AC 41                call get_bloque_en_X_Y
      48.  00:4393  FE 01                   cp 1
      49.  00:4395  CA 6F 45                jp z,NO_MOVEMENT
      50.  00:4398                      
      51.  00:4398  DD 7E 00                ld a,(ix); obtenemos el valor actual de la posicion y
      52.  00:439B  C6 11                   add 17 ; incrementamos en 15 el valor
      53.  00:439D  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      54.  00:439E  DD 7E 01                ld a,(ix+1)
      55.  00:43A1  C6 0A                   add 10 ; miramos la segunda tile 8+2
      56.  00:43A3  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision    
      57.  00:43A4  CD AC 41                call get_bloque_en_X_Y
      58.  00:43A7  FE 01                   cp 1
      59.  00:43A9  CA 6F 45                jp z,NO_MOVEMENT
      60.  00:43AC                          
      61.  00:43AC  3E 01                   LD A, MOV_SPEED
      62.  00:43AE  32 67 C0            	LD (CHAR_SPEED_Y), A
      63.  00:43B1  CD 03 45                call UPDATE_MOVEMENT    
      64.  00:43B4  CD 2B 45                call ANIMATE_P1
      65.  00:43B7                          ;JP no_arrows
      66.  00:43B7  C9                      ret
      67.  00:43B8                      
      68.  00:43B8                      move_right:
      69.  00:43B8  A9                      XOR C               ; Reseteamos la entrada del teclado
      70.  00:43B9                          ; Actualizamos la última tecla de dirección pulsada
      71.  00:43B9  CB 69                   BIT KB_UP, C
      72.  00:43BB  28 0C                   JR z, .KB_UPDOWN_PRESSED
      73.  00:43BD  CB 71                   BIT KB_DOWN, C
      74.  00:43BF  28 08                   JR z, .KB_UPDOWN_PRESSED
      75.  00:43C1  3E 03                   LD A,$03
      76.  00:43C3  32 70 C0                LD (CHAR_NEW_DIR_MAIN),A
      77.  00:43C6  CD 76 44                CALL CHECK_DIRECTION_MAIN
      78.  00:43C9                      
      79.  00:43C9                      .KB_UPDOWN_PRESSED:
      80.  00:43C9  DD 7E 01                ld a,(ix+1); obtenemos el valor actual de la posicion x   
      81.  00:43CC  C6 10                   add 16; incrementamos en 3 el valor
      82.  00:43CE  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      83.  00:43CF  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
      84.  00:43D2  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
      85.  00:43D4  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      86.  00:43D5  CD AC 41                call get_bloque_en_X_Y
      87.  00:43D8  FE 01                   cp 1
      88.  00:43DA  CA 6F 45                jp z,NO_MOVEMENT
      89.  00:43DD                      
      90.  00:43DD                          ;Miramos el tile del byte inferior del sprite - centro personaje
      91.  00:43DD  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
      92.  00:43E0  C6 10                   add 16; incrementamos en 2 tiles el valor
      93.  00:43E2  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
      94.  00:43E3  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
      95.  00:43E6  C6 08                   add 8 ; Añadimos 8 para mirar el tile inferior - centro
      96.  00:43E8  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
      97.  00:43E9  CD AC 41                call get_bloque_en_X_Y
      98.  00:43EC  FE 01                   cp 1
      99.  00:43EE  CA 6F 45                jp z,NO_MOVEMENT
     100.  00:43F1                      
     101.  00:43F1                          ;Miramos el tile del byte inferior del sprite - esquina inferior derecha
     102.  00:43F1  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x   
     103.  00:43F4  C6 10                   add 16; incrementamos en 2 tiles el valor
     104.  00:43F6  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     105.  00:43F7  DD 7E 00                ld a,(ix) ;obtenemos el valor actual de la posicion y
     106.  00:43FA  C6 0F                   add 15 ; Añadimos 8+1 para mirar la esquina inferior derecha del tile inferior
     107.  00:43FC  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     108.  00:43FD  CD AC 41                call get_bloque_en_X_Y
     109.  00:4400  FE 01                   cp 1
     110.  00:4402  CA 6F 45                jp z,NO_MOVEMENT    
     111.  00:4405                          
     112.  00:4405  3E 01                   LD A, MOV_SPEED
     113.  00:4407  32 66 C0            	LD (CHAR_SPEED_X), A
     114.  00:440A  CD 03 45                call UPDATE_MOVEMENT
     115.  00:440D  CB 69                   BIT KB_UP, C
     116.  00:440F  C8                      ret z
     117.  00:4410  CB 71                   BIT KB_DOWN, C
     118.  00:4412  C8                      ret z
     119.  00:4413  CD 2B 45                call ANIMATE_P1    
     120.  00:4416  C9                      ret
     121.  00:4417                      
     122.  00:4417                      move_left:
     123.  00:4417  A9                      XOR C               ; Reseteamos la entrada del teclado
     124.  00:4418                          ; Actualizamos la última tecla de dirección pulsada
     125.  00:4418  CB 69                   BIT KB_UP, C
     126.  00:441A  28 0C                   JR z, .KB_UPDOWN_PRESSED
     127.  00:441C  CB 71                   BIT KB_DOWN, C
     128.  00:441E  28 08                   JR z, .KB_UPDOWN_PRESSED
     129.  00:4420  3E 02                   LD A,$02
     130.  00:4422  32 70 C0                LD (CHAR_NEW_DIR_MAIN),A
     131.  00:4425  CD 76 44                CALL CHECK_DIRECTION_MAIN
     132.  00:4428                      .KB_UPDOWN_PRESSED:
     133.  00:4428  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     134.  00:442B  D6 02                   sub 2 ; decrementamos en 2 el valor
     135.  00:442D  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     136.  00:442E  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     137.  00:4431  C6 01                   add 1   ; incrementamos en 1 por el desplazamiento del VGP
     138.  00:4433  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     139.  00:4434  CD AC 41                call get_bloque_en_X_Y
     140.  00:4437  FE 01                   cp 1
     141.  00:4439  CA 6F 45                jp z,NO_MOVEMENT
     142.  00:443C                      
     143.  00:443C                          ;Miramos el tile inferior parte central del personaje
     144.  00:443C  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     145.  00:443F  D6 02                   sub 2 ; decrementamos en 2 el valor
     146.  00:4441  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     147.  00:4442  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     148.  00:4445  C6 08                   add 8   ; incrementamos en 8 para mirar la parte central del personaje
     149.  00:4447  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     150.  00:4448  CD AC 41                call get_bloque_en_X_Y
     151.  00:444B  FE 01                   cp 1
     152.  00:444D  CA 6F 45                jp z,NO_MOVEMENT
     153.  00:4450                      
     154.  00:4450                          ;Miramos el tile inferior esquina inferior izquierda
     155.  00:4450  DD 7E 01                ld a,(ix+1); obetenemos el valor actual de la posicion x
     156.  00:4453  D6 02                   sub 2 ; decrementamos en 2 el valor
     157.  00:4455  57                      ld d,a  ; Metemos el parametro X para verificar si hay colision
     158.  00:4456  DD 7E 00                ld a,(ix)   ;obtenemos el valor actual de la posicion Y
     159.  00:4459  C6 0F                   add 15   ; incrementamos en 8 para mirar la parte central del personaje (-1 por el offset del VGP)
     160.  00:445B  5F                      ld e,a  ; Metemos el parametro Y para verificar si hay colision
     161.  00:445C  CD AC 41                call get_bloque_en_X_Y
     162.  00:445F  FE 01                   cp 1
     163.  00:4461  CA 6F 45                jp z,NO_MOVEMENT
     164.  00:4464                      
     165.  00:4464  3E FF                   LD A, -MOV_SPEED
     166.  00:4466  32 66 C0            	LD (CHAR_SPEED_X), A
     167.  00:4469  CD 03 45                call UPDATE_MOVEMENT     
     168.  00:446C  CB 69                   BIT KB_UP, C
     169.  00:446E  C8                      ret z
     170.  00:446F  CB 71                   BIT KB_DOWN, C
     171.  00:4471  C8                      ret z
     172.  00:4472  CD 2B 45                call ANIMATE_P1    
     173.  00:4475  C9                      ret
     174.  00:4476                      
     175.  00:4476                      CHECK_DIRECTION_MAIN:
     176.  00:4476  3A 6F C0                LD A, (CHAR_DIR_MAIN)		                ;Cargamos el valor anterior de direccion
     177.  00:4479  2A 70 C0            	LD HL, (CHAR_NEW_DIR_MAIN)		            ;Cargamos el valor actual de direccion
     178.  00:447C  BD                  	CP L		            	                ;Son iguales?
     179.  00:447D  C8                  	RET Z                           			;Si son iguales, vuelvo
     180.  00:447E  3A 70 C0                LD A,(CHAR_NEW_DIR_MAIN)
     181.  00:4481  FE 01                   CP $01
     182.  00:4483  CA 98 44                JP Z,.SET_DIR_DOWN
     183.  00:4486  FE 00                   CP $00
     184.  00:4488  CA AD 44                JP Z,.SET_DIR_UP
     185.  00:448B  FE 03                   CP $03
     186.  00:448D  CA D7 44                JP Z,.SET_DIR_RIGHT
     187.  00:4490  FE 02                   CP $02
     188.  00:4492  CA C2 44                JP Z,.SET_DIR_LEFT
     189.  00:4495  C3 EC 44                JP .FINISH
     190.  00:4498                          
     191.  00:4498                      .SET_DIR_DOWN:    
     192.  00:4498  21 C0 80                ld hl, SPRITE_P1_DOWN
     193.  00:449B  22 F8 C0                ld (SPRITE_PTR_REPLACE), HL
     194.  00:449E                          
     195.  00:449E  21 C0 86                ld hl, SPRITE_COLOR_P1_DOWN
     196.  00:44A1  22 FA C0                ld (SPRITE_COLOR_REPLACE), HL    
     197.  00:44A4  22 FC C0                ld (SPRITE_COLOR_REPLACE2), HL
     198.  00:44A7  CD 17 43                CALL DUMP_SPR_P1    
     199.  00:44AA                      
     200.  00:44AA  C3 EC 44                JP .FINISH
     201.  00:44AD                      
     202.  00:44AD                      .SET_DIR_UP:
     203.  00:44AD  21 00 80                ld hl, SPRITE_P1_UP
     204.  00:44B0  22 F8 C0                ld (SPRITE_PTR_REPLACE), HL
     205.  00:44B3                          
     206.  00:44B3  21 60 86                ld hl, SPRITE_COLOR_P1_UP
     207.  00:44B6  22 FA C0                ld (SPRITE_COLOR_REPLACE), HL
     208.  00:44B9  22 FC C0                ld (SPRITE_COLOR_REPLACE2), HL
     209.  00:44BC  CD 17 43                CALL DUMP_SPR_P1
     210.  00:44BF  C3 EC 44                JP .FINISH
     211.  00:44C2                      
     212.  00:44C2                      .SET_DIR_LEFT:    
     213.  00:44C2  21 80 81                ld hl, SPRITE_P1_LEFT
     214.  00:44C5  22 F8 C0                ld (SPRITE_PTR_REPLACE), HL
     215.  00:44C8                          
     216.  00:44C8  21 8C 8D                ld hl, SPRITE_COLOR_P1_LEFT
     217.  00:44CB  22 FA C0                ld (SPRITE_COLOR_REPLACE), HL
     218.  00:44CE  22 FC C0                ld (SPRITE_COLOR_REPLACE2), HL
     219.  00:44D1  CD 17 43                CALL DUMP_SPR_P1   
     220.  00:44D4  C3 EC 44                JP .FINISH
     221.  00:44D7                      
     222.  00:44D7                      .SET_DIR_RIGHT:
     223.  00:44D7  21 40 82                ld hl, SPRITE_P1_RIGHT
     224.  00:44DA  22 F8 C0                ld (SPRITE_PTR_REPLACE), HL
     225.  00:44DD                          
     226.  00:44DD  21 20 87                ld hl, SPRITE_COLOR_P1_RIGHT
     227.  00:44E0  22 FA C0                ld (SPRITE_COLOR_REPLACE), HL
     228.  00:44E3  22 FC C0                ld (SPRITE_COLOR_REPLACE2), HL
     229.  00:44E6                          ;    ld (ix+13), $10      ; Sprite 1 - Ghost
     230.  00:44E6  CD 17 43                CALL DUMP_SPR_P1
     231.  00:44E9  C3 EC 44                JP .FINISH
     232.  00:44EC                      
     233.  00:44EC                      .FINISH:
     234.  00:44EC  AF                      XOR A   ; reseteamos el contador de pasos
     235.  00:44ED  32 72 C0                LD (CHAR_MIN_STEP), A   
     236.  00:44F0  3A 70 C0                LD A, (CHAR_NEW_DIR_MAIN)   ; Actualizamos la nueva dirección del personaje
     237.  00:44F3  32 6F C0                LD (CHAR_DIR_MAIN),A    
     238.  00:44F6                      
     239.  00:44F6                          ; ponemos el primer frame del sprite
     240.  00:44F6  DD 36 02 00             LD (ix+2), $00
     241.  00:44FA  DD 36 06 04             LD (ix+6), $04
     242.  00:44FE  DD 36 0A 08             LD (ix+10), $08
     243.  00:4502                          ;CALL DUMP_SPR_ATTS
     244.  00:4502  C9                      RET
     245.  00:4503                      
     246.  00:4503                      UPDATE_MOVEMENT:
     247.  00:4503  DD 7E 00            	LD A, (ix)          ;cargamos la Y			
     248.  00:4506  2A 67 C0            	LD HL, (CHAR_SPEED_Y)
     249.  00:4509  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     250.  00:450A                          
     251.  00:450A  DD 77 00            	LD (ix), A
     252.  00:450D  DD 77 04                LD (ix+4), A
     253.  00:4510  DD 77 08                LD (ix+8), A
     254.  00:4513                      	
     255.  00:4513  DD 7E 01            	LD A, (ix+1)			;cargamos la X
     256.  00:4516  2A 66 C0            	LD HL, (CHAR_SPEED_X)
     257.  00:4519  85                  	ADD L   					; Actualizamos la posicion en base a la velocidad
     258.  00:451A                          
     259.  00:451A  DD 77 01            	LD (ix+1), A
     260.  00:451D  DD 77 05                LD (ix+5), A
     261.  00:4520  DD 77 09                LD (ix+9), A	
     262.  00:4523                      
     263.  00:4523  AF                      XOR A            ; reseteamos las variables de movimiento para el siguiente ciclo
     264.  00:4524  32 66 C0                LD (CHAR_SPEED_X),A
     265.  00:4527  32 67 C0                LD (CHAR_SPEED_Y),A	
     266.  00:452A  C9                      RET
     267.  00:452B                      
     268.  00:452B                      ANIMATE_P1:
     269.  00:452B                          ; Animación/pasos de personaje	
     270.  00:452B  3A 72 C0                LD A, (CHAR_MIN_STEP)
     271.  00:452E  FE 05                   CP MAX_CHAR_STEPS
     272.  00:4530  C2 69 45                JP NZ,.NO_CHAR_PATTERN_CHANGE
     273.  00:4533                          
     274.  00:4533  AF                      XOR A
     275.  00:4534  32 72 C0                LD (CHAR_MIN_STEP), A   ; reseteamos el contador de pasos
     276.  00:4537  DD 7E 02                LD A, (ix+2)    ; Cargamos el patrón
     277.  00:453A  FE 00                   CP $00
     278.  00:453C  CA 52 45                JP Z,.SET_SPR_1P_2
     279.  00:453F  DD 36 02 00             LD (ix+2), $00
     280.  00:4543  DD 36 06 04             LD (ix+6), $04
     281.  00:4547  DD 36 0A 08             LD (ix+10), $08
     282.  00:454B  2A FA C0                ld hl, (SPRITE_COLOR_REPLACE)
     283.  00:454E  22 FC C0                ld (SPRITE_COLOR_REPLACE2), HL
     284.  00:4551  C9                      ret
     285.  00:4552                      
     286.  00:4552                      .SET_SPR_1P_2:
     287.  00:4552  DD 36 02 0C             LD (ix+2), $0C
     288.  00:4556  DD 36 06 10             LD (ix+6), $10
     289.  00:455A  DD 36 0A 14             LD (ix+10), $14
     290.  00:455E                              
     291.  00:455E  2A FA C0                ld HL, (SPRITE_COLOR_REPLACE)
     292.  00:4561  11 30 00                ld DE,48
     293.  00:4564  19                      ADD HL, DE
     294.  00:4565  22 FC C0                ld (SPRITE_COLOR_REPLACE2), HL
     295.  00:4568                          ;ld a, 0
     296.  00:4568  C9                  	ret
     297.  00:4569                      
     298.  00:4569                      .NO_CHAR_PATTERN_CHANGE    
     299.  00:4569  C6 01                   ADD 1
     300.  00:456B  32 72 C0                LD (CHAR_MIN_STEP), A    
     301.  00:456E  C9                      ret
     302.  00:456F                      
     303.  00:456F                      NO_MOVEMENT:    
     304.  00:456F  C9                      ret
     305.  00:4570                      
     306.  00:4570                      MOVE_SHOOT:
     307.  00:4570  3A 71 C0                LD A,(CHAR_MAIN_SHOOT)    
     308.  00:4573  FE 01                   CP $01
     309.  00:4575  CA A0 45                JP Z,.MOVE_SHOOT_LEFT
     310.  00:4578  FE 02                   CP $02
     311.  00:457A  CA 88 45                JP Z,.MOVE_SHOOT_RIGHT
     312.  00:457D  FE 03                   CP $03
     313.  00:457F  CA 90 45                JP Z,.MOVE_SHOOT_UP    
     314.  00:4582  FE 04                   CP $04
     315.  00:4584  CA 98 45                JP Z,.MOVE_SHOOT_DOWN
     316.  00:4587  C9                      RET
     317.  00:4588                      
     318.  00:4588                      .MOVE_SHOOT_RIGHT:        
     319.  00:4588  3E 03                   LD A, MOV_SPEED_SHOOT
     320.  00:458A  32 74 C0            	LD (CHAR_SPEED_SHOOT), A    
     321.  00:458D  C3 A5 45                JP .CHECK_SHOOT_DISTANCE
     322.  00:4590                      
     323.  00:4590                      .MOVE_SHOOT_UP:        
     324.  00:4590  3E FD                   LD A, -MOV_SPEED_SHOOT
     325.  00:4592  32 74 C0            	LD (CHAR_SPEED_SHOOT), A    
     326.  00:4595  C3 A5 45                JP .CHECK_SHOOT_DISTANCE
     327.  00:4598                      
     328.  00:4598                      .MOVE_SHOOT_DOWN:
     329.  00:4598  3E 03                   LD A, MOV_SPEED_SHOOT
     330.  00:459A  32 74 C0            	LD (CHAR_SPEED_SHOOT), A    
     331.  00:459D  C3 A5 45                JP .CHECK_SHOOT_DISTANCE
     332.  00:45A0                      
     333.  00:45A0                      .MOVE_SHOOT_LEFT:    
     334.  00:45A0  3E FD                   LD A, -MOV_SPEED_SHOOT
     335.  00:45A2  32 74 C0            	LD (CHAR_SPEED_SHOOT), A    
     336.  00:45A5                      
     337.  00:45A5                      .CHECK_SHOOT_DISTANCE:
     338.  00:45A5                          ; Miramos si va a izq o der
     339.  00:45A5  3A 71 C0                LD A,(CHAR_MAIN_SHOOT)    
     340.  00:45A8  D6 03                   SUB 3   ; Restar 3 a 1 o 2 provoca salto de carro, si es 3 o 4 no provoca el salto de carro
     341.  00:45AA  D2 BA 45                JP NC,.ADD_SHOOT_Y
     342.  00:45AD                          ; Movemos el disparo
     343.  00:45AD  DD 7E 0D                LD A, (ix+SPR_SHOOT_P1+1)          ;cargamos la X del disparo
     344.  00:45B0  2A 74 C0            	LD HL, (CHAR_SPEED_SHOOT)
     345.  00:45B3  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     346.  00:45B4  DD 77 0D                LD (ix+SPR_SHOOT_P1+1), A
     347.  00:45B7  C3 C4 45                JP .ADD_DISTANCE
     348.  00:45BA                      .ADD_SHOOT_Y
     349.  00:45BA                          ; Movemos el disparo
     350.  00:45BA  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)          ;cargamos la X del disparo
     351.  00:45BD  2A 74 C0            	LD HL, (CHAR_SPEED_SHOOT)
     352.  00:45C0  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     353.  00:45C1  DD 77 0C                LD (ix+SPR_SHOOT_P1), A
     354.  00:45C4                      
     355.  00:45C4                      .ADD_DISTANCE:
     356.  00:45C4  3A 73 C0                LD A,(CHAR_DISTANCE_SHOOT)
     357.  00:45C7  C6 03                   ADD MOV_SPEED_SHOOT
     358.  00:45C9  32 73 C0                LD (CHAR_DISTANCE_SHOOT),A    
     359.  00:45CC  FE 30                   CP MAX_DISTANCE_SHOOT
     360.  00:45CE  C0                      RET NZ
     361.  00:45CF                      
     362.  00:45CF                      .HIDE_SHOOT:
     363.  00:45CF  DD 36 0C D9             LD (ix+SPR_SHOOT_P1),217          ; Y = 217 para ocultar el Sprite
     364.  00:45D3  AF                      XOR A
     365.  00:45D4  32 71 C0                LD (CHAR_MAIN_SHOOT),A   ; Desactivo el estado disparando 
     366.  00:45D7  32 73 C0                LD (CHAR_DISTANCE_SHOOT),A
     367.  00:45DA  C9                      RET
     368.  00:45DB                      
     369.  00:45DB                      SHOOT_MAIN_CHAR:    
     370.  00:45DB  3A 71 C0                LD A, (CHAR_MAIN_SHOOT)
     371.  00:45DE  FE 01                   CP $01                  ; Si ya está disparando esperamos a que termine
     372.  00:45E0  C8                      RET Z;,MAIN_LOOP
     373.  00:45E1  FE 02                   CP $02                  ; Si ya está disparando esperamos a que termine
     374.  00:45E3  C8                      RET Z;,MAIN_LOOP
     375.  00:45E4  FE 03                   CP $03                  ; Si ya está disparando esperamos a que termine
     376.  00:45E6  C8                      RET Z;,MAIN_LOOP
     377.  00:45E7  FE 04                   CP $04                  ; Si ya está disparando esperamos a que termine
     378.  00:45E9  C8                      RET Z;,MAIN_LOOP
     379.  00:45EA                      
     380.  00:45EA  DD 36 0E 18             ld (ix+SPR_SHOOT_P1+2), SPR_SHOOT_P1_PTRN     ; Sprite Disparo
     381.  00:45EE                      
     382.  00:45EE  DD 7E 00                LD A, (ix)          
     383.  00:45F1  DD 77 0C                ld (ix+SPR_SHOOT_P1), A       ; Asignamos la Y del personaje    
     384.  00:45F4                      
     385.  00:45F4  3A 6F C0                LD A, (CHAR_DIR_MAIN)
     386.  00:45F7  FE 03                   CP $03
     387.  00:45F9  CA 15 46                JP Z,.SHOOT_RIGHT
     388.  00:45FC  FE 00                   CP $00
     389.  00:45FE  CA 24 46                JP Z,.SHOOT_UP
     390.  00:4601  FE 01                   CP $01
     391.  00:4603  CA 37 46                JP Z,.SHOOT_DOWN
     392.  00:4606                          ; SHOOT LEFT
     393.  00:4606  3E 01                   LD A,$01                ; SHOOT LEFT
     394.  00:4608  32 71 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando izquierda
     395.  00:460B  DD 7E 01                LD A, (ix+1)			;cargamos la X - Si no es derecha, debe ser izquierda
     396.  00:460E  21 F4 FF            	LD HL, -12
     397.  00:4611  85                  	ADD L
     398.  00:4612                          
     399.  00:4612  C3 47 46                JP .CONTINUE
     400.  00:4615                      
     401.  00:4615                      .SHOOT_RIGHT:    
     402.  00:4615  3E 02                   LD A,$02
     403.  00:4617  32 71 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando derecha
     404.  00:461A                          
     405.  00:461A  DD 7E 01                LD A, (ix+1)			;cargamos la X
     406.  00:461D  21 0C 00            	LD HL, 12
     407.  00:4620  85                  	ADD L
     408.  00:4621  C3 47 46                JP .CONTINUE
     409.  00:4624                      
     410.  00:4624                      .SHOOT_UP:
     411.  00:4624  3E 03                   LD A,$03
     412.  00:4626  32 71 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando arriba
     413.  00:4629                          
     414.  00:4629                          ; Sumamos el desplazamiento a la Y
     415.  00:4629  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     416.  00:462C  D6 10                   SUB 16
     417.  00:462E  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     418.  00:4631                          ;LD (ix+17), D
     419.  00:4631  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     420.  00:4634  C3 47 46                JP .CONTINUE
     421.  00:4637                      
     422.  00:4637                      .SHOOT_DOWN
     423.  00:4637  3E 04               	LD A,$04
     424.  00:4639  32 71 C0                LD (CHAR_MAIN_SHOOT),A   ; Activo el estado disparando abajo
     425.  00:463C                          
     426.  00:463C                          ; Sumamos el desplazamiento a la Y
     427.  00:463C  DD 7E 0C                LD A, (ix+SPR_SHOOT_P1)
     428.  00:463F  C6 10                   ADD 16
     429.  00:4641  DD 77 0C                LD (ix+SPR_SHOOT_P1), A    
     430.  00:4644                          ;LD (ix+17), D
     431.  00:4644  DD 7E 01                LD A, (ix+1)			;cargamos la X    
     432.  00:4647                      
     433.  00:4647                      .CONTINUE:
     434.  00:4647                          ;ld (ix+16), B       ; Asignamos la Y del personaje
     435.  00:4647  DD 77 0D                ld (ix+SPR_SHOOT_P1+1), A       ; Asignamos la X del personaje + el desplazamiento        
     436.  00:464A                          ;jp MAIN_LOOP
     437.  00:464A  C9                      ret
     438.  00:464B                      
     439.  00:464B                      BOUNCE_ANDY:
     440.  00:464B  DD 7E 00                LD A, (ix)
     441.  00:464E  C6 10                   ADD 16
     442.  00:4650  DD 77 00                LD (ix), A
     443.  00:4653  DD 77 04                LD (ix+4), A
     444.  00:4656  DD 77 08                LD (ix+8), A
     445.  00:4659                      
     446.  00:4659  C9                      ret
      26   00:465A                      	include "include\VDP.asm"
       1.  00:465A                      ; Offset commands registers
       2.  00:465A  (00:0000)           VDP_SX		 EQU 0
       3.  00:465A  (00:0002)           VDP_SY		 EQU 2
       4.  00:465A  (00:0004)           VDP_DX		 EQU 4
       5.  00:465A  (00:0006)           VDP_DY		 EQU 6
       6.  00:465A  (00:0008)           VDP_NX		 EQU 8
       7.  00:465A  (00:000A)           VDP_NY		 EQU 10
       8.  00:465A  (00:000C)           VDP_COLOR	 EQU 12
       9.  00:465A  (00:000D)           VDP_ARGUMENT EQU 13
      10.  00:465A  (00:000E)           VDP_COMMAND	 EQU 14
      11.  00:465A                      
      12.  00:465A                      ; Offset for sprite commands from memory
      13.  00:465A                      
      14.  00:465A                      ; VDP Commands
      15.  00:465A  (00:00E0)           CMD_YMMM	equ	$e0
      16.  00:465A  (00:00D0)           CMD_HMMM	equ	$d0
      17.  00:465A  (00:00C0)           CMD_HMMV	equ	$c0
      18.  00:465A  (00:0098)           CMD_LMMM	equ	$98
      19.  00:465A  (00:00B0)           CMD_LMMC	equ $b0
      20.  00:465A  (00:0080)           CMD_LMMV    equ $80
      21.  00:465A                      
      22.  00:465A                      ; Logical operations
      23.  00:465A  (00:0000)           VDP_IMP		equ	%0000
      24.  00:465A  (00:0001)           VDP_AND		equ	%0001
      25.  00:465A  (00:0002)           VDP_OR		equ	%0010
      26.  00:465A  (00:0003)           VDP_XOR		equ	%0011
      27.  00:465A  (00:0004)           VDP_NOT		equ	%0100
      28.  00:465A  (00:0008)           VDP_TIMP	equ	%1000
      29.  00:465A  (00:0009)           VDP_TAND	equ	%1001
      30.  00:465A  (00:000A)           VDP_TOR		equ	%1010
      31.  00:465A  (00:000B)           VDP_TXOR	equ	%1011
      32.  00:465A  (00:000C)           VDP_TNOT	equ	%1100
      33.  00:465A                      
      34.  00:465A                      ; Tile
      35.  00:465A  (00:0010)           ENERGY_WIDTH		equ	16		; Blood drops
      36.  00:465A  (00:0020)           TILE_WIDTH			equ	32
      37.  00:465A  (00:0010)           TILE_HEIGHT			equ	16
      38.  00:465A  (00:0001)           TILES_PAGE			equ	1		; Page where tiles are stored
      39.  00:465A  (00:8000)           TILES_START_ADDR 	equ $8000  ; Tiles in ROM will be loaded at $8000, so we can load them to VRAM
      40.  00:465A  (00:0002)           BACK_BUFFER			equ 2		; we will draw to page 1
      41.  00:465A  (00:0000)           FRONT_BUFFER		equ 0		; then copy to page 0
      42.  00:465A                      
      43.  00:465A                      ; Tile Map
      44.  00:465A  (00:0000)           TILENUM_OFFSET	equ 0
      45.  00:465A  (00:0001)           DX_OFFSET	equ 1
      46.  00:465A  (00:0002)           DY_OFFSET	equ 2
      47.  00:465A  (00:0003)           REPS_OFFSET	equ 3
      48.  00:465A  (00:0004)           TILEMAP_SIZE	equ 4
      49.  00:465A                      
      50.  00:465A                      ; Metatiles
      51.  00:465A  (00:0000)           METATILE_SX		equ 0
      52.  00:465A  (00:0001)           METATILE_SY		equ 1
      53.  00:465A  (00:0002)           METATILE_NX		equ 2
      54.  00:465A  (00:0003)           METATILE_NY		equ 3
      55.  00:465A  (00:0004)           METATILE_SIZE	equ 4
      56.  00:465A                      
      57.  00:465A                      ; Font
      58.  00:465A  (00:0008)           FONT_HEIGHT			equ 8
      59.  00:465A  (00:0008)           FONT_WIDTH			equ 8
      60.  00:465A  (00:00D4)           FONT_Y_OFFSET_1L	equ 212
      61.  00:465A  (00:00DC)           FONT_Y_OFFSET_2L	equ 220
      62.  00:465A                      
      63.  00:465A                      ; Dialog Box
      64.  00:465A  (00:0014)           DIAGBOX_HEIGHT	equ 20
      65.  00:465A  (00:00FF)           DIAGBOX_WIDTH	equ 255
      66.  00:465A                      
      67.  00:465A                      ;---------------------------------------------------------------------------
      68.  00:465A                      ; Init the RAM buffers used to draw a tile, energy and entities
      69.  00:465A                      ;---------------------------------------------------------------------------
      70.  00:465A                      initVDPBuffers:
      71.  00:465A  21 F3 49            		ld	hl,charDatROM
      72.  00:465D  11 1E C0            		ld	de,charDat
      73.  00:4660  01 0F 00            		ld	bc,15
      74.  00:4663  ED B0               		ldir
      75.  00:4665                      
      76.  00:4665  21 02 4A            		ld	hl,tileDatROM
      77.  00:4668  11 2D C0            		ld	de,tileDat
      78.  00:466B  01 0F 00            		ld	bc,15
      79.  00:466E  ED B0               		ldir
      80.  00:4670                      		
      81.  00:4670  21 11 4A            		ld	hl,tileDatTransROM
      82.  00:4673  11 3C C0            		ld	de,tileDatTrans
      83.  00:4676  01 0F 00            		ld	bc,15
      84.  00:4679  ED B0               		ldir	
      85.  00:467B                      
      86.  00:467B  21 20 4A            		ld	hl,energyDatROM
      87.  00:467E  11 4B C0            		ld	de,energyDat
      88.  00:4681  01 0F 00            		ld	bc,15
      89.  00:4684  ED B0               		ldir	
      90.  00:4686                      
      91.  00:4686  21 80 51            		ld 	hl, init_playerDAT
      92.  00:4689  11 02 C0            		ld de, ENTITY_PLAYER_POINTER
      93.  00:468C  01 09 00            		ld bc,ENTITY_SIZE
      94.  00:468F  ED B0               		ldir
      95.  00:4691                      
      96.  00:4691  21 89 51            		ld 	hl, enemy1_stg1DAT
      97.  00:4694                      		;add hl, 9			; ENTITY_SIZE
      98.  00:4694  11 0B C0            		ld de, ENTITY_ENEMY1_POINTER
      99.  00:4697  01 09 00            		ld bc,ENTITY_SIZE
     100.  00:469A  ED B0               		ldir
     101.  00:469C                      
     102.  00:469C  C9                  		ret
     103.  00:469D                      
     104.  00:469D                      print_strings_dialog_box:		
     105.  00:469D                      
     106.  00:469D  FD 66 01            	LD H, (IY+1)
     107.  00:46A0  FD 6E 00            	LD L, (IY)
     108.  00:46A3  11 00 61            	LD DE, FIRST_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
     109.  00:46A6  FD E5               	PUSH IY
     110.  00:46A8  CD CA 46                call print_string 
     111.  00:46AB  FD E1                   POP IY
     112.  00:46AD                      
     113.  00:46AD  FD 66 03            	LD H, (IY+3)
     114.  00:46B0  FD 6E 02            	LD L, (IY+2)
     115.  00:46B3  11 00 65                LD DE, SEC_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y    
     116.  00:46B6  FD E5               	PUSH IY
     117.  00:46B8  CD CA 46                call print_string 
     118.  00:46BB  FD E1               	POP IY
     119.  00:46BD                      
     120.  00:46BD  FD 66 05                LD H, (IY+5)
     121.  00:46C0  FD 6E 04            	LD L, (IY+4)
     122.  00:46C3  11 00 69            	LD DE, THIRD_LINE_DLG_BOX	; Aquí irá el offset de la memoria del VDP en base a X, Y
     123.  00:46C6  CD CA 46                call print_string 
     124.  00:46C9  C9                  	RET
     125.  00:46CA                      
     126.  00:46CA                      print_string:       
     127.  00:46CA                      	
     128.  00:46CA                      	;LD HL, string01
     129.  00:46CA                      	;LD DE, 5CA8H	; Aquí irá el offset de la memoria del VDP en base a X, Y
     130.  00:46CA                      .loop_str:
     131.  00:46CA  7E                  	LD A, (HL)
     132.  00:46CB  A7                  	AND A
     133.  00:46CC  C8                  	RET Z
     134.  00:46CD                      
     135.  00:46CD  D6 20               	SUB 32
     136.  00:46CF  CB 07               	RLC A
     137.  00:46D1  CB 07               	RLC A	
     138.  00:46D3                          
     139.  00:46D3  06 00               	LD B, 0
     140.  00:46D5  4F                  	LD C, A	; 4 * 32 = 124, ultimo caractec primera linea. 1024 - primer caracter segunda linea
     141.  00:46D6                      				; 16 * 4 = 64 -> numero 0 - ASCII 48 - 32 = 16 * 4 = 64 offset número 0
     142.  00:46D6                      				; Si #ASCII > 63 -> 2ª línea
     143.  00:46D6                      				; segunda línea - ((#ASCII -32)*4)+1024
     144.  00:46D6                      	
     145.  00:46D6  7E                  	LD A, (HL)	; vuelvo a cargar el caracter para ver si está en la segunda línea (ascii > 63)
     146.  00:46D7  E5                  	PUSH HL
     147.  00:46D8  21 2E 8F            	LD HL, FONT
     148.  00:46DB  09                  	ADD HL, BC
     149.  00:46DC  FE 40               	CP 64
     150.  00:46DE  DA E5 46            	JP C, .first_line_font
     151.  00:46E1  01 00 04            	LD BC, 1024	; le sumamos 1024 para saltar a la segunda línea de la fuente
     152.  00:46E4  09                  	ADD HL, BC
     153.  00:46E5                      
     154.  00:46E5                      .first_line_font:
     155.  00:46E5  22 00 C1                LD (BITMAP), HL
     156.  00:46E8                          
     157.  00:46E8  06 01               	LD B, :FONT
     158.  00:46EA  D5                  	PUSH DE
     159.  00:46EB  CD FE 46                call print_char
     160.  00:46EE  D1                      POP DE
     161.  00:46EF                      	
     162.  00:46EF  FD 21 04 00         	LD IY, 4
     163.  00:46F3  FD 19               	ADD IY, DE	; Le sumo 4 a DE para que empiece a escribir el next char 8 pixels a la derecha 
     164.  00:46F5  FD 54               	LD D, IYH
     165.  00:46F7  FD 5D               	LD E, IYL
     166.  00:46F9                      	
     167.  00:46F9                      
     168.  00:46F9  E1                  	POP HL
     169.  00:46FA  23                  	INC HL
     170.  00:46FB  18 CD               	JR .loop_str
     171.  00:46FD                          
     172.  00:46FD  C9                      RET
     173.  00:46FE                      
     174.  00:46FE                      print_char
     175.  00:46FE  AF                  		XOR A		
     176.  00:46FF  0E 00               		ld		c,0
     177.  00:4701                      		;ld		de,0
     178.  00:4701  ED 53 5F C0         		LD (CHR_ACR), DE
     179.  00:4705  CD 55 42                	call	_vdpsetvramwr		
     180.  00:4708  78                  		ld	a, b			; 1st page bitmap
     181.  00:4709                      		;ld	d,a
     182.  00:4709                      		;ld	(_bank2),a
     183.  00:4709  2A 00 C1            		ld	hl,(BITMAP)		; Bitmap address
     184.  00:470C  3E 08               		ld	a, 8			; #lineas del caracter
     185.  00:470E  01 98 04            1:      ld	bc,0x498		; escribimos 4 bytes en el puerto 98h	
     186.  00:4711  ED B3                       otir
     187.  00:4713  01 7C 00                    LD BC, 124
     188.  00:4716  09                          ADD HL, BC
     189.  00:4717  F5                  		PUSH AF
     190.  00:4718                      
     191.  00:4718  FD 2A 5F C0         		LD IY, (CHR_ACR)
     192.  00:471C  01 80 00            		LD BC, 128
     193.  00:471F  FD 09               		ADD IY, BC
     194.  00:4721  FD 54               		LD D, IYH
     195.  00:4723  FD 5D               		LD E, IYL
     196.  00:4725  A9                  		XOR C
     197.  00:4726  ED 53 5F C0         		LD (CHR_ACR), DE
     198.  00:472A  CD 55 42            		call	_vdpsetvramwr		
     199.  00:472D  F1                  		POP AF		
     200.  00:472E                      
     201.  00:472E  3D                  		dec	a
     202.  00:472F  20 DD               		jr	nz,1b		
     203.  00:4731  C9                  		ret 
     204.  00:4732                      
     205.  00:4732                      CLEAR_DIALOG_BOX_v1:		
     206.  00:4732  0E 00               		LD C,0
     207.  00:4734  11 28 5C            		LD DE, 5C28H
     208.  00:4737  ED 53 5F C0         		LD (CHR_ACR), DE
     209.  00:473B  CD 55 42            		call _vdpsetvramwr
     210.  00:473E  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     211.  00:4740  21 EC 8D            1:		LD HL, BLANK_DATA
     212.  00:4743  01 98 54            		LD BC,0x5498	; Escribimos 84 bytes
     213.  00:4746  ED B3               		OTIR
     214.  00:4748                      
     215.  00:4748  F5                  		PUSH AF
     216.  00:4749  FD 2A 5F C0         		LD IY, (CHR_ACR)
     217.  00:474D  01 80 00            		LD BC, 128
     218.  00:4750  FD 09               		ADD IY, BC
     219.  00:4752  FD 54               		LD D, IYH
     220.  00:4754  FD 5D               		LD E, IYL
     221.  00:4756  0E 00               		LD C,0
     222.  00:4758  ED 53 5F C0         		LD (CHR_ACR), DE
     223.  00:475C  CD 55 42            		call	_vdpsetvramwr		
     224.  00:475F  F1                  		POP AF		
     225.  00:4760                      
     226.  00:4760  3D                  		DEC a
     227.  00:4761  20 DD               		JR NZ,1b
     228.  00:4763  C9                  		RET
     229.  00:4764                      
     230.  00:4764                      CLEAR_DIALOG_BOX_v2:
     231.  00:4764  0E 00               		LD C,0
     232.  00:4766  11 00 61            		LD DE, FIRST_LINE_DLG_BOX
     233.  00:4769  ED 53 5F C0         		LD (CHR_ACR), DE
     234.  00:476D  CD 55 42            		call _vdpsetvramwr
     235.  00:4770  3E 18               		LD A, 24		; Borraremos 24 líneas de la pantalla
     236.  00:4772  21 EC 8D            1:		LD HL, BLANK_DATA
     237.  00:4775  01 98 80            		LD BC,0x8098	; Escribimos 128 bytes, la linea entera
     238.  00:4778  ED B3               		OTIR
     239.  00:477A                      
     240.  00:477A  F5                  		PUSH AF
     241.  00:477B  FD 2A 5F C0         		LD IY, (CHR_ACR)
     242.  00:477F  01 80 00            		LD BC, 128
     243.  00:4782  FD 09               		ADD IY, BC
     244.  00:4784  FD 54               		LD D, IYH
     245.  00:4786  FD 5D               		LD E, IYL
     246.  00:4788  0E 00               		LD C,0
     247.  00:478A  ED 53 5F C0         		LD (CHR_ACR), DE
     248.  00:478E  CD 55 42            		call	_vdpsetvramwr		
     249.  00:4791  F1                  		POP AF		
     250.  00:4792                      
     251.  00:4792  3D                  		DEC a
     252.  00:4793  20 DD               		JR NZ,1b
     253.  00:4795  C9                  		RET
     254.  00:4796                      	
     255.  00:4796                      CLEAR_DIALOG_BOX:
     256.  00:4796  21 3E 4A            		LD HL, DiagBoxToFrontkBufROM
     257.  00:4799  CD DF 47            		CALL VDPCMD
     258.  00:479C  C9                  		RET
     259.  00:479D                      
     260.  00:479D                      
     261.  00:479D                      ; -----------------------------------------------------------------------------------
     262.  00:479D                      ; https://www.msx.org/forum/development/msx-development/assembly-combined-basic
     263.  00:479D                      ; https://problemkaputt.de/portar.htm#vdpregisters20h2ehmsx2videocommandregisters
     264.  00:479D                      ; -----------------------------------------------------------------------------------
     265.  00:479D  (00:F3E0)           VDP_01: EQU   $F3E0
     266.  00:479D  (00:FFE7)           VDP_08: EQU   $FFE7
     267.  00:479D  (00:FFE8)           VDP_09: EQU   $FFE8
     268.  00:479D                      
     269.  00:479D                      SETPAG:				; SETPAG [A]
     270.  00:479D  0F                  	RRCA
     271.  00:479E  0F                  	RRCA
     272.  00:479F  0F                  	RRCA
     273.  00:47A0  F6 1F               	OR	%00011111
     274.  00:47A2  F3                  	DI
     275.  00:47A3  D3 99               	OUT	($99),A
     276.  00:47A5  3E 82               	LD	A,$80+2
     277.  00:47A7  FB                  	EI
     278.  00:47A8  D3 99               	OUT	($99),A
     279.  00:47AA  C9                  	RET
     280.  00:47AB                      
     281.  00:47AB                      SET_WR:				; SET_WR [AHL]
     282.  00:47AB  CB 04               	RLC	H
     283.  00:47AD  17                  	RLA
     284.  00:47AE  CB 04               	RLC	H
     285.  00:47B0  17                  	RLA
     286.  00:47B1  CB 3C               	SRL	H
     287.  00:47B3  CB 3C               	SRL	H
     288.  00:47B5  F3                  	DI
     289.  00:47B6  D3 99               	OUT	($99),A
     290.  00:47B8  3E 8E               	LD	A,$80+14
     291.  00:47BA  D3 99               	OUT	($99),A
     292.  00:47BC  7D                  	LD	A,L
     293.  00:47BD                      ;	NOP				; MSX2+
     294.  00:47BD  D3 99               	OUT	($99),A
     295.  00:47BF  7C                  	LD	A,H
     296.  00:47C0  F6 40               	OR	64
     297.  00:47C2  D3 99               	OUT	($99),A
     298.  00:47C4  FB                  	EI
     299.  00:47C5  C9                  	RET
     300.  00:47C6                      
     301.  00:47C6                      SET_RD:				; SET_RD [AHL]
     302.  00:47C6  CB 04               	RLC	H
     303.  00:47C8  17                  	RLA
     304.  00:47C9  CB 04               	RLC	H
     305.  00:47CB  17                  	RLA
     306.  00:47CC  CB 3C               	SRL	H
     307.  00:47CE  CB 3C               	SRL	H
     308.  00:47D0  F3                  	DI
     309.  00:47D1  D3 99               	OUT	($99),A
     310.  00:47D3  3E 8E               	LD	A,$80+14
     311.  00:47D5  D3 99               	OUT	($99),A
     312.  00:47D7  7D                  	LD	A,L
     313.  00:47D8                      ;	NOP				; MSX2+
     314.  00:47D8  D3 99               	OUT	($99),A
     315.  00:47DA  7C                  	LD	A,H
     316.  00:47DB                      ;	NOP				; MSX2+
     317.  00:47DB  D3 99               	OUT	($99),A
     318.  00:47DD  FB                  	EI
     319.  00:47DE  C9                  	RET
     320.  00:47DF                      
     321.  00:47DF                      VDPCMD:				; VDPCMD [HL]->[CMDTABLE]
     322.  00:47DF  CD F2 47            	CALL	WAITCE
     323.  00:47E2  F3                  	DI
     324.  00:47E3  3E 20               	LD	A,$20
     325.  00:47E5  D3 99               	OUT	($99),A
     326.  00:47E7  3E 91               	LD	A,$80+17
     327.  00:47E9  D3 99               	OUT	($99),A
     328.  00:47EB  FB                  	EI
     329.  00:47EC  01 9B 0F            	LD	BC,$0F9B
     330.  00:47EF  ED B3               	OTIR
     331.  00:47F1  C9                  	RET
     332.  00:47F2                      
     333.  00:47F2                      WAITCE:				; WAITCE
     334.  00:47F2  3E 02               	LD	A,$02
     335.  00:47F4  F3                  	DI
     336.  00:47F5  D3 99               	OUT	($99),A
     337.  00:47F7  3E 8F               	LD	A,$80+15
     338.  00:47F9  D3 99               	OUT	($99),A
     339.  00:47FB  DB 99               	IN	A,($99)
     340.  00:47FD  1F                  	RRA
     341.  00:47FE  3E 00               	LD	A,$00
     342.  00:4800  D3 99               	OUT	($99),A
     343.  00:4802  3E 8F               	LD	A,$80+15
     344.  00:4804  FB                  	EI
     345.  00:4805  D3 99               	OUT	($99),A
     346.  00:4807  38 E9               	JR	C,WAITCE
     347.  00:4809  C9                  	RET
     348.  00:480A                      
     349.  00:480A                      ENASCR:				; Enable Screen
     350.  00:480A  3A E0 F3            	LD	A,(VDP_01)
     351.  00:480D  F6 40               	OR	%01000000
     352.  00:480F  18 05               	JR	DISSCR.OUT
     353.  00:4811                      
     354.  00:4811                      DISSCR:				; Disable Screen
     355.  00:4811  3A E0 F3            	LD	A,(VDP_01)
     356.  00:4814  E6 BF               	AND	%10111111
     357.  00:4816  32 E0 F3            .OUT:	LD	(VDP_01),A
     358.  00:4819  F3                  	DI
     359.  00:481A  D3 99               	OUT	($99),A
     360.  00:481C  3E 81               	LD	A,$80+1
     361.  00:481E  FB                  	EI
     362.  00:481F  D3 99               	OUT	($99),A
     363.  00:4821  C9                  	RET
     364.  00:4822                      
     365.  00:4822                      ENASPR:				; Enable Sprites
     366.  00:4822  3A E7 FF            	LD	A,(VDP_08)
     367.  00:4825  E6 FD               	AND	%11111101
     368.  00:4827  18 05               	JR	DISSPR.OUT
     369.  00:4829                      
     370.  00:4829                      DISSPR:				; Disable Sprites
     371.  00:4829  3A E7 FF            	LD	A,(VDP_08)
     372.  00:482C  F6 02               	OR	%00000010
     373.  00:482E  32 E7 FF            .OUT:	LD	(VDP_08),A
     374.  00:4831  F3                  	DI
     375.  00:4832  D3 99               	OUT	($99),A
     376.  00:4834  3E 88               	LD	A,$80+8
     377.  00:4836  FB                  	EI
     378.  00:4837  D3 99               	OUT	($99),A
     379.  00:4839  C9                  	RET
     380.  00:483A                      
     381.  00:483A                      LIN192:				; Set 192 lines
     382.  00:483A  3A E8 FF            	LD	A,(VDP_09)
     383.  00:483D  F6 80               	OR	%10000000
     384.  00:483F  18 05               	JR	LIN212.OUT
     385.  00:4841                      
     386.  00:4841                      LIN212:				; Set 212 lines
     387.  00:4841  3A E8 FF            	LD	A,(VDP_09)
     388.  00:4844  E6 7F               	AND	%01111111
     389.  00:4846  32 E8 FF            .OUT:	LD	(VDP_09),A
     390.  00:4849  F3                  	DI
     391.  00:484A  D3 99               	OUT	($99),A
     392.  00:484C  3E 89               	LD	A,$80+9
     393.  00:484E  FB                  	EI
     394.  00:484F  D3 99               	OUT	($99),A
     395.  00:4851  C9                  	RET
     396.  00:4852                      ;
     397.  00:4852                      ; This lil' routine waits until the VDP is done copying.
     398.  00:4852                      ;
     399.  00:4852                      VDP_Ready:
     400.  00:4852  3E 02                   ld a,2
     401.  00:4854  F3                      di
     402.  00:4855  D3 99                   out (#99),a     ; select s#2
     403.  00:4857  3E 8F                   ld a,15+128
     404.  00:4859  D3 99                   out (#99),a
     405.  00:485B  DB 99                   in a,(#99)
     406.  00:485D  1F                      rra
     407.  00:485E  3E 00                   ld a,0          ; back to s#0, enable ints
     408.  00:4860  D3 99                   out (#99),a
     409.  00:4862  3E 8F                   ld a,15+128
     410.  00:4864  FB                      ei
     411.  00:4865  D3 99                   out (#99),a     ; loop if vdp not ready (CE)
     412.  00:4867  DA 52 48                jp c,VDP_Ready
     413.  00:486A  C9                      ret
     414.  00:486B                      
     415.  00:486B                      ;INPUT: A - ANDY'S MAX ENERGY
     416.  00:486B                      DRAW_ANDY_ENERGY:		
     417.  00:486B  11 00 00            	LD DE, 0
     418.  00:486E  FD 21 4B C0         	LD IY, energyDat
     419.  00:4872                          ;LD (IY + VDP_SX), 128      ; SXL - Tile 4
     420.  00:4872                          ;LD (IY+VDP_SY), 0      ; SYL	
     421.  00:4872                          ;LD (IY + VDP_DX), A     ; DXL    
     422.  00:4872  FD 36 06 C2             LD (IY + VDP_DY), 194      ; DYL    
     423.  00:4876  3A 05 C0            	LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)		; cargamos la energia de Andy
     424.  00:4879  FE 00               	CP 0
     425.  00:487B  28 32               	JR Z, .draw_empty_drops
     426.  00:487D                      	;LD A, 24  ; TESTS	
     427.  00:487D                      
     428.  00:487D                      .check_next_drop
     429.  00:487D  FE 04               	CP 4
     430.  00:487F  CA 9D 48            	JP Z, .draw_half_drop	
     431.  00:4882  FD 36 00 80         	LD (IY + VDP_SX), 128      ; SXL - Tile 4
     432.  00:4886  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     433.  00:4889  F5                  	PUSH AF
     434.  00:488A  7A                  	LD A, D
     435.  00:488B  C6 10               	ADD A, 16
     436.  00:488D  57                  	LD D, A 	
     437.  00:488E  21 4B C0            	LD HL, energyDat
     438.  00:4891  CD DF 47                CALL VDPCMD
     439.  00:4894  1C                  	INC E
     440.  00:4895  F1                  	POP AF
     441.  00:4896  D6 08               	SUB 8
     442.  00:4898  C2 7D 48            	JP NZ, .check_next_drop
     443.  00:489B                      	;ret
     444.  00:489B  18 12               	JR .draw_empty_drops
     445.  00:489D                      
     446.  00:489D                      .draw_half_drop		
     447.  00:489D  FD 36 00 90         	LD (IY + VDP_SX), 144      ; SXL - Tile 5
     448.  00:48A1  FD 72 04            	LD (IY + VDP_DX), D     ; DXL    
     449.  00:48A4  7A                  	LD A, D
     450.  00:48A5  C6 10               	ADD A, 16
     451.  00:48A7  57                  	LD D, A 	
     452.  00:48A8  21 4B C0                LD HL, energyDat
     453.  00:48AB  CD DF 47                CALL VDPCMD
     454.  00:48AE  1C                  	INC E
     455.  00:48AF                      	;ret
     456.  00:48AF                      
     457.  00:48AF                      .draw_empty_drops
     458.  00:48AF  21 10 40            		LD HL, ANDY_MAX_ENERGY
     459.  00:48B2  ED 4B 1D C0         		LD BC, (current_level)
     460.  00:48B6  06 00               		LD B,0
     461.  00:48B8  09                  		ADD HL, BC
     462.  00:48B9                      		;INC HL
     463.  00:48B9  7E                  		LD A, (HL)
     464.  00:48BA                      		;LD A, 24
     465.  00:48BA  CB 3F CB 3F CB 3F   [3]     srl a       ;a/8
     466.  00:48C0  93                  		sub e
     467.  00:48C1  C8                  		ret Z		; si es cero volvemos, full energy
     468.  00:48C2                      .loop
     469.  00:48C2  FD 36 00 A0         		LD (IY + VDP_SX), 160      ; SXL - Tile 6
     470.  00:48C6  FD 72 04            		LD (IY + VDP_DX), D     ; DXL    
     471.  00:48C9  21 4B C0                	LD HL, energyDat
     472.  00:48CC  F5                  		PUSH AF
     473.  00:48CD  7A                  		LD A, D
     474.  00:48CE  C6 10               		ADD A, 16
     475.  00:48D0  57                  		LD D, A 			
     476.  00:48D1  CD DF 47                	CALL VDPCMD
     477.  00:48D4  F1                  		pop AF
     478.  00:48D5  3D                  		dec a
     479.  00:48D6  C2 C2 48            		jp nz, .loop
     480.  00:48D9  C9                  		ret
     481.  00:48DA                      		;ld a, (ENTITY_PLAYER_POINTER+3)	; Andy's energy
     482.  00:48DA                      
     483.  00:48DA                      ; Draw a background tile - Background
     484.  00:48DA                      ; Input:
     485.  00:48DA                      ; A - Number of tile
     486.  00:48DA                      ; D - X
     487.  00:48DA                      ; E - Y
     488.  00:48DA                      draw_tile:
     489.  00:48DA  FD 21 2D C0         	LD IY, tileDat
     490.  00:48DE  C3 E5 48            	JP draw_tile_common
     491.  00:48E1                      
     492.  00:48E1                      ; Draw a background tile - Transparent
     493.  00:48E1                      ; Input:
     494.  00:48E1                      ; A - Number of tile
     495.  00:48E1                      ; D - X
     496.  00:48E1                      ; E - Y
     497.  00:48E1                      draw_tile_trans:
     498.  00:48E1  FD 21 3C C0         	LD IY, tileDatTrans
     499.  00:48E5                      	
     500.  00:48E5                      draw_tile_common:
     501.  00:48E5  21 44 51            	LD HL, metatiles_data
     502.  00:48E8  87                  	ADD A,A
     503.  00:48E9  87                  	ADD A,A ; A*4 (size of metatiles data)
     504.  00:48EA  06 00               	LD B, 0
     505.  00:48EC  4F                  	LD C, A
     506.  00:48ED  09                  	ADD HL, BC
     507.  00:48EE                      	;LD IY, tileDat
     508.  00:48EE  7E                  	LD A, (HL)
     509.  00:48EF  FD 77 00            	LD (IY + VDP_SX), A
     510.  00:48F2  23                  	INC HL
     511.  00:48F3  7E                  	LD A, (HL)
     512.  00:48F4  FD 77 02            	LD (IY + VDP_SY), A
     513.  00:48F7  23                  	INC HL
     514.  00:48F8  7E                  	LD A, (HL)
     515.  00:48F9  FD 77 08            	LD (IY + VDP_NX), A
     516.  00:48FC  23                  	INC HL
     517.  00:48FD  7E                  	LD A, (HL)
     518.  00:48FE  FD 77 0A            	LD (IY + VDP_NY), A
     519.  00:4901  FD 72 04            	LD (IY + VDP_DX), D
     520.  00:4904  FD 73 06            	LD (IY + VDP_DY), E
     521.  00:4907  FD E5               	PUSH IY
     522.  00:4909  E1                  	POP HL
     523.  00:490A  CD DF 47            	CALL VDPCMD
     524.  00:490D  C9                  	ret
     525.  00:490E                      
     526.  00:490E                      print_strings_dialog_box_v2:
     527.  00:490E                      
     528.  00:490E  FD 66 01            	LD H, (IY+1)
     529.  00:4911  FD 6E 00            	LD L, (IY)
     530.  00:4914  3E C2               	LD A, FIRST_LINE_DLG_BOX_v2	; Aquí irá el offset de la memoria del VDP en base a X, Y
     531.  00:4916  FD E5               	PUSH IY
     532.  00:4918  CD 2D 49                call print_string_v2
     533.  00:491B  FD E1                   POP IY
     534.  00:491D                      
     535.  00:491D  FD 66 03            	LD H, (IY+3)
     536.  00:4920  FD 6E 02            	LD L, (IY+2)
     537.  00:4923  3E CA                   LD A, SEC_LINE_DLG_BOX_v2	; Aquí irá el offset de la memoria del VDP en base a X, Y    
     538.  00:4925  FD E5               	PUSH IY
     539.  00:4927  CD 2D 49                call print_string_v2
     540.  00:492A  FD E1               	POP IY
     541.  00:492C                      
     542.  00:492C  C9                  	RET
     543.  00:492D                      
     544.  00:492D                      print_string_v2:	
     545.  00:492D                      	
     546.  00:492D  FD 21 1E C0         	LD IY, charDat
     547.  00:4931  FD 77 06            	LD (IY+VDP_DY), A
     548.  00:4934  16 00               	LD D, 0		; acumulador de la DX
     549.  00:4936                      .loop_str:
     550.  00:4936                      	
     551.  00:4936  7E                  	LD A, (HL)
     552.  00:4937  A7                  	AND A		; if A = 0 -> RET
     553.  00:4938  C8                  	RET Z	
     554.  00:4939  FE 40               	CP 64		 ; Si #ASCII > 63 -> 2ª línea
     555.  00:493B  DA 44 49            	JP C, .first_line_font
     556.  00:493E  FD 36 02 DC         	LD (IY+VDP_SY), FONT_Y_OFFSET_2L		; Cargamos la SY	
     557.  00:4942  18 04               	JR .continue
     558.  00:4944                      
     559.  00:4944                      .first_line_font:
     560.  00:4944  FD 36 02 D4             LD (IY+VDP_SY), FONT_Y_OFFSET_1L		; Cargamos la SY	
     561.  00:4948                          
     562.  00:4948                      .continue:
     563.  00:4948  D6 20               	SUB 32
     564.  00:494A  CB 07               	RLC A
     565.  00:494C  CB 07               	RLC A	
     566.  00:494E  CB 07               	RLC A		; numero 0: ASCII #48 - 32 = 16 * 8 = SX número 0, Y = 0	
     567.  00:4950                      	
     568.  00:4950  FD 77 00            	LD (IY+VDP_SX), A		; Cargamos la SX
     569.  00:4953  FD 72 04            	LD (IY+VDP_DX), D		; Cargamos la DX
     570.  00:4956                      	
     571.  00:4956  E5                  	PUSH HL
     572.  00:4957  21 1E C0            	LD HL, charDat
     573.  00:495A  CD DF 47            	CALL VDPCMD	
     574.  00:495D                      	
     575.  00:495D  7A                  	LD A, D
     576.  00:495E  C6 08               	ADD FONT_WIDTH	; Le sumo 8 para que empiece a escribir el next char 8 pixels a la derecha 
     577.  00:4960  57                  	LD D, A	
     578.  00:4961                      
     579.  00:4961  E1                  	POP HL
     580.  00:4962  23                  	INC HL
     581.  00:4963  18 D1               	JR .loop_str
     582.  00:4965                          
     583.  00:4965  C9                      RET
     584.  00:4966                      
     585.  00:4966                      ; Loads the screen image using the tile map
     586.  00:4966                      
     587.  00:4966                      load_screen_v2:	
     588.  00:4966  FD 21 8C 8E         	LD IY, stg1_map_back
     589.  00:496A                      
     590.  00:496A                      .map_element	
     591.  00:496A  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)
     592.  00:496D  21 44 51            	LD HL, metatiles_data
     593.  00:4970  87                  	ADD A,A
     594.  00:4971  87                  	ADD A,A ; A*4 (size of metatiles data)
     595.  00:4972  C6 02               	ADD A, METATILE_NX
     596.  00:4974  06 00               	LD B, 0
     597.  00:4976  4F                  	LD C, A
     598.  00:4977  09                  	ADD HL, BC
     599.  00:4978                      	
     600.  00:4978  4E                  	LD C, (HL)	; Guardamos el ancho de la tile
     601.  00:4979                      	
     602.  00:4979  FD 56 01            	LD D, (IY+DX_OFFSET)
     603.  00:497C  FD 46 03            	LD B, (IY+REPS_OFFSET)
     604.  00:497F                      	
     605.  00:497F                      .loop1	
     606.  00:497F  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)	
     607.  00:4982  FD 5E 02            	LD E, (IY+DY_OFFSET)	
     608.  00:4985                      	
     609.  00:4985  C5                  	PUSH BC
     610.  00:4986  FD E5               	PUSH IY	
     611.  00:4988  CD DA 48            	call draw_tile
     612.  00:498B  FD E1               	POP IY
     613.  00:498D  C1                  	POP BC
     614.  00:498E  7A                  	LD A, D
     615.  00:498F  81                  	ADD C
     616.  00:4990  57                  	LD D, a		; We add the tile width
     617.  00:4991                      
     618.  00:4991  78                  	LD A, B
     619.  00:4992  3D                  	DEC A
     620.  00:4993  47                  	LD B, A
     621.  00:4994  20 E9               	JR NZ, .loop1	 
     622.  00:4996                      
     623.  00:4996  7A                  	LD A, D
     624.  00:4997  FE FF               	CP 255
     625.  00:4999  20 02               	JR NZ, .next_element
     626.  00:499B  AF                  	XOR a
     627.  00:499C  57                  	LD D, A
     628.  00:499D                      
     629.  00:499D                      .next_element
     630.  00:499D                      [4]	INC IY		; TILEMAP_SIZE
     630.  00:499D  FD 23 FD 23 FD 23 FD 23 
     631.  00:49A5  FD 7E 00            	LD A, (IY)
     632.  00:49A8  FE FF               	CP 255
     633.  00:49AA  20 BE               	JR NZ, .map_element
     634.  00:49AC                      	; Transparent Tiles
     635.  00:49AC  FD 21 15 8F         	LD IY, stg1_map_front
     636.  00:49B0                      
     637.  00:49B0                      .map_element_trans
     638.  00:49B0  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)
     639.  00:49B3  21 44 51            	LD HL, metatiles_data
     640.  00:49B6  87                  	ADD A,A
     641.  00:49B7  87                  	ADD A,A ; A*4 (size of metatiles data)
     642.  00:49B8  C6 02               	ADD A, METATILE_NX
     643.  00:49BA  06 00               	LD B, 0
     644.  00:49BC  4F                  	LD C, A
     645.  00:49BD  09                  	ADD HL, BC
     646.  00:49BE                      	
     647.  00:49BE  4E                  	LD C, (HL)	; Guardamos el ancho de la tile
     648.  00:49BF                      	
     649.  00:49BF  FD 56 01            	LD D, (IY+DX_OFFSET)
     650.  00:49C2  FD 46 03            	LD B, (IY+REPS_OFFSET)
     651.  00:49C5                      	
     652.  00:49C5                      .loop1_trans
     653.  00:49C5  FD 7E 00            	LD A, (IY+TILENUM_OFFSET)	
     654.  00:49C8  FD 5E 02            	LD E, (IY+DY_OFFSET)	
     655.  00:49CB                      	
     656.  00:49CB  C5                  	PUSH BC
     657.  00:49CC  FD E5               	PUSH IY	
     658.  00:49CE  CD E1 48            	call draw_tile_trans
     659.  00:49D1  FD E1               	POP IY
     660.  00:49D3  C1                  	POP BC
     661.  00:49D4  7A                  	LD A, D
     662.  00:49D5  81                  	ADD C
     663.  00:49D6  57                  	LD D, a		; We add the tile width
     664.  00:49D7                      
     665.  00:49D7  78                  	LD A, B
     666.  00:49D8  3D                  	DEC A
     667.  00:49D9  47                  	LD B, A
     668.  00:49DA  20 E9               	JR NZ, .loop1_trans 
     669.  00:49DC                      
     670.  00:49DC  7A                  	LD A, D
     671.  00:49DD  FE FF               	CP 255
     672.  00:49DF  20 02               	JR NZ, .next_element_trans
     673.  00:49E1  AF                  	XOR a
     674.  00:49E2  57                  	LD D, A
     675.  00:49E3                      
     676.  00:49E3                      .next_element_trans
     677.  00:49E3                      [4]	INC IY		; TILEMAP_SIZE
     677.  00:49E3  FD 23 FD 23 FD 23 FD 23 
     678.  00:49EB  FD 7E 00            	LD A, (IY)
     679.  00:49EE  FE FF               	CP 255
     680.  00:49F0  20 BE               	JR NZ, .map_element_trans
     681.  00:49F2  C9                  	ret
      27   00:49F3                          include "include\VDP_Data.asm"
       1.  00:49F3                      ; VDP COMMAND PARAMETER
       2.  00:49F3                      ;                               SXL SXH SYL SYH DXL DXH DYL DYH NXL NXH NYL NYH CLR ARG CMD
       3.  00:49F3                      charDatROM:                 db	0, 0, 0, FRONT_BUFFER, 0, 0, 0, FRONT_BUFFER, FONT_WIDTH, 0, FONT_HEIGHT, 0, 0, 0, CMD_HMMM
       3.  00:49F3  00 00 00 00 00 00 00 00 08 00 08 00 00 00 D0 
       4.  00:4A02                      tileDatROM:                 db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       4.  00:4A02  00 00 00 01 00 00 00 00 20 00 10 00 00 00 D0 
       5.  00:4A11                      tileDatTransROM:			db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, TILE_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_LMMM | VDP_TIMP;CMD_LMMM;CMD_HMMM
       5.  00:4A11  00 00 00 01 00 00 00 00 20 00 10 00 00 00 98 
       6.  00:4A20                      energyDatROM:               db	0, 0, 0, TILES_PAGE, 0, 0, 0, FRONT_BUFFER, ENERGY_WIDTH, 0, TILE_HEIGHT, 0, 0, 0, CMD_HMMM
       6.  00:4A20  00 00 00 01 00 00 00 00 10 00 10 00 00 00 D0 
       7.  00:4A2F                      DiagBoxToBackBufROM:        db	0, 0, 192, FRONT_BUFFER, 0, 0, 192, BACK_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       7.  00:4A2F  00 00 C0 00 00 00 C0 02 FF 00 14 00 00 00 D0 
       8.  00:4A3E                      DiagBoxToFrontkBufROM:      db	0, 0, 192, BACK_BUFFER, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       8.  00:4A3E  00 00 C0 02 00 00 C0 00 FF 00 14 00 00 00 D0 
       9.  00:4A4D                      DiagBoxClearROM:            db	0, 0, 192, TILES_PAGE, 0, 0, 192, FRONT_BUFFER, DIAGBOX_WIDTH, 0, DIAGBOX_HEIGHT, 0, 0, 0, CMD_HMMM 
       9.  00:4A4D  00 00 C0 01 00 00 C0 00 FF 00 14 00 00 00 D0 
      28   00:4A5C                      ; SFX
      29   00:4A5C                          include	"include\PT3_player.s"
       1.  00:4A5C                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  00:4A5C                      		; --- Can be assembled with asMSX ---
       3.  00:4A5C                      		; --- ROM version: MSX-KUN        ---
       4.  00:4A5C                      		; --- asMSX version 2: SapphiRe   ---
       5.  00:4A5C                      
       6.  00:4A5C                      ; Based on MSX full version of PT3 by Dioniso
       7.  00:4A5C                      ;
       8.  00:4A5C                      ; This version of the replayer can be used with any note table
       9.  00:4A5C                      ; This version also allows the use of PT3 commands
      10.  00:4A5C                      ; First 99 bytes of each PT3 module should be stripped off
      11.  00:4A5C                      ;
      12.  00:4A5C                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  00:4A5C                      ;
      14.  00:4A5C                      ; ROM LENGTH: 1549 bytes
      15.  00:4A5C                      ; RAM LENGTH:  576 bytes
      16.  00:4A5C                      
      17.  00:4A5C                      
      18.  00:4A5C                      
      19.  00:4A5C                      ;SJASM version by BTV 2016
      20.  00:4A5C                      
      21.  00:4A5C                      
      22.  00:4A5C                      		; --- CONSTANT VALUES DEFINITION ---
      23.  00:4A5C                      
      24.  00:4A5C                      ;ChannelsVars
      25.  00:4A5C                      ;struc	CHNPRM
      26.  00:4A5C                      ;reset group
      27.  00:4A5C  (00:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      28.  00:4A5C  (00:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      29.  00:4A5C  (00:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      30.  00:4A5C  (00:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      31.  00:4A5C  (00:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      32.  00:4A5C  (00:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      33.  00:4A5C  (00:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      34.  00:4A5C  (00:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      35.  00:4A5C  (00:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      36.  00:4A5C                      ;reset group
      37.  00:4A5C                      
      38.  00:4A5C  (00:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      39.  00:4A5C                      
      40.  00:4A5C                      ;IX for PTDECOD here [+12]
      41.  00:4A5C  (00:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      42.  00:4A5C  (00:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      43.  00:4A5C  (00:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      44.  00:4A5C  (00:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      45.  00:4A5C  (00:0012)           CHNPRM_Note	equ 18	;RESB 1
      46.  00:4A5C  (00:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      47.  00:4A5C  (00:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      48.  00:4A5C  (00:0015)           CHNPRM_Flags	equ 21	;RESB 1
      49.  00:4A5C                       ;Enabled - 0,SimpleGliss - 2
      50.  00:4A5C  (00:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      51.  00:4A5C  (00:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      52.  00:4A5C  (00:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      53.  00:4A5C  (00:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      54.  00:4A5C  (00:0017)           CHNPRM_Volume	equ 23	;RESB 1
      55.  00:4A5C  (00:001D)           CHNPRM_Size	equ 29	;RESB 1
      56.  00:4A5C                      ;endstruc
      57.  00:4A5C                      
      58.  00:4A5C                      ;struc	AR
      59.  00:4A5C  (00:0000)           AR_TonA		equ 0	;RESW 1
      60.  00:4A5C  (00:0002)           AR_TonB		equ 2	;RESW 1
      61.  00:4A5C  (00:0004)           AR_TonC		equ 4	;RESW 1
      62.  00:4A5C  (00:0006)           AR_Noise	equ 6	;RESB 1
      63.  00:4A5C  (00:0007)           AR_Mixer	equ 7	;RESB 1
      64.  00:4A5C  (00:0008)           AR_AmplA	equ 8	;RESB 1
      65.  00:4A5C  (00:0009)           AR_AmplB	equ 9	;RESB 1
      66.  00:4A5C  (00:000A)           AR_AmplC	equ 10	;RESB 1
      67.  00:4A5C  (00:000B)           AR_Env		equ 11	;RESW 1
      68.  00:4A5C  (00:000D)           AR_EnvTp	equ 13	;RESB 1
      69.  00:4A5C                      ;endstruc
      70.  00:4A5C                      
      71.  00:4A5C                      		; --- CODE STARTS HERE ---
      72.  00:4A5C                      
      73.  00:4A5C  21 00 F0            CHECKLP:	LD	HL,PT3_SETUP
      74.  00:4A5F  CB FE               		SET	7,[HL]
      75.  00:4A61  CB 46               		BIT	0,[HL]
      76.  00:4A63  C8                  		RET	Z
      77.  00:4A64  E1                  		POP	HL
      78.  00:4A65  21 79 F0            		LD	HL,DelyCnt
      79.  00:4A68  34                  		INC	[HL]
      80.  00:4A69  21 3D F0            		LD	HL,ChanA+CHNPRM_NtSkCn
      81.  00:4A6C  34                  		INC	[HL]
      82.  00:4A6D  AF                  PT3_MUTE:	XOR	A
      83.  00:4A6E  67                  		LD	H,A
      84.  00:4A6F  6F                  		LD	L,A
      85.  00:4A70  32 47 F1            		LD	[AYREGS+AR_AmplA],A
      86.  00:4A73  22 48 F1            		LD	[AYREGS+AR_AmplB],HL
      87.  00:4A76  C3 BF 4F            		JP	ROUT_A0
      88.  00:4A79                      
      89.  00:4A79                      PT3_INIT:	;HL - AddressOfModule - 100
      90.  00:4A79  22 00 F0            		LD [PT3_MODADDR],HL
      91.  00:4A7C  E5                  		PUSH HL
      92.  00:4A7D  11 64 00            		LD DE,100
      93.  00:4A80  19                  		ADD HL,DE
      94.  00:4A81  7E                  		LD A,[HL]
      95.  00:4A82  32 1B F0            		LD [PT3_Delay],A
      96.  00:4A85  E5                  		PUSH HL
      97.  00:4A86  DD E1               		POP IX
      98.  00:4A88  19                  		ADD HL,DE
      99.  00:4A89  22 02 F0            		LD [PT3_CrPsPtr],HL
     100.  00:4A8C  DD 5E 02            		LD E,[IX+102-100]
     101.  00:4A8F  19                  		ADD HL,DE
     102.  00:4A90  23                  		INC HL
     103.  00:4A91  22 17 F0            		LD [PT3_LPosPtr],HL
     104.  00:4A94  D1                  		POP DE
     105.  00:4A95  DD 6E 03            		LD L,[IX+103-100]
     106.  00:4A98  DD 66 04            		LD H,[IX+104-100]
     107.  00:4A9B  19                  		ADD HL,DE
     108.  00:4A9C  22 19 F0            		LD [PT3_PatsPtr],HL
     109.  00:4A9F  21 A9 00            		LD HL,169
     110.  00:4AA2  19                  		ADD HL,DE
     111.  00:4AA3  22 06 F0            		LD [PT3_OrnPtrs],HL
     112.  00:4AA6  21 69 00            		LD HL,105
     113.  00:4AA9  19                  		ADD HL,DE
     114.  00:4AAA  22 04 F0            		LD [PT3_SAMPTRS],HL
     115.  00:4AAD  21 00 F0            		LD HL,PT3_SETUP
     116.  00:4AB0  CB BE               		RES 7,[HL]
     117.  00:4AB2                      
     118.  00:4AB2                      		; --- note table data depacker ---
     119.  00:4AB2                      		; Depacks first 12 tones of each tone table
     120.  00:4AB2                      
     121.  00:4AB2  11 33 50            		LD DE,T_PACK
     122.  00:4AB5  01 B0 F1            		LD BC,T1_+(2*49)-1
     123.  00:4AB8  1A                  .TP_0:		LD A,[DE]
     124.  00:4AB9  13                  		INC DE
     125.  00:4ABA  FE 1E               		CP 15*2
     126.  00:4ABC  30 06               		JR NC,.TP_1
     127.  00:4ABE  67                  		LD H,A
     128.  00:4ABF  1A                  		LD A,[DE]
     129.  00:4AC0  6F                  		LD L,A
     130.  00:4AC1  13                  		INC DE
     131.  00:4AC2  18 07               		JR .TP_2
     132.  00:4AC4  D5                  .TP_1:		PUSH DE
     133.  00:4AC5  16 00               		LD D,0
     134.  00:4AC7  5F                  		LD E,A
     135.  00:4AC8  19                  		ADD HL,DE
     136.  00:4AC9  19                  		ADD HL,DE
     137.  00:4ACA  D1                  		POP DE
     138.  00:4ACB  7C                  .TP_2:		LD A,H
     139.  00:4ACC  02                  		LD [BC],A
     140.  00:4ACD  0B                  		DEC BC
     141.  00:4ACE  7D                  		LD A,L
     142.  00:4ACF  02                  		LD [BC],A
     143.  00:4AD0  0B                  		DEC BC
     144.  00:4AD1  D6 F0               		SUB $F0
     145.  00:4AD3  20 E3               		JR NZ,.TP_0
     146.  00:4AD5                      
     147.  00:4AD5                      		; --- INITIALIZE PT3 VARIABLES ---
     148.  00:4AD5  21 22 F0            		LD HL,VARS
     149.  00:4AD8  77                  		LD [HL],A
     150.  00:4AD9  11 23 F0            		LD DE,VARS+1
     151.  00:4ADC  01 2C 01            		LD BC,VAR0END-VARS-1
     152.  00:4ADF  ED B0               		LDIR
     153.  00:4AE1                      
     154.  00:4AE1  3C                  		INC A
     155.  00:4AE2  32 79 F0            		LD [DelyCnt],A
     156.  00:4AE5  21 01 F0            		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     157.  00:4AE8  22 3D F0            		LD [ChanA+CHNPRM_NtSkCn],HL
     158.  00:4AEB  22 5A F0            		LD [ChanB+CHNPRM_NtSkCn],HL
     159.  00:4AEE  22 77 F0            		LD [ChanC+CHNPRM_NtSkCn],HL
     160.  00:4AF1                      
     161.  00:4AF1  21 2F 50            		LD HL,EMPTYSAMORN
     162.  00:4AF4  22 11 F0            		LD [PT3_AdInPtA],HL ;ptr to zero
     163.  00:4AF7  22 2F F0            		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
     164.  00:4AFA  22 4C F0            		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
     165.  00:4AFD  22 69 F0            		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
     166.  00:4B00                      
     167.  00:4B00  22 31 F0            		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
     168.  00:4B03  22 4E F0            		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
     169.  00:4B06  22 6B F0            		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
     170.  00:4B09                      					    ;also EMPTYSAMORN comment
     171.  00:4B09                      
     172.  00:4B09                      		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
     173.  00:4B09  DD 7E FF            		LD A,[IX+99-100] ;TONE TABLE NUMBER
     174.  00:4B0C  17                  		RLA
     175.  00:4B0D  E6 07               		AND 7
     176.  00:4B0F  21 DF 4F            		LD HL,NT_DATA
     177.  00:4B12  D5                  		PUSH DE
     178.  00:4B13  50                  		LD D,B		; ld d,0 (bc is 0000 after LDIR)
     179.  00:4B14  87                  		ADD A,A
     180.  00:4B15  5F                  		LD E,A
     181.  00:4B16  19                  		ADD HL,DE	; hl -> init of correct note table data
     182.  00:4B17  5E                  		LD E,[HL]
     183.  00:4B18  23                  		INC HL
     184.  00:4B19  CB 3B               		SRL E
     185.  00:4B1B  9F                  		SBC A,A
     186.  00:4B1C  E6 A7               		AND $A7			;$00 (NOP) or $A7 (AND A)
     187.  00:4B1E  32 20 F0            		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
     188.  00:4B21  3E C9               		LD A,$C9		; RET CODE
     189.  00:4B23  32 21 F0            		LD [PT3_NTL3+1],A	; RET PLACED
     190.  00:4B26  EB                  		EX DE,HL
     191.  00:4B27  C1                  		POP BC ;BC=T1_
     192.  00:4B28  09                  		ADD HL,BC
     193.  00:4B29                      
     194.  00:4B29  1A                  		LD A,[DE]                           
     195.  00:4B2A                      
     196.  00:4B2A  01 EF 4F            		LD BC,T_
     197.  00:4B2D  81                  		ADD A,C
     198.  00:4B2E  4F                  		LD C,A
     199.  00:4B2F  88                  		ADC A,B
     200.  00:4B30                      
     201.  00:4B30  91                  		SUB C
     202.  00:4B31  47                  		LD B,A
     203.  00:4B32  C5                  		PUSH BC
     204.  00:4B33  11 7F F0            		LD DE,NT_
     205.  00:4B36  D5                  		PUSH DE
     206.  00:4B37                      
     207.  00:4B37  06 0C               		LD B,12
     208.  00:4B39  C5                  .L1:		PUSH BC
     209.  00:4B3A  4E                  		LD C,[HL]
     210.  00:4B3B  23                  		INC HL
     211.  00:4B3C  E5                  		PUSH HL
     212.  00:4B3D  46                  		LD B,[HL]
     213.  00:4B3E                      
     214.  00:4B3E  D5                  		PUSH DE
     215.  00:4B3F  EB                  		EX DE,HL
     216.  00:4B40  11 17 00            		LD DE,23
     217.  00:4B43  DD 26 08            		db $DD,$26,$08	;LD XH,8
     218.  00:4B46                      
     219.  00:4B46  CB 38               .L2:		SRL B
     220.  00:4B48  CB 19               		RR C
     221.  00:4B4A  CD 20 F0            .L3:		CALL PT3_NTL3	;AND A or NOP
     222.  00:4B4D  79                  		LD A,C
     223.  00:4B4E  8A                  		ADC A,D	;=ADC 0
     224.  00:4B4F  77                  		LD [HL],A
     225.  00:4B50  23                  		INC HL
     226.  00:4B51  78                  		LD A,B
     227.  00:4B52  8A                  		ADC A,D
     228.  00:4B53  77                  		LD [HL],A
     229.  00:4B54  19                  		ADD HL,DE
     230.  00:4B55  DD 25               		db $DD,$25	;DEC XH
     231.  00:4B57  20 ED               		JR NZ,.L2
     232.  00:4B59                      
     233.  00:4B59  D1                  		POP DE
     234.  00:4B5A  13                  		INC DE
     235.  00:4B5B  13                  		INC DE
     236.  00:4B5C  E1                  		POP HL
     237.  00:4B5D  23                  		INC HL
     238.  00:4B5E  C1                  		POP BC
     239.  00:4B5F  10 D8               		DJNZ .L1
     240.  00:4B61                      
     241.  00:4B61  E1                  		POP HL
     242.  00:4B62  D1                  		POP DE
     243.  00:4B63                      
     244.  00:4B63  7B                  		LD A,E
     245.  00:4B64  D5                  		PUSH DE
     246.  00:4B65  11 FB 4F            		LD DE,TCOLD_1
     247.  00:4B68  BB                  		CP E
     248.  00:4B69  D1                  		POP DE
     249.  00:4B6A  20 05               		JR NZ,.CORR_1
     250.  00:4B6C  3E FD               		LD A,$FD
     251.  00:4B6E  32 AD F0            		LD [NT_+$2E],A
     252.  00:4B71                      
     253.  00:4B71  1A                  .CORR_1:	LD A,[DE]
     254.  00:4B72  A7                  		AND A
     255.  00:4B73  28 11               		JR Z,.TC_EXIT
     256.  00:4B75  1F                  		RRA
     257.  00:4B76  F5                  		PUSH AF
     258.  00:4B77  87                  		ADD A,A
     259.  00:4B78  4F                  		LD C,A
     260.  00:4B79  09                  		ADD HL,BC
     261.  00:4B7A  F1                  		POP AF
     262.  00:4B7B  30 02               		JR NC,.CORR_2
     263.  00:4B7D  35                  		DEC [HL]
     264.  00:4B7E  35                  		DEC [HL]
     265.  00:4B7F  34                  .CORR_2:	INC [HL]
     266.  00:4B80  A7                  		AND A
     267.  00:4B81  ED 42               		SBC HL,BC
     268.  00:4B83  13                  		INC DE
     269.  00:4B84  18 EB               		JR .CORR_1
     270.  00:4B86                      
     271.  00:4B86                      .TC_EXIT:	;POP AF
     272.  00:4B86                      
     273.  00:4B86                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     274.  00:4B86  21 11 00            		ld	hl,$11
     275.  00:4B89  54                  		ld	d,h
     276.  00:4B8A  5C                  		ld	e,h
     277.  00:4B8B  DD 21 4F F1         		ld	IX,VT_+16
     278.  00:4B8F  06 0F               		ld	b,15
     279.  00:4B91  E5                  .INITV1:	push	hl
     280.  00:4B92  19                  		add	hl,de
     281.  00:4B93  EB                  		ex	de,hl
     282.  00:4B94  ED 62               		sbc	hl,hl
     283.  00:4B96  48                  		ld	c,b
     284.  00:4B97  06 10               		ld	b,16
     285.  00:4B99  7D                  .INITV2:	ld	a,l
     286.  00:4B9A  17                  		rla
     287.  00:4B9B  7C                  		ld	a,h
     288.  00:4B9C  CE 00               		adc	a,0
     289.  00:4B9E  DD 77 00            		ld	[ix],a
     290.  00:4BA1  DD 23               		inc	ix
     291.  00:4BA3  19                  		add	hl,de
     292.  00:4BA4  10 F3               		djnz	.INITV2
     293.  00:4BA6  E1                  		pop	hl
     294.  00:4BA7  7B                  		ld	a,e
     295.  00:4BA8  FE 77               		cp	$77
     296.  00:4BAA  20 01               		jr	nz,.INITV3
     297.  00:4BAC  1C                  		inc	e
     298.  00:4BAD  41                  .INITV3:	ld	b,c
     299.  00:4BAE  10 E1               		djnz	.INITV1
     300.  00:4BB0                      
     301.  00:4BB0  C9                  		RET
     302.  00:4BB1                      
     303.  00:4BB1                      		;pattern decoder
     304.  00:4BB1  DD 36 08 00         PD_OrSm:	LD [IX+(CHNPRM_Env_En-12)],0
     305.  00:4BB5  CD 3B 4D            		CALL SETORN
     306.  00:4BB8  0A                  		LD A,[BC]
     307.  00:4BB9  03                  		INC BC
     308.  00:4BBA  0F                  		RRCA
     309.  00:4BBB                      
     310.  00:4BBB  87                  PD_SAM:		ADD A,A
     311.  00:4BBC  5F                  PD_SAM_:	LD E,A
     312.  00:4BBD  16 00               		LD D,0
     313.  00:4BBF  2A 04 F0            		LD HL,[PT3_SAMPTRS]
     314.  00:4BC2  19                  		ADD HL,DE
     315.  00:4BC3  5E                  		LD E,[HL]
     316.  00:4BC4  23                  		INC HL
     317.  00:4BC5  56                  		LD D,[HL]
     318.  00:4BC6  2A 00 F0            		LD HL,[PT3_MODADDR]
     319.  00:4BC9  19                  		ADD HL,DE
     320.  00:4BCA  DD 75 03            		LD [IX+(CHNPRM_SamPtr-12)],L
     321.  00:4BCD  DD 74 04            		LD [IX+(CHNPRM_SamPtr+1-12)],H
     322.  00:4BD0  18 41               		JR PD_LOOP
     323.  00:4BD2                      
     324.  00:4BD2  07                  PD_VOL:		RLCA
     325.  00:4BD3  07                  		RLCA
     326.  00:4BD4  07                  		RLCA
     327.  00:4BD5  07                  		RLCA
     328.  00:4BD6  DD 77 0B            		LD [IX+(CHNPRM_Volume-12)],A
     329.  00:4BD9  18 3B               		JR PD_LP2
     330.  00:4BDB                      	
     331.  00:4BDB  DD 77 08            PD_EOff:	LD [IX+(CHNPRM_Env_En-12)],A
     332.  00:4BDE  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     333.  00:4BE1  18 33               		JR PD_LP2
     334.  00:4BE3                      
     335.  00:4BE3  3D                  PD_SorE:	DEC A
     336.  00:4BE4  20 07               		JR NZ,PD_ENV
     337.  00:4BE6  0A                  		LD A,[BC]
     338.  00:4BE7  03                  		INC BC
     339.  00:4BE8  DD 77 05            		LD [IX+(CHNPRM_NNtSkp-12)],A
     340.  00:4BEB  18 29               		JR PD_LP2
     341.  00:4BED                      
     342.  00:4BED  CD 1F 4D            PD_ENV:		CALL SETENV
     343.  00:4BF0  18 24               		JR PD_LP2
     344.  00:4BF2                      
     345.  00:4BF2  CD 3B 4D            PD_ORN:		CALL SETORN
     346.  00:4BF5  18 1C               		JR PD_LOOP
     347.  00:4BF7                             
     348.  00:4BF7  DD 77 08            PD_ESAM:	LD [IX+(CHNPRM_Env_En-12)],A
     349.  00:4BFA  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     350.  00:4BFD  C4 1F 4D            		CALL NZ,SETENV
     351.  00:4C00  0A                  		LD A,[BC]
     352.  00:4C01  03                  		INC BC
     353.  00:4C02  18 B8               		JR PD_SAM_
     354.  00:4C04                      
     355.  00:4C04  DD 7E 06            PTDECOD:	LD A,[IX+(CHNPRM_Note-12)]
     356.  00:4C07  32 0E F0            		LD [PT3_PrNote],A
     357.  00:4C0A  DD 6E FA            		LD L,[IX+(CHNPRM_CrTnSl-12)]
     358.  00:4C0D  DD 66 FB            		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
     359.  00:4C10  22 0F F0            		LD [PT3_PrSlide],HL
     360.  00:4C13                      
     361.  00:4C13  11 10 20            PD_LOOP:	LD DE,$2010
     362.  00:4C16  0A                  PD_LP2:		LD A,[BC]
     363.  00:4C17  03                  		INC BC
     364.  00:4C18  83                  		ADD A,E
     365.  00:4C19  38 96               		JR C,PD_OrSm
     366.  00:4C1B  82                  		ADD A,D
     367.  00:4C1C  28 4A               		JR Z,PD_FIN
     368.  00:4C1E  38 9B               		JR C,PD_SAM
     369.  00:4C20  83                  		ADD A,E
     370.  00:4C21  28 25               		JR Z,PD_REL
     371.  00:4C23  38 AD               		JR C,PD_VOL
     372.  00:4C25  83                  		ADD A,E
     373.  00:4C26  28 B3               		JR Z,PD_EOff
     374.  00:4C28  38 B9               		JR C,PD_SorE
     375.  00:4C2A  C6 60               		ADD A,96
     376.  00:4C2C  38 20               		JR C,PD_NOTE
     377.  00:4C2E  83                  		ADD A,E
     378.  00:4C2F  38 C1               		JR C,PD_ORN
     379.  00:4C31  82                  		ADD A,D
     380.  00:4C32  38 0F               		JR C,PD_NOIS
     381.  00:4C34  83                  		ADD A,E
     382.  00:4C35  38 C0               		JR C,PD_ESAM
     383.  00:4C37  87                  		ADD A,A
     384.  00:4C38  5F                  		LD E,A
     385.  00:4C39  21 74 2C            		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
     386.  00:4C3C  19                  		ADD HL,DE
     387.  00:4C3D  5E                  		LD E,[HL]
     388.  00:4C3E  23                  		INC HL
     389.  00:4C3F  56                  		LD D,[HL]
     390.  00:4C40  D5                  		PUSH DE
     391.  00:4C41  18 D0               		JR PD_LOOP
     392.  00:4C43                      
     393.  00:4C43  32 7D F0            PD_NOIS:	LD [Ns_Base],A
     394.  00:4C46  18 CE               		JR PD_LP2
     395.  00:4C48                      
     396.  00:4C48  DD CB 09 86         PD_REL:		RES 0,[IX+(CHNPRM_Flags-12)]
     397.  00:4C4C  18 08               		JR PD_RES
     398.  00:4C4E                      	
     399.  00:4C4E  DD 77 06            PD_NOTE:	LD [IX+(CHNPRM_Note-12)],A
     400.  00:4C51  DD CB 09 C6         		SET 0,[IX+(CHNPRM_Flags-12)]
     401.  00:4C55  AF                  		XOR A
     402.  00:4C56                      
     403.  00:4C56  ED 73 08 F0         PD_RES:		LD [PT3_PDSP],SP
     404.  00:4C5A  DD F9               		LD SP,IX
     405.  00:4C5C  67                  		LD H,A
     406.  00:4C5D  6F                  		LD L,A
     407.  00:4C5E  E5                  		PUSH HL
     408.  00:4C5F  E5                  		PUSH HL
     409.  00:4C60  E5                  		PUSH HL
     410.  00:4C61  E5                  		PUSH HL
     411.  00:4C62  E5                  		PUSH HL
     412.  00:4C63  E5                  		PUSH HL
     413.  00:4C64  ED 7B 08 F0         		LD SP,[PT3_PDSP]
     414.  00:4C68                      
     415.  00:4C68  DD 7E 05            PD_FIN:		LD A,[IX+(CHNPRM_NNtSkp-12)]
     416.  00:4C6B  DD 77 0F            		LD [IX+(CHNPRM_NtSkCn-12)],A
     417.  00:4C6E  C9                  		RET
     418.  00:4C6F                      
     419.  00:4C6F  DD CB 09 96         C_PORTM:	RES 2,[IX+(CHNPRM_Flags-12)]
     420.  00:4C73  0A                  		LD A,[BC]
     421.  00:4C74  03                  		INC BC
     422.  00:4C75                      		;SKIP PRECALCULATED TONE DELTA [BECAUSE
     423.  00:4C75                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
     424.  00:4C75  03                  		INC BC
     425.  00:4C76  03                  		INC BC
     426.  00:4C77  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     427.  00:4C7A  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     428.  00:4C7D  11 7F F0            		LD DE,NT_
     429.  00:4C80  DD 7E 06            		LD A,[IX+(CHNPRM_Note-12)]
     430.  00:4C83  DD 77 07            		LD [IX+(CHNPRM_SlToNt-12)],A
     431.  00:4C86  87                  		ADD A,A
     432.  00:4C87  6F                  		LD L,A
     433.  00:4C88  26 00               		LD H,0
     434.  00:4C8A  19                  		ADD HL,DE
     435.  00:4C8B  7E                  		LD A,[HL]
     436.  00:4C8C  23                  		INC HL
     437.  00:4C8D  66                  		LD H,[HL]
     438.  00:4C8E  6F                  		LD L,A
     439.  00:4C8F  E5                  		PUSH HL
     440.  00:4C90  3A 0E F0            		LD A,[PT3_PrNote]
     441.  00:4C93  DD 77 06            		LD [IX+(CHNPRM_Note-12)],A
     442.  00:4C96  87                  		ADD A,A
     443.  00:4C97  6F                  		LD L,A
     444.  00:4C98  26 00               		LD H,0
     445.  00:4C9A  19                  		ADD HL,DE
     446.  00:4C9B  5E                  		LD E,[HL]
     447.  00:4C9C  23                  		INC HL
     448.  00:4C9D  56                  		LD D,[HL]
     449.  00:4C9E  E1                  		POP HL
     450.  00:4C9F  ED 52               		SBC HL,DE
     451.  00:4CA1  DD 75 0D            		LD [IX+(CHNPRM_TnDelt-12)],L
     452.  00:4CA4  DD 74 0E            		LD [IX+(CHNPRM_TnDelt+1-12)],H
     453.  00:4CA7  ED 5B 0F F0         		LD DE,[PT3_PrSlide]
     454.  00:4CAB  DD 73 FA            		LD [IX+(CHNPRM_CrTnSl-12)],E
     455.  00:4CAE  DD 72 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],D
     456.  00:4CB1  0A                  		LD A,[BC] ;SIGNED TONE STEP
     457.  00:4CB2  03                  		INC BC
     458.  00:4CB3  08                  		EX AF,AF'
     459.  00:4CB4  0A                  		LD A,[BC]
     460.  00:4CB5  03                  		INC BC
     461.  00:4CB6  A7                  		AND A
     462.  00:4CB7  28 01               		JR Z,.NOSIG
     463.  00:4CB9  EB                  		EX DE,HL
     464.  00:4CBA  ED 52               .NOSIG:	SBC HL,DE
     465.  00:4CBC  F2 C4 4C            		JP P,SET_STP
     466.  00:4CBF  2F                  		CPL
     467.  00:4CC0  08                  		EX AF,AF'
     468.  00:4CC1  ED 44               		NEG
     469.  00:4CC3  08                  		EX AF,AF'
     470.  00:4CC4  DD 77 0C            SET_STP:	LD [IX+(CHNPRM_TSlStp+1-12)],A
     471.  00:4CC7  08                  		EX AF,AF'
     472.  00:4CC8  DD 77 0B            		LD [IX+(CHNPRM_TSlStp-12)],A
     473.  00:4CCB  DD 36 FE 00         		LD [IX+(CHNPRM_COnOff-12)],0
     474.  00:4CCF  C9                  		RET
     475.  00:4CD0                      
     476.  00:4CD0  DD CB 09 D6         C_GLISS:	SET 2,[IX+(CHNPRM_Flags-12)]
     477.  00:4CD4  0A                  		LD A,[BC]
     478.  00:4CD5  03                  		INC BC
     479.  00:4CD6  DD 77 0A            		LD [IX+(CHNPRM_TnSlDl-12)],A
     480.  00:4CD9  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     481.  00:4CDC  0A                  		LD A,[BC]
     482.  00:4CDD  03                  		INC BC
     483.  00:4CDE  08                  		EX AF,AF'
     484.  00:4CDF  0A                  		LD A,[BC]
     485.  00:4CE0  03                  		INC BC
     486.  00:4CE1  18 E1               		JR SET_STP
     487.  00:4CE3                      
     488.  00:4CE3  0A                  C_SMPOS:	LD A,[BC]
     489.  00:4CE4  03                  		INC BC
     490.  00:4CE5  DD 77 F5            		LD [IX+(CHNPRM_PsInSm-12)],A
     491.  00:4CE8  C9                  		RET
     492.  00:4CE9                      
     493.  00:4CE9  0A                  C_ORPOS:	LD A,[BC]
     494.  00:4CEA  03                  		INC BC
     495.  00:4CEB  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     496.  00:4CEE  C9                  		RET
     497.  00:4CEF                      
     498.  00:4CEF  0A                  C_VIBRT:	LD A,[BC]
     499.  00:4CF0  03                  		INC BC
     500.  00:4CF1  DD 77 FF            		LD [IX+(CHNPRM_OnOffD-12)],A
     501.  00:4CF4  DD 77 FE            		LD [IX+(CHNPRM_COnOff-12)],A
     502.  00:4CF7  0A                  		LD A,[BC]
     503.  00:4CF8  03                  		INC BC
     504.  00:4CF9  DD 77 00            		LD [IX+(CHNPRM_OffOnD-12)],A
     505.  00:4CFC  AF                  		XOR A
     506.  00:4CFD  DD 77 F9            		LD [IX+(CHNPRM_TSlCnt-12)],A
     507.  00:4D00  DD 77 FA            		LD [IX+(CHNPRM_CrTnSl-12)],A
     508.  00:4D03  DD 77 FB            		LD [IX+(CHNPRM_CrTnSl+1-12)],A
     509.  00:4D06  C9                  		RET
     510.  00:4D07                      
     511.  00:4D07  0A                  C_ENGLS:	LD A,[BC]
     512.  00:4D08  03                  		INC BC
     513.  00:4D09  32 1D F0            		LD [PT3_Env_Del],A
     514.  00:4D0C  32 7C F0            		LD [CurEDel],A
     515.  00:4D0F  0A                  		LD A,[BC]
     516.  00:4D10  03                  		INC BC
     517.  00:4D11  6F                  		LD L,A
     518.  00:4D12  0A                  		LD A,[BC]
     519.  00:4D13  03                  		INC BC
     520.  00:4D14  67                  		LD H,A
     521.  00:4D15  22 1E F0            		LD [PT3_ESldAdd],HL
     522.  00:4D18  C9                  		RET
     523.  00:4D19                      
     524.  00:4D19  0A                  C_DELAY:	LD A,[BC]
     525.  00:4D1A  03                  		INC BC
     526.  00:4D1B  32 1B F0            		LD [PT3_Delay],A
     527.  00:4D1E  C9                  		RET
     528.  00:4D1F                      	
     529.  00:4D1F  DD 73 08            SETENV:		LD [IX+(CHNPRM_Env_En-12)],E
     530.  00:4D22  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     531.  00:4D25  0A                  		LD A,[BC]
     532.  00:4D26  03                  		INC BC
     533.  00:4D27  67                  		LD H,A
     534.  00:4D28  0A                  		LD A,[BC]
     535.  00:4D29  03                  		INC BC
     536.  00:4D2A  6F                  		LD L,A
     537.  00:4D2B  22 4D F1            		LD [EnvBase],HL
     538.  00:4D2E  AF                  		XOR A
     539.  00:4D2F  DD 77 F4            		LD [IX+(CHNPRM_PsInOr-12)],A
     540.  00:4D32  32 7C F0            		LD [CurEDel],A
     541.  00:4D35  67                  		LD H,A
     542.  00:4D36  6F                  		LD L,A
     543.  00:4D37  22 7A F0            		LD [CurESld],HL
     544.  00:4D3A  C9                  C_NOP:		RET
     545.  00:4D3B                      
     546.  00:4D3B  87                  SETORN:		ADD A,A
     547.  00:4D3C  5F                  		LD E,A
     548.  00:4D3D  16 00               		LD D,0
     549.  00:4D3F  DD 72 F4            		LD [IX+(CHNPRM_PsInOr-12)],D
     550.  00:4D42  2A 06 F0            		LD HL,[PT3_OrnPtrs]
     551.  00:4D45  19                  		ADD HL,DE
     552.  00:4D46  5E                  		LD E,[HL]
     553.  00:4D47  23                  		INC HL
     554.  00:4D48  56                  		LD D,[HL]
     555.  00:4D49  2A 00 F0            		LD HL,[PT3_MODADDR]
     556.  00:4D4C  19                  		ADD HL,DE
     557.  00:4D4D  DD 75 01            		LD [IX+(CHNPRM_OrnPtr-12)],L
     558.  00:4D50  DD 74 02            		LD [IX+(CHNPRM_OrnPtr+1-12)],H
     559.  00:4D53  C9                  		RET
     560.  00:4D54                      
     561.  00:4D54                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     562.  00:4D54  3A 4D               SPCCOMS:	dw C_NOP
     563.  00:4D56  D0 4C               		dw C_GLISS
     564.  00:4D58  6F 4C               		dw C_PORTM
     565.  00:4D5A  E3 4C               		dw C_SMPOS
     566.  00:4D5C  E9 4C               		dw C_ORPOS
     567.  00:4D5E  EF 4C               		dw C_VIBRT
     568.  00:4D60  3A 4D               		dw C_NOP
     569.  00:4D62  3A 4D               		dw C_NOP
     570.  00:4D64  07 4D               		dw C_ENGLS
     571.  00:4D66  19 4D               		dw C_DELAY
     572.  00:4D68  3A 4D               		dw C_NOP
     573.  00:4D6A  3A 4D               		dw C_NOP
     574.  00:4D6C  3A 4D               		dw C_NOP
     575.  00:4D6E  3A 4D               		dw C_NOP
     576.  00:4D70  3A 4D               		dw C_NOP
     577.  00:4D72  3A 4D               		dw C_NOP
     578.  00:4D74                      
     579.  00:4D74  AF                  CHREGS:		XOR A
     580.  00:4D75  32 49 F1            		LD [AYREGS+AR_AmplC],A
     581.  00:4D78  DD CB 15 46         		BIT 0,[IX+CHNPRM_Flags]
     582.  00:4D7C  E5                  		PUSH HL
     583.  00:4D7D  CA A3 4E            		JP Z,.CH_EXIT
     584.  00:4D80  ED 73 0A F0         		LD [PT3_CSP],SP
     585.  00:4D84  DD 6E 0D            		LD L,[IX+CHNPRM_OrnPtr]
     586.  00:4D87  DD 66 0E            		LD H,[IX+CHNPRM_OrnPtr+1]
     587.  00:4D8A  F9                  		LD SP,HL
     588.  00:4D8B  D1                  		POP DE
     589.  00:4D8C  67                  		LD H,A
     590.  00:4D8D  DD 7E 00            		LD A,[IX+CHNPRM_PsInOr]
     591.  00:4D90  6F                  		LD L,A
     592.  00:4D91  39                  		ADD HL,SP
     593.  00:4D92  3C                  		INC A
     594.  00:4D93  BA                  		CP D
     595.  00:4D94  38 01               		JR C,.CH_ORPS
     596.  00:4D96  7B                  		LD A,E
     597.  00:4D97  DD 77 00            .CH_ORPS:	LD [IX+CHNPRM_PsInOr],A
     598.  00:4D9A  DD 7E 12            		LD A,[IX+CHNPRM_Note]
     599.  00:4D9D  86                  		ADD A,[HL]
     600.  00:4D9E  F2 A2 4D            		JP P,.CH_NTP
     601.  00:4DA1  AF                  		XOR A
     602.  00:4DA2  FE 60               .CH_NTP:	CP 96
     603.  00:4DA4  38 02               		JR C,.CH_NOK
     604.  00:4DA6  3E 5F               		LD A,95
     605.  00:4DA8  87                  .CH_NOK:	ADD A,A
     606.  00:4DA9  08                  		EX AF,AF'
     607.  00:4DAA  DD 6E 0F            		LD L,[IX+CHNPRM_SamPtr]
     608.  00:4DAD  DD 66 10            		LD H,[IX+CHNPRM_SamPtr+1]
     609.  00:4DB0  F9                  		LD SP,HL
     610.  00:4DB1  D1                  		POP DE
     611.  00:4DB2  26 00               		LD H,0
     612.  00:4DB4  DD 7E 01            		LD A,[IX+CHNPRM_PsInSm]
     613.  00:4DB7  47                  		LD B,A
     614.  00:4DB8  87                  		ADD A,A
     615.  00:4DB9  87                  		ADD A,A
     616.  00:4DBA  6F                  		LD L,A
     617.  00:4DBB  39                  		ADD HL,SP
     618.  00:4DBC  F9                  		LD SP,HL
     619.  00:4DBD  78                  		LD A,B
     620.  00:4DBE  3C                  		INC A
     621.  00:4DBF  BA                  		CP D
     622.  00:4DC0  38 01               		JR C,.CH_SMPS
     623.  00:4DC2  7B                  		LD A,E
     624.  00:4DC3  DD 77 01            .CH_SMPS:	LD [IX+CHNPRM_PsInSm],A
     625.  00:4DC6  C1                  		POP BC
     626.  00:4DC7  E1                  		POP HL
     627.  00:4DC8  DD 5E 08            		LD E,[IX+CHNPRM_TnAcc]
     628.  00:4DCB  DD 56 09            		LD D,[IX+CHNPRM_TnAcc+1]
     629.  00:4DCE  19                  		ADD HL,DE
     630.  00:4DCF  CB 70               		BIT 6,B
     631.  00:4DD1  28 06               		JR Z,.CH_NOAC
     632.  00:4DD3  DD 75 08            		LD [IX+CHNPRM_TnAcc],L
     633.  00:4DD6  DD 74 09            		LD [IX+CHNPRM_TnAcc+1],H
     634.  00:4DD9  EB                  .CH_NOAC:	EX DE,HL
     635.  00:4DDA  08                  		EX AF,AF'
     636.  00:4DDB  6F                  		LD L,A
     637.  00:4DDC  26 00               		LD H,0
     638.  00:4DDE  31 7F F0            		LD SP,NT_
     639.  00:4DE1  39                  		ADD HL,SP
     640.  00:4DE2  F9                  		LD SP,HL
     641.  00:4DE3  E1                  		POP HL
     642.  00:4DE4  19                  		ADD HL,DE
     643.  00:4DE5  DD 5E 06            		LD E,[IX+CHNPRM_CrTnSl]
     644.  00:4DE8  DD 56 07            		LD D,[IX+CHNPRM_CrTnSl+1]
     645.  00:4DEB  19                  		ADD HL,DE
     646.  00:4DEC  ED 7B 0A F0         		LD SP,[PT3_CSP]
     647.  00:4DF0  E3                  		EX [SP],HL
     648.  00:4DF1  AF                  		XOR A
     649.  00:4DF2  DD B6 05            		OR [IX+CHNPRM_TSlCnt]
     650.  00:4DF5  28 3E               		JR Z,.CH_AMP
     651.  00:4DF7  DD 35 05            		DEC [IX+CHNPRM_TSlCnt]
     652.  00:4DFA  20 39               		JR NZ,.CH_AMP
     653.  00:4DFC  DD 7E 16            		LD A,[IX+CHNPRM_TnSlDl]
     654.  00:4DFF  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     655.  00:4E02  DD 6E 17            		LD L,[IX+CHNPRM_TSlStp]
     656.  00:4E05  DD 66 18            		LD H,[IX+CHNPRM_TSlStp+1]
     657.  00:4E08  7C                  		LD A,H
     658.  00:4E09  19                  		ADD HL,DE
     659.  00:4E0A  DD 75 06            		LD [IX+CHNPRM_CrTnSl],L
     660.  00:4E0D  DD 74 07            		LD [IX+CHNPRM_CrTnSl+1],H
     661.  00:4E10  DD CB 15 56         		BIT 2,[IX+CHNPRM_Flags]
     662.  00:4E14  20 1F               		JR NZ,.CH_AMP
     663.  00:4E16  DD 5E 19            		LD E,[IX+CHNPRM_TnDelt]
     664.  00:4E19  DD 56 1A            		LD D,[IX+CHNPRM_TnDelt+1]
     665.  00:4E1C  A7                  		AND A
     666.  00:4E1D  28 01               		JR Z,.CH_STPP
     667.  00:4E1F  EB                  		EX DE,HL
     668.  00:4E20  ED 52               .CH_STPP:	SBC HL,DE
     669.  00:4E22  FA 35 4E            		JP M,.CH_AMP
     670.  00:4E25  DD 7E 13            		LD A,[IX+CHNPRM_SlToNt]
     671.  00:4E28  DD 77 12            		LD [IX+CHNPRM_Note],A
     672.  00:4E2B  AF                  		XOR A
     673.  00:4E2C  DD 77 05            		LD [IX+CHNPRM_TSlCnt],A
     674.  00:4E2F  DD 77 06            		LD [IX+CHNPRM_CrTnSl],A
     675.  00:4E32  DD 77 07            		LD [IX+CHNPRM_CrTnSl+1],A
     676.  00:4E35  DD 7E 02            .CH_AMP:	LD A,[IX+CHNPRM_CrAmSl]
     677.  00:4E38  CB 79               		BIT 7,C
     678.  00:4E3A  28 13               		JR Z,.CH_NOAM
     679.  00:4E3C  CB 71               		BIT 6,C
     680.  00:4E3E  28 07               		JR Z,.CH_AMIN
     681.  00:4E40  FE 0F               		CP 15
     682.  00:4E42  28 0B               		JR Z,.CH_NOAM
     683.  00:4E44  3C                  		INC A
     684.  00:4E45  18 05               		JR .CH_SVAM
     685.  00:4E47  FE F1               .CH_AMIN:	CP -15
     686.  00:4E49  28 04               		JR Z,.CH_NOAM
     687.  00:4E4B  3D                  		DEC A
     688.  00:4E4C  DD 77 02            .CH_SVAM:	LD [IX+CHNPRM_CrAmSl],A
     689.  00:4E4F  6F                  .CH_NOAM:	LD L,A
     690.  00:4E50  78                  		LD A,B
     691.  00:4E51  E6 0F               		AND 15
     692.  00:4E53  85                  		ADD A,L
     693.  00:4E54  F2 58 4E            		JP P,.CH_APOS
     694.  00:4E57  AF                  		XOR A
     695.  00:4E58  FE 10               .CH_APOS:	CP 16
     696.  00:4E5A  38 02               		JR C,.CH_VOL
     697.  00:4E5C  3E 0F               		LD A,15
     698.  00:4E5E  DD B6 17            .CH_VOL:	OR [IX+CHNPRM_Volume]
     699.  00:4E61  6F                  		LD L,A
     700.  00:4E62  26 00               		LD H,0
     701.  00:4E64  11 3F F1            		LD DE,VT_
     702.  00:4E67  19                  		ADD HL,DE
     703.  00:4E68  7E                  		LD A,[HL]
     704.  00:4E69  CB 41               .CH_ENV:	BIT 0,C
     705.  00:4E6B  20 03               		JR NZ,.CH_NOEN
     706.  00:4E6D  DD B6 14            		OR [IX+CHNPRM_Env_En]
     707.  00:4E70  32 49 F1            .CH_NOEN:	LD [AYREGS+AR_AmplC],A
     708.  00:4E73  CB 78               		BIT 7,B
     709.  00:4E75  79                  		LD A,C
     710.  00:4E76  28 19               		JR Z,.NO_ENSL
     711.  00:4E78  17                  		RLA
     712.  00:4E79  17                  		RLA
     713.  00:4E7A  CB 2F               		SRA A
     714.  00:4E7C  CB 2F               		SRA A
     715.  00:4E7E  CB 2F               		SRA A
     716.  00:4E80  DD 86 04            		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
     717.  00:4E83  CB 68               		BIT 5,B
     718.  00:4E85  28 03               		JR Z,.NO_ENAC
     719.  00:4E87  DD 77 04            		LD [IX+CHNPRM_CrEnSl],A
     720.  00:4E8A  21 1C F0            .NO_ENAC:	LD HL,PT3_AddToEn
     721.  00:4E8D  86                  		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
     722.  00:4E8E                      			   ;FIX IT IN NEXT VERSION?
     723.  00:4E8E  77                  		LD [HL],A
     724.  00:4E8F  18 0E               		JR .CH_MIX
     725.  00:4E91  1F                  .NO_ENSL:	RRA
     726.  00:4E92  DD 86 03            		ADD A,[IX+CHNPRM_CrNsSl]
     727.  00:4E95  32 7E F0            		LD [AddToNs],A
     728.  00:4E98  CB 68               		BIT 5,B
     729.  00:4E9A  28 03               		JR Z,.CH_MIX
     730.  00:4E9C  DD 77 03            		LD [IX+CHNPRM_CrNsSl],A
     731.  00:4E9F  78                  .CH_MIX:	LD A,B
     732.  00:4EA0  1F                  		RRA
     733.  00:4EA1  E6 48               		AND $48
     734.  00:4EA3  21 46 F1            .CH_EXIT:	LD HL,AYREGS+AR_Mixer
     735.  00:4EA6  B6                  		OR [HL]
     736.  00:4EA7  0F                  		RRCA
     737.  00:4EA8  77                  		LD [HL],A
     738.  00:4EA9  E1                  		POP HL
     739.  00:4EAA  AF                  		XOR A
     740.  00:4EAB  DD B6 0A            		OR [IX+CHNPRM_COnOff]
     741.  00:4EAE  C8                  		RET Z
     742.  00:4EAF  DD 35 0A            		DEC [IX+CHNPRM_COnOff]
     743.  00:4EB2  C0                  		RET NZ
     744.  00:4EB3  DD AE 15            		XOR [IX+CHNPRM_Flags]
     745.  00:4EB6  DD 77 15            		LD [IX+CHNPRM_Flags],A
     746.  00:4EB9  1F                  		RRA
     747.  00:4EBA  DD 7E 0B            		LD A,[IX+CHNPRM_OnOffD]
     748.  00:4EBD  38 03               		JR C,.CH_ONDL
     749.  00:4EBF  DD 7E 0C            		LD A,[IX+CHNPRM_OffOnD]
     750.  00:4EC2  DD 77 0A            .CH_ONDL:	LD [IX+CHNPRM_COnOff],A
     751.  00:4EC5  C9                  		RET
     752.  00:4EC6                      
     753.  00:4EC6  AF                  PT3_PLAY:	XOR A
     754.  00:4EC7  32 1C F0            		LD [PT3_AddToEn],A
     755.  00:4ECA  32 46 F1            		LD [AYREGS+AR_Mixer],A
     756.  00:4ECD  3D                  		DEC A
     757.  00:4ECE  32 4C F1            		LD [AYREGS+AR_EnvTp],A
     758.  00:4ED1  21 79 F0            		LD HL,DelyCnt
     759.  00:4ED4  35                  		DEC [HL]
     760.  00:4ED5  C2 5C 4F            		JP NZ,.PL2
     761.  00:4ED8  21 3D F0            		LD HL,ChanA+CHNPRM_NtSkCn
     762.  00:4EDB  35                  		DEC [HL]
     763.  00:4EDC  20 4E               		JR NZ,.PL1B
     764.  00:4EDE  ED 4B 11 F0         		LD BC,[PT3_AdInPtA]
     765.  00:4EE2  0A                  		LD A,[BC]
     766.  00:4EE3  A7                  		AND A
     767.  00:4EE4  20 3B               		JR NZ,.PL1A
     768.  00:4EE6  57                  		LD D,A
     769.  00:4EE7  32 7D F0            		LD [Ns_Base],A
     770.  00:4EEA  2A 02 F0            		LD HL,[PT3_CrPsPtr]
     771.  00:4EED  23                  		INC HL
     772.  00:4EEE  7E                  		LD A,[HL]
     773.  00:4EEF  3C                  		INC A
     774.  00:4EF0  20 08               		JR NZ,.PLNLP
     775.  00:4EF2  CD 5C 4A            		CALL CHECKLP
     776.  00:4EF5  2A 17 F0            		LD HL,[PT3_LPosPtr]
     777.  00:4EF8  7E                  		LD A,[HL]
     778.  00:4EF9  3C                  		INC A
     779.  00:4EFA  22 02 F0            .PLNLP:	LD [PT3_CrPsPtr],HL
     780.  00:4EFD  3D                  		DEC A
     781.  00:4EFE  87                  		ADD A,A
     782.  00:4EFF  5F                  		LD E,A
     783.  00:4F00  CB 12               		RL D
     784.  00:4F02  2A 19 F0            		LD HL,[PT3_PatsPtr]
     785.  00:4F05  19                  		ADD HL,DE
     786.  00:4F06  ED 5B 00 F0         		LD DE,[PT3_MODADDR]
     787.  00:4F0A  ED 73 0C F0         		LD [PT3_PSP],SP
     788.  00:4F0E  F9                  		LD SP,HL
     789.  00:4F0F  E1                  		POP HL
     790.  00:4F10  19                  		ADD HL,DE
     791.  00:4F11  44                  		LD B,H
     792.  00:4F12  4D                  		LD C,L
     793.  00:4F13  E1                  		POP HL
     794.  00:4F14  19                  		ADD HL,DE
     795.  00:4F15  22 13 F0            		LD [PT3_AdInPtB],HL
     796.  00:4F18  E1                  		POP HL
     797.  00:4F19  19                  		ADD HL,DE
     798.  00:4F1A  22 15 F0            		LD [PT3_AdInPtC],HL
     799.  00:4F1D  ED 7B 0C F0         		LD SP,[PT3_PSP]
     800.  00:4F21                      
     801.  00:4F21  DD 21 2E F0         .PL1A:		LD IX,ChanA+12
     802.  00:4F25  CD 04 4C            		CALL PTDECOD
     803.  00:4F28  ED 43 11 F0         		LD [PT3_AdInPtA],BC
     804.  00:4F2C                      
     805.  00:4F2C  21 5A F0            .PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     806.  00:4F2F  35                  		DEC [HL]
     807.  00:4F30  20 0F               		JR NZ,.PL1C
     808.  00:4F32  DD 21 4B F0         		LD IX,ChanB+12
     809.  00:4F36  ED 4B 13 F0         		LD BC,[PT3_AdInPtB]
     810.  00:4F3A  CD 04 4C            		CALL PTDECOD
     811.  00:4F3D  ED 43 13 F0         		LD [PT3_AdInPtB],BC
     812.  00:4F41                      
     813.  00:4F41  21 77 F0            .PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     814.  00:4F44  35                  		DEC [HL]
     815.  00:4F45  20 0F               		JR NZ,.PL1D
     816.  00:4F47  DD 21 68 F0         		LD IX,ChanC+12
     817.  00:4F4B  ED 4B 15 F0         		LD BC,[PT3_AdInPtC]
     818.  00:4F4F  CD 04 4C            		CALL PTDECOD
     819.  00:4F52  ED 43 15 F0         		LD [PT3_AdInPtC],BC
     820.  00:4F56                      
     821.  00:4F56  3A 1B F0            .PL1D:		LD A,[PT3_Delay]
     822.  00:4F59  32 79 F0            		LD [DelyCnt],A
     823.  00:4F5C                      
     824.  00:4F5C  DD 21 22 F0         .PL2:		LD IX,ChanA
     825.  00:4F60  2A 3F F1            		LD HL,[AYREGS+AR_TonA]
     826.  00:4F63  CD 74 4D            		CALL CHREGS
     827.  00:4F66  22 3F F1            		LD [AYREGS+AR_TonA],HL
     828.  00:4F69  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     829.  00:4F6C  32 47 F1            		LD [AYREGS+AR_AmplA],A
     830.  00:4F6F  DD 21 3F F0         		LD IX,ChanB
     831.  00:4F73  2A 41 F1            		LD HL,[AYREGS+AR_TonB]
     832.  00:4F76  CD 74 4D            		CALL CHREGS
     833.  00:4F79  22 41 F1            		LD [AYREGS+AR_TonB],HL
     834.  00:4F7C  3A 49 F1            		LD A,[AYREGS+AR_AmplC]
     835.  00:4F7F  32 48 F1            		LD [AYREGS+AR_AmplB],A
     836.  00:4F82  DD 21 5C F0         		LD IX,ChanC
     837.  00:4F86  2A 43 F1            		LD HL,[AYREGS+AR_TonC]
     838.  00:4F89  CD 74 4D            		CALL CHREGS
     839.  00:4F8C  22 43 F1            		LD [AYREGS+AR_TonC],HL
     840.  00:4F8F                      
     841.  00:4F8F  2A 7D F0            		LD HL,[Ns_Base_AddToNs]
     842.  00:4F92  7C                  		LD A,H
     843.  00:4F93  85                  		ADD A,L
     844.  00:4F94  32 45 F1            		LD [AYREGS+AR_Noise],A
     845.  00:4F97                      
     846.  00:4F97  3A 1C F0            		LD A,[PT3_AddToEn]
     847.  00:4F9A  5F                  		LD E,A
     848.  00:4F9B  87                  		ADD A,A
     849.  00:4F9C  9F                  		SBC A,A
     850.  00:4F9D  57                  		LD D,A
     851.  00:4F9E  2A 4D F1            		LD HL,[EnvBase]
     852.  00:4FA1  19                  		ADD HL,DE
     853.  00:4FA2  ED 5B 7A F0         		LD DE,[CurESld]
     854.  00:4FA6  19                  		ADD HL,DE
     855.  00:4FA7  22 4A F1            		LD [AYREGS+AR_Env],HL
     856.  00:4FAA                      
     857.  00:4FAA  AF                  		XOR A
     858.  00:4FAB  21 7C F0            		LD HL,CurEDel
     859.  00:4FAE  B6                  		OR [HL]
     860.  00:4FAF  C8                  		RET Z
     861.  00:4FB0  35                  		DEC [HL]
     862.  00:4FB1  C0                  		RET NZ
     863.  00:4FB2  3A 1D F0            		LD A,[PT3_Env_Del]
     864.  00:4FB5  77                  		LD [HL],A
     865.  00:4FB6  2A 1E F0            		LD HL,[PT3_ESldAdd]
     866.  00:4FB9  19                  		ADD HL,DE
     867.  00:4FBA  22 7A F0            		LD [CurESld],HL
     868.  00:4FBD  C9                  		RET
     869.  00:4FBE                      
     870.  00:4FBE  AF                  PT3_ROUT:	XOR A
     871.  00:4FBF                      	
     872.  00:4FBF                      ROUT_A0:	; --- FIXES BITS 6 AND 7 OF MIXER ---
     873.  00:4FBF  21 46 F1            		LD	HL,AYREGS+AR_Mixer
     874.  00:4FC2  CB FE               		set	7,[hl]
     875.  00:4FC4  CB B6               		res	6,[hl]
     876.  00:4FC6                      
     877.  00:4FC6  0E A0               		LD C,$A0
     878.  00:4FC8  21 3F F1            		LD HL,AYREGS
     879.  00:4FCB  ED 79               .LOUT:		OUT [C],A
     880.  00:4FCD  0C                  		INC C
     881.  00:4FCE  ED A3               		OUTI 
     882.  00:4FD0  0D                  		DEC C
     883.  00:4FD1  3C                  		INC A
     884.  00:4FD2  FE 0D               		CP 13
     885.  00:4FD4  20 F5               		JR NZ,.LOUT
     886.  00:4FD6  ED 79               		OUT [C],A
     887.  00:4FD8  7E                  		LD A,[HL]
     888.  00:4FD9  A7                  		AND A
     889.  00:4FDA  F8                  		RET M
     890.  00:4FDB  0C                  		INC C
     891.  00:4FDC  ED 79               		OUT [C],A
     892.  00:4FDE  C9                  		RET
     893.  00:4FDF                      
     894.  00:4FDF  64                  NT_DATA:	db (T_NEW_0-T1_)*2
     895.  00:4FE0  2A                  		db TCNEW_0-T_
     896.  00:4FE1  65                  		db (T_OLD_0-T1_)*2+1
     897.  00:4FE2  00                  		db TCOLD_0-T_
     898.  00:4FE3  01                  		db (T_NEW_1-T1_)*2+1
     899.  00:4FE4  0C                  		db TCNEW_1-T_
     900.  00:4FE5  01                  		db (T_OLD_1-T1_)*2+1
     901.  00:4FE6  0C                  		db TCOLD_1-T_
     902.  00:4FE7  94                  		db (T_NEW_2-T1_)*2
     903.  00:4FE8  35                  		db TCNEW_2-T_
     904.  00:4FE9  30                  		db (T_OLD_2-T1_)*2
     905.  00:4FEA  0E                  		db TCOLD_2-T_
     906.  00:4FEB  60                  		db (T_NEW_3-T1_)*2
     907.  00:4FEC  20                  		db TCNEW_3-T_
     908.  00:4FED  60                  		db (T_OLD_3-T1_)*2
     909.  00:4FEE  21                  		db TCOLD_3-T_
     910.  00:4FEF                      
     911.  00:4FEF                      T_:
     912.  00:4FEF                      
     913.  00:4FEF                      TCOLD_0:	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
     913.  00:4FEF  01 05 09 0B 0D 0F 13 15 
     914.  00:4FF7  19 25 3D 00         		db $18+1,$24+1,$3C+1,0
     915.  00:4FFB                      TCNEW_1:	
     916.  00:4FFB  5D 00               TCOLD_1:	db $5C+1,0
     917.  00:4FFD                      TCOLD_2:	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
     917.  00:4FFD  31 37 4D 53 5F 71 82 8C 9C 
     918.  00:5006                      		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
     918.  00:5006  9E A0 A6 A8 AA AC AE AE 00 
     919.  00:500F  57                  TCNEW_3:	db $56+1
     920.  00:5010                      TCOLD_3:	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
     920.  00:5010  1F 23 25 29 2D 2F 33 BF 00 
     921.  00:5019                      TCNEW_0:	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
     921.  00:5019  1D 21 23 27 2B 2D 31 55 
     922.  00:5021  BD BF 00            		db $BC+1,$BE+1,0
     923.  00:5024                      TCNEW_2:	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
     923.  00:5024  1B 21 25 29 2B 3B 4D 5F 
     924.  00:502C  BB BD BF            		db $BA+1,$BC+1,$BE+1
     925.  00:502F                      
     926.  00:502F  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,$90 ;delete $90 if you don't need default sample
     927.  00:5033                      
     928.  00:5033                      T_PACK:		; First 12 values of tone tables (packed)
     929.  00:5033  0D                  		db ($06EC*2)/256
     930.  00:5034  D8                  		db #d8
     931.  00:5035  69                  		db $0755-$06EC
     932.  00:5036  70                  		db $07C5-$0755
     933.  00:5037  76                  		db $083B-$07C5
     934.  00:5038  7D                  		db $08B8-$083B
     935.  00:5039  85                  		db $093D-$08B8
     936.  00:503A  8D                  		db $09CA-$093D
     937.  00:503B  95                  		db $0A5F-$09CA
     938.  00:503C  9D                  		db $0AFC-$0A5F
     939.  00:503D  A8                  		db $0BA4-$0AFC
     940.  00:503E  B1                  		db $0C55-$0BA4
     941.  00:503F  BB                  		db $0D10-$0C55
     942.  00:5040  0C                  		db ($066D*2)/256
     943.  00:5041  DA                  		db #da
     944.  00:5042  62                  		db $06CF-$066D
     945.  00:5043  68                  		db $0737-$06CF
     946.  00:5044  6D                  		db $07A4-$0737
     947.  00:5045  75                  		db $0819-$07A4
     948.  00:5046  7B                  		db $0894-$0819
     949.  00:5047  83                  		db $0917-$0894
     950.  00:5048  8A                  		db $09A1-$0917
     951.  00:5049  92                  		db $0A33-$09A1
     952.  00:504A  9C                  		db $0ACF-$0A33
     953.  00:504B  A4                  		db $0B73-$0ACF
     954.  00:504C  AF                  		db $0C22-$0B73
     955.  00:504D  B8                  		db $0CDA-$0C22
     956.  00:504E  0E                  		db ($0704*2)/256
     957.  00:504F  08                  		db #08
     958.  00:5050  6A                  		db $076E-$0704
     959.  00:5051  72                  		db $07E0-$076E
     960.  00:5052  78                  		db $0858-$07E0
     961.  00:5053  7E                  		db $08D6-$0858
     962.  00:5054  86                  		db $095C-$08D6
     963.  00:5055  90                  		db $09EC-$095C
     964.  00:5056  96                  		db $0A82-$09EC
     965.  00:5057  A0                  		db $0B22-$0A82
     966.  00:5058  AA                  		db $0BCC-$0B22
     967.  00:5059  B4                  		db $0C80-$0BCC
     968.  00:505A  BE                  		db $0D3E-$0C80
     969.  00:505B  0F                  		db ($07E0*2)/256
     970.  00:505C  C0                  		db #c0
     971.  00:505D  78                  		db $0858-$07E0
     972.  00:505E  88                  		db $08E0-$0858
     973.  00:505F  80                  		db $0960-$08E0
     974.  00:5060  90                  		db $09F0-$0960
     975.  00:5061  98                  		db $0A88-$09F0
     976.  00:5062  A0                  		db $0B28-$0A88
     977.  00:5063  B0                  		db $0BD8-$0B28
     978.  00:5064  A8                  		db $0C80-$0BD8
     979.  00:5065  E0                  		db $0D60-$0C80
     980.  00:5066  B0                  		db $0E10-$0D60
     981.  00:5067  E8                  		db $0EF8-$0E10
     982.  00:5068                      
     983.  00:5068                      
     984.  00:5068                      	;Variables del replayer... las coloco desde aqui.
     985.  00:5068                      	;mirar que hace la directiva MAP del SJASM
     986.  00:5068  (F000)              	map		#F000
     987.  00:5068                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
     988.  00:5068  (00:F000)           PT3_SETUP:		#0	;set bit0 to 1, if you want to play without looping
     989.  00:5068                                          ;bit7 is set each time, when loop point is passed
     990.  00:5068  (00:F000)           PT3_MODADDR:	#2
     991.  00:5068  (00:F002)           PT3_CrPsPtr:		#2
     992.  00:5068  (00:F004)           PT3_SAMPTRS:		#2
     993.  00:5068  (00:F006)           PT3_OrnPtrs:		#2
     994.  00:5068  (00:F008)           PT3_PDSP:		#2
     995.  00:5068  (00:F00A)           PT3_CSP:		#2 
     996.  00:5068  (00:F00C)           PT3_PSP:		#2
     997.  00:5068  (00:F00E)           PT3_PrNote:		#1
     998.  00:5068  (00:F00F)           PT3_PrSlide:		#2
     999.  00:5068  (00:F011)           PT3_AdInPtA:		#2
    1000.  00:5068  (00:F013)           PT3_AdInPtB:		#2
    1001.  00:5068  (00:F015)           PT3_AdInPtC:		#2
    1002.  00:5068  (00:F017)           PT3_LPosPtr:		#2
    1003.  00:5068  (00:F019)           PT3_PatsPtr:		#2
    1004.  00:5068  (00:F01B)           PT3_Delay:		#1
    1005.  00:5068  (00:F01C)           PT3_AddToEn:		#1
    1006.  00:5068  (00:F01D)           PT3_Env_Del:		#1
    1007.  00:5068  (00:F01E)           PT3_ESldAdd:		#2
    1008.  00:5068  (00:F020)           PT3_NTL3:		#2	; AND A / NOP (note table creator)
    1009.  00:5068                      
    1010.  00:5068  (00:F022)           VARS:			#0
    1011.  00:5068                      
    1012.  00:5068  (00:F022)           ChanA:			#29			;CHNPRM_Size
    1013.  00:5068  (00:F03F)           ChanB:			#29			;CHNPRM_Size
    1014.  00:5068  (00:F05C)           ChanC:			#29			;CHNPRM_Size
    1015.  00:5068                      
    1016.  00:5068                      ;GlobalVars
    1017.  00:5068  (00:F079)           DelyCnt:		#1
    1018.  00:5068  (00:F07A)           CurESld:		#2
    1019.  00:5068  (00:F07C)           CurEDel:		#1
    1020.  00:5068  (00:F07D)           Ns_Base_AddToNs:	#0
    1021.  00:5068  (00:F07D)           Ns_Base:		#1
    1022.  00:5068  (00:F07E)           AddToNs:		#1
    1023.  00:5068                      
    1024.  00:5068  (00:F07F)           NT_:			#192	; Puntero a/tabla de frecuencias
    1025.  00:5068                      
    1026.  00:5068  (00:F13F)           AYREGS:			#0
    1027.  00:5068  (00:F13F)           VT_:			#14
    1028.  00:5068  (00:F14D)           EnvBase:		#2
    1029.  00:5068  (00:F14F)           VAR0END:		#0
    1030.  00:5068                      
    1031.  00:5068  (00:F14F)           T1_:			#0		
    1032.  00:5068  (00:F14F)           T_NEW_1:		#0
    1033.  00:5068  (00:F14F)           T_OLD_1:		#24
    1034.  00:5068  (00:F167)           T_OLD_2:		#24
    1035.  00:5068  (00:F17F)           T_NEW_3:		#0
    1036.  00:5068  (00:F17F)           T_OLD_3:		#2
    1037.  00:5068  (00:F181)           T_OLD_0:		#0
    1038.  00:5068  (00:F181)           T_NEW_0:		#24
    1039.  00:5068  (00:F199)           T_NEW_2:		#166
    1040.  00:5068                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
    1041.  00:5068  (0000)                  ENDMAP
      30   00:5068                      ; AFX
      31   00:5068                          include "include\ayFX-ROM.ASM"
       1.  00:5068                      		; --- ayFX REPLAYER v1.31 ---
       2.  00:5068                      
       3.  00:5068                      		; --- v1.31	Fixed bug on previous version, only PSG channel C worked
       4.  00:5068                      		; --- v1.3	Fixed volume and Relative volume versions on the same file, conditional compilation
       5.  00:5068                      		; ---		Support for dynamic or fixed channel allocation
       6.  00:5068                      		; --- v1.2f/r	ayFX bank support
       7.  00:5068                      		; --- v1.11f/r	If a frame volume is zero then no AYREGS update
       8.  00:5068                      		; --- v1.1f/r	Fixed volume for all ayFX streams
       9.  00:5068                      		; --- v1.1	Explicit priority (as suggested by AR)
      10.  00:5068                      		; --- v1.0f	Bug fixed (error when using noise)
      11.  00:5068                      		; --- v1.0	Initial release
      12.  00:5068                      
      13.  00:5068                      		; --- DEFINE AYFXRELATIVE AS 0 FOR FIXED VOLUME VERSION ---
      14.  00:5068                      		; --- DEFINE AYFXRELATIVE AS 1 FOR RELATIVE VOLUME VERSION ---
      15.  00:5068  (00:0000)           AYFXRELATIVE: 	equ 0
      16.  00:5068                      
      17.  00:5068                      ayFX_SETUP:	; ---          ayFX replayer setup          ---
      18.  00:5068                      		; --- INPUT: HL -> pointer to the ayFX bank ---
      19.  00:5068  22 E3 C3            		ld	[ayFX_BANK],hl			; Current ayFX bank
      20.  00:506B  AF                  		xor	a				; a:=0
      21.  00:506C  32 E2 C3            		ld	[ayFX_MODE],a			; Initial mode: fixed channel
      22.  00:506F  3C                  		inc	a				; Starting channel (=1)
      23.  00:5070  32 EC C3            		ld	[ayFX_CHANNEL],a		; Updated
      24.  00:5073                      ayFX_END:	; --- End of an ayFX stream ---
      25.  00:5073  3E FF               		ld	a,255				; Lowest ayFX priority
      26.  00:5075  32 E5 C3            		ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      27.  00:5078  C9                  		ret					; Return
      28.  00:5079                      
      29.  00:5079                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      30.  00:5079                      		; --- INPUT: A -> sound to be played ---
      31.  00:5079                      		; ---        C -> sound priority     ---
      32.  00:5079  C5                  		push	bc				; Store bc in stack
      33.  00:507A  D5                  		push	de				; Store de in stack
      34.  00:507B  E5                  		push	hl				; Store hl in stack
      35.  00:507C                      		; --- Check if the index is in the bank ---
      36.  00:507C  47                  		ld	b,a				; b:=a (new ayFX stream index)
      37.  00:507D  2A E3 C3            		ld	hl,[ayFX_BANK]			; Current ayFX BANK
      38.  00:5080  7E                  		ld	a,[hl]				; Number of samples in the bank
      39.  00:5081  B7                  		or	a				; If zero (means 256 samples)...
      40.  00:5082  28 06               		jr	z,.CHECK_PRI			; ...goto @@CHECK_PRI
      41.  00:5084                      		; The bank has less than 256 samples
      42.  00:5084  78                  		ld	a,b				; a:=b (new ayFX stream index)
      43.  00:5085  BE                  		cp	[hl]				; If new index is not in the bank...
      44.  00:5086  3E 02               		ld	a,2				; a:=2 (error 2: Sample not in the bank)
      45.  00:5088  30 21               		jr	nc,.INIT_END			; ...we can't init it
      46.  00:508A                      .CHECK_PRI:	; --- Check if the new priority is lower than the current one ---
      47.  00:508A                      		; ---   Remember: 0 = highest priority, 15 = lowest priority  ---
      48.  00:508A  78                  		ld	a,b				; a:=b (new ayFX stream index)
      49.  00:508B  3A E5 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
      50.  00:508E  B9                  		cp	c				; If new ayFX stream priority is lower than current one...
      51.  00:508F  3E 01               		ld	a,1				; a:=1 (error 1: A sample with higher priority is being played)
      52.  00:5091  38 18               		jr	c,.INIT_END			; ...we don't start the new ayFX stream
      53.  00:5093                      		; --- Set new priority ---
      54.  00:5093  79                  		ld	a,c				; a:=New priority
      55.  00:5094  E6 0F               		and	$0F				; We mask the priority
      56.  00:5096  32 E5 C3            		ld	[ayFX_PRIORITY],a		; new ayFX stream priority saved in RAM
      57.  00:5099                      
      58.  00:5099                      		IF ( AYFXRELATIVE == 1 )
      59.  00:5099                    ~ 			; --- Volume adjust using PT3 volume table ---
      60.  00:5099                    ~ 			ld	c,a				; c:=New priority (fixed)
      61.  00:5099                    ~ 			ld	a,15				; a:=15
      62.  00:5099                    ~ 			sub	c				; a:=15-New priority = relative volume
      63.  00:5099                    ~ 			jr	z,@@INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      64.  00:5099                    ~ 			add	a,a				; a:=a*2
      65.  00:5099                    ~ 			add	a,a				; a:=a*4
      66.  00:5099                    ~ 			add	a,a				; a:=a*8
      67.  00:5099                    ~ 			add	a,a				; a:=a*16
      68.  00:5099                    ~ 			ld	e,a				; e:=a
      69.  00:5099                    ~ 			ld	d,0				; de:=a
      70.  00:5099                    ~ 			ld	hl,VT_				; hl:=PT3 volume table
      71.  00:5099                    ~ 			add	hl,de				; hl is a pointer to the relative volume table
      72.  00:5099                    ~ 			ld	[ayFX_VT],hl			; Save pointer
      73.  00:5099                    ~ 		ENDIF
      74.  00:5099                      
      75.  00:5099                      		; --- Calculate the pointer to the new ayFX stream ---
      76.  00:5099  ED 5B E3 C3         		ld	de,[ayFX_BANK]			; de:=Current ayFX bank
      77.  00:509D  13                  		inc	de				; de points to the increments table of the bank
      78.  00:509E  68                  		ld	l,b				; l:=b (new ayFX stream index)
      79.  00:509F  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      80.  00:50A1  29                  		add	hl,hl				; hl:=hl*2
      81.  00:50A2  19                  		add	hl,de				; hl:=hl+de (hl points to the correct increment)
      82.  00:50A3  5E                  		ld	e,[hl]				; e:=lower byte of the increment
      83.  00:50A4  23                  		inc	hl				; hl points to the higher byte of the correct increment
      84.  00:50A5  56                  		ld	d,[hl]				; de:=increment
      85.  00:50A6  19                  		add	hl,de				; hl:=hl+de (hl points to the new ayFX stream)
      86.  00:50A7  22 E6 C3            		ld	[ayFX_POINTER],hl		; Pointer saved in RAM
      87.  00:50AA  AF                  		xor	a				; a:=0 (no errors)
      88.  00:50AB  E1                  .INIT_END:	pop	hl				; Retrieve hl from stack
      89.  00:50AC  D1                  		pop	de				; Retrieve de from stack
      90.  00:50AD  C1                  		pop	bc				; Retrieve bc from stack
      91.  00:50AE  C9                  		ret					; Return
      92.  00:50AF                      
      93.  00:50AF                      		IF ( AYFXRELATIVE == 1 )
      94.  00:50AF                    ~ 	.INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      95.  00:50AF                    ~ 			ld	a,255				; Lowest ayFX priority
      96.  00:50AF                    ~ 			ld	[ayFX_PRIORITY],a		; Priority saved (not playing ayFX stream)
      97.  00:50AF                    ~ 			jr	.INIT_END			; Jumps to @@INIT_END
      98.  00:50AF                    ~ 		ENDIF
      99.  00:50AF                      
     100.  00:50AF                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
     101.  00:50AF  3A E5 C3            		ld	a,[ayFX_PRIORITY]		; a:=Current ayFX stream priority
     102.  00:50B2  B7                  		or	a				; If priority has bit 7 on...
     103.  00:50B3  F8                  		ret	m				; ...return
     104.  00:50B4                      		; --- Calculate next ayFX channel (if needed) ---
     105.  00:50B4  3A E2 C3            		ld	a,[ayFX_MODE]			; ayFX mode
     106.  00:50B7  E6 01               		and	1				; If bit0=0 (fixed channel)...
     107.  00:50B9  28 08               		jr	z,.TAKECB			; ...skip channel changing
     108.  00:50BB  21 EC C3            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     109.  00:50BE  35                  		dec	[hl]				; New ayFX playing channel
     110.  00:50BF  20 02               		jr	nz,.TAKECB			; If not zero jump to @@TAKECB
     111.  00:50C1  36 03               		ld	[hl],3				; If zero -> set channel 3
     112.  00:50C3                      .TAKECB:	; --- Extract control byte from stream ---
     113.  00:50C3  2A E6 C3            		ld	hl,[ayFX_POINTER]		; Pointer to the current ayFX stream
     114.  00:50C6  4E                  		ld	c,[hl]				; c:=Control byte
     115.  00:50C7  23                  		inc	hl				; Increment pointer
     116.  00:50C8                      		; --- Check if there's new tone on stream ---
     117.  00:50C8  CB 69               		bit	5,c				; If bit 5 c is off...
     118.  00:50CA  28 08               		jr	z,.CHECK_NN			; ...jump to @@CHECK_NN (no new tone)
     119.  00:50CC                      		; --- Extract new tone from stream ---
     120.  00:50CC  5E                  		ld	e,[hl]				; e:=lower byte of new tone
     121.  00:50CD  23                  		inc	hl				; Increment pointer
     122.  00:50CE  56                  		ld	d,[hl]				; d:=higher byte of new tone
     123.  00:50CF  23                  		inc	hl				; Increment pointer
     124.  00:50D0  ED 53 E8 C3         		ld	[ayFX_TONE],de			; ayFX tone updated
     125.  00:50D4                      .CHECK_NN:	; --- Check if there's new noise on stream ---
     126.  00:50D4  CB 71               		bit	6,c				; if bit 6 c is off...
     127.  00:50D6  28 09               		jr	z,.SETPOINTER			; ...jump to @@SETPOINTER (no new noise)
     128.  00:50D8                      		; --- Extract new noise from stream ---
     129.  00:50D8  7E                  		ld	a,[hl]				; a:=New noise
     130.  00:50D9  23                  		inc	hl				; Increment pointer
     131.  00:50DA  FE 20               		cp	$20				; If it's an illegal value of noise (used to mark end of stream)...
     132.  00:50DC  28 95               		jr	z,ayFX_END			; ...jump to ayFX_END
     133.  00:50DE  32 EA C3            		ld	[ayFX_NOISE],a			; ayFX noise updated
     134.  00:50E1                      .SETPOINTER:	; --- Update ayFX pointer ---
     135.  00:50E1  22 E6 C3            		ld	[ayFX_POINTER],hl		; Update ayFX stream pointer
     136.  00:50E4                      		; --- Extract volume ---
     137.  00:50E4  79                  		ld	a,c				; a:=Control byte
     138.  00:50E5  E6 0F               		and	$0F				; lower nibble
     139.  00:50E7                      
     140.  00:50E7                      		IF ( AYFXRELATIVE == 1 )
     141.  00:50E7                    ~ 			; --- Fix the volume using PT3 Volume Table ---
     142.  00:50E7                    ~ 			ld	hl,[ayFX_VT]			; hl:=Pointer to relative volume table
     143.  00:50E7                    ~ 			ld	e,a				; e:=a (ayFX volume)
     144.  00:50E7                    ~ 			ld	d,0				; d:=0
     145.  00:50E7                    ~ 			add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     146.  00:50E7                    ~ 			ld	a,[hl]				; a:=ayFX relative volume
     147.  00:50E7                    ~ 			or	a				; If relative volume is zero...
     148.  00:50E7                    ~ 		ENDIF
     149.  00:50E7                      
     150.  00:50E7  32 EB C3            		ld	[ayFX_VOLUME],a			; ayFX volume updated
     151.  00:50EA  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     152.  00:50EB                      		; -------------------------------------
     153.  00:50EB                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     154.  00:50EB                      		; -------------------------------------
     155.  00:50EB                      		; --- Set noise channel ---
     156.  00:50EB  CB 79               		bit	7,c				; If noise is off...
     157.  00:50ED  20 06               		jr	nz,.SETMASKS			; ...jump to @@SETMASKS
     158.  00:50EF  3A EA C3            		ld	a,[ayFX_NOISE]			; ayFX noise value
     159.  00:50F2  32 45 F1            		ld	[AYREGS+6],a			; copied in to AYREGS (noise channel)
     160.  00:50F5                      .SETMASKS:	; --- Set mixer masks ---
     161.  00:50F5  79                  		ld	a,c				; a:=Control byte
     162.  00:50F6  E6 90               		and	$90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     163.  00:50F8  FE 90               		cp	$90				; If no noise and no tone...
     164.  00:50FA  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     165.  00:50FB                      		; --- Copy ayFX values in to ARYREGS ---
     166.  00:50FB  0F                  		rrca					; Rotate a to the right (1 TIME)
     167.  00:50FC  0F                  		rrca					; Rotate a to the right (2 TIMES) (OR mask)
     168.  00:50FD  16 DB               		ld	d,$DB				; d:=Mask for psg mixer (AND mask)
     169.  00:50FF                      		; --- Dump to correct channel ---
     170.  00:50FF  21 EC C3            		ld	hl,ayFX_CHANNEL			; Next ayFX playing channel
     171.  00:5102  46                  		ld	b,[hl]				; Channel counter
     172.  00:5103                      .CHK1:		; --- Check if playing channel was 1 ---
     173.  00:5103  10 0D               		djnz	.CHK2				; Decrement and jump if channel was not 1
     174.  00:5105                      .LAY_C:	; --- Play ayFX stream on channel C ---
     175.  00:5105  CD 34 51            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     176.  00:5108  32 49 F1            		ld	[AYREGS+10],a			; Volume copied in to AYREGS (channel C volume)
     177.  00:510B  CB 51               		bit	2,c				; If tone is off...
     178.  00:510D  C0                  		ret	nz				; ...return
     179.  00:510E  22 43 F1            		ld	[AYREGS+4],hl			; copied in to AYREGS (channel C tone)
     180.  00:5111  C9                  		ret					; Return
     181.  00:5112                      .CHK2:		; --- Check if playing channel was 2 ---
     182.  00:5112  CB 0A               		rrc	d				; Rotate right AND mask
     183.  00:5114  0F                  		rrca					; Rotate right OR mask
     184.  00:5115  10 0D               		djnz	.CHK3				; Decrement and jump if channel was not 2
     185.  00:5117                      .PLAY_B:	; --- Play ayFX stream on channel B ---
     186.  00:5117  CD 34 51            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     187.  00:511A  32 48 F1            		ld	[AYREGS+9],a			; Volume copied in to AYREGS (channel B volume)
     188.  00:511D  CB 49               		bit	1,c				; If tone is off...
     189.  00:511F  C0                  		ret	nz				; ...return
     190.  00:5120  22 41 F1            		ld	[AYREGS+2],hl			; copied in to AYREGS (channel B tone)
     191.  00:5123  C9                  		ret					; Return
     192.  00:5124                      .CHK3:		; --- Check if playing channel was 3 ---
     193.  00:5124  CB 0A               		rrc	d				; Rotate right AND mask
     194.  00:5126  0F                  		rrca					; Rotate right OR mask
     195.  00:5127                      .PLAY_A:	; --- Play ayFX stream on channel A ---
     196.  00:5127  CD 34 51            		call	.SETMIXER			; Set PSG mixer value (returning a=ayFX volume and hl=ayFX tone)
     197.  00:512A  32 47 F1            		ld	[AYREGS+8],a			; Volume copied in to AYREGS (channel A volume)
     198.  00:512D  CB 41               		bit	0,c				; If tone is off...
     199.  00:512F  C0                  		ret	nz				; ...return
     200.  00:5130  22 3F F1            		ld	[AYREGS+0],hl			; copied in to AYREGS (channel A tone)
     201.  00:5133  C9                  		ret					; Return
     202.  00:5134                      .SETMIXER:	; --- Set PSG mixer value ---
     203.  00:5134  4F                  		ld	c,a				; c:=OR mask
     204.  00:5135  3A 46 F1            		ld	a,[AYREGS+7]			; a:=PSG mixer value
     205.  00:5138  A2                  		and	d				; AND mask
     206.  00:5139  B1                  		or	c				; OR mask
     207.  00:513A  32 46 F1            		ld	[AYREGS+7],a			; PSG mixer value updated
     208.  00:513D  3A EB C3            		ld	a,[ayFX_VOLUME]			; a:=ayFX volume value
     209.  00:5140  2A E8 C3            		ld	hl,[ayFX_TONE]			; ayFX tone value
     210.  00:5143  C9                  		ret					; Return
     211.  00:5144                      
     212.  00:5144                      		IF ( AYFXRELATIVE == 1 )
     213.  00:5144                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     214.  00:5144                    ~ 		;VT_:	.INCBIN	"VT.BIN"
     215.  00:5144                    ~ 			; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     216.  00:5144                    ~ 		ENDIF
      32   00:5144                      ; GFX
      33   00:5144                          include "include\metatiles.asm"
       1.  00:5144                      metatiles_data:
       2.  00:5144                          ; SX, SY, NX, NY
       3.  00:5144  00 00 20 10             db 0, 0, 32, 16   ; 0 - gate lockpad
       4.  00:5148  20 00 20 10             db 32, 0, 32, 16  ; 1 - gate closed
       5.  00:514C  40 00 20 10             db 64, 0, 32, 16  ; 2 - gate half opened
       6.  00:5150  60 00 20 10             db 96, 0, 32, 16  ; 3 - gate opened
       7.  00:5154                      
       8.  00:5154  80 00 10 10             db 128, 0, 16, 16  ; 4 - blood drop full
       9.  00:5158  90 00 10 10             db 144, 0, 16, 16  ; 5 - blood drop half
      10.  00:515C  A0 00 10 10             db 160, 0, 16, 16  ; 6 - blood drop empty
      11.  00:5160                      
      12.  00:5160  B0 00 10 10             db 176, 0, 16, 16  ; 7 - Tile
      13.  00:5164  C0 00 10 10             db 192, 0, 16, 16  ; 8 - Pressed tile
      14.  00:5168                      
      15.  00:5168  D0 00 10 10             db 208, 0, 16, 16  ; 9 - Gress
      16.  00:516C  E0 00 10 10             db 224, 0, 16, 16  ; 10 - Skull
      17.  00:5170  F0 00 10 10             db 240, 0, 16, 16  ; 11 - Tree
      18.  00:5174                      
      19.  00:5174  00 10 10 10             db 0, 16, 16, 16  ; 12 - Tomb Antich
      20.  00:5178  10 10 10 10             db 16, 16, 16, 16  ; 13 - Tomb RIP
      21.  00:517C  20 10 10 10             db 32, 16, 16, 16  ; 14 - Tomb Christ
      22.  00:5180                      
      34   00:5180                      ; entities
      35   00:5180                          include "include\entities.asm"
       1.  00:5180                      ; Entities struct
       2.  00:5180                      ; 0 - on/off
       3.  00:5180                      ; 1 - x
       4.  00:5180                      ; 2 - y
       5.  00:5180                      ; 3 - energy
       6.  00:5180                      ; 4 - ENEMY_COLLISION_OFFSET_X
       7.  00:5180                      ; 5 - ENEMY_COLLISION_OFFSET_Y
       8.  00:5180                      ; 6 - ENEMY_COLLISION_WIDTH
       9.  00:5180                      ; 7 - ENEMY_COLLISION_HEIGHT
      10.  00:5180                      ; 8 - spritenumber in spat
      11.  00:5180                      ; 9 - damage
      12.  00:5180                      
      13.  00:5180                      init_playerDAT: db 1,$7F,$69,24,12,12,15,15,0
      13.  00:5180  01 7F 69 18 0C 0C 0F 0F 00 
      14.  00:5189                      enemy1_stg1DAT: db 1,$AF,$0F,4,16,16,16,16,4
      14.  00:5189  01 AF 0F 04 10 10 10 10 04 
      15.  00:5192                      
      36   00:5192                      START
      37   00:5192                      	; CODE
      38   00:5192  21 E9 F3                ld hl,FORCLR ; Variable del Sistema
      39   00:5195  36 00               	ld [hl],0 ; Color del primer plano 15=blanco
      40   00:5197  23                  	inc hl ; FORCLR+1
      41   00:5198  36 00               	ld [hl],0 ; Color de fondo 1=negro
      42   00:519A  23                  	inc hl ; FORCLR+2
      43   00:519B  36 00               	ld [hl],0 ; Color del borde 1=negro
      44   00:519D  3E 08               	LD A,8
      45   00:519F                      	;CALL CHGMOD    	
      46   00:519F  CD 88 42                CALL SETPAGES32K
      47   00:51A2                      	;CALL opening_screen
      48   00:51A2                      	
      49   00:51A2                      	;CALL CHGET
      50   00:51A2                      	; Empieza el juego    
      51   00:51A2  CD F5 41            	call ClearVram_MSX2		
      52   00:51A5  CD 9B 42            	call SET_SCREEN5_MODE    
      53   00:51A8  CD E9 41                call Set212Lines
      54   00:51AB  3E 01                   ld	a, BTH_DATA			; page 
      55   00:51AD  32 00 70            	ld	(_bank2),a
      56   00:51B0                              
      57   00:51B0  CD D7 51                call INIT_CHARS_VARS
      58   00:51B3  CD 5A 46                call initVDPBuffers    
      59   00:51B6                      
      60   00:51B6  3E FF                   LD A, -MOV_SPEED_GHOST
      61   00:51B8  32 68 C0            	LD (CHAR_SPEED_X_GHOST), A
      62   00:51BB  21 6C 8E                LD HL, PaletteData
      63   00:51BE  CD 34 43                CALL SetPalette
      64   00:51C1                          ; init sfx
      65   00:51C1  F3                      di	
      66   00:51C2  21 B8 98            	ld		hl,SONG-99		; hl vale la direccion donde se encuentra la cancion - 99
      67   00:51C5  DD E5                   PUSH IX
      68   00:51C7  CD 79 4A                call	PT3_INIT			; Inicia el reproductor de PT3
      69   00:51CA  21 25 97            	ld hl, AFX
      70   00:51CD  CD 68 50                call ayFX_SETUP
      71   00:51D0  DD E1                   POP IX
      72   00:51D2  FB                      ei
      73   00:51D3                              
      74   00:51D3                          ; Start STG1    
      75   00:51D3  CD 66 52                CALL STAGE1
      76   00:51D6                      
      77   00:51D6                          ;call MAIN_LOOP
      78   00:51D6                          ;CALL CHGET
      79   00:51D6  C9                  	ret
      80   00:51D7                      
      81   00:51D7                      
      82   00:51D7                      INIT_CHARS_VARS:    
      83   00:51D7  DD 21 75 C0             ld ix, SPRITE_ATTRS           
      84   00:51DB                          
      85   00:51DB  DD 36 00 69             ld (ix), 69h        ; Sprite 1 - $AF abajo - Y
      86   00:51DF  DD 36 01 7F             ld (ix+1), 7Fh      ; X        
      87   00:51E3  DD 36 02 00             ld (ix+2), 00h      ; Pattern
      88   00:51E7                      
      89   00:51E7  DD 36 04 69             ld (ix+4), 69h     ; Sprite 2
      90   00:51EB  DD 36 05 7F             ld (ix+5), 7Fh
      91   00:51EF  DD 36 06 04             ld (ix+6), 04h        
      92   00:51F3                      
      93   00:51F3  DD 36 08 69             ld (ix+8), 69h     ; Sprite 3
      94   00:51F7  DD 36 09 7F             ld (ix+9), 7Fh
      95   00:51FB  DD 36 0A 08             ld (ix+10), 08h        
      96   00:51FF                      
      97   00:51FF  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0f      ; Sprite 1 - Ghost - mask0
      98   00:5203  DD 36 11 AF             ld (ix+SPR_GHOST_STG1+1), $AF
      99   00:5207  DD 36 12 1C             ld (ix+SPR_GHOST_STG1+2), SPR_GHOST_STG1_PTRN_L1
     100   00:520B                          
     101   00:520B  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0f      ; Sprite 1 - Ghost - mask0
     102   00:520F  DD 36 15 AF             ld (ix+SPR_GHOST_STG1+5), $AF
     103   00:5213  DD 36 16 20             ld (ix+SPR_GHOST_STG1+6), SPR_GHOST_STG1_PTRN_L1+4
     104   00:5217                          
     105   00:5217  AF                      XOR A
     106   00:5218  32 1D C0                LD (current_level), A
     107   00:521B  32 65 C0                LD (JIFFY_TEMP),A
     108   00:521E  32 66 C0                LD (CHAR_SPEED_X),A
     109   00:5221  32 67 C0                LD (CHAR_SPEED_Y),A
     110   00:5224  32 68 C0                LD (CHAR_SPEED_X_GHOST),A
     111   00:5227  32 6D C0                LD (CHAR_DIR_GHOST1),A      ; $00 - LEFT, $FF - RIGHT
     112   00:522A  32 70 C0                LD (CHAR_NEW_DIR_MAIN),A    
     113   00:522D  32 71 C0                LD (CHAR_MAIN_SHOOT),A      ; Indica si el personaje está disparando - $FF
     114   00:5230  32 73 C0                LD (CHAR_DISTANCE_SHOOT),A
     115   00:5233  32 74 C0                LD (CHAR_SPEED_SHOOT),A
     116   00:5236  32 6A C0                LD (CHAR_GHOST_DEAD),A
     117   00:5239  32 72 C0                LD (CHAR_MIN_STEP), A
     118   00:523C  32 FC C0                LD (SPRITE_COLOR_REPLACE2), A
     119   00:523F  32 5E C0                LD (SHOWING_GUS_DIALOG), A
     120   00:5242  32 5D C0                LD (SHOWING_JOHN_DIALOG), A
     121   00:5245  32 5C C0                LD (SHOWING_MIKE_DIALOG), A
     122   00:5248  32 5B C0                LD (SHOWING_SKULL_STG1_DIALOG), A    
     123   00:524B  32 5A C0                LD (stg1_puzzle_solved), A
     124   00:524E                         ; LD A,$FF
     125   00:524E  32 64 C0                LD (OLD_KEY_PRESSED), A
     126   00:5251  3E 01                   LD A,$01
     127   00:5253  32 6F C0                LD (CHAR_DIR_MAIN),A        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
     128   00:5256                      
     129   00:5256  21 C0 80                ld hl, SPRITE_P1_DOWN
     130   00:5259  22 F8 C0                ld (SPRITE_PTR_REPLACE), HL    
     131   00:525C  21 C0 86                ld hl, SPRITE_COLOR_P1_DOWN
     132   00:525F  22 FA C0                ld (SPRITE_COLOR_REPLACE), HL
     133   00:5262  22 FC C0                LD (SPRITE_COLOR_REPLACE2), HL
     134   00:5265                      
     135   00:5265                          
     136   00:5265  C9                      ret
     137   00:5266                      
     138   00:5266                      STAGE1:
     139   00:5266  CD 11 48                CALL DISSCR
     140   00:5269  21 00 80                LD HL, CEMENTER1
     141   00:526C  22 00 C1                LD (BITMAP), HL
     142   00:526F  06 07                   LD B, :CEMENTER1
     143   00:5271                          ;call load_screen
     144   00:5271                      
     145   00:5271  3E 01                   ld	a, BTH_DATA			; page 
     146   00:5273  32 00 70            	ld	(_bank2),a
     147   00:5276                      
     148   00:5276                          ;We load the tiles on page 1 of VDP
     149   00:5276  21 BB 56                LD HL, TILES1    
     150   00:5279  CD E5 42                call load_tiles_vdp
     151   00:527C                          
     152   00:527C                          ;We load the font on page 1 of VDP
     153   00:527C  CD EF 42                call load_font_vdp
     154   00:527F                      
     155   00:527F                          ; Draw screen using map and metatile
     156   00:527F  CD 66 49                call load_screen_v2    
     157   00:5282                          
     158   00:5282  CD C0 42                call DUMP_SPR_ALL
     159   00:5285  CD 17 43                CALL DUMP_SPR_P1
     160   00:5288                          
     161   00:5288  21 8C 87                LD HL, mapa1
     162   00:528B  11 02 C1                LD DE, MAP_RAM
     163   00:528E  01 E0 02                LD BC, 736
     164   00:5291  ED B0                   LDIR
     165   00:5293                          
     166   00:5293  21 02 C1                LD HL, MAP_RAM
     167   00:5296  22 FE C0                LD (MAPA), HL    
     168   00:5299                          
     169   00:5299                          ; set energy
     170   00:5299  21 10 40                LD HL, ANDY_MAX_ENERGY
     171   00:529C                          ;ADD HL, current_level
     172   00:529C  7E                      LD A, (HL)  ; no offset for level 1
     173   00:529D                          ;LD A, 0
     174   00:529D  32 05 C0                LD (ENTITY_PLAYER_POINTER+3), A
     175   00:52A0  CD 6B 48                CALL DRAW_ANDY_ENERGY
     176   00:52A3                      
     177   00:52A3  3A 5A C0                LD A, (stg1_puzzle_solved)
     178   00:52A6  FE 03                   CP 3
     179   00:52A8  20 1F                   JR NZ, .nobackfromstg2
     180   00:52AA                              ; Open the gate!
     181   00:52AA  3E 03                   LD A, 3
     182   00:52AC  16 70                   LD D, 112
     183   00:52AE  1E 00                   LD E, 0
     184   00:52B0  CD DA 48                CALL draw_tile
     185   00:52B3                      
     186   00:52B3                          ; Modify MAP
     187   00:52B3  21 80 87                LD HL,stg1_gate
     188   00:52B6  11 10 C1                LD DE, MAP_RAM+14
     189   00:52B9  01 04 00                LD BC, 4
     190   00:52BC  ED B0                   LDIR
     191   00:52BE                      
     192   00:52BE  21 80 87                LD HL,stg1_gate
     193   00:52C1  11 30 C1                LD DE, MAP_RAM+46
     194   00:52C4  01 04 00                LD BC, 4
     195   00:52C7  ED B0                   LDIR
     196   00:52C9                          
     197   00:52C9                      .nobackfromstg2
     198   00:52C9                              ; Copy the energy bar to back buffer
     199   00:52C9  21 2F 4A                LD HL, DiagBoxToBackBufROM
     200   00:52CC  CD DF 47            	call VDPCMD
     201   00:52CF                      ;	call VDP_Ready
     202   00:52CF  CD 0A 48                CALL ENASCR    
     203   00:52D2                          
     204   00:52D2                          ; Testing transparency
     205   00:52D2  FD 21 3C C0             LD IY, tileDatTrans
     206   00:52D6  FD 36 00 E0             LD (IY + VDP_SX), 224      ; SXL - Tile 2
     207   00:52DA  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     208   00:52DE  FD 36 04 00             LD (IY + VDP_DX), 0     ; DXL    
     209   00:52E2  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     210   00:52E6  21 3C C0                LD HL, tileDatTrans
     211   00:52E9  CD DF 47                CALL VDPCMD
     212   00:52EC                        
     213   00:52EC  3E 0D                   LD A, 13
     214   00:52EE  16 00                   LD D, 0
     215   00:52F0  1E 10                   LD E, 16
     216   00:52F2  CD E1 48                CALL draw_tile_trans
     217   00:52F5                      
     218   00:52F5                      MAIN_LOOP:
     219   00:52F5                          ;halt ; sincroniza el teclado y pantalla con el procesador (que va muy rápido)    
     220   00:52F5                          
     221   00:52F5  DD 7E 00                LD A, (ix)  ; Cargamos la Y
     222   00:52F8  FE 00                   CP $00
     223   00:52FA  CA 70 55                JP Z, STAGE2
     224   00:52FD  CD FC 42                call DUMP_SPR_ATTS    
     225   00:5300                      
     226   00:5300                      .check_tombs:
     227   00:5300                      
     228   00:5300  3A 5A C0                LD A, (stg1_puzzle_solved)
     229   00:5303  FE 03                   CP 3
     230   00:5305  CA 6E 54                JP Z, .animate_ghost
     231   00:5308                      
     232   00:5308  DD 7E 01                LD A, (ix +1)   ; Cargamos la X para mirar si hay colisión con la tumba
     233   00:530B  FE C8                   CP MIKE_TOMB_STG1_X
     234   00:530D  C2 83 53                JP NZ, .check_john_tomb    
     235   00:5310                          
     236   00:5310  3A 5A C0                LD A, (stg1_puzzle_solved)
     237   00:5313  FE 02                   CP 2
     238   00:5315  C2 5D 53                JP NZ, .puzzle_wrong_order
     239   00:5318  3C                      INC A
     240   00:5319  32 5A C0                LD (stg1_puzzle_solved), A
     241   00:531C                          ; Open the gate!
     242   00:531C  FD 21 2D C0             LD IY, tileDat
     243   00:5320  FD 36 00 60             LD (IY + VDP_SX), 96      ; SXL - Tile 2
     244   00:5324  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     245   00:5328  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     246   00:532C  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     247   00:5330  21 2D C0                LD HL, tileDat
     248   00:5333  CD DF 47                CALL VDPCMD
     249   00:5336                      
     250   00:5336  FD 21 10 41             LD IY, stg1_puzzle_solved_strings
     251   00:533A  CD 0E 49                CALL print_strings_dialog_box_v2
     252   00:533D                      
     253   00:533D                          ; Modify MAP
     254   00:533D  21 80 87                LD HL,stg1_gate
     255   00:5340  11 10 C1                LD DE, MAP_RAM+14
     256   00:5343  01 04 00                LD BC, 4
     257   00:5346  ED B0                   LDIR
     258   00:5348                      
     259   00:5348  21 80 87                LD HL,stg1_gate
     260   00:534B  11 30 C1                LD DE, MAP_RAM+46
     261   00:534E  01 04 00                LD BC, 4
     262   00:5351  ED B0                   LDIR
     263   00:5353                          ; afx
     264   00:5353  3E 02                   LD A,2
     265   00:5355  0E 00                   LD C, 0
     266   00:5357  CD 79 50                CALL ayFX_INIT
     267   00:535A                      
     268   00:535A  C3 6E 54                JP .animate_ghost
     269   00:535D                      
     270   00:535D                      .puzzle_wrong_order
     271   00:535D  3A 5C C0                LD A, (SHOWING_MIKE_DIALOG)
     272   00:5360  FE 01                   CP 1
     273   00:5362  CA 6E 54                JP Z, .animate_ghost    
     274   00:5365  FD 21 16 40             LD IY, mike_tomb_strings
     275   00:5369  CD 0E 49                CALL print_strings_dialog_box_v2
     276   00:536C  3E 01                   LD A,1
     277   00:536E  32 5C C0                LD (SHOWING_MIKE_DIALOG), A
     278   00:5371  AF                      XOR A
     279   00:5372  32 5A C0                LD (stg1_puzzle_solved), A
     280   00:5375                                  ; Close the gate!
     281   00:5375                          ;LD IY, tileDat
     282   00:5375                          ;LD (IY + VDP_SX), 0      ; SXL - Tile 2
     283   00:5375                          ;LD (IY+VDP_SY), 0      ; SYL
     284   00:5375                          ;LD (IY + VDP_DX), 112     ; DXL    
     285   00:5375                          ;LD (IY + VDP_DY), 0      ; DYL    
     286   00:5375                          ;LD HL, tileDat
     287   00:5375                          ;CALL VDPCMD
     288   00:5375                      
     289   00:5375  21 86 87                LD HL,stg1_gate_blocked
     290   00:5378  11 2F C1                LD DE, MAP_RAM+45
     291   00:537B  01 06 00                LD BC, 6
     292   00:537E  ED B0                   LDIR
     293   00:5380                      
     294   00:5380  C3 6E 54                JP .animate_ghost
     295   00:5383                      
     296   00:5383                      .check_john_tomb:
     297   00:5383  FE 29                   CP JOHN_TOMB_STG1_X
     298   00:5385  20 44                   jr nz, .check_gus_tomb
     299   00:5387  3A 5D C0                LD A, (SHOWING_JOHN_DIALOG)
     300   00:538A  FE 01                   CP 1
     301   00:538C  CA 6E 54                JP Z, .animate_ghost
     302   00:538F  FD 21 55 40             LD IY, john_tomb_strings
     303   00:5393  CD 0E 49                CALL print_strings_dialog_box_v2
     304   00:5396  3E 01                   LD A,1
     305   00:5398  32 5D C0                LD (SHOWING_JOHN_DIALOG), A
     306   00:539B  3A 5A C0                LD A, (stg1_puzzle_solved)
     307   00:539E  FE 01                   CP 1
     308   00:53A0  C2 6E 54                JP NZ, .animate_ghost
     309   00:53A3  3C                      INC A
     310   00:53A4  32 5A C0                LD (stg1_puzzle_solved), A
     311   00:53A7                          ; Half open gate
     312   00:53A7  FD 21 2D C0             LD IY, tileDat
     313   00:53AB  FD 36 00 40             LD (IY + VDP_SX), 64      ; SXL - Tile 2
     314   00:53AF  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     315   00:53B3  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     316   00:53B7  FD 36 06 00             LD (IY + VDP_DY), 0      ; DYL    
     317   00:53BB  21 2D C0                LD HL, tileDat
     318   00:53BE  CD DF 47                CALL VDPCMD
     319   00:53C1                          ; afx
     320   00:53C1  3E 00                   LD A,0
     321   00:53C3  0E 00                   LD C, 0
     322   00:53C5  CD 79 50                CALL ayFX_INIT
     323   00:53C8                      
     324   00:53C8  C3 6E 54                JP .animate_ghost
     325   00:53CB                      
     326   00:53CB                      .check_gus_tomb:
     327   00:53CB  FE 49                   CP GUS_TOMB_STG1_X
     328   00:53CD  C2 0C 54                JP nz, .check_skull_hint
     329   00:53D0  3A 5E C0                LD A, (SHOWING_GUS_DIALOG)
     330   00:53D3  FE 01                   CP 1
     331   00:53D5  CA 6E 54                JP Z, .animate_ghost
     332   00:53D8  DD 7E 00                LD A, (ix)
     333   00:53DB  FE 78                   CP GUS_TOMB_STG1_Y
     334   00:53DD  DA 6E 54                jp c, .animate_ghost
     335   00:53E0  FD 21 92 40             LD IY, gus_tomb_strings
     336   00:53E4  CD 0E 49                CALL print_strings_dialog_box_v2
     337   00:53E7  3E 01                   LD A,1
     338   00:53E9  32 5E C0                LD (SHOWING_GUS_DIALOG), A
     339   00:53EC  32 5A C0                LD (stg1_puzzle_solved), A
     340   00:53EF                          ; Remove the lockpad    
     341   00:53EF  3E 01                   LD A, 1
     342   00:53F1  16 70                   LD D, 112
     343   00:53F3  1E 00                   LD E, 0
     344   00:53F5  CD DA 48                call draw_tile
     345   00:53F8                      
     346   00:53F8  21 80 87                LD HL,stg1_gate
     347   00:53FB  11 31 C1                LD DE, MAP_RAM+47
     348   00:53FE  01 02 00                LD BC, 2
     349   00:5401  ED B0                   LDIR
     350   00:5403                      
     351   00:5403                          ; afx
     352   00:5403  3E 01                   LD A,1
     353   00:5405  0E 00                   LD C, 0
     354   00:5407  CD 79 50                CALL ayFX_INIT
     355   00:540A                      
     356   00:540A  18 62                   JR .animate_ghost
     357   00:540C                      
     358   00:540C                      .check_skull_hint:
     359   00:540C  FE 69                   CP SKULL_TOMB_STG1_X
     360   00:540E  20 20                   jr nz, .check_mike_dialog_box
     361   00:5410                              
     362   00:5410  DD 7E 00                LD A, (ix)
     363   00:5413  FE 5A                   CP SKULL_TOMB_STG1_Y1
     364   00:5415  38 19                   jr c, .check_mike_dialog_box
     365   00:5417  FE 64                   CP SKULL_TOMB_STG1_Y2
     366   00:5419  30 15                   jr nc, .check_mike_dialog_box
     367   00:541B                      
     368   00:541B  3A 5B C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     369   00:541E  FE 01                   CP 1
     370   00:5420  28 4C                   JR Z, .animate_ghost
     371   00:5422  FD 21 D3 40             LD IY, stg1_skull_strings
     372   00:5426  CD 0E 49                CALL print_strings_dialog_box_v2
     373   00:5429  3E 01                   LD A,1
     374   00:542B  32 5B C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     375   00:542E  18 3E                   JR .animate_ghost
     376   00:5430                      
     377   00:5430                      .check_mike_dialog_box
     378   00:5430  3A 5C C0                LD A, (SHOWING_MIKE_DIALOG)
     379   00:5433  FE 01                   CP 1
     380   00:5435  20 09                   JR nz, .check_gus_dialog
     381   00:5437  CD 96 47                CALL CLEAR_DIALOG_BOX
     382   00:543A  AF                      XOR A
     383   00:543B  32 5C C0                LD (SHOWING_MIKE_DIALOG), A
     384   00:543E  18 2E                   JR .animate_ghost
     385   00:5440                      
     386   00:5440                      .check_gus_dialog
     387   00:5440  3A 5E C0                LD A, (SHOWING_GUS_DIALOG)
     388   00:5443  FE 01                   CP 1
     389   00:5445  20 09                   JR nz, .check_john_dialog
     390   00:5447  CD 96 47                CALL CLEAR_DIALOG_BOX
     391   00:544A  AF                      XOR A
     392   00:544B  32 5E C0                LD (SHOWING_GUS_DIALOG), A
     393   00:544E  18 1E                   JR .animate_ghost
     394   00:5450                      
     395   00:5450                      .check_john_dialog
     396   00:5450  3A 5D C0                LD A, (SHOWING_JOHN_DIALOG)
     397   00:5453  FE 01                   CP 1
     398   00:5455  20 09                   JR nz, .check_skull_dialog
     399   00:5457  CD 96 47                CALL CLEAR_DIALOG_BOX
     400   00:545A  AF                      XOR A
     401   00:545B  32 5D C0                LD (SHOWING_JOHN_DIALOG), A
     402   00:545E  18 0E                   JR .animate_ghost
     403   00:5460                      
     404   00:5460                      .check_skull_dialog
     405   00:5460  3A 5B C0                LD A, (SHOWING_SKULL_STG1_DIALOG)
     406   00:5463  FE 01                   CP 1
     407   00:5465  20 07                   JR nz, .animate_ghost
     408   00:5467  CD 96 47                CALL CLEAR_DIALOG_BOX
     409   00:546A  AF                      XOR A
     410   00:546B  32 5B C0                LD (SHOWING_SKULL_STG1_DIALOG), A
     411   00:546E                      
     412   00:546E                      .animate_ghost    
     413   00:546E  3A 6A C0                LD A,(CHAR_GHOST_DEAD)
     414   00:5471  FE 01                   CP $01
     415   00:5473  CA E7 54                JP Z,.continue
     416   00:5476  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)          ;cargamos la X del Fantasma
     417   00:5479  2A 68 C0            	LD HL, (CHAR_SPEED_X_GHOST)
     418   00:547C  85                  	ADD L					; Actualizamos la posicion en base a la velocidad
     419   00:547D                          
     420   00:547D  DD 77 11            	LD (ix+SPR_GHOST_STG1+1), A
     421   00:5480  DD 77 15                LD (ix+SPR_GHOST_STG1+5), A
     422   00:5483  FE 50                   CP $50
     423   00:5485  CA 90 54                JP Z,.CHANGE_DIR_RIGHT
     424   00:5488  FE AF                   CP $AF
     425   00:548A  CA 9D 54                JP Z,.CHANGE_DIR_LEFT
     426   00:548D                          		
     427   00:548D  C3 A6 54                JP .check_pattern
     428   00:5490                      
     429   00:5490                      .CHANGE_DIR_RIGHT:
     430   00:5490  3E 01                   LD A, MOV_SPEED_GHOST
     431   00:5492  32 68 C0            	LD (CHAR_SPEED_X_GHOST), A
     432   00:5495  3E FF                   LD A,$FF
     433   00:5497  32 6D C0                LD (CHAR_DIR_GHOST1),A
     434   00:549A  C3 A6 54                JP .check_pattern
     435   00:549D                      
     436   00:549D                      .CHANGE_DIR_LEFT:
     437   00:549D  3E FF                   LD A, -MOV_SPEED_GHOST
     438   00:549F  32 68 C0            	LD (CHAR_SPEED_X_GHOST), A
     439   00:54A2  AF                      XOR A   ; Pone A a 0
     440   00:54A3  32 6D C0                LD (CHAR_DIR_GHOST1),A
     441   00:54A6                      
     442   00:54A6                      .check_pattern:
     443   00:54A6  3A 6D C0                LD A,(CHAR_DIR_GHOST1)
     444   00:54A9  FE FF                   CP $FF
     445   00:54AB  CA CC 54                JP Z,.check_pattern_RIGHT
     446   00:54AE  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     447   00:54B1  FE 1C                   CP SPR_GHOST_STG1_PTRN_L1
     448   00:54B3  CA C1 54                jp z,.change_pattern_L
     449   00:54B6  DD 36 12 1C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L1
     450   00:54BA  DD 36 16 20             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L1+4
     451   00:54BE  C3 E7 54                jp .continue
     452   00:54C1                      .change_pattern_L:
     453   00:54C1  DD 36 12 24             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_L2
     454   00:54C5  DD 36 16 28             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_L2+4
     455   00:54C9  C3 E7 54                jp .continue
     456   00:54CC                      
     457   00:54CC                      .check_pattern_RIGHT
     458   00:54CC  DD 7E 12                LD A, (ix+SPR_GHOST_STG1+2)       ; Cargamos el patrón y lo cambiamos
     459   00:54CF  FE 2C                   CP SPR_GHOST_STG1_PTRN_R1
     460   00:54D1  CA DF 54                jp z,.change_pattern_R
     461   00:54D4  DD 36 12 2C             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R1
     462   00:54D8  DD 36 16 30             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R1+4
     463   00:54DC  C3 E7 54                jp .continue
     464   00:54DF                      .change_pattern_R:
     465   00:54DF  DD 36 12 34             LD (ix+SPR_GHOST_STG1+2),SPR_GHOST_STG1_PTRN_R2
     466   00:54E3  DD 36 16 38             LD (ix+SPR_GHOST_STG1+6),SPR_GHOST_STG1_PTRN_R2+4
     467   00:54E7                      
     468   00:54E7                      .continue:    
     469   00:54E7  DD 7E 11                LD A, (ix+SPR_GHOST_STG1+1)     ; Cargamos la X
     470   00:54EA  32 0C C0                LD (ENTITY_ENEMY1_POINTER+1), A
     471   00:54ED  DD 7E 10                LD A, (ix+SPR_GHOST_STG1)           ; Cargamos la Y
     472   00:54F0  32 0D C0                LD (ENTITY_ENEMY1_POINTER+2), A
     473   00:54F3                          
     474   00:54F3  FD 21 0B C0             LD IY, ENTITY_ENEMY1_POINTER
     475   00:54F7  CD 6D 41                CALL EnemyCollisionCheck
     476   00:54FA  30 16                   JR NC, .move_shoot
     477   00:54FC                          ; Collision
     478   00:54FC  3A 05 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     479   00:54FF  D6 04                   SUB 4    
     480   00:5501  32 05 C0                LD (ENTITY_PLAYER_POINTER+ENTITY_ENERGY), A
     481   00:5504  CD 6B 48                call DRAW_ANDY_ENERGY
     482   00:5507  CD 4B 46                call BOUNCE_ANDY
     483   00:550A  3A 05 C0                LD A, (ENTITY_PLAYER_POINTER+ENTITY_ENERGY)
     484   00:550D  FE 00                   CP 0
     485   00:550F  CA A8 56                JP Z, game_over
     486   00:5512                      
     487   00:5512                      .move_shoot:
     488   00:5512  CD 70 45                CALL MOVE_SHOOT
     489   00:5515                      .CHECK_GHOST:
     490   00:5515                          ; Comprobamos si hay colision con el fantasma
     491   00:5515  3A 6A C0                LD A,(CHAR_GHOST_DEAD)  ; si está muerto,no lo miramos
     492   00:5518  FE 01                   CP $01
     493   00:551A  CA 3E 55                JP Z,.check_KB
     494   00:551D                      
     495   00:551D  DD 46 0C                LD B,(ix+SPR_SHOOT_P1)         ; Y del disparo
     496   00:5520  DD 4E 0D                LD C,(ix+SPR_SHOOT_P1+1)         ; X del disparo
     497   00:5523  DD 56 10                LD D,(ix+SPR_GHOST_STG1)         ; Y del fantasma 
     498   00:5526  DD 5E 11                LD E,(ix+SPR_GHOST_STG1+1)         ; X del fantasma
     499   00:5529  CD 9C 41                call check_spr_collision
     500   00:552C  FE 01                   CP 1
     501   00:552E  C2 3E 55                JP NZ,.check_KB
     502   00:5531                      
     503   00:5531                      .KILL_GHOST:
     504   00:5531  3E 01                   LD A,1
     505   00:5533  32 6A C0                LD (CHAR_GHOST_DEAD),A
     506   00:5536  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217    
     507   00:553A  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217    
     508   00:553E                      
     509   00:553E                      .check_KB:
     510   00:553E  76                      halt    
     511   00:553F                      	
     512   00:553F  F3                  	di       
     513   00:5540  DD E5                   PUSH IX
     514   00:5542  CD BE 4F            	call	PT3_ROUT			;envia datos a al PSG 	   
     515   00:5545  CD C6 4E            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     516   00:5548  CD AF 50            	call ayFX_PLAY
     517   00:554B  DD E1                   POP IX
     518   00:554D  FB                      ei
     519   00:554E                      
     520   00:554E  3E 08                   ld a, 8
     521   00:5550  CD 41 01            	call SNSMAT   
     522   00:5553                          
     523   00:5553  4F                      LD C,A    
     524   00:5554                          
     525   00:5554  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     526   00:5556  CC B8 43                call z, move_right
     527   00:5559                          
     528   00:5559  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     529   00:555B  CC 17 44                call z, move_left
     530   00:555E                      
     531   00:555E  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     532   00:5560  CC 43 43                call z, move_up
     533   00:5563                      
     534   00:5563  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     535   00:5565  CC 7D 43                call z, move_down
     536   00:5568                      
     537   00:5568                      no_arrows:
     538   00:5568  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     539   00:556A  CC DB 45                call z,SHOOT_MAIN_CHAR
     540   00:556D                      
     541   00:556D                          ;BIT KB_DEL, C			; La tecla presionada es DEL    
     542   00:556D                          ;ret z
     543   00:556D                          
     544   00:556D  C3 F5 52                jp MAIN_LOOP
     545   00:5570                      
     546   00:5570                      
     547   00:5570                      STAGE2:
     548   00:5570  CD 11 48                CALL DISSCR
     549   00:5573  76                      halt
     550   00:5574  F3                  	di       
     551   00:5575  DD E5                   PUSH IX
     552   00:5577  CD BE 4F            	call	PT3_ROUT			;envia datos a al PSG 	   
     553   00:557A  CD C6 4E            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     554   00:557D  DD E1               	POP IX
     555   00:557F  FB                      ei
     556   00:5580  21 00 80                LD HL, CEMENTER2
     557   00:5583  22 00 C1                LD (BITMAP), HL
     558   00:5586  06 0D                   LD B, :CEMENTER2
     559   00:5588                      
     560   00:5588  CD 33 42                call load_screen
     561   00:558B  21 6C 8A                LD HL, mapa2
     562   00:558E  22 FE C0                LD (MAPA), HL
     563   00:5591                      
     564   00:5591  3E 01                   ld	a, BTH_DATA			; page 
     565   00:5593  32 00 70            	ld	(_bank2),a
     566   00:5596                       
     567   00:5596                          ; Ponemos el P1 por encima del marco
     568   00:5596  DD 36 00 AF             LD (ix), 175      ; mask 0
     569   00:559A  DD 36 04 AF             LD (ix+4), 175    ; mask 1
     570   00:559E  DD 36 08 AF             LD (ix+8), 175    ; mask 2
     571   00:55A2                          
     572   00:55A2  DD 36 10 D9             LD (ix+SPR_GHOST_STG1),217  ; ocultamos el fantasma
     573   00:55A6  DD 36 14 D9             LD (ix+SPR_GHOST_STG1+4),217  ; ocultamos el fantasma
     574   00:55AA                          
     575   00:55AA  CD C0 42                CALL DUMP_SPR_ALL
     576   00:55AD  CD 17 43                CALL DUMP_SPR_P1        
     577   00:55B0                          
     578   00:55B0                          ;LD HL, ANDY_MAX_ENERGY
     579   00:55B0                          ;LD A, (HL)  
     580   00:55B0                          ;INC A           ; level 1
     581   00:55B0                          ;LD (ENTITY_PLAYER_POINTER+3), A
     582   00:55B0                      
     583   00:55B0                          ;XOR a
     584   00:55B0                          ;LD (current_level), A
     585   00:55B0  CD 6B 48                CALL DRAW_ANDY_ENERGY
     586   00:55B3                          
     587   00:55B3  CD 0A 48                CALL ENASCR
     588   00:55B6                          
     589   00:55B6                      MAIN_LOOP2:
     590   00:55B6                          ;halt    
     591   00:55B6  76                      halt
     592   00:55B7  F3                  	di       
     593   00:55B8  DD E5                   PUSH IX
     594   00:55BA  CD BE 4F            	call	PT3_ROUT			;envia datos a al PSG 	   
     595   00:55BD  CD C6 4E            	call	PT3_PLAY			;prepara el siguiente trocito de cancion que sera enviada mas tarde al PSG
     596   00:55C0  CD AF 50            	call ayFX_PLAY
     597   00:55C3  DD E1                   POP IX
     598   00:55C5  FB                      ei
     599   00:55C6  DD 7E 00                LD A, (ix)    
     600   00:55C9  FE B0                   CP 176      ; Miramos si la Y es 160 para pasar a stg1
     601   00:55CB  C2 ED 55                JP NZ, .no_screen_change
     602   00:55CE                          ; Ponemos el P1 al principio de la pantalla 1
     603   00:55CE  DD 36 00 01             LD (ix), 1          ; P1.Y = 1
     604   00:55D2  DD 36 04 01             LD (ix+4), 1
     605   00:55D6  DD 36 08 01             LD (ix+8), 1
     606   00:55DA                      
     607   00:55DA  3A 6A C0                LD A, (CHAR_GHOST_DEAD)
     608   00:55DD  FE 01                   CP $01
     609   00:55DF  CA EA 55                JP Z, .GHOST_DEAD
     610   00:55E2  DD 36 10 0F             ld (ix+SPR_GHOST_STG1), $0F      ; Sprite 1 - Ghost
     611   00:55E6  DD 36 14 0F             ld (ix+SPR_GHOST_STG1+4), $0F      ; Sprite 1 - Ghost
     612   00:55EA                      .GHOST_DEAD:    
     613   00:55EA  CD 66 52                CALL STAGE1
     614   00:55ED                      
     615   00:55ED                      .no_screen_change:
     616   00:55ED                          
     617   00:55ED                          ; check X,Y to play Black Sabbath
     618   00:55ED                          ; Ya tenemos en A la Y
     619   00:55ED  FE 6E                   CP STG2_TILE1_Y
     620   00:55EF  C2 4B 56                JP NZ, .check_tile3
     621   00:55F2  DD 7E 01                LD A, (ix+1)
     622   00:55F5  FE 71                   CP STG2_TILE1_X
     623   00:55F7  C2 21 56                JP NZ, .check_next_tile
     624   00:55FA  3E 03                   LD A, 3
     625   00:55FC  0E 00                   LD C, 0
     626   00:55FE  CD 79 50                CALL ayFX_INIT    
     627   00:5601                      
     628   00:5601  FD 21 2D C0             LD IY, tileDat
     629   00:5605  FD 36 00 C0             LD (IY + VDP_SX), 192      ; SXL - Tile 2
     630   00:5609  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     631   00:560D  FD 36 08 10             LD (IY+VDP_NX), 16      ; NX    
     632   00:5611  FD 36 04 70             LD (IY + VDP_DX), 112     ; DXL    
     633   00:5615  FD 36 06 70             LD (IY + VDP_DY), 112      ; DYL    
     634   00:5619  21 2D C0                LD HL, tileDat
     635   00:561C  CD DF 47                CALL VDPCMD
     636   00:561F  18 5C                   jr .continue
     637   00:5621                      
     638   00:5621                      .check_next_tile:
     639   00:5621  FE 80                   CP STG2_TILE2_X
     640   00:5623  C2 4B 56                JP NZ, .check_tile3
     641   00:5626  3E 04                   LD A, 4
     642   00:5628  0E 00                   LD C, 0
     643   00:562A  CD 79 50                CALL ayFX_INIT    
     644   00:562D                      
     645   00:562D  FD 21 2D C0             LD IY, tileDat
     646   00:5631  FD 36 00 C0             LD (IY + VDP_SX), 192      ; SXL - Tile 2
     647   00:5635  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     648   00:5639  FD 36 08 10             LD (IY+VDP_NX), 16      ; NX    
     649   00:563D  FD 36 04 80             LD (IY + VDP_DX), 128     ; DXL    
     650   00:5641  FD 36 06 70             LD (IY + VDP_DY), 112      ; DYL    
     651   00:5645  21 2D C0                LD HL, tileDat
     652   00:5648  CD DF 47                CALL VDPCMD
     653   00:564B                      
     654   00:564B                      .check_tile3:
     655   00:564B  FE 8E                   CP STG2_TILE3_Y
     656   00:564D  C2 7D 56                JP NZ, .continue
     657   00:5650  DD 7E 01                LD A, (ix+1)
     658   00:5653  FE 80                   CP STG2_TILE3_X
     659   00:5655  C2 7D 56                JP NZ, .continue
     660   00:5658  3E 05                   LD A, 5
     661   00:565A  0E 00                   LD C, 0
     662   00:565C  CD 79 50                CALL ayFX_INIT    
     663   00:565F                      
     664   00:565F  FD 21 2D C0             LD IY, tileDat
     665   00:5663  FD 36 00 C0             LD (IY + VDP_SX), 192      ; SXL - Tile 2
     666   00:5667  FD 36 02 00             LD (IY+VDP_SY), 0      ; SYL
     667   00:566B  FD 36 08 10             LD (IY+VDP_NX), 16      ; NX    
     668   00:566F  FD 36 04 80             LD (IY + VDP_DX), 128     ; DXL    
     669   00:5673  FD 36 06 90             LD (IY + VDP_DY), 144      ; DYL    
     670   00:5677  21 2D C0                LD HL, tileDat
     671   00:567A  CD DF 47                CALL VDPCMD
     672   00:567D                      
     673   00:567D                      .continue:
     674   00:567D  CD FC 42                call DUMP_SPR_ATTS      
     675   00:5680  CD 70 45                CALL MOVE_SHOOT    
     676   00:5683                      
     677   00:5683  3E 08                   ld a, 8
     678   00:5685  CD 41 01            	call SNSMAT   
     679   00:5688  4F                      LD C,A    
     680   00:5689                              
     681   00:5689  CB 79                   BIT KB_RIGHT, C			; La tecla presionada es RIGHT?
     682   00:568B  CC B8 43                call z, move_right
     683   00:568E                          
     684   00:568E  CB 61                   BIT KB_LEFT, C			; La tecla presionada es LEFT?
     685   00:5690  CC 17 44                call z, move_left
     686   00:5693                      
     687   00:5693  CB 69                   BIT KB_UP, C			; La tecla presionada es UP?
     688   00:5695  CC 43 43                call z, move_up
     689   00:5698                      
     690   00:5698  CB 71                   BIT KB_DOWN, C			; La tecla presionada es DOWN?
     691   00:569A  CC 7D 43                call z, move_down
     692   00:569D                      
     693   00:569D  CB 41                   BIT KB_SPACE, C			; La tecla presionada es SPACE
     694   00:569F  CC DB 45                call z,SHOOT_MAIN_CHAR
     695   00:56A2                      
     696   00:56A2  CB 59                   BIT KB_DEL, C			; La tecla presionada es DEL    
     697   00:56A4  C8                      ret z
     698   00:56A5                      
     699   00:56A5                      
     700   00:56A5                      
     701   00:56A5  C3 B6 55                jp MAIN_LOOP2
     702   00:56A8                      
     703   00:56A8                      game_over:
     704   00:56A8  FD 21 49 41             LD IY, game_over_strings
     705   00:56AC  CD 0E 49                call print_strings_dialog_box_v2
     706   00:56AF  CD 9F 00                call CHGET
     707   00:56B2  CD 9F 00                call CHGET
     708   00:56B5  CD 9F 00                call CHGET
     709   00:56B8  C3 92 51                JP START
     710   00:56BB                      
     711   00:56BB                      TILES1:
     712   00:56BB  (1011)               INCBIN "gfx\tiles1.sc5",#7
     713   00:66CC                      
     714   00:66CC  (01)                 PAGE 1
     715   01:8000                      ; CODE O NO
     716   01:8000                          include "include\BTH_data.asm"
       1.  01:8000                      SPRITE_P1_UP:
       2.  01:8000                          ; UP 1        
       3.  01:8000                          ; mask 0
       4.  01:8000                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
       4.  01:8000  07 0F 05 1F 1F 3F 3F 7F 
       5.  01:8008                          DB $00,$4F,$70,$38,$0C,$0E,$07,$04
       5.  01:8008  00 4F 70 38 0C 0E 07 04 
       6.  01:8010                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
       6.  01:8010  E0 F0 A0 F8 F8 F8 FC FE 
       7.  01:8018                          DB $06,$F2,$1E,$3C,$30,$70,$C0,$00
       7.  01:8018  06 F2 1E 3C 30 70 C0 00 
       8.  01:8020                          ; mask 1
       9.  01:8020                          DB $00,$00,$18,$00,$1F,$00,$00,$00
       9.  01:8020  00 00 18 00 1F 00 00 00 
      10.  01:8028                          DB $7F,$50,$4F,$3F,$0F,$0F,$07,$02
      10.  01:8028  7F 50 4F 3F 0F 0F 07 02 
      11.  01:8030                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      11.  01:8030  00 00 10 00 FC 00 00 00 
      12.  01:8038                          DB $F2,$0E,$FE,$FC,$F0,$F0,$A0,$00
      12.  01:8038  F2 0E FE FC F0 F0 A0 00 
      13.  01:8040                          ; mask 2
      14.  01:8040                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      14.  01:8040  00 00 1A 00 00 00 00 00 
      15.  01:8048                          DB $7F,$60,$00,$00,$00,$00,$07,$00
      15.  01:8048  7F 60 00 00 00 00 07 00 
      16.  01:8050                          DB $00,$00,$50,$00,$00,$00,$00,$00
      16.  01:8050  00 00 50 00 00 00 00 00 
      17.  01:8058                          DB $FA,$0E,$00,$00,$00,$00,$80,$00
      17.  01:8058  FA 0E 00 00 00 00 80 00 
      18.  01:8060                          
      19.  01:8060                          ; UP 2
      20.  01:8060                          ; mask 0
      21.  01:8060                          DB $07,$0F,$05,$1F,$1F,$3F,$3F,$7F
      21.  01:8060  07 0F 05 1F 1F 3F 3F 7F 
      22.  01:8068                          DB $10,$4F,$70,$38,$0C,$0E,$05,$00
      22.  01:8068  10 4F 70 38 0C 0E 05 00 
      23.  01:8070                          DB $E0,$F0,$A0,$F8,$F8,$F8,$FC,$FE
      23.  01:8070  E0 F0 A0 F8 F8 F8 FC FE 
      24.  01:8078                          DB $02,$F2,$1E,$3C,$30,$70,$E0,$40
      24.  01:8078  02 F2 1E 3C 30 70 E0 40 
      25.  01:8080                          ; mask 1
      26.  01:8080                          DB $00,$00,$18,$00,$1F,$00,$00,$00
      26.  01:8080  00 00 18 00 1F 00 00 00 
      27.  01:8088                          DB $4F,$70,$7F,$3F,$0F,$0F,$03,$00
      27.  01:8088  4F 70 7F 3F 0F 0F 03 00 
      28.  01:8090                          DB $00,$00,$10,$00,$FC,$00,$00,$00
      28.  01:8090  00 00 10 00 FC 00 00 00 
      29.  01:8098                          DB $FE,$06,$F2,$FC,$F0,$F0,$E0,$20
      29.  01:8098  FE 06 F2 FC F0 F0 E0 20 
      30.  01:80A0                          ; mask 2
      31.  01:80A0                          DB $00,$00,$1A,$00,$00,$00,$00,$00
      31.  01:80A0  00 00 1A 00 00 00 00 00 
      32.  01:80A8                          DB $6F,$70,$00,$00,$00,$00,$01,$00
      32.  01:80A8  6F 70 00 00 00 00 01 00 
      33.  01:80B0                          DB $00,$00,$50,$00,$00,$00,$00,$00
      33.  01:80B0  00 00 50 00 00 00 00 00 
      34.  01:80B8                          DB $FE,$0A,$00,$00,$00,$00,$E0,$00
      34.  01:80B8  FE 0A 00 00 00 00 E0 00 
      35.  01:80C0                          
      36.  01:80C0                      SPRITE_P1_DOWN:
      37.  01:80C0                          ; DOWN 1 - 00h
      38.  01:80C0                          ; mask 0
      39.  01:80C0                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      39.  01:80C0  07 0F 04 06 0F 07 1F 3F 
      40.  01:80C8                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
      40.  01:80C8  4C 4E 4E 3C 0C 0E 0F 08 
      41.  01:80D0                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      41.  01:80D0  E0 F0 20 20 70 E0 F8 FC 
      42.  01:80D8                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
      42.  01:80D8  32 72 7E 7C 70 F0 C0 00 
      43.  01:80E0                          ; mask 1
      44.  01:80E0                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      44.  01:80E0  00 00 19 19 10 3A 3A 78 
      45.  01:80E8                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
      45.  01:80E8  5F 5E 7E 3C 0C 0E 0F 04 
      46.  01:80F0                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      46.  01:80F0  00 00 90 D8 88 58 5C 1E 
      47.  01:80F8                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
      47.  01:80F8  F6 FE FE 3C 30 70 A0 00 
      48.  01:8100                          ; mask 2
      49.  01:8100                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      49.  01:8100  00 00 1B 00 10 00 00 00 
      50.  01:8108                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
      50.  01:8108  6F 6F 7F 3F 0F 0F 0F 00 
      51.  01:8110                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      51.  01:8110  00 00 D0 00 8C 00 00 00 
      52.  01:8118                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
      52.  01:8118  FA 7E 7E BC B0 70 80 00 
      53.  01:8120                          
      54.  01:8120                          ; DOWN 2
      55.  01:8120                          ; mask 0 - 0Ch    
      56.  01:8120                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
      56.  01:8120  07 0F 04 06 0F 07 1F 3F 
      57.  01:8128                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
      57.  01:8128  4C 4E 7E 3C 0C 0E 05 00 
      58.  01:8130                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
      58.  01:8130  E0 F0 20 20 70 E0 F8 FC 
      59.  01:8138                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
      59.  01:8138  32 72 72 7C 70 F0 E0 40 
      60.  01:8140                          ; mask 1
      61.  01:8140                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
      61.  01:8140  00 00 19 19 10 3A 3A 78 
      62.  01:8148                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
      62.  01:8148  5F 7E 7E 3C 0C 0E 03 00 
      63.  01:8150                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
      63.  01:8150  00 00 90 D8 88 58 5C 1E 
      64.  01:8158                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
      64.  01:8158  F6 F6 FE 3C 30 70 E0 20 
      65.  01:8160                          ; mask 2
      66.  01:8160                          DB $00,$00,$1B,$00,$10,$00,$00,$00
      66.  01:8160  00 00 1B 00 10 00 00 00 
      67.  01:8168                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
      67.  01:8168  6F 7F 7F 3F 0F 0F 01 00 
      68.  01:8170                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
      68.  01:8170  00 00 D0 00 8C 00 00 00 
      69.  01:8178                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
      69.  01:8178  FA 7A 7E BC B0 70 E0 00 
      70.  01:8180                      
      71.  01:8180                      SPRITE_P1_LEFT:         
      72.  01:8180                          ; --- Slot 3
      73.  01:8180                          ; mask 0
      74.  01:8180                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      74.  01:8180  07 0F 02 05 07 07 0F 0F 
      75.  01:8188                          DB $07,$03,$03,$03,$01,$03,$03,$04
      75.  01:8188  07 03 03 03 01 03 03 04 
      76.  01:8190                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      76.  01:8190  E0 F0 80 00 A0 E0 C0 C0 
      77.  01:8198                          DB $E0,$B0,$70,$F0,$F0,$F0,$C0,$00    
      77.  01:8198  E0 B0 70 F0 F0 F0 C0 00 
      78.  01:81A0                          ; mask 1
      79.  01:81A0                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      79.  01:81A0  00 00 18 1A 08 0A 12 10 
      80.  01:81A8                          DB $08,$03,$02,$02,$01,$03,$03,$03
      80.  01:81A8  08 03 02 02 01 03 03 03 
      81.  01:81B0                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      81.  01:81B0  00 00 78 F8 5C 1C 7E 7E 
      82.  01:81B8                          DB $FE,$3E,$7E,$7C,$F8,$F8,$B0,$00
      82.  01:81B8  FE 3E 7E 7C F8 F8 B0 00 
      83.  01:81C0                          ; mask 2
      84.  01:81C0                          DB $00,$00,$1D,$00,$28,$00,$00,$00
      84.  01:81C0  00 00 1D 00 28 00 00 00 
      85.  01:81C8                          DB $00,$07,$06,$06,$07,$07,$03,$00
      85.  01:81C8  00 07 06 06 07 07 03 00 
      86.  01:81D0                          DB $00,$00,$78,$00,$5C,$00,$00,$00
      86.  01:81D0  00 00 78 00 5C 00 00 00 
      87.  01:81D8                          DB $00,$7E,$FE,$7C,$F8,$F8,$80,$00
      87.  01:81D8  00 7E FE 7C F8 F8 80 00 
      88.  01:81E0                          ; --- Slot 4
      89.  01:81E0                          ; mask 0
      90.  01:81E0                          DB $07,$0F,$02,$05,$07,$07,$0F,$0F
      90.  01:81E0  07 0F 02 05 07 07 0F 0F 
      91.  01:81E8                          DB $07,$03,$03,$03,$01,$03,$04,$00
      91.  01:81E8  07 03 03 03 01 03 04 00 
      92.  01:81F0                          DB $E0,$F0,$80,$00,$A0,$E0,$C0,$C0
      92.  01:81F0  E0 F0 80 00 A0 E0 C0 C0 
      93.  01:81F8                          DB $E0,$B0,$D0,$D0,$F0,$F0,$E0,$40
      93.  01:81F8  E0 B0 D0 D0 F0 F0 E0 40 
      94.  01:8200                          ; mask 1
      95.  01:8200                          DB $00,$00,$18,$1A,$08,$0A,$12,$10
      95.  01:8200  00 00 18 1A 08 0A 12 10 
      96.  01:8208                          DB $08,$03,$03,$03,$01,$03,$03,$00
      96.  01:8208  08 03 03 03 01 03 03 00 
      97.  01:8210                          DB $00,$00,$78,$F8,$5C,$1C,$7E,$7E
      97.  01:8210  00 00 78 F8 5C 1C 7E 7E 
      98.  01:8218                          DB $FE,$3E,$9E,$9C,$98,$F8,$E0,$30
      98.  01:8218  FE 3E 9E 9C 98 F8 E0 30 
      99.  01:8220                          ; mask 2
     100.  01:8220                          DB $00,$00,$1D,$00,$28,$00,$00,$00
     100.  01:8220  00 00 1D 00 28 00 00 00 
     101.  01:8228                          DB $00,$07,$07,$07,$07,$07,$00,$00
     101.  01:8228  00 07 07 07 07 07 00 00 
     102.  01:8230                          DB $00,$00,$78,$00,$5C,$00,$00,$00
     102.  01:8230  00 00 78 00 5C 00 00 00 
     103.  01:8238                          DB $00,$7E,$BE,$BC,$98,$F8,$E0,$00
     103.  01:8238  00 7E BE BC 98 F8 E0 00 
     104.  01:8240                      
     105.  01:8240                      SPRITE_P1_RIGHT:
     106.  01:8240                          ; --- Slot 0
     107.  01:8240                          ; mask 0
     108.  01:8240                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     108.  01:8240  07 0F 01 00 05 07 03 03 
     109.  01:8248                          DB $07,$0D,$0E,$0F,$0F,$0F,$03,$00
     109.  01:8248  07 0D 0E 0F 0F 0F 03 00 
     110.  01:8250                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     110.  01:8250  E0 F0 40 A0 E0 E0 F0 F0 
     111.  01:8258                          DB $E0,$C0,$C0,$C0,$80,$C0,$C0,$20
     111.  01:8258  E0 C0 C0 C0 80 C0 C0 20 
     112.  01:8260                          ; mask 1
     113.  01:8260                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     113.  01:8260  00 00 1E 1F 3A 38 7E 7E 
     114.  01:8268                          DB $7F,$7C,$7E,$3E,$1F,$1F,$0D,$00
     114.  01:8268  7F 7C 7E 3E 1F 1F 0D 00 
     115.  01:8270                          DB $00,$00,$18,$58,$10,$50,$48,$08
     115.  01:8270  00 00 18 58 10 50 48 08 
     116.  01:8278                          DB $10,$C0,$40,$40,$80,$C0,$C0,$C0
     116.  01:8278  10 C0 40 40 80 C0 C0 C0 
     117.  01:8280                          ; mask 2
     118.  01:8280                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     118.  01:8280  00 00 1E 00 3A 00 00 00 
     119.  01:8288                          DB $00,$7E,$7F,$3E,$1F,$1F,$01,$00
     119.  01:8288  00 7E 7F 3E 1F 1F 01 00 
     120.  01:8290                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     120.  01:8290  00 00 B8 00 14 00 00 00 
     121.  01:8298                          DB $00,$E0,$60,$60,$E0,$E0,$C0,$00
     121.  01:8298  00 E0 60 60 E0 E0 C0 00 
     122.  01:82A0                          
     123.  01:82A0                          ; --- Slot 2
     124.  01:82A0                         ; mask 0
     125.  01:82A0                          DB $07,$0F,$01,$00,$05,$07,$03,$03
     125.  01:82A0  07 0F 01 00 05 07 03 03 
     126.  01:82A8                          DB $07,$0D,$0B,$0B,$0F,$0F,$07,$02
     126.  01:82A8  07 0D 0B 0B 0F 0F 07 02 
     127.  01:82B0                          DB $E0,$F0,$40,$A0,$E0,$E0,$F0,$F0
     127.  01:82B0  E0 F0 40 A0 E0 E0 F0 F0 
     128.  01:82B8                          DB $E0,$C0,$C0,$C0,$80,$C0,$20,$00
     128.  01:82B8  E0 C0 C0 C0 80 C0 20 00 
     129.  01:82C0                          ; mask 1
     130.  01:82C0                          DB $00,$00,$1E,$1F,$3A,$38,$7E,$7E
     130.  01:82C0  00 00 1E 1F 3A 38 7E 7E 
     131.  01:82C8                          DB $7F,$7C,$79,$39,$19,$1F,$07,$0C
     131.  01:82C8  7F 7C 79 39 19 1F 07 0C 
     132.  01:82D0                          DB $00,$00,$18,$58,$10,$50,$48,$08
     132.  01:82D0  00 00 18 58 10 50 48 08 
     133.  01:82D8                          DB $10,$C0,$C0,$C0,$80,$C0,$C0,$00
     133.  01:82D8  10 C0 C0 C0 80 C0 C0 00 
     134.  01:82E0                              ; mask 2
     135.  01:82E0                          DB $00,$00,$1E,$00,$3A,$00,$00,$00
     135.  01:82E0  00 00 1E 00 3A 00 00 00 
     136.  01:82E8                          DB $00,$7E,$7D,$3D,$19,$1F,$07,$00
     136.  01:82E8  00 7E 7D 3D 19 1F 07 00 
     137.  01:82F0                          DB $00,$00,$B8,$00,$14,$00,$00,$00
     137.  01:82F0  00 00 B8 00 14 00 00 00 
     138.  01:82F8                          DB $00,$E0,$E0,$E0,$E0,$E0,$00,$00
     138.  01:82F8  00 E0 E0 E0 E0 E0 00 00 
     139.  01:8300                          
     140.  01:8300                      SPRITE_PATTERN:    
     141.  01:8300                          ; P1 - DOWN 1 
     142.  01:8300                          ; DOWN 1 - 00h
     143.  01:8300                          ; mask 0
     144.  01:8300                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     144.  01:8300  07 0F 04 06 0F 07 1F 3F 
     145.  01:8308                          DB $4C,$4E,$4E,$3C,$0C,$0E,$0F,$08
     145.  01:8308  4C 4E 4E 3C 0C 0E 0F 08 
     146.  01:8310                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     146.  01:8310  E0 F0 20 20 70 E0 F8 FC 
     147.  01:8318                          DB $32,$72,$7E,$7C,$70,$F0,$C0,$00    
     147.  01:8318  32 72 7E 7C 70 F0 C0 00 
     148.  01:8320                          ; mask 1
     149.  01:8320                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     149.  01:8320  00 00 19 19 10 3A 3A 78 
     150.  01:8328                          DB $5F,$5E,$7E,$3C,$0C,$0E,$0F,$04
     150.  01:8328  5F 5E 7E 3C 0C 0E 0F 04 
     151.  01:8330                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     151.  01:8330  00 00 90 D8 88 58 5C 1E 
     152.  01:8338                          DB $F6,$FE,$FE,$3C,$30,$70,$A0,$00    
     152.  01:8338  F6 FE FE 3C 30 70 A0 00 
     153.  01:8340                          ; mask 2
     154.  01:8340                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     154.  01:8340  00 00 1B 00 10 00 00 00 
     155.  01:8348                          DB $6F,$6F,$7F,$3F,$0F,$0F,$0F,$00
     155.  01:8348  6F 6F 7F 3F 0F 0F 0F 00 
     156.  01:8350                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     156.  01:8350  00 00 D0 00 8C 00 00 00 
     157.  01:8358                          DB $FA,$7E,$7E,$BC,$B0,$70,$80,$00
     157.  01:8358  FA 7E 7E BC B0 70 80 00 
     158.  01:8360                          
     159.  01:8360                          ; DOWN 2
     160.  01:8360                          ; mask 0 - 0Ch    
     161.  01:8360                          DB $07,$0F,$04,$06,$0F,$07,$1F,$3F
     161.  01:8360  07 0F 04 06 0F 07 1F 3F 
     162.  01:8368                          DB $4C,$4E,$7E,$3C,$0C,$0E,$05,$00
     162.  01:8368  4C 4E 7E 3C 0C 0E 05 00 
     163.  01:8370                          DB $E0,$F0,$20,$20,$70,$E0,$F8,$FC
     163.  01:8370  E0 F0 20 20 70 E0 F8 FC 
     164.  01:8378                          DB $32,$72,$72,$7C,$70,$F0,$E0,$40    
     164.  01:8378  32 72 72 7C 70 F0 E0 40 
     165.  01:8380                          ; mask 1
     166.  01:8380                          DB $00,$00,$19,$19,$10,$3A,$3A,$78
     166.  01:8380  00 00 19 19 10 3A 3A 78 
     167.  01:8388                          DB $5F,$7E,$7E,$3C,$0C,$0E,$03,$00
     167.  01:8388  5F 7E 7E 3C 0C 0E 03 00 
     168.  01:8390                          DB $00,$00,$90,$D8,$88,$58,$5C,$1E
     168.  01:8390  00 00 90 D8 88 58 5C 1E 
     169.  01:8398                          DB $F6,$F6,$FE,$3C,$30,$70,$E0,$20    
     169.  01:8398  F6 F6 FE 3C 30 70 E0 20 
     170.  01:83A0                          ; mask 2
     171.  01:83A0                          DB $00,$00,$1B,$00,$10,$00,$00,$00
     171.  01:83A0  00 00 1B 00 10 00 00 00 
     172.  01:83A8                          DB $6F,$7F,$7F,$3F,$0F,$0F,$01,$00
     172.  01:83A8  6F 7F 7F 3F 0F 0F 01 00 
     173.  01:83B0                          DB $00,$00,$D0,$00,$8C,$00,$00,$00
     173.  01:83B0  00 00 D0 00 8C 00 00 00 
     174.  01:83B8                          DB $FA,$7A,$7E,$BC,$B0,$70,$E0,$00
     174.  01:83B8  FA 7A 7E BC B0 70 E0 00 
     175.  01:83C0                          
     176.  01:83C0                          ; Antichrist - RIGHT
     177.  01:83C0                          ; mask 0 - 18h    
     178.  01:83C0                          DB $00,$00,$00,$01,$01,$01,$01,$01
     178.  01:83C0  00 00 00 01 01 01 01 01 
     179.  01:83C8                          DB $01,$01,$07,$07,$01,$01,$00,$00
     179.  01:83C8  01 01 07 07 01 01 00 00 
     180.  01:83D0                          DB $00,$00,$00,$80,$80,$80,$80,$80
     180.  01:83D0  00 00 00 80 80 80 80 80 
     181.  01:83D8                          DB $80,$80,$E0,$E0,$80,$80,$00,$00
     181.  01:83D8  80 80 E0 E0 80 80 00 00 
     182.  01:83E0                      
     183.  01:83E0                          ;Ghost 1 Left - 1CH
     184.  01:83E0                          ; mask 0
     185.  01:83E0                          DB $03,$04,$08,$68,$B5,$90,$50,$40
     185.  01:83E0  03 04 08 68 B5 90 50 40 
     186.  01:83E8                          DB $22,$20,$10,$10,$08,$06,$03,$00
     186.  01:83E8  22 20 10 10 08 06 03 00 
     187.  01:83F0                          DB $C0,$E0,$70,$36,$BB,$33,$26,$06
     187.  01:83F0  C0 E0 70 36 BB 33 26 06 
     188.  01:83F8                          DB $0C,$18,$3E,$19,$07,$0C,$F8,$E0
     188.  01:83F8  0C 18 3E 19 07 0C F8 E0 
     189.  01:8400                          ; mask 1    20h
     190.  01:8400                          DB $00,$07,$0F,$6F,$DF,$FF,$6F,$7F
     190.  01:8400  00 07 0F 6F DF FF 6F 7F 
     191.  01:8408                          DB $3F,$3F,$1F,$1F,$0F,$05,$03,$00
     191.  01:8408  3F 3F 1F 1F 0F 05 03 00 
     192.  01:8410                          DB $00,$20,$90,$D6,$DD,$DD,$DA,$FA
     192.  01:8410  00 20 90 D6 DD DD DA FA 
     193.  01:8418                          DB $F4,$E8,$CE,$EF,$FB,$F4,$18,$00
     193.  01:8418  F4 E8 CE EF FB F4 18 00 
     194.  01:8420                          
     195.  01:8420                          ; Ghost 2 Left - 24h
     196.  01:8420                          ; mask 0    24-h
     197.  01:8420                          DB $03,$04,$08,$08,$65,$B0,$90,$40
     197.  01:8420  03 04 08 08 65 B0 90 40 
     198.  01:8428                          DB $22,$20,$10,$10,$08,$06,$01,$00
     198.  01:8428  22 20 10 10 08 06 01 00 
     199.  01:8430                          DB $C0,$E0,$70,$30,$B6,$3B,$27,$06
     199.  01:8430  C0 E0 70 30 B6 3B 27 06 
     200.  01:8438                          DB $0C,$18,$3C,$1A,$06,$0C,$F0,$C0
     200.  01:8438  0C 18 3C 1A 06 0C F0 C0 
     201.  01:8440                          ; mask 1    28h
     202.  01:8440                          DB $00,$07,$0F,$0F,$6F,$DF,$EF,$7F
     202.  01:8440  00 07 0F 0F 6F DF EF 7F 
     203.  01:8448                          DB $3F,$3F,$1F,$1F,$0F,$05,$01,$00
     203.  01:8448  3F 3F 1F 1F 0F 05 01 00 
     204.  01:8450                          DB $00,$20,$90,$D0,$D6,$DD,$D9,$FA
     204.  01:8450  00 20 90 D0 D6 DD D9 FA 
     205.  01:8458                          DB $F4,$E8,$CC,$EE,$FA,$F4,$30,$00
     205.  01:8458  F4 E8 CC EE FA F4 30 00 
     206.  01:8460                      
     207.  01:8460                          ; Ghost 1 Right - 2Ch
     208.  01:8460                          ; mask 0
     209.  01:8460                          DB $03,$07,$0E,$6C,$DD,$CC,$64,$60
     209.  01:8460  03 07 0E 6C DD CC 64 60 
     210.  01:8468                          DB $30,$18,$7C,$98,$E0,$30,$1F,$07
     210.  01:8468  30 18 7C 98 E0 30 1F 07 
     211.  01:8470                          DB $C0,$20,$10,$16,$AD,$09,$0A,$02
     211.  01:8470  C0 20 10 16 AD 09 0A 02 
     212.  01:8478                          DB $44,$04,$08,$08,$10,$60,$C0,$00
     212.  01:8478  44 04 08 08 10 60 C0 00 
     213.  01:8480                          ; mask 1    - 30h
     214.  01:8480                          DB $00,$04,$09,$6B,$BB,$BB,$5B,$5F
     214.  01:8480  00 04 09 6B BB BB 5B 5F 
     215.  01:8488                          DB $2F,$17,$73,$F7,$DF,$2F,$18,$00
     215.  01:8488  2F 17 73 F7 DF 2F 18 00 
     216.  01:8490                          DB $00,$E0,$F0,$F6,$FB,$FF,$F6,$FE
     216.  01:8490  00 E0 F0 F6 FB FF F6 FE 
     217.  01:8498                          DB $FC,$FC,$F8,$F8,$F0,$A0,$C0,$00
     217.  01:8498  FC FC F8 F8 F0 A0 C0 00 
     218.  01:84A0                          
     219.  01:84A0                          ; Ghost 2 Right - 34h
     220.  01:84A0                          ; mask 0
     221.  01:84A0                          DB $03,$07,$0E,$0C,$6D,$DC,$E4,$60
     221.  01:84A0  03 07 0E 0C 6D DC E4 60 
     222.  01:84A8                          DB $30,$18,$3C,$58,$60,$30,$0F,$03
     222.  01:84A8  30 18 3C 58 60 30 0F 03 
     223.  01:84B0                          DB $C0,$20,$10,$10,$A6,$0D,$09,$02
     223.  01:84B0  C0 20 10 10 A6 0D 09 02 
     224.  01:84B8                          DB $44,$04,$08,$08,$10,$60,$80,$00
     224.  01:84B8  44 04 08 08 10 60 80 00 
     225.  01:84C0                          ; mask 1    38h
     226.  01:84C0                          DB $00,$04,$09,$0B,$6B,$BB,$9B,$5F
     226.  01:84C0  00 04 09 0B 6B BB 9B 5F 
     227.  01:84C8                          DB $2F,$17,$33,$77,$5F,$2F,$0C,$00
     227.  01:84C8  2F 17 33 77 5F 2F 0C 00 
     228.  01:84D0                          DB $00,$E0,$F0,$F0,$F6,$FB,$F7,$FE
     228.  01:84D0  00 E0 F0 F0 F6 FB F7 FE 
     229.  01:84D8                          DB $FC,$FC,$F8,$F8,$F0,$A0,$80,$00
     229.  01:84D8  FC FC F8 F8 F0 A0 80 00 
     230.  01:84E0                          
     231.  01:84E0                      
     232.  01:84E0                          ; Esqueleto Left - 1
     233.  01:84E0                          ; mask 0 - 3Ch
     234.  01:84E0                          DB $1F,$1B,$2E,$24,$3F,$1F,$1F,$00
     234.  01:84E0  1F 1B 2E 24 3F 1F 1F 00 
     235.  01:84E8                          DB $03,$05,$09,$04,$01,$02,$02,$04
     235.  01:84E8  03 05 09 04 01 02 02 04 
     236.  01:84F0                          DB $80,$C0,$C0,$C0,$80,$00,$00,$80
     236.  01:84F0  80 C0 C0 C0 80 00 00 80 
     237.  01:84F8                          DB $E0,$D0,$C8,$C4,$C0,$20,$20,$40
     237.  01:84F8  E0 D0 C8 C4 C0 20 20 40 
     238.  01:8500                          ; mask 1 - 40h
     239.  01:8500                          DB $1F,$1F,$3F,$3F,$3F,$1E,$0A,$00
     239.  01:8500  1F 1F 3F 3F 3F 1E 0A 00 
     240.  01:8508                          DB $03,$05,$09,$04,$01,$00,$00,$00
     240.  01:8508  03 05 09 04 01 00 00 00 
     241.  01:8510                          DB $00,$80,$80,$80,$00,$00,$00,$00
     241.  01:8510  00 80 80 80 00 00 00 00 
     242.  01:8518                          DB $80,$10,$88,$84,$80,$00,$00,$00
     242.  01:8518  80 10 88 84 80 00 00 00 
     243.  01:8520                      
     244.  01:8520                          ; Esqueleto Left - 2
     245.  01:8520                          ; mask 0 - 44h
     246.  01:8520                          ; mask 0
     247.  01:8520                          DB $0F,$0D,$17,$12,$1F,$0F,$0F,$00
     247.  01:8520  0F 0D 17 12 1F 0F 0F 00 
     248.  01:8528                          DB $03,$05,$09,$10,$01,$06,$08,$00
     248.  01:8528  03 05 09 10 01 06 08 00 
     249.  01:8530                          DB $C0,$E0,$60,$60,$C0,$80,$80,$80
     249.  01:8530  C0 E0 60 60 C0 80 80 80 
     250.  01:8538                          DB $E0,$D0,$C8,$D0,$C0,$20,$20,$50
     250.  01:8538  E0 D0 C8 D0 C0 20 20 50 
     251.  01:8540                          ; mask 1 - 48h
     252.  01:8540                          DB $0F,$0F,$1F,$1F,$1F,$0F,$05,$00
     252.  01:8540  0F 0F 1F 1F 1F 0F 05 00 
     253.  01:8548                          DB $03,$05,$09,$10,$01,$00,$00,$00
     253.  01:8548  03 05 09 10 01 00 00 00 
     254.  01:8550                          DB $80,$C0,$C0,$C0,$80,$00,$00,$00
     254.  01:8550  80 C0 C0 C0 80 00 00 00 
     255.  01:8558                          DB $80,$10,$88,$90,$80,$00,$20,$40
     255.  01:8558  80 10 88 90 80 00 20 40 
     256.  01:8560                          
     257.  01:8560                          ; Esqueleto Right - 1
     258.  01:8560                          ; mask 0 - 4Ch
     259.  01:8560                          DB $01,$03,$03,$03,$01,$00,$00,$01
     259.  01:8560  01 03 03 03 01 00 00 01 
     260.  01:8568                          DB $07,$0B,$13,$23,$03,$04,$04,$02
     260.  01:8568  07 0B 13 23 03 04 04 02 
     261.  01:8570                          DB $F8,$D8,$74,$24,$FC,$F8,$F8,$00
     261.  01:8570  F8 D8 74 24 FC F8 F8 00 
     262.  01:8578                          DB $C0,$A0,$90,$20,$80,$40,$40,$20
     262.  01:8578  C0 A0 90 20 80 40 40 20 
     263.  01:8580                          ; mask 1 - 50h
     264.  01:8580                          DB $00,$01,$01,$01,$00,$00,$00,$00
     264.  01:8580  00 01 01 01 00 00 00 00 
     265.  01:8588                          DB $01,$08,$11,$21,$01,$00,$00,$00
     265.  01:8588  01 08 11 21 01 00 00 00 
     266.  01:8590                          DB $F8,$F8,$FC,$FC,$FC,$78,$50,$00
     266.  01:8590  F8 F8 FC FC FC 78 50 00 
     267.  01:8598                          DB $C0,$A0,$90,$20,$80,$00,$00,$00
     267.  01:8598  C0 A0 90 20 80 00 00 00 
     268.  01:85A0                          
     269.  01:85A0                          ; Esqueleto Right - 2
     270.  01:85A0                          ; mask 0 - 54h
     271.  01:85A0                          DB $03,$07,$06,$06,$03,$01,$01,$01
     271.  01:85A0  03 07 06 06 03 01 01 01 
     272.  01:85A8                          DB $07,$0B,$13,$0B,$03,$04,$04,$0A
     272.  01:85A8  07 0B 13 0B 03 04 04 0A 
     273.  01:85B0                          DB $F0,$B0,$E8,$48,$F8,$F0,$F0,$00
     273.  01:85B0  F0 B0 E8 48 F8 F0 F0 00 
     274.  01:85B8                          DB $C0,$A0,$90,$08,$80,$60,$10,$00
     274.  01:85B8  C0 A0 90 08 80 60 10 00 
     275.  01:85C0                          ; mask 1 - 58h
     276.  01:85C0                          DB $01,$03,$03,$03,$01,$00,$00,$00
     276.  01:85C0  01 03 03 03 01 00 00 00 
     277.  01:85C8                          DB $01,$08,$11,$09,$01,$00,$04,$02
     277.  01:85C8  01 08 11 09 01 00 04 02 
     278.  01:85D0                          DB $F0,$F0,$F8,$F8,$F8,$F0,$A0,$00
     278.  01:85D0  F0 F0 F8 F8 F8 F0 A0 00 
     279.  01:85D8                          DB $C0,$A0,$90,$08,$80,$00,$00,$00
     279.  01:85D8  C0 A0 90 08 80 00 00 00 
     280.  01:85E0                      
     281.  01:85E0                      SPRITE_COLOR_TABLE:       
     282.  01:85E0                           ;P1 - DOWN 1
     283.  01:85E0                          ;DOWN 1
     284.  01:85E0                          ; attr 0
     285.  01:85E0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     285.  01:85E0  05 05 0A 0B 0B 0B 0B 0B 
     286.  01:85E8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     286.  01:85E8  04 04 04 0A 0A 0A 08 08 
     287.  01:85F0                          ; attr 1
     288.  01:85F0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     288.  01:85F0  00 00 44 45 45 45 45 45 
     289.  01:85F8                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     289.  01:85F8  4A 4A 4A 44 44 44 45 45 
     290.  01:8600                          ; attr 2
     291.  01:8600                          DB $00,$00,$41,$00,$40,$00,$00,$00
     291.  01:8600  00 00 41 00 40 00 00 00 
     292.  01:8608                          DB $41,$41,$41,$41,$41,$41,$42,$00
     292.  01:8608  41 41 41 41 41 41 42 00 
     293.  01:8610                               
     294.  01:8610                          ; Cada posición ha de corresponder con la tabla de atributos    
     295.  01:8610                          ; Disparo - antichrist    
     296.  01:8610                          DB $00,$00,$00,$0A,$0A,$0A,$0A,$0A
     296.  01:8610  00 00 00 0A 0A 0A 0A 0A 
     297.  01:8618                          DB $0A,$0A,$0A,$0A,$0A,$0A,$00,$00
     297.  01:8618  0A 0A 0A 0A 0A 0A 00 00 
     298.  01:8620                          ; Fantasma
     299.  01:8620                          ; attr 0
     300.  01:8620                          DB $0F,$08,$08,$08,$08,$08,$08,$08
     300.  01:8620  0F 08 08 08 08 08 08 08 
     301.  01:8628                          DB $08,$08,$08,$08,$08,$08,$08,$0F
     301.  01:8628  08 08 08 08 08 08 08 0F 
     302.  01:8630                          ; attr 1
     303.  01:8630                          DB $00,$47,$47,$47,$47,$47,$47,$47
     303.  01:8630  00 47 47 47 47 47 47 47 
     304.  01:8638                          DB $47,$47,$47,$47,$47,$47,$47,$00
     304.  01:8638  47 47 47 47 47 47 47 00 
     305.  01:8640                          
     306.  01:8640                          
     307.  01:8640                          ; Esqueleto Left 1
     308.  01:8640                          ; attr 0
     309.  01:8640                          DB $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
     309.  01:8640  0E 0E 0E 0E 0E 0E 0E 0E 
     310.  01:8648                          DB $0E,$0E,$0E,$0E,$0E,$0F,$0F,$0F
     310.  01:8648  0E 0E 0E 0E 0E 0F 0F 0F 
     311.  01:8650                          ; attr 1
     312.  01:8650                          DB $41,$49,$49,$49,$41,$41,$41,$00
     312.  01:8650  41 49 49 49 41 41 41 00 
     313.  01:8658                          DB $41,$41,$41,$41,$41,$00,$00,$00
     313.  01:8658  41 41 41 41 41 00 00 00 
     314.  01:8660                      
     315.  01:8660                      SPRITE_COLOR_P1_UP:
     316.  01:8660                          ;UP 1
     317.  01:8660                          ; attr 0
     318.  01:8660                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     318.  01:8660  05 05 0A 05 05 05 05 05 
     319.  01:8668                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     319.  01:8668  0A 05 0B 0A 0A 0A 08 08 
     320.  01:8670                          ; attr 1
     321.  01:8670                          DB $00,$00,$44,$00,$40,$00,$00,$00
     321.  01:8670  00 00 44 00 40 00 00 00 
     322.  01:8678                          DB $44,$4A,$45,$45,$45,$45,$45,$45    
     322.  01:8678  44 4A 45 45 45 45 45 45 
     323.  01:8680                          ; attr 2
     324.  01:8680                          DB $00,$00,$41,$00,$00,$00,$00,$00
     324.  01:8680  00 00 41 00 00 00 00 00 
     325.  01:8688                          DB $41,$41,$00,$00,$00,$00,$42,$00
     325.  01:8688  41 41 00 00 00 00 42 00 
     326.  01:8690                          
     327.  01:8690                          ;SPRITE_COLOR_P1_UP2:
     328.  01:8690                          ;UP 1
     329.  01:8690                          ; attr 0
     330.  01:8690                          DB $05,$05,$0A,$05,$05,$05,$05,$05
     330.  01:8690  05 05 0A 05 05 05 05 05 
     331.  01:8698                          DB $0A,$05,$0B,$0A,$0A,$0A,$08,$08
     331.  01:8698  0A 05 0B 0A 0A 0A 08 08 
     332.  01:86A0                          ; attr 1
     333.  01:86A0                          DB $00,$00,$44,$00,$40,$00,$00,$00
     333.  01:86A0  00 00 44 00 40 00 00 00 
     334.  01:86A8                          DB $44,$4A,$45,$45,$45,$45,$45,$45
     334.  01:86A8  44 4A 45 45 45 45 45 45 
     335.  01:86B0                          ; attr 2
     336.  01:86B0                          DB $00,$00,$41,$00,$00,$00,$00,$00
     336.  01:86B0  00 00 41 00 00 00 00 00 
     337.  01:86B8                          DB $41,$41,$00,$00,$00,$00,$42,$00
     337.  01:86B8  41 41 00 00 00 00 42 00 
     338.  01:86C0                      
     339.  01:86C0                      
     340.  01:86C0                      SPRITE_COLOR_P1_DOWN:
     341.  01:86C0                          ;DOWN 1
     342.  01:86C0                          ; attr 0
     343.  01:86C0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     343.  01:86C0  05 05 0A 0B 0B 0B 0B 0B 
     344.  01:86C8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     344.  01:86C8  04 04 04 0A 0A 0A 08 08 
     345.  01:86D0                          ; attr 1
     346.  01:86D0                          DB $00,$00,$44,$45,$45,$45,$45,$45
     346.  01:86D0  00 00 44 45 45 45 45 45 
     347.  01:86D8                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     347.  01:86D8  4A 4A 4A 44 44 44 45 45 
     348.  01:86E0                          ; attr 2
     349.  01:86E0                          DB $00,$00,$41,$00,$40,$00,$00,$00
     349.  01:86E0  00 00 41 00 40 00 00 00 
     350.  01:86E8                          DB $41,$41,$41,$41,$41,$41,$42,$00
     350.  01:86E8  41 41 41 41 41 41 42 00 
     351.  01:86F0                          ;SPRITE_COLOR_P1_DOWN2:
     352.  01:86F0                          ;DOWN 1
     353.  01:86F0                          ; attr 0
     354.  01:86F0                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     354.  01:86F0  05 05 0A 0B 0B 0B 0B 0B 
     355.  01:86F8                          DB $04,$04,$04,$0A,$0A,$0A,$08,$08    
     355.  01:86F8  04 04 04 0A 0A 0A 08 08 
     356.  01:8700                          ; attr 1
     357.  01:8700                          DB $00,$00,$44,$45,$45,$45,$45,$45
     357.  01:8700  00 00 44 45 45 45 45 45 
     358.  01:8708                          DB $4A,$4A,$4A,$44,$44,$44,$45,$45    
     358.  01:8708  4A 4A 4A 44 44 44 45 45 
     359.  01:8710                          ; attr 2
     360.  01:8710                          DB $00,$00,$41,$00,$40,$00,$00,$00
     360.  01:8710  00 00 41 00 40 00 00 00 
     361.  01:8718                          DB $41,$41,$41,$41,$41,$41,$42,$00
     361.  01:8718  41 41 41 41 41 41 42 00 
     362.  01:8720                      
     363.  01:8720                      SPRITE_COLOR_P1_RIGHT:
     364.  01:8720                          ; attr 0
     365.  01:8720                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     365.  01:8720  05 05 0A 0B 0B 0B 0B 0B 
     366.  01:8728                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08    
     366.  01:8728  0B 0A 0A 0B 0A 0A 08 08 
     367.  01:8730                          ; attr 1
     368.  01:8730                          DB $00,$00,$44,$45,$45,$45,$45,$45
     368.  01:8730  00 00 44 45 45 45 45 45 
     369.  01:8738                          DB $45,$44,$44,$44,$44,$44,$45,$45    
     369.  01:8738  45 44 44 44 44 44 45 45 
     370.  01:8740                          ; attr 2
     371.  01:8740                          DB $00,$00,$41,$00,$40,$00,$00,$00
     371.  01:8740  00 00 41 00 40 00 00 00 
     372.  01:8748                          DB $00,$41,$41,$41,$41,$41,$42,$00
     372.  01:8748  00 41 41 41 41 41 42 00 
     373.  01:8750                             
     374.  01:8750                          ; attr 0
     375.  01:8750                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     375.  01:8750  05 05 0A 0B 0B 0B 0B 0B 
     376.  01:8758                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08    
     376.  01:8758  0B 0A 0A 0A 0B 0A 08 08 
     377.  01:8760                          ; attr 1
     378.  01:8760                          DB $00,$00,$44,$45,$45,$45,$45,$45
     378.  01:8760  00 00 44 45 45 45 45 45 
     379.  01:8768                          DB $45,$44,$44,$44,$44,$44,$45,$45
     379.  01:8768  45 44 44 44 44 44 45 45 
     380.  01:8770                          ; attr 2
     381.  01:8770                          DB $00,$00,$41,$00,$40,$00,$00,$00
     381.  01:8770  00 00 41 00 40 00 00 00 
     382.  01:8778                          DB $00,$41,$41,$41,$41,$41,$42,$00
     382.  01:8778  00 41 41 41 41 41 42 00 
     383.  01:8780                      
     384.  01:8780                      stg1_gate:
     385.  01:8780  00 00 00 00 00 00       DB #00,#00,#00,#00,#00,#00
     386.  01:8786                      stg1_gate_blocked:
     387.  01:8786  01 01 01 01 01 01       DB #01,#01,#01,#01,#01,#01
     388.  01:878C                      mapa1:
     389.  01:878C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     389.  01:878C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     389.  01:879C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  01:87AC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     390.  01:87AC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     390.  01:87BC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     391.  01:87CC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     391.  01:87CC  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     391.  01:87DC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     392.  01:87EC                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     392.  01:87EC  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     392.  01:87FC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     393.  01:880C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     393.  01:880C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     393.  01:881C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     394.  01:882C                            db #01,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     394.  01:882C  01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 
     394.  01:883C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     395.  01:884C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     395.  01:884C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     395.  01:885C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     396.  01:886C                            db #01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     396.  01:886C  01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     396.  01:887C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     397.  01:888C                          
     398.  01:888C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     398.  01:888C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     398.  01:889C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     399.  01:88AC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     399.  01:88AC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     399.  01:88BC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     400.  01:88CC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     400.  01:88CC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     400.  01:88DC  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     401.  01:88EC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     401.  01:88EC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     401.  01:88FC  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     402.  01:890C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     402.  01:890C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     402.  01:891C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     403.  01:892C                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#01,#01        
     403.  01:892C  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     403.  01:893C  00 00 00 00 00 00 00 00 00 00 00 01 00 00 01 01 
     404.  01:894C                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     404.  01:894C  01 01 00 00 00 00 00 01 01 01 01 01 01 00 00 00 
     404.  01:895C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     405.  01:896C                            db #01,#01,#00,#00,#00,#00,#00,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     405.  01:896C  01 01 00 00 00 00 00 01 01 00 00 00 00 00 00 00 
     405.  01:897C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     406.  01:898C                      
     407.  01:898C                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     407.  01:898C  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     407.  01:899C  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     408.  01:89AC                            db #01,#01,#00,#00,#00,#00,#01,#01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     408.  01:89AC  01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00 
     408.  01:89BC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     409.  01:89CC                            db #01,#01,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     409.  01:89CC  01 01 00 00 01 01 01 01 01 01 01 01 01 00 00 00 
     409.  01:89DC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     410.  01:89EC                            db #01,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#01,#00,#00,#00,#00,#00,#00,#00,#00,#00,#00,#01,#01        
     410.  01:89EC  01 01 00 00 00 00 00 00 00 00 00 00 01 00 00 00 
     410.  01:89FC  00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 
     411.  01:8A0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     411.  01:8A0C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     411.  01:8A1C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     412.  01:8A2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     412.  01:8A2C  01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 
     412.  01:8A3C  00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  01:8A4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01        
     413.  01:8A4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     413.  01:8A5C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     414.  01:8A6C                      
     415.  01:8A6C                      mapa2:
     416.  01:8A6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     416.  01:8A6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     416.  01:8A7C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  01:8A8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     417.  01:8A8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     417.  01:8A9C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  01:8AAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     418.  01:8AAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     418.  01:8ABC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  01:8ACC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     419.  01:8ACC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     419.  01:8ADC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  01:8AEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     420.  01:8AEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     420.  01:8AFC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  01:8B0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     421.  01:8B0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     421.  01:8B1C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  01:8B2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     422.  01:8B2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     422.  01:8B3C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  01:8B4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     423.  01:8B4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     423.  01:8B5C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     424.  01:8B6C                            
     425.  01:8B6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     425.  01:8B6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     425.  01:8B7C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  01:8B8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     426.  01:8B8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     426.  01:8B9C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  01:8BAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     427.  01:8BAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     427.  01:8BBC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  01:8BCC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     428.  01:8BCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     428.  01:8BDC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     429.  01:8BEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     429.  01:8BEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     429.  01:8BFC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     430.  01:8C0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     430.  01:8C0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     430.  01:8C1C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     431.  01:8C2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     431.  01:8C2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     431.  01:8C3C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     432.  01:8C4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     432.  01:8C4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     432.  01:8C5C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     433.  01:8C6C                            
     434.  01:8C6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     434.  01:8C6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     434.  01:8C7C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     435.  01:8C8C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     435.  01:8C8C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     435.  01:8C9C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     436.  01:8CAC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     436.  01:8CAC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     436.  01:8CBC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     437.  01:8CCC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     437.  01:8CCC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     437.  01:8CDC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     438.  01:8CEC                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     438.  01:8CEC  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     438.  01:8CFC  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     439.  01:8D0C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     439.  01:8D0C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     439.  01:8D1C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     440.  01:8D2C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     440.  01:8D2C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     440.  01:8D3C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     441.  01:8D4C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     441.  01:8D4C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     441.  01:8D5C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     442.  01:8D6C                            db #01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#00,#00,#00,#00,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01,#01   
     442.  01:8D6C  01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00 
     442.  01:8D7C  00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 
     443.  01:8D8C                      
     444.  01:8D8C                      SPRITE_COLOR_P1_LEFT:
     445.  01:8D8C                          ; attr 0
     446.  01:8D8C                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     446.  01:8D8C  05 05 0A 0B 0B 0B 0B 0B 
     447.  01:8D94                          DB $0B,$0A,$0A,$0B,$0A,$0A,$08,$08
     447.  01:8D94  0B 0A 0A 0B 0A 0A 08 08 
     448.  01:8D9C                          ; attr 1
     449.  01:8D9C                          DB $00,$00,$44,$45,$45,$45,$45,$45
     449.  01:8D9C  00 00 44 45 45 45 45 45 
     450.  01:8DA4                          DB $45,$44,$44,$44,$44,$44,$45,$45
     450.  01:8DA4  45 44 44 44 44 44 45 45 
     451.  01:8DAC                          ; attr 2
     452.  01:8DAC                          DB $00,$00,$41,$00,$40,$00,$00,$00
     452.  01:8DAC  00 00 41 00 40 00 00 00 
     453.  01:8DB4                          DB $00,$41,$41,$41,$41,$41,$42,$00
     453.  01:8DB4  00 41 41 41 41 41 42 00 
     454.  01:8DBC                          ;SPRITE_COLOR_P1_LEFT2:    
     455.  01:8DBC                          ; attr 0
     456.  01:8DBC                          DB $05,$05,$0A,$0B,$0B,$0B,$0B,$0B
     456.  01:8DBC  05 05 0A 0B 0B 0B 0B 0B 
     457.  01:8DC4                          DB $0B,$0A,$0A,$0A,$0B,$0A,$08,$08
     457.  01:8DC4  0B 0A 0A 0A 0B 0A 08 08 
     458.  01:8DCC                          ; attr 1
     459.  01:8DCC                          DB $00,$00,$44,$45,$45,$45,$45,$45
     459.  01:8DCC  00 00 44 45 45 45 45 45 
     460.  01:8DD4                          DB $45,$44,$44,$44,$44,$44,$45,$45
     460.  01:8DD4  45 44 44 44 44 44 45 45 
     461.  01:8DDC                          ; attr 2
     462.  01:8DDC                          DB $00,$00,$41,$00,$40,$00,$00,$00
     462.  01:8DDC  00 00 41 00 40 00 00 00 
     463.  01:8DE4                          DB $00,$41,$41,$41,$41,$41,$42,$00
     463.  01:8DE4  00 41 41 41 41 41 42 00 
     464.  01:8DEC                      
     465.  01:8DEC                      BLANK_DATA:
     466.  01:8DEC                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     466.  01:8DEC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     466.  01:8DFC  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  01:8E0C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     467.  01:8E0C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     467.  01:8E1C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  01:8E2C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     468.  01:8E2C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     468.  01:8E3C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  01:8E4C                          DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     469.  01:8E4C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     469.  01:8E5C  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     470.  01:8E6C                      
     471.  01:8E6C                          
     472.  01:8E6C                      PaletteData:
     473.  01:8E6C                      			;  data 1 (red 0-7; blue 0-7); data 2 (0000; green 0-7)
     474.  01:8E6C  02 00                   db 0x02, 0x00 ; Color index 0
     475.  01:8E6E  30 00                   db 0x30, 0x00 ; Color index 1
     476.  01:8E70  70 06                   db 0x70, 0x06 ; Color index 2
     477.  01:8E72  50 00                   db 0x50, 0x00 ; Color index 3
     478.  01:8E74  11 01                   db 0x11, 0x01 ; Color index 4
     479.  01:8E76  22 02                   db 0x22, 0x02 ; Color index 5
     480.  01:8E78  06 02                   db 0x06, 0x02 ; Color index 6
     481.  01:8E7A  77 07                   db 0x77, 0x07 ; Color index 7
     482.  01:8E7C  33 03                   db 0x33, 0x03 ; Color index 8
     483.  01:8E7E  66 06                   db 0x66, 0x06 ; Color index 9
     484.  01:8E80  70 00                   db 0x70, 0x00 ; Color index 10
     485.  01:8E82  64 05                   db 0x64, 0x05 ; Color index 11
     486.  01:8E84  50 03                   db 0x50, 0x03 ; Color index 12
     487.  01:8E86  02 04                   db 0x02, 0x04 ; Color index 13
     488.  01:8E88  01 02                   db 0x01, 0x02 ; Color index 14
     489.  01:8E8A  00 00                   db 0x00, 0x00 ; Color index 15
     717   01:8E8C                          include "gfx\stg1_map.asm"
       1.  01:8E8C                      stg1_map_back:
       2.  01:8E8C                      ; Compressed: #Tile, X, Y, #reps
       3.  01:8E8C  09 00 00 07         	db 9, 0, 0, 7	
       4.  01:8E90  00 70 00 01         	db 0, 112, 0, 1	
       5.  01:8E94  09 90 00 07         	db 9, 144, 0, 7	
       6.  01:8E98                      
       7.  01:8E98  09 00 10 07         	db 9, 0, 16, 7
       8.  01:8E9C  07 70 10 02         	db 7, 112, 16, 2
       9.  01:8EA0  09 90 10 07         	db 9, 144, 16, 7
      10.  01:8EA4                      
      11.  01:8EA4  09 00 20 03         	db 9, 0, 32, 3
      12.  01:8EA8  07 30 20 06         	db 7, 48, 32, 6
      13.  01:8EAC  09 90 20 07         	db 9, 144, 32, 7
      14.  01:8EB0                      
      15.  01:8EB0  09 00 30 07         	db 9, 0, 48, 7
      16.  01:8EB4  07 70 30 02         	db 7, 112, 48, 2
      17.  01:8EB8  09 90 30 07         	db 9, 144, 48, 7
      18.  01:8EBC                      
      19.  01:8EBC  09 00 40 07         	db 9, 0, 64, 7
      20.  01:8EC0  07 70 40 02         	db 7, 112, 64, 2
      21.  01:8EC4  09 90 40 07         	db 9, 144, 64, 7
      22.  01:8EC8                      
      23.  01:8EC8  09 00 50 07         	db 9, 0, 80, 7
      24.  01:8ECC  07 70 50 02         	db 7, 112, 80, 2
      25.  01:8ED0  09 90 50 07         	db 9, 144, 80, 7
      26.  01:8ED4                      
      27.  01:8ED4  09 00 60 07         	db 9, 0, 96, 7
      28.  01:8ED8  07 70 60 06         	db 7, 112, 96, 6
      29.  01:8EDC  09 D0 60 03         	db 9, 208, 96, 3
      30.  01:8EE0                      
      31.  01:8EE0  09 00 70 07         	db 9, 0, 112, 7
      32.  01:8EE4  07 70 70 02         	db 7, 112, 112, 2
      33.  01:8EE8  09 90 70 07         	db 9, 144, 112, 7
      34.  01:8EEC                      
      35.  01:8EEC  09 00 80 05         	db 9, 0, 128, 5
      36.  01:8EF0  07 50 80 04         	db 7, 80, 128, 4
      37.  01:8EF4  09 90 80 07         	db 9, 144, 128, 7
      38.  01:8EF8                      
      39.  01:8EF8  09 00 90 07         	db 9, 0, 144, 7
      40.  01:8EFC  07 70 90 02         	db 7, 112, 144, 2
      41.  01:8F00  09 90 90 07         	db 9, 144, 144, 7
      42.  01:8F04                      
      43.  01:8F04  09 00 A0 07         	db 9, 0, 160, 7
      44.  01:8F08  07 70 A0 02         	db 7, 112, 160, 2
      45.  01:8F0C  09 90 A0 07         	db 9, 144, 160, 7
      46.  01:8F10                      
      47.  01:8F10  09 00 B0 10         	db 9, 0, 176, 16
      48.  01:8F14                      
      49.  01:8F14  FF                  	db 255		; fin
      50.  01:8F15                      	
      51.  01:8F15                      stg1_map_front:
      52.  01:8F15                      	; Transparent Tiles
      53.  01:8F15  0A 60 60 01         	db 10, 96, 96, 1	; Skull
      54.  01:8F19  0D 20 20 01         	db 13, 32, 32, 1	; RIP
      55.  01:8F1D  0C 40 80 01         	db 12, 64, 128, 1	; Antichrist
      56.  01:8F21  0D D0 60 01         	db 13, 208, 96, 1	; Christ
      57.  01:8F25                      
      58.  01:8F25  0B 9E 34 01         	db 11, 158, 52, 1	; Tree 1
      59.  01:8F29  0B AC 34 01         	db 11, 172, 52, 1	; Tree 1
      60.  01:8F2D  FF                  	db 255	; fin
      61.  01:8F2E                      
     718   01:8F2E                      FONT:
     719   01:8F2E  (07F7)               INCBIN "gfx\FONT.SC5",#7
     720   01:9725                      AFX:
     721   01:9725  (01F6)                  incbin "sfx\cementer_sounds.afb"
     722   01:991B                      SONG:
     723   01:991B                      	;incbin "sfx\Nostalgy_sincabecera.pt3"
     724   01:991B  (0EE7)                  incbin "sfx\test.pt3"
     725   01:A802                          ;incbin "sfx\G-6sin_cabecera.pt3"
     726   01:A802                      
     727   01:A802  (02)                 PAGE 2
     728   02:8000                      
     729   02:8000  (03)                 PAGE 3
     730   03:8000                      
     731   03:8000  (04)                 PAGE 4
     732   04:8000  (05)                 PAGE 5
     733   05:8000  (06)                 PAGE 6
     734   06:8000  (07)                 PAGE 7
     735   07:8000                      CEMENTER1
     736   07:8000                       ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     737   07:8000  (4000)               INCBIN "gfx\CEMENTER1.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     738   07:C000  (08)                 PAGE 8
     739   08:8000  (200D)               INCBIN "gfx\CEMENTER1.SC5",#4007			; Cada página tiene 16K = 4000h 
     740   08:A00D  (09)                 PAGE 9
     741   09:8000                      GRAPHIC
     742   09:8000  (4000)               INCBIN "gfx\BTH.SR8",#7,#4000			; Cada página tiene 16K = 4000h
     743   09:C000  (0A)                 PAGE 10
     744   0A:8000  (4000)               INCBIN "gfx\BTH.SR8",#4007,#4000
     745   0A:C000                      
     746   0A:C000  (0B)                 PAGE 11
     747   0B:8000  (4000)               INCBIN "gfx\BTH.SR8",#8007,#4000
     748   0B:C000                      
     749   0B:C000  (0C)                 PAGE 12
     750   0C:8000  (1400)               INCBIN "gfx\BTH.SR8",#C007
     751   0C:9400                      
     752   0C:9400  (0D)                 PAGE 13
     753   0D:8000                      CEMENTER2
     754   0D:8000                      ;#Para el fondo borrar de BDA0 en adelante para quitar la parte de la energia
     755   0D:8000  (4000)               INCBIN "gfx\CEMENTER2.SC5",#7,#4000			; Cada página tiene 16K = 4000h
     756   0D:C000  (0E)                 PAGE 14
     757   0E:8000  (200E)               INCBIN "gfx\CEMENTER2.SC5",#4007			; Cada página tiene 16K = 4000h 
     758   0E:A00E  (0F)                 PAGE 15
     759   0F:C000                      ;---------------------------------------------------------
     760   0F:C000                      ; Variables
     761   0F:C000                      ;---------------------------------------------------------
     762   0F:C000                      	
     763   0F:C000  (C000)              	MAP #C000  ;Ram page 3
     764   0F:C000                      ;	MAP #E5FF  ;Ram page 3
     765   0F:C000                      ;NAME #1  ;a byte is reserved for this variable
     766   0F:C000                      ;ETC
     767   0F:C000                      ;
     768   0F:C000                      	include "include\BTH_RAM.asm"
       1.  0F:C000                      ; Function Pointer
       2.  0F:C000  00 (2)              draw_pointer ds 2
       3.  0F:C002                      
       4.  0F:C002                      ;entities data
       5.  0F:C002  00 (27)             ENTITY_DATA: ds 27 ;  10 bytes, 3 entities
       6.  0F:C01D  (0F:C002)           ENTITY_PLAYER_POINTER:  EQU ENTITY_DATA
       7.  0F:C01D  (0F:C00B)           ENTITY_ENEMY1_POINTER:  EQU ENTITY_DATA+9
       8.  0F:C01D  (0F:C014)           ENTITY_ENEMY2_POINTER:  EQU ENTITY_DATA+18
       9.  0F:C01D                      
      10.  0F:C01D  00 (1)              current_level: 	ds 1
      11.  0F:C01E                      
      12.  0F:C01E                      ; VDP variables
      13.  0F:C01E  00 (15)             charDat: ds 15
      14.  0F:C02D  00 (15)             tileDat: ds 15
      15.  0F:C03C  00 (15)             tileDatTrans: ds 15
      16.  0F:C04B  00 (15)             energyDat: ds 15
      17.  0F:C05A                      
      18.  0F:C05A                      
      19.  0F:C05A                      ; puzzle 1st stage
      20.  0F:C05A  00 (1)              stg1_puzzle_solved DS 1
      21.  0F:C05B                      
      22.  0F:C05B  00 (1)              SHOWING_SKULL_STG1_DIALOG  DS 1
      23.  0F:C05C  00 (1)              SHOWING_MIKE_DIALOG  DS 1
      24.  0F:C05D  00 (1)              SHOWING_JOHN_DIALOG  DS 1
      25.  0F:C05E  00 (1)              SHOWING_GUS_DIALOG  DS 1
      26.  0F:C05F                      
      27.  0F:C05F  00 (2)              CHR_ACR DS 2
      28.  0F:C061  00 (1)              PTR_STR_DX DS 1
      29.  0F:C062  00 (1)              PTR_STR_DY DS 1
      30.  0F:C063                      
      31.  0F:C063  00 (1)              LAST_KEY_PRESSED DS 1
      32.  0F:C064  00 (1)              OLD_KEY_PRESSED DS 1
      33.  0F:C065  00                  JIFFY_TEMP DB $00
      34.  0F:C066  00                  CHAR_SPEED_X DB $00
      35.  0F:C067  00                  CHAR_SPEED_Y DB $00
      36.  0F:C068  00                  CHAR_SPEED_X_GHOST DB $00
      37.  0F:C069  00                  CHAR_SPEED_X_GHOST_STG2 DB $00
      38.  0F:C06A  00 (1)              CHAR_GHOST_DEAD DS 1
      39.  0F:C06B  00 (1)              CHAR_GHOST_DEAD_STG2 DS 1
      40.  0F:C06C  00 (1)              CHAR_MIN_STEP_STG2 DS 1
      41.  0F:C06D  00                  CHAR_DIR_GHOST1 DB $00      ; $00 - LEFT, $FF - RIGHT
      42.  0F:C06E  00                  CHAR_DIR_GHOST_STG2 DB $00      ; $00 - LEFT, $FF - RIGHT
      43.  0F:C06F  00                  CHAR_DIR_MAIN DB $00        ; $00 - UP, $01 - DOWN, $02 - LEFT, $03 - RIGHT
      44.  0F:C070  00 (1)              CHAR_NEW_DIR_MAIN DS 1
      45.  0F:C071  00 (1)              CHAR_MAIN_SHOOT DS 1        ; $01 - SHOOT LEFT $02 - SHOOT RIGHT $03 - SHOOT UP $04 - SHOOT DOWN
      46.  0F:C072  00 (1)              CHAR_MIN_STEP DS 1          ; número de ciclos antes de cambiar de patrón
      47.  0F:C073  00 (1)              CHAR_DISTANCE_SHOOT DS 1
      48.  0F:C074  00 (1)              CHAR_SPEED_SHOOT DS 1
      49.  0F:C075                      SPRITE_ATTRS:
      50.  0F:C075  00 (128)                DS 128
      51.  0F:C0F5                      SLOTBIOS:
      52.  0F:C0F5  00 (1)                  DS 1
      53.  0F:C0F6                      SLOTGAME:
      54.  0F:C0F6  00 (1)                  DS 1
      55.  0F:C0F7                      SLOTRAM:
      56.  0F:C0F7  00 (1)                  DS 1
      57.  0F:C0F8                      SPRITE_PTR_REPLACE:
      58.  0F:C0F8  00 (2)                  DS 2
      59.  0F:C0FA                      SPRITE_COLOR_REPLACE:
      60.  0F:C0FA  00 (2)                  DS 2
      61.  0F:C0FC                      SPRITE_COLOR_REPLACE2:
      62.  0F:C0FC  00 (2)                  DS 2
      63.  0F:C0FE                      MAPA:
      64.  0F:C0FE  00 (2)                  DS 2
      65.  0F:C100                      BITMAP:
      66.  0F:C100  00 (2)                  DS 2
      67.  0F:C102                      MAP_RAM:
      68.  0F:C102  00 (736)                DS 736
     769   0F:C3E2                          include "include\ayFX-RAM.ASM"
       1.  0F:C3E2                      		; --- ayFX REPLAYER v1.31 ---
       2.  0F:C3E2                      
       3.  0F:C3E2                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
       4.  0F:C3E2                      
       5.  0F:C3E2  00 (1)              ayFX_MODE:	ds	1			; ayFX mode
       6.  0F:C3E3  00 (2)              ayFX_BANK:	ds	2			; Current ayFX Bank
       7.  0F:C3E5  00 (1)              ayFX_PRIORITY:	ds	1			; Current ayFX stream priotity
       8.  0F:C3E6  00 (2)              ayFX_POINTER:	ds	2			; Pointer to the current ayFX stream
       9.  0F:C3E8  00 (2)              ayFX_TONE:	ds	2			; Current tone of the ayFX stream
      10.  0F:C3EA  00 (1)              ayFX_NOISE:	ds	1			; Current noise of the ayFX stream
      11.  0F:C3EB  00 (1)              ayFX_VOLUME:	ds	1			; Current volume of the ayFX stream
      12.  0F:C3EC  00 (1)              ayFX_CHANNEL:	ds	1			; PSG channel to play the ayFX stream
      13.  0F:C3ED                      IF ( AYFXRELATIVE == 1 )
      14.  0F:C3ED                    ~ 	ayFX_VT:	sds	2			; ayFX relative volume table pointer
      15.  0F:C3ED                    ~ ENDIF
      16.  0F:C3ED                      
      17.  0F:C3ED                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
      18.  0F:C3ED                      ;AYREGS:		.ds	14			; Ram copy of PSG registers
      19.  0F:C3ED                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     770   0F:C3ED  (0000)              	ENDMAP
     771   0F:C3ED                        

    LABELS
-------------------------------------------------
00:00004000 X PageSize
00:00006000 X _bank1
00:00007000   _bank2
00:00000069   CLRSPR
00:0000009F   CHGET
00:000000A2 X CHPUT
00:0000005F   CHGMOD
00:0000005C   LDIRVM
00:0000013E X RDVDP
00:00000047   WRTVDP
00:0000F3DB   CLIKSW
00:00000141   SNSMAT
00:0000FC9E X JIFFY
00:00000072 X INIGRP
00:00000138   RSLREG
00:00000024   ENASLT
00:00000001   BTH_DATA
00:00000009   ENTITY_SIZE
00:0000000F   PLAYER_COLLISION_OFFSET_X
00:00000010   PLAYER_COLLISION_OFFSET_Y
00:0000000E   PLAYER_WIDTH
00:00000010   PLAYER_HEIGHT
00:00000001   ENEMY_X
00:00000002   ENEMY_Y
00:00000003   ENTITY_ENERGY
00:00000004   ENEMY_COLLISION_OFFSET_X
00:00000005   ENEMY_COLLISION_OFFSET_Y
00:00000006   ENEMY_COLLISION_WIDTH
00:00000007   ENEMY_COLLISION_HEIGHT
00:00000008 X SPRITENUMBER_SPAT
00:00000009 X damage
00:00000071   STG2_TILE1_X
00:0000006E   STG2_TILE1_Y
00:00000080   STG2_TILE2_X
00:00000080   STG2_TILE3_X
00:0000008E   STG2_TILE3_Y
00:00004010   ANDY_MAX_ENERGY
00:00006100   FIRST_LINE_DLG_BOX
00:00006500   SEC_LINE_DLG_BOX
00:00006900   THIRD_LINE_DLG_BOX
00:000000C2   FIRST_LINE_DLG_BOX_v2
00:000000CA   SEC_LINE_DLG_BOX_v2
00:00000001 X ROMMODE
00:00000007   KB_RIGHT
00:00000006   KB_DOWN
00:00000005   KB_UP
00:00000004   KB_LEFT
00:00000003   KB_DEL
00:00000000   KB_SPACE
00:00000001   MOV_SPEED
00:00000001   MOV_SPEED_GHOST
00:00000003   MOV_SPEED_SHOOT
00:00000030   MAX_DISTANCE_SHOOT
00:00000005   MAX_CHAR_STEPS
00:00000006 X MAX_CHAR_STEPS_STG2
00:0000FFE8   REG9SAV
00:00000098   PORT_0
00:00000099   PORT_1
00:0000009A X PORT_2
00:0000009B X PORT_3
00:0000F3E0   RG15AV
00:0000F3E9   FORCLR
00:000000C8   MIKE_TOMB_STG1_X
00:00000029   JOHN_TOMB_STG1_X
00:00000049   GUS_TOMB_STG1_X
00:00000078   GUS_TOMB_STG1_Y
00:00000069   SKULL_TOMB_STG1_X
00:0000005A   SKULL_TOMB_STG1_Y1
00:00000064   SKULL_TOMB_STG1_Y2
00:0000000C   SPR_SHOOT_P1
00:00000018   SPR_SHOOT_P1_PTRN
00:00000010   SPR_GHOST_STG1
00:0000001C   SPR_GHOST_STG1_PTRN_L1
00:00000024   SPR_GHOST_STG1_PTRN_L2
00:0000002C   SPR_GHOST_STG1_PTRN_R1
00:00000034   SPR_GHOST_STG1_PTRN_R2
00:00000018 X SPR_GHOST_STG2
00:0000003C X SPR_GHOST_STG2_PTRN_L1
00:00000044 X SPR_GHOST_STG2_PTRN_L2
00:0000004C X SPR_GHOST_STG2_PTRN_R1
00:00000054 X SPR_GHOST_STG2_PTRN_R2
00:00004016   mike_tomb_strings
00:0000401C   string01M
00:00004038   string02M
00:00004054   string03M
00:00004055   john_tomb_strings
00:0000405B   string01J
00:00004076   string02J
00:00004091   string03J
00:00004092   gus_tomb_strings
00:00004098   string01G
00:000040B5   string02G
00:000040D2   string03G
00:000040D3   stg1_skull_strings
00:000040D9   string01Sk
00:000040F4   string02Sk
00:0000410F   string03Sk
00:00004110   stg1_puzzle_solved_strings
00:00004116   string01P
00:0000412F   string02P
00:00004148   string03P
00:00004149   game_over_strings
00:0000414F   string01GO
00:00004161   string02GO
00:0000416C   string03GO
00:0000416D   EnemyCollisionCheck
00:00004193   EnemyCollisionCheck.check
00:0000419A   EnemyCollisionCheck.other
00:0000419C   check_spr_collision
00:000041A9   check_spr_collision.no_collision
00:000041AC   get_bloque_en_X_Y
00:000041CD   SetVdp_Write
00:000041E9   Set212Lines
00:000041F5   ClearVram_MSX2
00:000041FF   ClearVram_MSX2.loop_2
00:00004201   ClearVram_MSX2.loop_1
00:00004203   ClearVram_MSX2.loop
00:00004210 X opening_screen
00:00004233   load_screen
00:00004255   _vdpsetvramwr
00:00004266 X _vdpsetvramwr14
00:0000426F   GETSLOT
00:00004286   EXIT
00:00004288   SETPAGES32K
00:0000428D   NOPRET
00:0000429B   SET_SCREEN5_MODE
00:000042C0   DUMP_SPR_ALL
00:000042E5   load_tiles_vdp
00:000042EF   load_font_vdp
00:000042FC   DUMP_SPR_ATTS
00:00004316 X DUMP_SPR_ATTS.DUMP_SPR_ATTS_END
00:00004317   DUMP_SPR_P1
00:00004334   SetPalette
00:00004343   move_up
00:0000437D   move_down
00:000043B8   move_right
00:000043C9   move_right.KB_UPDOWN_PRESSED
00:00004417   move_left
00:00004428   move_left.KB_UPDOWN_PRESSED
00:00004476   CHECK_DIRECTION_MAIN
00:00004498   CHECK_DIRECTION_MAIN.SET_DIR_DOWN
00:000044AD   CHECK_DIRECTION_MAIN.SET_DIR_UP
00:000044C2   CHECK_DIRECTION_MAIN.SET_DIR_LEFT
00:000044D7   CHECK_DIRECTION_MAIN.SET_DIR_RIGHT
00:000044EC   CHECK_DIRECTION_MAIN.FINISH
00:00004503   UPDATE_MOVEMENT
00:0000452B   ANIMATE_P1
00:00004552   ANIMATE_P1.SET_SPR_1P_2
00:00004569   ANIMATE_P1.NO_CHAR_PATTERN_CHANGE
00:0000456F   NO_MOVEMENT
00:00004570   MOVE_SHOOT
00:00004588   MOVE_SHOOT.MOVE_SHOOT_RIGHT
00:00004590   MOVE_SHOOT.MOVE_SHOOT_UP
00:00004598   MOVE_SHOOT.MOVE_SHOOT_DOWN
00:000045A0   MOVE_SHOOT.MOVE_SHOOT_LEFT
00:000045A5   MOVE_SHOOT.CHECK_SHOOT_DISTANCE
00:000045BA   MOVE_SHOOT.ADD_SHOOT_Y
00:000045C4   MOVE_SHOOT.ADD_DISTANCE
00:000045CF X MOVE_SHOOT.HIDE_SHOOT
00:000045DB   SHOOT_MAIN_CHAR
00:00004615   SHOOT_MAIN_CHAR.SHOOT_RIGHT
00:00004624   SHOOT_MAIN_CHAR.SHOOT_UP
00:00004637   SHOOT_MAIN_CHAR.SHOOT_DOWN
00:00004647   SHOOT_MAIN_CHAR.CONTINUE
00:0000464B   BOUNCE_ANDY
00:00000000   VDP_SX
00:00000002   VDP_SY
00:00000004   VDP_DX
00:00000006   VDP_DY
00:00000008   VDP_NX
00:0000000A   VDP_NY
00:0000000C X VDP_COLOR
00:0000000D X VDP_ARGUMENT
00:0000000E X VDP_COMMAND
00:000000E0 X CMD_YMMM
00:000000D0   CMD_HMMM
00:000000C0 X CMD_HMMV
00:00000098   CMD_LMMM
00:000000B0 X CMD_LMMC
00:00000080 X CMD_LMMV
00:00000000 X VDP_IMP
00:00000001 X VDP_AND
00:00000002 X VDP_OR
00:00000003 X VDP_XOR
00:00000004 X VDP_NOT
00:00000008   VDP_TIMP
00:00000009 X VDP_TAND
00:0000000A X VDP_TOR
00:0000000B X VDP_TXOR
00:0000000C X VDP_TNOT
00:00000010   ENERGY_WIDTH
00:00000020   TILE_WIDTH
00:00000010   TILE_HEIGHT
00:00000001   TILES_PAGE
00:00008000 X TILES_START_ADDR
00:00000002   BACK_BUFFER
00:00000000   FRONT_BUFFER
00:00000000   TILENUM_OFFSET
00:00000001   DX_OFFSET
00:00000002   DY_OFFSET
00:00000003   REPS_OFFSET
00:00000004 X TILEMAP_SIZE
00:00000000 X METATILE_SX
00:00000001 X METATILE_SY
00:00000002   METATILE_NX
00:00000003 X METATILE_NY
00:00000004 X METATILE_SIZE
00:00000008   FONT_HEIGHT
00:00000008   FONT_WIDTH
00:000000D4   FONT_Y_OFFSET_1L
00:000000DC   FONT_Y_OFFSET_2L
00:00000014   DIAGBOX_HEIGHT
00:000000FF   DIAGBOX_WIDTH
00:0000465A   initVDPBuffers
00:0000469D X print_strings_dialog_box
00:000046CA   print_string
00:000046CA   print_string.loop_str
00:000046E5   print_string.first_line_font
00:000046FE   print_char
00:00004732 X CLEAR_DIALOG_BOX_v1
00:00004764 X CLEAR_DIALOG_BOX_v2
00:00004796   CLEAR_DIALOG_BOX
00:0000F3E0   VDP_01
00:0000FFE7   VDP_08
00:0000FFE8   VDP_09
00:0000479D X SETPAG
00:000047AB X SET_WR
00:000047C6 X SET_RD
00:000047DF   VDPCMD
00:000047F2   WAITCE
00:0000480A   ENASCR
00:00004811   DISSCR
00:00004816   DISSCR.OUT
00:00004822 X ENASPR
00:00004829 X DISSPR
00:0000482E   DISSPR.OUT
00:0000483A X LIN192
00:00004841 X LIN212
00:00004846   LIN212.OUT
00:00004852   VDP_Ready
00:0000486B   DRAW_ANDY_ENERGY
00:0000487D   DRAW_ANDY_ENERGY.check_next_drop
00:0000489D   DRAW_ANDY_ENERGY.draw_half_drop
00:000048AF   DRAW_ANDY_ENERGY.draw_empty_drops
00:000048C2   DRAW_ANDY_ENERGY.loop
00:000048DA   draw_tile
00:000048E1   draw_tile_trans
00:000048E5   draw_tile_common
00:0000490E   print_strings_dialog_box_v2
00:0000492D   print_string_v2
00:00004936   print_string_v2.loop_str
00:00004944   print_string_v2.first_line_font
00:00004948   print_string_v2.continue
00:00004966   load_screen_v2
00:0000496A   load_screen_v2.map_element
00:0000497F   load_screen_v2.loop1
00:0000499D   load_screen_v2.next_element
00:000049B0   load_screen_v2.map_element_trans
00:000049C5   load_screen_v2.loop1_trans
00:000049E3   load_screen_v2.next_element_trans
00:000049F3   charDatROM
00:00004A02   tileDatROM
00:00004A11   tileDatTransROM
00:00004A20   energyDatROM
00:00004A2F   DiagBoxToBackBufROM
00:00004A3E   DiagBoxToFrontkBufROM
00:00004A4D X DiagBoxClearROM
00:00000000   CHNPRM_PsInOr
00:00000001   CHNPRM_PsInSm
00:00000002   CHNPRM_CrAmSl
00:00000003   CHNPRM_CrNsSl
00:00000004   CHNPRM_CrEnSl
00:00000005   CHNPRM_TSlCnt
00:00000006   CHNPRM_CrTnSl
00:00000008   CHNPRM_TnAcc
00:0000000A   CHNPRM_COnOff
00:0000000B   CHNPRM_OnOffD
00:0000000C   CHNPRM_OffOnD
00:0000000D   CHNPRM_OrnPtr
00:0000000F   CHNPRM_SamPtr
00:00000011   CHNPRM_NNtSkp
00:00000012   CHNPRM_Note
00:00000013   CHNPRM_SlToNt
00:00000014   CHNPRM_Env_En
00:00000015   CHNPRM_Flags
00:00000016   CHNPRM_TnSlDl
00:00000017   CHNPRM_TSlStp
00:00000019   CHNPRM_TnDelt
00:0000001B   CHNPRM_NtSkCn
00:00000017   CHNPRM_Volume
00:0000001D X CHNPRM_Size
00:00000000   AR_TonA
00:00000002   AR_TonB
00:00000004   AR_TonC
00:00000006   AR_Noise
00:00000007   AR_Mixer
00:00000008   AR_AmplA
00:00000009   AR_AmplB
00:0000000A   AR_AmplC
00:0000000B   AR_Env
00:0000000D   AR_EnvTp
00:00004A5C   CHECKLP
00:00004A6D X PT3_MUTE
00:00004A79   PT3_INIT
00:00004AB8   PT3_INIT.TP_0
00:00004AC4   PT3_INIT.TP_1
00:00004ACB   PT3_INIT.TP_2
00:00004B39   PT3_INIT.L1
00:00004B46   PT3_INIT.L2
00:00004B4A X PT3_INIT.L3
00:00004B71   PT3_INIT.CORR_1
00:00004B7F   PT3_INIT.CORR_2
00:00004B86   PT3_INIT.TC_EXIT
00:00004B91   PT3_INIT.INITV1
00:00004B99   PT3_INIT.INITV2
00:00004BAD   PT3_INIT.INITV3
00:00004BB1   PD_OrSm
00:00004BBB   PD_SAM
00:00004BBC   PD_SAM_
00:00004BD2   PD_VOL
00:00004BDB   PD_EOff
00:00004BE3   PD_SorE
00:00004BED   PD_ENV
00:00004BF2   PD_ORN
00:00004BF7   PD_ESAM
00:00004C04   PTDECOD
00:00004C13   PD_LOOP
00:00004C16   PD_LP2
00:00004C43   PD_NOIS
00:00004C48   PD_REL
00:00004C4E   PD_NOTE
00:00004C56   PD_RES
00:00004C68   PD_FIN
00:00004C6F   C_PORTM
00:00004CBA   C_PORTM.NOSIG
00:00004CC4   SET_STP
00:00004CD0   C_GLISS
00:00004CE3   C_SMPOS
00:00004CE9   C_ORPOS
00:00004CEF   C_VIBRT
00:00004D07   C_ENGLS
00:00004D19   C_DELAY
00:00004D1F   SETENV
00:00004D3A   C_NOP
00:00004D3B   SETORN
00:00004D54   SPCCOMS
00:00004D74   CHREGS
00:00004D97   CHREGS.CH_ORPS
00:00004DA2   CHREGS.CH_NTP
00:00004DA8   CHREGS.CH_NOK
00:00004DC3   CHREGS.CH_SMPS
00:00004DD9   CHREGS.CH_NOAC
00:00004E20   CHREGS.CH_STPP
00:00004E35   CHREGS.CH_AMP
00:00004E47   CHREGS.CH_AMIN
00:00004E4C   CHREGS.CH_SVAM
00:00004E4F   CHREGS.CH_NOAM
00:00004E58   CHREGS.CH_APOS
00:00004E5E   CHREGS.CH_VOL
00:00004E69 X CHREGS.CH_ENV
00:00004E70   CHREGS.CH_NOEN
00:00004E8A   CHREGS.NO_ENAC
00:00004E91   CHREGS.NO_ENSL
00:00004E9F   CHREGS.CH_MIX
00:00004EA3   CHREGS.CH_EXIT
00:00004EC2   CHREGS.CH_ONDL
00:00004EC6   PT3_PLAY
00:00004EFA   PT3_PLAY.PLNLP
00:00004F21   PT3_PLAY.PL1A
00:00004F2C   PT3_PLAY.PL1B
00:00004F41   PT3_PLAY.PL1C
00:00004F56   PT3_PLAY.PL1D
00:00004F5C   PT3_PLAY.PL2
00:00004FBE   PT3_ROUT
00:00004FBF   ROUT_A0
00:00004FCB   ROUT_A0.LOUT
00:00004FDF   NT_DATA
00:00004FEF   T_
00:00004FEF   TCOLD_0
00:00004FFB   TCNEW_1
00:00004FFB   TCOLD_1
00:00004FFD   TCOLD_2
00:0000500F   TCNEW_3
00:00005010   TCOLD_3
00:00005019   TCNEW_0
00:00005024   TCNEW_2
00:0000502F   EMPTYSAMORN
00:00005033   T_PACK
00:0000F000   PT3_SETUP
00:0000F000   PT3_MODADDR
00:0000F002   PT3_CrPsPtr
00:0000F004   PT3_SAMPTRS
00:0000F006   PT3_OrnPtrs
00:0000F008   PT3_PDSP
00:0000F00A   PT3_CSP
00:0000F00C   PT3_PSP
00:0000F00E   PT3_PrNote
00:0000F00F   PT3_PrSlide
00:0000F011   PT3_AdInPtA
00:0000F013   PT3_AdInPtB
00:0000F015   PT3_AdInPtC
00:0000F017   PT3_LPosPtr
00:0000F019   PT3_PatsPtr
00:0000F01B   PT3_Delay
00:0000F01C   PT3_AddToEn
00:0000F01D   PT3_Env_Del
00:0000F01E   PT3_ESldAdd
00:0000F020   PT3_NTL3
00:0000F022   VARS
00:0000F022   ChanA
00:0000F03F   ChanB
00:0000F05C   ChanC
00:0000F079   DelyCnt
00:0000F07A   CurESld
00:0000F07C   CurEDel
00:0000F07D   Ns_Base_AddToNs
00:0000F07D   Ns_Base
00:0000F07E   AddToNs
00:0000F07F   NT_
00:0000F13F   AYREGS
00:0000F13F   VT_
00:0000F14D   EnvBase
00:0000F14F   VAR0END
00:0000F14F   T1_
00:0000F14F   T_NEW_1
00:0000F14F   T_OLD_1
00:0000F167   T_OLD_2
00:0000F17F   T_NEW_3
00:0000F17F   T_OLD_3
00:0000F181   T_OLD_0
00:0000F181   T_NEW_0
00:0000F199   T_NEW_2
00:00000000 X AYFXRELATIVE
00:00005068   ayFX_SETUP
00:00005073   ayFX_END
00:00005079   ayFX_INIT
00:0000508A   ayFX_INIT.CHECK_PRI
00:000050AB   ayFX_INIT.INIT_END
00:000050AF   ayFX_PLAY
00:000050C3   ayFX_PLAY.TAKECB
00:000050D4   ayFX_PLAY.CHECK_NN
00:000050E1   ayFX_PLAY.SETPOINTER
00:000050F5   ayFX_PLAY.SETMASKS
00:00005103 X ayFX_PLAY.CHK1
00:00005105 X ayFX_PLAY.LAY_C
00:00005112   ayFX_PLAY.CHK2
00:00005117 X ayFX_PLAY.PLAY_B
00:00005124   ayFX_PLAY.CHK3
00:00005127 X ayFX_PLAY.PLAY_A
00:00005134   ayFX_PLAY.SETMIXER
00:00005144   metatiles_data
00:00005180   init_playerDAT
00:00005189   enemy1_stg1DAT
00:00005192   START
00:000051D7   INIT_CHARS_VARS
00:00005266   STAGE1
00:000052C9   STAGE1.nobackfromstg2
00:000052F5   MAIN_LOOP
00:00005300 X MAIN_LOOP.check_tombs
00:0000535D   MAIN_LOOP.puzzle_wrong_order
00:00005383   MAIN_LOOP.check_john_tomb
00:000053CB   MAIN_LOOP.check_gus_tomb
00:0000540C   MAIN_LOOP.check_skull_hint
00:00005430   MAIN_LOOP.check_mike_dialog_box
00:00005440   MAIN_LOOP.check_gus_dialog
00:00005450   MAIN_LOOP.check_john_dialog
00:00005460   MAIN_LOOP.check_skull_dialog
00:0000546E   MAIN_LOOP.animate_ghost
00:00005490   MAIN_LOOP.CHANGE_DIR_RIGHT
00:0000549D   MAIN_LOOP.CHANGE_DIR_LEFT
00:000054A6   MAIN_LOOP.check_pattern
00:000054C1   MAIN_LOOP.change_pattern_L
00:000054CC   MAIN_LOOP.check_pattern_RIGHT
00:000054DF   MAIN_LOOP.change_pattern_R
00:000054E7   MAIN_LOOP.continue
00:00005512   MAIN_LOOP.move_shoot
00:00005515 X MAIN_LOOP.CHECK_GHOST
00:00005531 X MAIN_LOOP.KILL_GHOST
00:0000553E   MAIN_LOOP.check_KB
00:00005568 X no_arrows
00:00005570   STAGE2
00:000055B6   MAIN_LOOP2
00:000055EA   MAIN_LOOP2.GHOST_DEAD
00:000055ED   MAIN_LOOP2.no_screen_change
00:00005621   MAIN_LOOP2.check_next_tile
00:0000564B   MAIN_LOOP2.check_tile3
00:0000567D   MAIN_LOOP2.continue
00:000056A8   game_over
00:000056BB   TILES1
01:00008000   SPRITE_P1_UP
01:000080C0   SPRITE_P1_DOWN
01:00008180   SPRITE_P1_LEFT
01:00008240   SPRITE_P1_RIGHT
01:00008300   SPRITE_PATTERN
01:000085E0   SPRITE_COLOR_TABLE
01:00008660   SPRITE_COLOR_P1_UP
01:000086C0   SPRITE_COLOR_P1_DOWN
01:00008720   SPRITE_COLOR_P1_RIGHT
01:00008780   stg1_gate
01:00008786   stg1_gate_blocked
01:0000878C   mapa1
01:00008A6C   mapa2
01:00008D8C   SPRITE_COLOR_P1_LEFT
01:00008DEC   BLANK_DATA
01:00008E6C   PaletteData
01:00008E8C   stg1_map_back
01:00008F15   stg1_map_front
01:00008F2E   FONT
01:00009725   AFX
01:0000991B   SONG
07:00008000   CEMENTER1
09:00008000   GRAPHIC
0D:00008000   CEMENTER2
0F:0000C000 X draw_pointer
0F:0000C002   ENTITY_DATA
0F:0000C002   ENTITY_PLAYER_POINTER
0F:0000C00B   ENTITY_ENEMY1_POINTER
0F:0000C014 X ENTITY_ENEMY2_POINTER
0F:0000C01D   current_level
0F:0000C01E   charDat
0F:0000C02D   tileDat
0F:0000C03C   tileDatTrans
0F:0000C04B   energyDat
0F:0000C05A   stg1_puzzle_solved
0F:0000C05B   SHOWING_SKULL_STG1_DIALOG
0F:0000C05C   SHOWING_MIKE_DIALOG
0F:0000C05D   SHOWING_JOHN_DIALOG
0F:0000C05E   SHOWING_GUS_DIALOG
0F:0000C05F   CHR_ACR
0F:0000C061 X PTR_STR_DX
0F:0000C062 X PTR_STR_DY
0F:0000C063 X LAST_KEY_PRESSED
0F:0000C064   OLD_KEY_PRESSED
0F:0000C065   JIFFY_TEMP
0F:0000C066   CHAR_SPEED_X
0F:0000C067   CHAR_SPEED_Y
0F:0000C068   CHAR_SPEED_X_GHOST
0F:0000C069 X CHAR_SPEED_X_GHOST_STG2
0F:0000C06A   CHAR_GHOST_DEAD
0F:0000C06B X CHAR_GHOST_DEAD_STG2
0F:0000C06C X CHAR_MIN_STEP_STG2
0F:0000C06D   CHAR_DIR_GHOST1
0F:0000C06E X CHAR_DIR_GHOST_STG2
0F:0000C06F   CHAR_DIR_MAIN
0F:0000C070   CHAR_NEW_DIR_MAIN
0F:0000C071   CHAR_MAIN_SHOOT
0F:0000C072   CHAR_MIN_STEP
0F:0000C073   CHAR_DISTANCE_SHOOT
0F:0000C074   CHAR_SPEED_SHOOT
0F:0000C075   SPRITE_ATTRS
0F:0000C0F5 X SLOTBIOS
0F:0000C0F6 X SLOTGAME
0F:0000C0F7 X SLOTRAM
0F:0000C0F8   SPRITE_PTR_REPLACE
0F:0000C0FA   SPRITE_COLOR_REPLACE
0F:0000C0FC   SPRITE_COLOR_REPLACE2
0F:0000C0FE   MAPA
0F:0000C100   BITMAP
0F:0000C102   MAP_RAM
0F:0000C3E2   ayFX_MODE
0F:0000C3E3   ayFX_BANK
0F:0000C3E5   ayFX_PRIORITY
0F:0000C3E6   ayFX_POINTER
0F:0000C3E8   ayFX_TONE
0F:0000C3EA   ayFX_NOISE
0F:0000C3EB   ayFX_VOLUME
0F:0000C3EC   ayFX_CHANNEL


 Output: .\BTH.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: BTH.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00004000  Used: 000026D2

   Address   Length Align   Label
   00004000    9932         ANDY_MAX_ENERGY
   000066CC       6         
   000066D2    6446       <empty>

 Page: 01
  Org: 00008000  Size: 00004000  Used: 00002802

   Address   Length Align   Label
   00008000   10242         SPRITE_P1_UP
   0000A802    6142       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 04
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 05
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 06
  Org: 00008000  Size: 00004000  Used: 00000000

   00008000   16384       <empty>

 Page: 07
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER1

 Page: 08
  Org: 00008000  Size: 00004000  Used: 0000200D

   Address   Length Align   Label
   00008000    8205         
   0000A00D    8179       <empty>

 Page: 09
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         GRAPHIC

 Page: 0A
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0B
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         

 Page: 0C
  Org: 00008000  Size: 00004000  Used: 00001400

   Address   Length Align   Label
   00008000    5120         
   00009400   11264       <empty>

 Page: 0D
  Org: 00008000  Size: 00004000  Used: 00004000

   Address   Length Align   Label
   00008000   16384         CEMENTER2

 Page: 0E
  Org: 00008000  Size: 00004000  Used: 0000200E

   Address   Length Align   Label
   00008000    8206         
   0000A00E    8178       <empty>

 Page: 0F
  Org: 0000C000  Size: 00004000  Used: 000003ED

   Address   Length Align   Label
   0000C000    1005         draw_pointer
   0000C3ED   15379       <empty>
